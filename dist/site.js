var musicShowCaseApp=angular.module("MusicShowCaseApp",["ui.codemirror","ngRoute","ui.bootstrap","ngDraggable","ngCookies","pascalprecht.translate"]);musicShowCaseApp.constant("MUSIC",MUSIC),musicShowCaseApp.constant("TICKS_PER_BEAT",96),musicShowCaseApp.constant("SONG_MAX_TRACKS",32),musicShowCaseApp.constant("localforage",localforage);
var musicShowCaseApp=angular.module("MusicShowCaseApp"),enTranslations={midi:{settings:"MIDI Settings",inputs:"Inputs",connected:"MIDI Input Connected",disconnected:"MIDI Input Disconnected (Click to setup)",events:"Events",octave:"Base Octave",transpose:"Transpose"},open_project:{p1:"Select the project you want to open",title:"Open Project"},array_editor:{tooltip:{remove_item:"Removes the object from array",add_item:"Click to add a new object to array",edit_item:"Click to edit this object"}},index:{not_implemented:"Sorry. Not implemented Yet :P",filter:"Type here the word to filter objects",tooltip:{type:{instrument:"This is a resource object of type instrument",pattern:"This is a resource object of type pattern",song:"This is a resource object of type song",fx:"This is a resource object of type fx"},type_p1:"To use the resource, drag them from here into your creation on the right",type_p2:"To instead, *edit* the resource, double click it",index:"This is the object index, you can find here your crafting outputs and inputs"}},project:{basic_info:"Properties",references:"References",settings:"Project Settings","new":"New Project"},menu:{"new":"File",new_instrument:"New Instrument",new_pattern:"New Pattern",new_song:"New Song",new_project:"New Project...",open_project:"Open Project...",file_import:"Import...",tools:"Tools",tools_preferences:"Preferences",help_view_help:"View Help",help_recipes:"Recipes",help_recipes_intro:"Basic intro tour",help_recipes_howto_create_song:"How to create a song",help_recipes_howto_create_instrument:"How to create an instrument (square + 2 voices echo)",help_contextual_help:"Contextual Help",help_welcome:"Welcome!",help_about:"About Music.js",recycle_bin:"Recycle Bin...",tooltip:{"new":"You can create new blank items from this option",preferences:"You can edit your preferences here",help:"Menu to access help options and about"},project:"Project",project_settings:"Settings...",project_remove_project:"Remove Project",project_export_project:"Export Project"},contextual_help:{enable:"Enable Contextual Help",disable:"Disable Contextual Help"},recycle:{p1:"This is the recycle bin, from here, you can restore the items that have been removed",p2:"Remember: items in the recycle bin will be permanently deleted if and when available storage space runs out",p3:"* Double-click the item you want to RESTORE",title:"Recycle Bin",compact_title:"Recycle Bin",compact_hint_restore:"* Double-click the item you want to RESTORE",compact_hint_open:"* Click here to open recycle bin window",EMPTY:"EMPTY"},welcome:{title:"Welcome to Music.js: 8bit Edition",p1:"Music.js is a web application that allows the composition of melodies powered (optionally) by javascript programming",p2:"This first basic edition, is fully oriented towards retro/8bit music by providing elemental oscillators, noise generators and basic modulation patterns",p3:"Do you want a basic tour?",nevershow:"Never show this message again"},about:{title:"About Music.js: 8bit Edition",p3:"In the long term, the goal of music.js is to cover all the layers needed between HTML5 Web Audio API provided by browsers and fully usable music composition application similar to known ones like FL Studio",authors:"AUTHORS",i_am:"I am Dario Seminara, but also I should give credit to some key library authors:",credit:{mohayonao:"@mohayonao (Author of Timbre.js)",higuma:"@higuma (Author of WebAudioRecorder)",kristopolous:"@kristopolous (Author of BOOTSTRA.386 Bootstrap Template)"},contribute:"CONTRIBUTE",contact_me:"Contact me at github"},common:{yes:"Yes",no:"No",ok:"Ok",dismiss:"Dismiss",cancel:"Cancel",create:"Create",open:"Open",name:"Name",language:"Language:",loader_error:"Error when trying to load file",cantremove_error:"Can not delete the file if it is being used",cantremove_project_error:"Can not delete the project if it is being used in another project",error_title:"Error",HELP:"HELP",more:"more",remove:"Remove","export":"Export",reset:"Reset",play:"Play",pause:"Pause",stop:"Stop",record:"Rec.",bpm:"Bpm",bpm_lc:"bpm",add:"Add",tooltip:{playing_speed:"Playing speed, number of beats per minute",remove_item:"Removes item, you can restore it from recycle bin",modulation:"You can setup the effects modulation for {{name}} here. If you leave it empty, there will be no modulation at all"},new_instrument:"New Instrument",new_pattern:"New Pattern",new_song:"New Song",modulation:"{{name}} Modulation"},help:{FLOW:"MUSIC.JS FLOW",RECIPES:"RECIPES",p1:"In order to create a song, you need to craft it, and craft the materials.",p2:"Actually, there are three types of craftable resources: instruments, patterns and songs",p3:"While the right section shows the item being crafted. The left pannel shows the crafting materials",p4:"You can drop resources (instruments or patterns) into drop zones, when applicable",p5:"To use the resource on the item being crafted, you need to drag it to any of the dropzones",p6:"Following this principle, you can use instruments to compose patterns, and finally, patterns to compose songs",p7:"Furthermore, you can compose your custom instruments, from a range of effects:",p8:"Don't worry, if you don't get it at first, there are recipes and contextual help at your disposal",recipes:{p1:"Recipes are interactive mini-tutorials on how to craft anything here (example: a song)",p2:"Some tutorials (such as 'intro') only explain a few things about the main interface",p3:"It's recommended to follow these recipes if you don't know what to do or how to start using the app. The recipes are reachable from the help menu (?)"},CONTEXTUAL_HELP:"CONTEXTUAL HELP",contextual_help:{p1:"There is a series of tooltips explaining on detail the different features of the app. You can enable or disable these tooltips by clicking on the box in the left-bottom corner of the screen"}},stack:{drop_elements_here:"drop new elements here",tooltip:{you_can_drop_new_effects_here:"You can drop new effects from the object index here",remove:"Removes the effect element from the pipeline",up:"Changes the order of the element, to execute it AFTER",down:"Changes the order of the element, to execute it BEFORE",expand:"Expand/Shrink the display of advanced options for the element"}},editor:{keyboard_instructions:"Use ZXCVBNM keys to play instrument, or hover mouse on virtual keyboard",tooltip:{test_instrument_here:"Test the instrument here, using mouse or keyboard",type_here_instrument:"Type here the name of the instrument"}},pattern:{track_muted:"Muted",track_solo:"Solo",measure_beats:"Measure beats",amount_beats:"Amount of beats per measure",measure_count:"Measure count",zoom_level:"Zoom level",total_measures:"Total count of measures on pattern",tracks:"Tracks",drop_instrument:"drop instrument here",tooltip:{change_name:"Change the pattern name",zoom_level:"Zoom level for all tracks",play:"Click to play the pattern",stop:"Click to stop playing",remove_track:"Click to remove track",compact_view_p1:"Track compact view: see the notes without having to expand the track.",compact_view_p2:"Click here to expand the track",drop_zone:"Instrument drop zone, drop instruments from the left panel to use it on the track",editor_notes_p1:"Note area, add the notes here:",editor_notes_p2:"Click to add a new one, and drag to change value/time",editor_notes_p3:"CTRL+Z to undo changes",editor_notes_p4:"CTRL+Y to redo changes",add_track:"Click this button to add new empty tracks",note_event_p1:"Note event. Drag from the right edge to change the duration or press delete key to remove",note_event_p2:"Drag to change the value and/or starting time",note_event_p3:"Note event. Click to select and edit it",muted:"Disable the track in order to silence it",solo:"Isolate the track so that it is the only one that plays. Can be more than one",instrument_edit:"Click this button to edit the instrument"}},song:{drop_pattern:"Drop pattern here",tooltip:{measure_beats:"Amount of beats per measure. Make sure this value match the measure length of the patterns",play:"Click to play/pause the song",stop:"Click to stop playing the song",download:"Click to record the song and download the audio file",drop_pattern:"Drop zone for patterns, drop here a pattern from the panel on the left",remove_block:"Click here to remove the pattern and leave the block empty",edit_block:"Click here to edit the pattern used by this block"}},BUTTON_LANG_EN:"English",BUTTON_LANG_ES:"Spanish"};musicShowCaseApp.constant("enTranslations",enTranslations);
var musicShowCaseApp=angular.module("MusicShowCaseApp"),esTranslations={midi:{settings:"Opciones de MIDI",inputs:"Entradas",connected:"Entrada MIDI Conectada",disconnected:"Entrada MIDI Desconectada (Click para configurar)",events:"Eventos",octave:"Octava Base",transpose:"Transposicion"},open_project:{p1:"Selecciona el proyecto que quieras abrir",title:"Abrir Proyecto"},array_editor:{tooltip:{remove_item:"Elimina el objeto de la coleccion",add_item:"Click para agregar un nuevo objeto a la coleccion",edit_item:"Click para editar este objeto"}},index:{not_implemented:"Disculpa, funcionalidad no implementada",filter:"Tipea aqui las palabras clave para filtrar los objetos",tooltip:{type:{instrument:"Este es un recurso del tipo instrumento",pattern:"Este es un recurso del tipo patron",song:"Este es un recurso del tipo cancion",fx:"Este es un recurso del tipo fx (efecto)"},type_p1:"Para usar este recurso, arrastralo desde aqui hasta tu creacion",type_p2:"Para, en lugar de eso, editarlo, haz doble click en el",index:"Este es el indice de objetos, puedes encontrar tus materiales y productos listados aqui"}},project:{basic_info:"Propiedades del proyecto",references:"Referencias",settings:"Configuracion del Proyecto","new":"Nuevo Proyecto"},menu:{"new":"Archivo",new_instrument:"Nuevo Instrumento",new_pattern:"Nuevo Patron",new_song:"Nueva Cancion",new_project:"Nuevo Proyecto...",open_project:"Abrir Proyecto...",file_import:"Importar...",tools:"Herramientas",tools_preferences:"Preferencias",help_view_help:"Ver Pagina de Ayuda",help_recipes:"Recetas",help_recipes_intro:"Recorrido Introductorio",help_recipes_howto_create_song:"Como crear una cancion",help_recipes_howto_create_instrument:"Como crear un instrumento (cuadrada + eco a dos voces)",help_contextual_help:"Ayuda Contextual",help_welcome:"¡Bienvenido!",help_about:"Acerca de Music.js",recycle_bin:"Papelera de Reciclaje...",tooltip:{"new":"Puedes crear nuevos items en blanco desde esta opcion",preferences:"Puedes editar tus preferencias aqui",help:"Menu para acceder a las opciones de ayuda y *Acerca De*"},project:"Proyecto",project_settings:"Configuracion...",project_remove_project:"Eliminar Proyecto",project_export_project:"Exportar Proyecto"},contextual_help:{enable:"Activar Ayuda Contextual",disable:"Desactivar Ayuda Contextual"},recycle:{p1:"Esta es la papelera de reciclaje, desde aqui puedes restaurar los elementos que han sido eliminados",p2:"Recuerda que los elementos en la papelera se eliminaran permanentemente cuando se agote el espacio disponible",p3:"* Haz doble-click en el elemento que quieras RESTAURAR",title:"Papelera de Reciclaje",compact_title:"Papelera de R.",compact_hint_restore:"* Haz doble-click en el elemento que quieras RESTAURAR",compact_hint_open:"* Haz click aqui para abrir la papelera de reciclaje",EMPTY:"Vacia"},welcome:{title:"Bienvenido a Music.js: Edicion de 8bit",p1:"Music.js es una aplicacion web que permite componer musica con el poder de javascript (opcional)",p2:"La primera version esta totalmente orientada a la musica retro/8bit mediante osciladores elementales, generadores de ruido y patrones de modulacion",p3:"¿Quieres realizar un recorrido basico?",nevershow:"Nunca mostrar este mensaje de nuevo"},about:{title:"Acerca de Music.js: Edicion de 8bit",p3:"A largo plazo, el objetivo de music.js es cubrir todas las capas necesarias entre el API de Web Audio provista pòr los navegadores y una solucion completa de composicion musical similar a las mas conocidas como por ej FL Studio",authors:"AUTORES",i_am:"Yo soy Dario Seminara, pero tambien tengo que dar credito a autores de varias librerias que son clave:",credit:{mohayonao:"@mohayonao (Autor de Timbre.js)",higuma:"@higuma (Autor de WebAudioRecorder)",kristopolous:"@kristopolous (Autor de la plantilla de bootstrap BOOTSTRA.386)"},contribute:"COMO CONTRIBUIR",contact_me:"Contactame a travez de github"},common:{yes:"Si",no:"No",ok:"Aceptar",dismiss:"Cerrar",cancel:"Cancelar",create:"Crear",open:"Abrir",name:"Nombre",loader_error:"Error al intentar cargar el archivo",cantremove_error:"No se puede eliminar el archivo si esta siendo utilizado",cantremove_project_error:"No se puede eliminar el proyecto si esta siendo usado desde otro proyecto",error_title:"Error",language:"Idioma:",HELP:"AYUDA",more:"mas",remove:"Elimi.","export":"Exportar",reset:"Fabr.",play:"Reprod.",pause:"Pausar",stop:"Detener",record:"Rec.",bpm:"Ppm",bpm_lc:"ppm",add:"Agreg.",tooltip:{playing_speed:"Velocidad de reproduccion, cantidad de pulsos por minuto",remove_item:"Elimina el elemento, puedes restaurarlo desde la papelera de reciclaje",modulation:"Puedes configurar los efectos de modulacion aqui. Si lo dejas vacio, no habra modulacion"},new_instrument:"Nuevo Instrumento",new_pattern:"Nuevo Patron",new_song:"Nueva Cancion",modulation:"Modulacion de {{name}}"},help:{FLOW:"FLUJO DE MUSIC.JS",RECIPES:"RECETAS",p1:"Para crear una cancion, tienes que ensamblarla, asi como sus componentes",p2:"Hay tres tipos de recursos que se pueden crear: instrumentos, patrones y canciones",p3:"Mientras que la seccion de la derecha muestra el elemento que se esta creando, la seccion de la izquierda muestra los materiales que se pueden usar",p4:"Puedes arrastrar y soltar esos materiales en las zonas indicadas",p5:"Para usar algun recurso en algun elemento que estes creando, lo tienes que arrastrar a esas zonas",p6:"Siguiendo este principio, puedes usar instrumentos para componer patrones, y finalmente, los patrones para componer las canciones",p7:"Ademas, puedes crear tus propios instrumentos, combinando varios efectos:",p8:"No te preocupes si no lo entiendes ahora mismo, hay recetas y ayuda contextual que podras usar para familiarizarte con estos conceptos",recipes:{p1:"Las recetas, son mini-tutoriales interactivos que explican como crear algo (por ejemplo, una cancion)",p2:"Algunos tutoriales (Como por ejemplo 'Recorrido Introductorio') solo explican algunas cosas de la interfaz principal",p3:"Te recomiendo que sigas estas recetas si no sabes que hacer o como empezar a usar la aplicacion. Puedes acceder a las recetas desde el menu de ayuda (?)"},CONTEXTUAL_HELP:"AYUDA CONTEXTUAL",contextual_help:{p1:"Hay una serie de tooltips que explican detalladamente las distintas funcionalidades de la aplicacion. Puedes activar o desactivar estas ayudas clickeando en el recuadro que aparece en la esquina inferior izquierda de la pantalla"}},editor:{keyboard_instructions:"Usa las teclas ZXCVBNM para tocar el instrumento, o pasa el puntero del mouse sobre el teclado virtual",tooltip:{test_instrument_here:"Prueba el instrumento aqui, usando el teclado o el mouse",type_here_instrument:"Escribe aqui el nombre para el instrumento"}},pattern:{track_muted:"Apagado",track_solo:"Solo",measure_beats:"Pulsos/compas",measure_count:"Cant. de compases",zoom_level:"Nivel de zoom",tracks:"Pistas",drop_instrument:"Suelta el instrumento aqui",tooltip:{amount_beats:"Cantidad de pulsos por compas",total_measures:"Cantidad total de compases en el patron",change_name:"Cambia el nombre del patron",zoom_level:"Nivel de zoom para todas las pistas",play:"Click para reproducir el patron",stop:"Click para detener la reproduccion",remove_track:"Click para eliminar la pista",compact_view_p1:"Vista compacta de la pista: muestra las notas sin necesidad de expandir la pista.",compact_view_p2:"Clickea aqui para expandir la pista",drop_zone:"Area para soltar el instrumento, arrastra aqui instrumentos del panel izquierdo para usarlos en la pista",editor_notes_p1:"Area de notas, puedes agregar las notas aqui:",editor_notes_p2:"Clickea para agregar una nueva nota, y arrastralas para cambiar su valor y su tiempo de inicio en la secuencia",editor_notes_p3:"CTRL+Z para deshacer cambios",editor_notes_p4:"CTRL+Y para rehacer cambios",add_track:"Clickea este boton para agregar una nueva pista vacia",note_event_p1:"Evento de nota. Arrastra desde el borde derecho para cambiar su duracion, o presiona la tecla SUPR. para eliminarlo",note_event_p2:"Arrastra para cambiar el valor o el tiempo de comienzo en la secuencia",note_event_p3:"Evento de nota. Clickea para seleccionarlo y editarlo",muted:"Desactiva la pista haciendo que no se reproduzca",solo:"Aisla la pista de manera que sea la unica que se reproduzca. Pueden aislarse varias",instrument_edit:"Clickea este boton para editar el instrumento"}},song:{drop_pattern:"Suelta el patron aqui",tooltip:{measure_beats:"Pulsos/Compas. Tiene que coincidir con el de los patrones que se usan",play:"Click para reproducir/pausar la cancion",stop:"Click para detener la reproduccion",download:"Click para grabar la cancion a un archivo de audio y descargarlo",drop_pattern:"Area para soltar los patrones, arrastra aqui patrones desde el panel izquierdo",remove_block:"Click aqui para eliminar el patron y dejar el bloque vacio",edit_block:"Click aqui para saltar a la edicion del patron utilizado en este bloque"}},stack:{drop_elements_here:"suelta nuevos elementos aqui",tooltip:{you_can_drop_new_effects_here:"Puedes soltar nuevos efectos del indice aqui",remove:"Elimina el efecto de la secuencia",up:"Cambia el orden del elemento, para que se ejecute DESPUES",down:"Cambia el orden del elemento, para que se ejecute ANTES",expand:"Expande/Comprime la vista avanzada del elemento"}},BUTTON_LANG_EN:"Ingles",BUTTON_LANG_ES:"Español"};musicShowCaseApp.constant("esTranslations",esTranslations);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.config(["$translateProvider",function(e){var a=function(){if(!e.resolveClientLocale())return"en";var a=e.resolveClientLocale().split("-")[0];return a&&e.translations()[a]?a:"en"};e.preferredLanguage(a()),e.fallbackLanguage("en"),e.useSanitizeValueStrategy(null),e.useLoader("translationsLoader")}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.config(["$routeProvider","$locationProvider",function(t,e){t.when("/editor/:project/instrument/:id",{templateUrl:"site/templates/editor.html",controller:"EditorController"}).when("/editor/:project/song/:id",{templateUrl:"site/templates/songEditor.html",controller:"SongEditorController"}).when("/editor/:project/pattern/:id",{templateUrl:"site/templates/patternEditor.html",controller:"PatternEditorController"}).when("/editor/:project",{templateUrl:"site/templates/dashboard.html",controller:"ProjectDashboardController"}).when("/",{templateUrl:"site/templates/dashboard.html",controller:"DashboardController"})}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.directive("musicObjectEditor",["$timeout","$http","TypeService","Recipe","MusicObjectFactory",function($timeout,$http,TypeService,Recipe,MusicObjectFactory){return{scope:{file:"=file"},templateUrl:"site/templates/objectEditor.html",link:function link(scope,element,attrs){var file,types=TypeService.getTypes();scope.output={},scope.parameters=[],scope.recipe=Recipe.start,scope.termschanged=function(){scope.$broadcast("termschanged")},scope.f_t=function(str,state){try{var ret=eval("(function(t) { return "+str+"; })");return delete state.error,ret}catch(e){throw state.error=e.toString(),e}},scope.oscTermsUpdateFromWaveForm=fn.debounce(function(waveform,terms,resolution){try{for(var waveform=eval("(function(t) { return "+waveform+"; })"),count=resolution,values=new Array(count),i=0;i<count;i++)if(values[i]=waveform(i/count),isNaN(values[i]))throw"Not a number: "+values[i];var ft=new DFT(values.length);ft.forward(values);for(var i=0;i<count;i++)terms.cos[i]=ft.real[i],terms.sin[i]=ft.imag[i];terms.cos.length=ft.real.length/2,terms.sin.length=ft.imag.length/2;for(var f=function(e){for(var t=0,a=1;a<count/2;a++){var n=terms.sin[a],o=terms.cos[a];t+=n*Math.sin(2*e*Math.PI*a),t+=o*Math.cos(2*e*Math.PI*a)}return t},maxvalue=0,count=terms.sin.length,i=0;i<count;i++){var value=f(i/count);value>maxvalue?maxvalue=value:value<-maxvalue&&(maxvalue=-value)}for(var i=0;i<count;i++)terms.sin[i]=terms.sin[i]/maxvalue,terms.cos[i]=terms.cos[i]/maxvalue;$timeout(function(){scope.invalidWaveform=!1}),scope.$broadcast("termschanged")}catch(err){$timeout(function(){scope.invalidWaveform=err.toString()})}},400),scope.oscTermsUpdate=fn.debounce(function(serie,terms,errVar){try{for(var serie=eval("(function(n) { return "+serie+"; })"),n=1;n<512;n++)if(terms[n]=serie(n),isNaN(terms[n]))throw"Not a number: "+terms[n];scope[errVar]=!1,$timeout(function(){scope.$broadcast("termschanged")})}catch(err){$timeout(function(){scope[errVar]=err.toString()})}},400),scope.range=function(e,t){for(var a=[],n=e;n<=t;n++)a.push(n);return a};var truthy=function(e){return e},updateObject=function(e){$timeout(function(){scope.file&&scope.file.changed&&scope.file.changed()})},outputObserver;scope.$on("$destroy",function(){outputObserver&&outputObserver.destroy()});var updateTemplate=function(e){if(e){t&&t.destroy();var t=MusicObjectFactory().observeOutput(e,function(e){$timeout(function(){scope.output=e})});types.then(function(){$timeout(function(){scope.selectedType=e.type,TypeService.getType(e.type,function(t){$timeout(function(){scope.templateUrl=t.templateUrl,scope.type=t;for(var a in t._default)"undefined"==typeof e.data[a]&&(e.data[a]=t._default[a]);t.parameters&&(scope.parameters=t.parameters.map(function(t){return{name:t.name,data:t,value:e.data&&"undefined"!=typeof e.data[t.name]?e.data[t.name]:t.value}})),t.components&&(scope.modulations=(t.components||[]).map(function(t){return{name:t,value:e.data&&e.data.modulation&&e.data.modulation[t]||{type:"stack",data:{array:[]}}}})),updateObject(e.data)})})})})}};scope.file&&updateTemplate(scope.file),types.then(function(e){scope.types=e});var changeType=function(e){e&&scope.file&&(scope.file.type=e,updateTemplate(scope.file))};scope.$watch("modulations",function(e){scope.modulations&&(scope.modulations.forEach(function(e){scope.file.data.modulation=scope.file.data.modulation||{},scope.file.data.modulation[e.name]=e.value}),scope.$emit("objectChanged"))},!0),scope.$watch("parameters",function(e){scope.parameters&&(scope.parameters.forEach(function(e){scope.file.data[e.data.name]=e.value}),scope.$emit("objectChanged"))},!0),scope.$watch("selectedType",changeType),scope.$watch("file",updateTemplate)}}}]),musicShowCaseApp.directive("arrayEditor",["$timeout","Recipe",function(e,t){return{scope:{data:"=data"},templateUrl:"site/templates/arrayEditor.html",link:function(a,n,o){a.data.subobjects=a.data.subobjects||[],a.maxElements=o.maxelements?parseInt(o.maxelements):1/0,a.currentTab=0,a.recipe=t.start;var r=function(t){e(function(){a.data.subobjects=a.data.subobjects||[],a.data.subobjects.push(t),a.setCurrentTab(a.data.subobjects.length-1)})};a.setCurrentTab=function(e){a.currentTab=e},a.removeObject=function(e){a.data.subobjects=a.data.subobjects.filter(function(t){return t!==e})},a.addObject=function(){r({data:{array:[]},type:"stack"})},0===a.data.subobjects.length&&a.addObject()}}}]),musicShowCaseApp.directive("musicStack",["$timeout","Recipe","TypeService",function(e,t,a){return{scope:{initFile:"=initFile",dropzoneExtraName:"=dropzoneExtraName"},templateUrl:"site/templates/stack.html",link:function(n,o,r){n.recipe=t.start;var c=function(t,a){n.$emit("stackChanged"),e(function(){var e=n.file.array[t];n.file.array[t]=n.file.array[a],n.file.array[a]=e})},i=function(e,t){e.array=[{type:t.name,data:{}}].concat(e.array)};n.onDropComplete=function(e,t){"fx"===e.type&&a.getType(e.name).then(function(t){(t.stackAppend||i)(n.file,e),n.$emit("stackChanged")})},n.up=function(e){c(e-1,e)},n.down=function(e){c(e+1,e)},n.remove=function(t){n.$emit("stackChanged"),e(function(){var e=n.file.array;n.file.array=[];for(var a=0;a<e.length;a++)a!==t&&n.file.array.push(e[a])})},n.add=function(){n.$emit("stackChanged"),e(function(){n.file.array.push({data:{},type:"null"})})},n.$watch("initFile",function(e){e&&(n.file=e.data)})}}}]),musicShowCaseApp.directive("customOscGraph",["$timeout",function(e){return{scope:{terms:"=terms"},template:'<function-graph f="f" samples=64 t0="0" tf="1" scaley="0.8"></function-graph>',link:function(e,t,a){var n=function(){e.f=function(t){for(var a=0,n=1;n<e.terms.sin.length;n++){var o=e.terms.sin[n],r=e.terms.cos[n];a+=o*Math.sin(2*t*Math.PI*n),a+=r*Math.cos(2*t*Math.PI*n)}return a}};e.f=function(){return 0},e.$on("termschanged",fn.debounce(n,10)),n()}}}]),musicShowCaseApp.directive("showScale",["$timeout",function(e){return{scope:{scale:"=scale"},template:'<div class="note-cell" ng-repeat="note in notes">{{note}}</div><div class="note-cell" ng-repeat="note in notes">{{note}}</div>',link:function(t,a,n){var o=function(e){return[0,[0,1],1,[1,2],2,3,[3,4],4,[4,5],5,[5,6],6][e%12]},r=function(e){return[0,2,4,5,7,9,11][e%7]},c=function(e){return["C","D","E","F","G","A","B"][e%7]};t.$watch("scale",function(a){e(function(){var e=MUSIC.Utils.Scale(a),n=[0,1,2,3,4,5,6],i=o(a);i.length&&(i=i[1]),t.notes=n.map(function(t){var n=e.add(a,t),o=(i+t)%7,s="";return r(o)>n%12&&(s="b"),r(o)<n%12&&(s="#"),c(o)+s})})})}}}]),musicShowCaseApp.directive("ngScrollTop",["$parse","$timeout",function(e,t){return{restrict:"A",link:function(a,n,o){var r=e(o.ngScrollTop),c=r.assign;a.$watch(o.ngScrollTop,function(){$(n).scrollTop(r(a))}),n.on("scroll",function(){t(function(){c(a,$(n).scrollTop())})})}}}]),musicShowCaseApp.directive("ngScrollLeft",["$parse","$timeout",function(e,t){return{restrict:"A",link:function(a,n,o){var r=e(o.ngScrollLeft),c=r.assign;a.$watch(o.ngScrollLeft,function(){$(n).scrollLeft(r(a))}),n.on("scroll",function(){t(function(){c(a,$(n).scrollLeft())})})}}}]);
musicShowCaseApp.directive("functionGraph",["$timeout","$parse",function(e,t){return{scope:{},replace:!0,template:'<canvas class="wavegraph"></canvas>',link:function(e,t,a){var i,n=parseFloat(a.t0),r=parseFloat(a.tf),o=parseInt(a.samples),s=parseFloat(a.scaley);e.$parent.$watch(a.f,function(e){i=e,i&&h()});var h=function(){var e=t[0],a=e.getContext("2d");e.width=e.clientWidth/4,e.height=e.clientHeight/4;var h=function(e,t,i,n,r){a.save(),a.beginPath(),a.moveTo(e,t),a.lineTo(i,n),a.strokeStyle=r,a.lineWidth=1,a.stroke(),a.restore()},l=function(t){a.save(),a.save(),a.translate(0,e.height/2),a.scale(e.width,e.height/2),a.moveTo(0,-i(n)*s);for(var h=1;h<=o;h++){var l=h/o,c=(r-n)*l+n;a.lineTo(l,-i(c)*s)}a.restore(),a.lineJoin="round",a.lineWidth=1,a.strokeStyle=t,a.stroke(),a.restore()};h(0,e.height/2,e.width,e.height/2,"aqua"),l("#FFF")}}}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.directive("keyboard",["$timeout","$uibModal","Midi","MusicContext",function(t,n,e,o){return{scope:{instrument:"=instrument"},templateUrl:"site/templates/keyboard.html",link:function(i,u,a){var s=function(t){var n=t.data[0],e=t.data[1],o=(t.data[2],Math.floor(e/12));if(!(o<0)){var u=i.octaves[o];u&&(144===n?(u.midi[e%12]=!0,u.update()):128===n&&(u.midi[e%12]=!1,u.update()))}},c=e.registerEventListener(s),d=function(){e.getStatus().then(function(n){t(function(){i.midiConnected=n.connected})})};d(),i.$on("$destroy",function(){c.destroy()});var r={90:"C",83:"C#",88:"D",68:"D#",67:"E",86:"F",71:"F#",66:"G",72:"G#",78:"A",74:"A#",77:"B"},m=function(t){return t.stopAll()},f=function(t){return t.update()};i.midiSetup=function(){n.open({templateUrl:"site/templates/modal/midiSettings.html",controller:"midiSettingsModalCtrl"}).result.then(d)},i.stopAll=function(){i.octaves.forEach(m)};var p=function(n){return{mouse:{},key:{},midi:{},note:[],play:function(t){this.note[t]||(this.note[t]=i.instrument.note(n+t).play())},stop:function(t){this.note[t]&&(this.note[t].stop(),this.note[t]=void 0)},update:function(){for(var n=0;n<12;n++)this.mouse[n]||this.key[n]||this.midi[n]?this.play(n):this.stop(n);t(function(){})},stopAll:function(){this.note.forEach(function(t){t&&t.stop&&t.stop()}),this.note=[]}}},l=function(){o.resumeAudio()},v=function(t){l(),t.mouse={},t.update()};i.mouseLeave=function(t,n){l(),t.mouse[n]=!1,t.update()},i.mouseEnter=function(t,n){l(),i.octaves.forEach(v),t.mouse[n]=!0,i.octaves.forEach(f)};var h=function(t){if(l(),"input"!==document.activeElement.tagName.toLowerCase()){var n=t.keyCode,e=r[n];if(e){var o=MUSIC.noteToNoteNum(e);i.octaves[1].key[o]=!0,i.octaves[1].update(),i.$digest()}}},y=function(t){l();var n=t.keyCode,e=r[n];if(e){var o=MUSIC.noteToNoteNum(e);i.octaves[1].key[o]=!1,i.octaves[1].update(),i.$digest()}};$(document).bind("keydown",h),$(document).bind("keyup",y);var k=$(u).find(".piano-firstrow .key"),C=$(u).find(".piano-secondrow .key");k.bind("click",l),C.bind("click",l),i.$on("$destroy",function(){$(document).unbind("keydown",h),$(document).unbind("keyup",y),k.unbind("click",l),C.unbind("click",l),i.octaves.forEach(function(t){t.stopAll()})}),i.octaves=[24,36,48,60,72].map(p),i.$watch("instrument",function(t){i.instrument=t})}}}]);
musicShowCaseApp.directive("musicEventEditor",["$timeout","TICKS_PER_BEAT","Pattern","MusicContext",function(e,t,o,n){return{scope:{pattern:"=pattern",track:"=track",zoomLevel:"=zoomLevel",beatWidth:"=beatWidth",measure:"=measure",measureCount:"=measureCount",recipe:"=recipe"},templateUrl:"site/templates/directives/musicEventEditor.html",link:function(a,s,r){a.TICKS_PER_BEAT=t;var i=t,l=function(){a.shadowEvt=null},v=l,u=function(e){var n=t/a.zoomLevel;if(e.target.classList.contains("event-list")){if(a.shadowEvt=a.shadowEvt||{},a.shadowEvt.n=Math.floor(h()-e.offsetY/20),a.shadowEvt.l=i,a.shadowEvt.s){var s=Math.floor(e.offsetX/a.beatWidth/a.zoomLevel*t);s=Math.floor(s);var r=o.findClipS(a.pattern,a.track,{s:s,l:i},s);if(Math.abs(s-r-n/2)<n)return a.shadowEvt.s=r,void o.cutEvent(a.pattern,a.track,a.shadowEvt)}a.shadowEvt.s=Math.floor(2*Math.floor(e.offsetX/2/a.beatWidth)/a.zoomLevel*t),a.shadowEvt.s<0&&(a.shadowEvt.s=0),o.cutEvent(a.pattern,a.track,a.shadowEvt)}},c=function(e){return[0,[0,1],1,[1,2],2,3,[3,4],4,[4,5],5,[5,6],6][e%12]},f=function(e){return["C","D","E","F","G","A","B"][e%7]};a.raiseEventChanged=function(e,t,o){a.$emit("eventChanged",{oldevt:e,evt:t,track:o})},a.noteName=function(e){var t=c(e),o=Math.floor(e/12);return Array.isArray(t)?(t=t[0],f(t)+"#"+o):f(t)+o};var m=function(){a.mainGridStyle={"background-size":a.measure*a.beatWidth*a.zoomLevel+"px 240px"}};a.$watch("[measure, beatWidth, zoomLevel]",m),a.$watch("track.scroll",function(){a.$emit("trackChanged",a.track)}),e(m);var d=function(e){a.track.events.find(function(t){return e.s===t.s&&e.n===t.n})||(e=angular.copy(e),o.collision(a.track,e)||(a.$emit("patternSelectEvent",e),a.selected=e,a.recipe.raise("pattern_note_added"),a.track.events.push(e),a.$emit("trackChanged",a.track),a.$emit("eventChanged",{oldevt:{},evt:e,track:a.track}),a.mouseMove=E(e,0),a.mouseMoveEvent=M(e,0),l(),a.mouseLeave=function(){v(),k()},a.mouseUpResizeEvent=k,a.mouseUpEvent=k,a.mouseUp=k))};a.mouseMoveResizeEvent=function(){l()},a.shadowMouseMove=function(e){var n=2*Math.floor(e.offsetX/2/a.beatWidth)/a.zoomLevel*t;n>0&&(a.shadowEvt.s=a.shadowEvt.s+n),o.cutEvent(a.pattern,a.track,a.shadowEvt)},a.addFromShadow=function(e){d(a.shadowEvt)},a.mouseUp=function(e){a.mouseMove=u},a.mouseLeave=function(){v(),a.mouseMove=u},a.mouseMove=u,a.mouseMoveEvent=l;var h=function(){return"tempo"===a.track.instrument?1024:120},p=function(e,t){return function(){var n=angular.copy(e);t.apply(null,arguments);return o.collision(a.track,e)?(e.n=n.n,e.s=n.s,void(e.l=n.l)):void(e.n===n.n&&e.l===n.l&&e.s===n.s||(a.$emit("trackChanged",a.track),a.$emit("eventChanged",{oldevt:n,evt:e,track:a.track})))}},E=function(e,s){return function(r){n.resumeAudio();var i=t/a.zoomLevel,l=({n:e.n,s:e.s,l:e.l},Math.floor((r.offsetX-s)/a.beatWidth/a.zoomLevel*t));l=Math.floor(l);var v=o.findClipS(a.pattern,a.track,e,l);if(r.target.classList.contains("event-list")){Math.abs(l-v-i/2)<i?e.s=v:(e.s=2*Math.floor((r.offsetX-s)/2/a.beatWidth)/a.zoomLevel*t,e.s=Math.floor(e.s)),e.s<0&&(e.s=0);e.n;e.n=Math.floor(h()-r.offsetY/20)}}},M=function(e,s){return l(),function(r,i){n.resumeAudio();var l=t/a.zoomLevel,v=({n:e.n,s:e.s,l:e.l},r.s+Math.floor((i.offsetX-s)/a.beatWidth/a.zoomLevel*t));v=Math.floor(v);var u=o.findClipS(a.pattern,a.track,e,v);Math.abs(v-u-l/2)<l?e.s=u:(e.s=r.s+2*Math.floor((i.offsetX-s)/2/a.beatWidth)/a.zoomLevel*t,e.s=Math.floor(e.s)),e.n=r.n,e.s<0&&(e.s=0)}},k=function(){a.mouseMoveEvent=l,a.mouseMove=u,a.mouseLeave=v};a.mouseDown=function(e){if(n.resumeAudio(),e.target.classList.contains("event-list")){var s={n:Math.floor(h()-e.offsetY/20),s:Math.floor(e.offsetX/a.beatWidth)/a.zoomLevel*t,l:i};s.s=Math.floor(s.s),o.cutEvent(a.pattern,a.track,s),d(s)}};var L=function(e,t){var o=e.l;e.l=t;var n={n:e.n,s:e.s+e.l,l:o-t};a.recipe.raise("pattern_note_added"),a.track.events.push(n)},z=function(e){e.l%3===0?L(e,e.l/3):b(e)},w=function(e){e.l%3===0?L(e,2*e.l/3):b(e)},b=function(e){e.l%2===0&&L(e,e.l/2)};a.mouseDblClickEvent=function(e,t){var o=$(t.target)[0].clientWidth+5;t.offsetX<o/3?z(e):t.offsetX>2*o/3?w(e):b(e)},a.mouseDownEvent=function(e,t){n.resumeAudio(),t.preventDefault(),document.activeElement.blur(),a.$emit("eventSelected",{evt:e,track:a.track}),a.$emit("patternSelectEvent",e),a.selected=e,a.mouseMove=p(e,E(e,t.offsetX)),a.mouseMoveEvent=p(e,M(e,t.offsetX)),l(),a.mouseLeave=function(){v(),k()};var o=function(){a.recipe.raise("pattern_note_drag"),k()};a.mouseUpResizeEvent=o,a.mouseUpEvent=o,a.mouseUp=o},a.mouseDownResizeEvent=function(e,s){n.resumeAudio(),s.preventDefault(),a.$emit("patternSelectEvent",e),a.selected=e,a.mouseMove=p(e,function(n){var s=({n:e.n,s:e.s,l:e.l},t/a.zoomLevel),r=o.findClipL(a.pattern,a.track,e,e.s);if(n.target.classList.contains("event-list")){var l=Math.floor(n.offsetX/a.beatWidth/a.zoomLevel*t)-e.s;if(Math.abs(l-r-s)<s)e.l=r;else{var v=2*Math.floor(n.offsetX/a.beatWidth/2)/a.zoomLevel*t;e.l=v-e.s,e.l=Math.floor(e.l),e.l<t/a.zoomLevel&&(e.l=t/a.zoomLevel),i=e.l}}}),a.mouseMoveEvent=p(e,function(n,s){var r=({n:e.n,s:e.s,l:e.l},t/a.zoomLevel),l=o.findClipL(a.pattern,a.track,e,e.s),v=n.s+Math.floor(s.offsetX/a.beatWidth/a.zoomLevel*t)-e.s;if(Math.abs(v-l-r)<r)e.l=l;else{var u=n.s+2*Math.floor(s.offsetX/a.beatWidth/2)/a.zoomLevel*t;e.l=u-e.s,e.l=Math.floor(e.l),e.l<t/a.zoomLevel&&(e.l=t/a.zoomLevel),i=e.l}}),a.mouseUpResizeEvent=k,a.mouseUpEvent=k,a.mouseUp=k};var C=function(t){"input"!==document.activeElement.tagName.toLowerCase()&&46==t.keyCode&&e(function(){a.track.events=a.track.events.filter(function(e){return e!==a.selected}),a.$emit("trackChanged",a.track)})};$(document).bind("keydown",C),a.$on("$destroy",function(){$(document).unbind("keydown",C)}),a.$on("trackSelectEvent",function(e,t){a.selected=t})}}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.directive("ngfDrop",["$parse",function(e){return{restrict:"A",link:function(n,r,t){var o=e(t.ngfDrop),i=function(e){e.dataTransfer.dropEffect="copy",e.preventDefault()},d=function(e){o(n,{$files:e.dataTransfer.files}),e.preventDefault()};window.addEventListener("dragenter",i),window.addEventListener("dragover",i),window.addEventListener("drop",d),n.$on("$destroy",function(){window.removeEventListener("dragenter",i),window.removeEventListener("dragover",i),window.removeEventListener("drop",d)})}}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.directive("ngfLoader",["$parse",function(e){return{restrict:"A",link:function(n,a,o){var i=e(o.ngfLoader),r=function(e){i(n,{$files:e.target.files}),$(a).val("")};$(a).on("change",r),n.$on("$destroy",function(){$(a).off("change",r)})}}}]);
musicShowCaseApp.directive("patternTrackCompactView",["$timeout","TICKS_PER_BEAT","Recipe","Pattern","MusicContext",function(e,t,o,a,n){return{scope:{pattern:"=pattern",track:"=track",zoomLevel:"=zoomLevel",beatWidth:"=beatWidth",measure:"=measure",measureCount:"=measureCount"},templateUrl:"site/templates/directives/patternTrackCompactView.html",link:function(e,r){e.recipe=o.start,e.TICKS_PER_BEAT=t;var s=function(e){return[0,[0,1],1,[1,2],2,3,[3,4],4,[4,5],5,[5,6],6][e%12]},i=function(e){return["C","D","E","F","G","A","B"][e%7]};e.noteName=function(e){var t=s(e),o=Math.floor(e/12);return Array.isArray(t)?(t=t[0],i(t)+"#"+o):i(t)+o};var l=function(){e.mainGridStyle={"background-size":e.measure*e.beatWidth*e.zoomLevel+"px 240px","background-position":-e.pattern.scrollLeft+"px"}};e.$watch("[measure, beatWidth, zoomLevel, pattern.scrollLeft]",l),e.$on("trackSelectEvent",function(t,o){e.selected=o});var c=function(t){e.$emit("enableTrack",e.track),e.mouseMove=function(){}};e.mouseUp=c,e.mouseLeave=function(){e.mouseMove=function(){}};var u=function(){e.mouseMoveEvent=function(){},e.mouseMove=function(){},e.mouseLeave=function(){}};e.mouseDownEvent=function(o,r){var s=!1,i=function(o,r){return function(i){n.resumeAudio();var l=t/e.zoomLevel,c={n:o.n,s:o.s,l:o.l};if(i.target.parentElement.classList.contains("track-compact-view")){var u=Math.floor((i.offsetX-r)/e.beatWidth/e.zoomLevel*t);u=Math.floor(u);var v=a.findClipS(e.pattern,e.track,o,u);Math.abs(u-v-l/2)<l?o.s=v:(o.s=2*Math.floor((i.offsetX-r)/2/e.beatWidth)/e.zoomLevel*t,o.s=Math.floor(o.s)),o.s<0&&(o.s=0),o.s!==c.s&&(s=!0),e.$emit("trackChanged",e.track),e.$emit("eventChanged",{oldevt:c,evt:o,track:e.track})}}},l=function(o,r){return function(i,l){n.resumeAudio();var c=t/e.zoomLevel,u={n:o.n,s:o.s,l:o.l},v=i.s+Math.floor((l.offsetX-r)/e.beatWidth/e.zoomLevel*t);v=Math.floor(v);var m=a.findClipS(e.pattern,e.track,o,v);Math.abs(v-m-c/2)<c?o.s=m:(o.s=i.s+2*Math.floor((l.offsetX-r)/2/e.beatWidth)/e.zoomLevel*t,o.s=Math.floor(o.s)),o.s<0&&(o.s=0),o.s!==u.s&&(s=!0),e.$emit("trackChanged",e.track),e.$emit("eventChanged",{oldevt:u,evt:o,track:e.track})}};r.preventDefault(),document.activeElement.blur(),e.$emit("eventSelected",{evt:o,track:e.track}),e.mouseMove=i(o,r.offsetX),e.mouseMoveEvent=l(o,r.offsetX),e.mouseLeave=function(){u()};var v=function(){e.recipe.raise("pattern_note_drag"),u()};e.mouseUpResizeEvent=v,e.mouseUpEvent=v,e.mouseUp=function(){e.mouseUp=c,s||e.$emit("enableTrack",e.track),e.$emit("patternSelectEvent",o),v()}},e.mouseDownResizeEvent=function(o,r){var s=!1;r.preventDefault(),e.mouseMove=function(r){n.resumeAudio();var i={n:o.n,s:o.s,l:o.l},l=t/e.zoomLevel,c=a.findClipL(e.pattern,e.track,o,o.s);if(r.target.parentElement.classList.contains("track-compact-view")){var u=Math.floor(r.offsetX/e.beatWidth/e.zoomLevel*t)-o.s;if(Math.abs(u-c-l)<l)o.l=c;else{var v=2*Math.floor(r.offsetX/e.beatWidth/2)/e.zoomLevel*t;o.l=v-o.s,o.l=Math.floor(o.l),o.l<t/e.zoomLevel&&(o.l=t/e.zoomLevel),defaultL=o.l}o.l!==i.l&&(s=!0),e.$emit("trackChanged",e.track),e.$emit("eventChanged",{oldevt:i,evt:o,track:e.track})}},e.mouseMoveEvent=function(r,i){n.resumeAudio();var l={n:o.n,s:o.s,l:o.l},c=t/e.zoomLevel,u=a.findClipL(e.pattern,e.track,o,o.s),v=r.s+Math.floor(i.offsetX/e.beatWidth/e.zoomLevel*t)-o.s;if(Math.abs(v-u-c)<c)o.l=u;else{var m=r.s+2*Math.floor(i.offsetX/e.beatWidth/2)/e.zoomLevel*t;o.l=m-o.s,o.l=Math.floor(o.l),o.l<t/e.zoomLevel&&(o.l=t/e.zoomLevel),defaultL=o.l}o.l!==l.l&&(s=!0),e.$emit("trackChanged",e.track),e.$emit("eventChanged",{oldevt:l,evt:o,track:e.track})},e.mouseUpResizeEvent=u,e.mouseUpEvent=u,e.mouseUp=function(){e.mouseUp=c,s||e.$emit("enableTrack",e.track),e.$emit("patternSelectEvent",o),u()}}}}}]);
musicShowCaseApp.directive("playingLine",["$timeout","$parse","TICKS_PER_BEAT",function(n,e,t){return{scope:{},replace:!0,templateUrl:"site/templates/directives/playingLine.html",link:function(n,o,i){var r,a,c,p,s,l=!1,m=e(i.bpm),u=e(i.zoomLevel),f=e(i.beatWidth),w=function(e){return p=u(n.$parent),s=f(n.$parent),e*p*s/t},d=function C(){if(c&&l){var n=a(window.performance.now()-r),e=w(n);o.css("left",e+"px")}requestAnimationFrame(C)},v=($(o),requestAnimationFrame(d));n.$on("startClock",function(e,t){var o=window.performance.now();l=!0,c=m(n.$parent),a=t,r=o}),n.$on("stopClock",function(n){l=!1}),n.$on("pauseClock",function(e){var t=a(window.performance.now()-r),i=w(t||0);l=!1,n.$emit("pausedClock",t),o.css("left",i+"px")}),n.$on("resetClock",function(n,e){var t=w(e||0);l=!1,o.css("left",t+"px")}),n.$on("$destroy",function(){cancelAnimationFrame(v)})}}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.directive("recipeBlink",["$parse","$timeout","Recipe",function(n,i,e){return{restrict:"A",link:function(o,a,c){var l=n(c.recipeBlink),r=l(o);Array.isArray(r)||(r=[r]);var t=function(){i(function(){$(a).addClass("blink")})},u=function(){i(function(){$(a).removeClass("blink")})},s=function(n){e.getBlinks().indexOf(n)!==-1&&t(),o.$on("_blink_enable_"+n,function(n,i){t()}),o.$on("_blink_disable_"+n,function(){u()}),o.$on("__blink_disable_all",function(){u()})};r.forEach(s)}}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.directive("recipeTooltip",["$parse","$timeout",function(t,i){return{restrict:"E",scope:{},template:'<div ng-click="onClick($event)" ng-class="{\'show-recipe-tooltip\': tooltipEnabled, \'cap-right\': capRight}" class="help-tooltip recipe-tooltip"><p>{{text|translate}}</p></div>',link:function(o,e,n){var l=t(n.rtId),p=l(o.$parent);o.tooltipEnabled=!1,o.onClick=function(t){o.$parent.recipe.raise("tooltip_click"),t.stopImmediatePropagation()},o.$on("_tooltip_display_"+p,function(t,n){i(function(){var t=Math.max(document.documentElement.clientWidth,window.innerWidth||0),i=e[0],l=t-i.getBoundingClientRect().left;o.capRight=l<300,o.text=n.text,o.tooltipEnabled=!0})}),o.$on("_tooltip_hide_"+p,function(){o.tooltipEnabled=!1}),o.$on("__tooltip_hide_all",function(){o.tooltipEnabled=!1})}}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.directive("recipeWizard",["$timeout",function(e){return{restrict:"E",template:'<div class="recipe-wizard"><p>{{text}}</p></div>',link:function(e,i,t){}}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.directive("recycleBinCompactView",["$timeout","$uibModal","FileRepository","ErrMessage",function(e,t,o,c){return{templateUrl:"site/templates/directives/recycleBinCompactView.html",scope:{},link:function(i,n,r){var l=o.observeRecycled(function(){o.searchRecycled(null,{limit:10}).then(function(t){e(function(){i.files=t.results.slice(0,4)})})});i.$on("destroy",l.destroy),i.openRecycleBin=function(){t.open({templateUrl:"site/templates/modal/recycleBin.html",controller:"recycleBinModalCtrl"})},i.restore=function(e){o.restoreFromRecycleBin(e.id).then(function(){"project"===e.type?document.location="#/editor/"+e.id:document.location="#/editor/"+e.project+"/"+e.type+"/"+e.id})},i.onDropComplete=function(e){o.moveToRecycleBin(e.id)["catch"](function(e){if(!e.type||"cantremove"!==e.type)throw e;c("common.error_title","common.cantremove_error")})}}}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.filter("icon_from_type",function(){return function(e){return"instrument"===e?"keyboard":"tempo"===e?"clock":"song"===e?"th":"pattern"===e?"music":"fx"===e?"magic":"project"===e?"folder":"question"}}),musicShowCaseApp.directive("typeIcon",["$parse",function(e){return{restrict:"A",scope:{},replace:!0,template:'<span class="fa fa-{{typeIcon | icon_from_type}}">',link:function(t,n,c){var o=e(c.typeIcon);t.$parent.$watch(o,function(e){t.typeIcon=o(t.$parent)})}}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.factory("MusicObjectFactory",["MusicContext","$q","TypeService","pruneWrapper",function(e,n,t,r){var u=new WeakMap;return function(r){var i=0,o={},a={},c=r&&r.monitor,s=function(e,r){return t.getType(e.type).then(function(t){if(t.monitor&&!c)return function(e){var n=e[0];return function(e){return n(e)}};var u=function(u){var c=[];return t.components&&t.components.forEach(function(n){if(e.data.modulation){var t=e.data.modulation[n];t&&t.data&&t.data.array&&0!==t.data.array.length&&c.push(p(t).then(function(e){return{name:n,obj:e}}))}}),n.all(c).then(function(n){var c={};n.forEach(function(e){c[e.name]=e.obj}),o[r]=o[r]||new WeakMap,a[r]=a[r]||new WeakMap;var s=o[r],f=a[r];s.set(e,e.type);var l=t.constructor(e.data,u,c);return i++,l.id=i,1===u.length?(f.has(e)||f.set(e,{}),f.get(e)[u[0].id]=l):0===u.length&&(f.has(e)||f.set(e,{}),f.get(e).noid=l),l})};return u.subobjects=t.subobjects,u})},f=function y(e,t,r){if(0===e.length)return n.when(null);var u=e[t];return r=r||0,s(u,r).then(function(i){if(i.subobjects){var o=function(n,u){var i=n.data.array.concat(e.slice(t+1));return y(i,0,16*r+u)};return n.all(u.data.subobjects.map(o)).then(function(e){return i(e)})}return 1===e.length?i([]):y(e.slice(t+1),0,r).then(function(e){return i([e])})}).then(function(e){return e&&e.dataLink&&e.dataLink(l(u)),e})},l=function(e){return function(n){if(u.has(e)){var t=u.get(e);t.emit("changed",n)}}},p=function(e){return"stack"===e.type?f(e.data.array,0):s(e,0).then(function(e){return e([])})},m=function(e){for(var t in o)o[t]=new WeakMap;for(var t in a)a[t]=new WeakMap;return d.forEach(function(e){e.prune()}),d=[],n.when(null)},d=[],h=function(n,t){return p(n).then(function(n){if(n){if(t){var r=t.sfxBase();return d.push(r),n(r)}return e.runFcn(function(e){var t=e.sfxBase();return d.push(t),n(t)})}})},v=function(e,n){var t;return u.has(e)?t=u.get(e):(t=new EventEmitter,u.set(e,t)),t.on("changed",n),{destroy:function(){t.removeListener("changed",n)}}};return{create:h,destroyAll:m,observeOutput:v}}}]),musicShowCaseApp.service("MusicContext",function(){var music,context,Recordable=function(e,n,t){this._playable=n,this._music=e,this._name=t};return Recordable.prototype.record=function(){var e=this._playable,n=music.record(),t=this._name;e.play();MUSIC.Utils.FunctionSeq.preciseTimeout(function(){n.stop(),n.exportWAV(function(e){var n=document.createElement("a");document.body.appendChild(n),n.style="display: none";var r=window.URL.createObjectURL(e);n.href=r,n.download=t+".wav",n.click(),window.URL.revokeObjectURL(r)})},e.duration())},{resumeAudio:function(){music||(context=new MUSIC.Context,music=context.sfxBase()),context.resume()},runFcn:function(e){return music||(context=new MUSIC.Context,music=context.sfxBase()),e(music)},record:function(e,n){return this.runFcn(function(){return context.record(e,n)})},run:function run(code){music&&music.prune(),music=(new MUSIC.Context).sfxBase();try{return{object:eval("(function() {\n"+code+"\n})")()}}catch(e){return{error:e.toString()}}}}}),musicShowCaseApp.service("Historial",[function(){return function(){var e=[],n=0,t=function(){return n>0&&n--,e[n]},r=function(){return n<e.length-1&&n++,e[n]},u=function(t){e=e.slice(0,n+1),e.push(t),e.length>128&&(e=e.slice(1)),n=e.length-1};return{registerVersion:u,undo:t,redo:r}}}]),musicShowCaseApp.service("Pattern",["MUSIC","TICKS_PER_BEAT",function(e,n){var t=function(e,t,r,u,i,o){for(var a=r.events.sort(function(e,n){return e.s-n.s}),c=a.map(function(e){return[e.n,e.s,e.l,{tc:e.tc}]}),s=0;s<c.length;s++){var f=c[s];e.push(u(f,c),o)}e.paddingTo(n*t.measureCount*t.measure),e.pushCallback([n*t.measureCount*t.measure,i]);t.measure*t.measureCount},r=function d(n,r,u,i){var d=new e.NoteSequence;return t(d,n,r,u,i),d},u=function(r,u,i,o,a){var c=a&&a.start||0,s=function(e,n){n=i+n;var t=u[e.instrument+"_"+n];return t&&t.tempo},f=function(e){return e.events},l=function(e,n){return e.concat(n)},p=function(e,n){return e.s-n.s},m={},d=new e.NoteSequence(null,{time:e.Math.ticksToTime({bpm:r.bpm,ticks_per_beat:n,bpm_events:r.tracks.filter(s).map(f).reduce(l,[]).sort(p),start:c}),songCtx:m});r.tracks.forEach(function(n,a){a=i+a;var c=u[n.instrument+"_"+a];if(c&&!c.tempo){var s=c.eventPreprocessor||function(e){return e},f=e.NoteSequence.context(c,null,m);t(d,r,n,s,o,f)}});var h=d.makePlayable(null);return h.schedule=function(n,a){var c=[];return a=a||{},r.tracks.forEach(function(s,f){f=i+f;var l=u[s.instrument+"_"+f];if(l){var p=l.eventPreprocessor||function(e){return e},m=e.NoteSequence.context(l,null,a);c.push(m),t(n,r,s,p,o,m)}}),c},h.timeToTicks=function(){return e.Math.timeToTicks({bpm:r.bpm,ticks_per_beat:n,bpm_events:r.tracks.filter(s).map(f).reduce(l,[]).sort(p),start:c})},h.bpm_events=r.tracks.filter(s).map(f).reduce(l,[]).sort(p),h},i=function(e,n){return e>n?e:n},o=function(e,t){t<1&&(t=1);var r=e.tracks.map(function(e){return e.events.map(function(e){return e.s+e.l}).reduce(i,0)}).reduce(i,0),u=t*n,o=Math.floor((r-1)/u)+1;return o<1?1:o},a=function(e){var n=e.tracks.some(function(e){return e.solo});return e.tracks.map(function(e){return n?e.muted||!e.solo:e.muted||!e.instrument})},c=function(e,n){return e.concat(n)},s=function(e){return function(n){return n!==e}},f=function(e,n,t,r){var u=function(e,n){return Math.abs(t.s-e)<Math.abs(t.s-n)?e:n},i=e.tracks.map(function(e){return e.events.filter(s(t))}).reduce(c),o=e.tracks.map(function(e){return n===e?[]:e.events.filter(s(t))}).reduce(c);if(0===i.length)return 0;var a=i.map(function(e){return e.s+e.l}).concat(i.map(function(e){return e.s-t.l})).concat(o.map(function(e){return e.s}));return a.reduce(u)},l=function(e,n,t,r){var u=function(e,n){return Math.abs(t.s+t.l-e)<Math.abs(t.s+t.l-n)?e:n},i=e.tracks.map(function(e){return e.events.filter(s(t))}).reduce(c),o=e.tracks.map(function(e){return n===e?[]:e.events.filter(s(t))}).reduce(c);if(0===i.length)return 0;var a=i.map(function(e){return e.s}).concat(o.map(function(e){return e.s+e.l}));return a.reduce(u)-t.s},p=function(e,t,r){var u=t.events.filter(s(r));u.filter(function(e){return e.s>r.s}).forEach(function(e){r.s+r.l>e.s&&(r.l=e.s-r.s)});var i=e.measure*n;(r.s+r.l)%i<r.s%i&&(r.l=r.l-(r.s+r.l)%i)},m=function(e,n){var t=e.events.filter(s(n));return t.some(function(e){return e.n===n.n&&(e.s<=n.s&&n.s<e.s+e.l||n.s<=e.s&&e.s<n.s+n.l)})};return{noteseq:r,patternCompose:u,computeMeasureCount:o,getMutedState:a,findClipL:l,findClipS:f,cutEvent:p,collision:m}}]),musicShowCaseApp.service("InstrumentSet",["FileRepository","MusicObjectFactory","MusicContext",function(e,n,t){var r=function(t){var r,u={},i={},o=[],a=function(a,c){c=c||0;var s=a+"_"+c;return i[s]||(u[c]=u[c]||t.gain(1),i[s]=e.getFile(a).then(function(e){return"instrument"===e.index.type?(r||(r=n()),r.create(e.contents,u[c]).then(function(e){return o.push(e),e})):{tempo:!0}})),i[s]},c=function(){if(o.forEach(function(e){e.dispose&&e.dispose()}),r)return r.destroyAll()},s=function(e,n){u[e]=u[e]||t.gain(1),u[e].update(n?0:1)};return{load:a,mute:s,all:i,dispose:c}};return function(e){return e?r(e):t.runFcn(r)}}]),musicShowCaseApp.service("FileRepository",["$http","$q","TypeService","Historial","Index","_localforage",function(e,n,t,r,u,i){var o=[],a={},c=["site/builtin/defaultProject.json","site/builtin/samples.json","site/builtin/smb-underworld.json","site/builtin/smb-overworld.json","site/builtin/bomberman.json","site/builtin/entertainer.json","site/builtin/eva-thanatos.json","site/builtin/bioshock-solace.json"],s=function(n){return e.get(n).then(function(e){e.data.forEach(function(e){var n=e.id;a[n]=e.contents,o.push({project:e.project,type:e.type,name:e.name,id:n,ref:e.ref,builtIn:!0})})})},f=function(e,n,t,r){o.push({project:"default",type:n,id:e,name:t,noExportable:!0}),a[e]=r};f("tempo","tempo","Tempo",{});var l=n.all(c.map(s)),p=function(){for(var e=[],n=0;n<32;n++){var t=[0,1,2,3,4,5,6,7,8,9,"a","b","c","d","e","f"][Math.floor(16*Math.random())];e.push(t)}return e.join("")},m=new EventEmitter,d=new EventEmitter,h={instrument:{type:"stack",data:{array:[]}},song:{measure:4,bpm:140,tracks:[{blocks:[{},{},{}]},{blocks:[{},{},{}]}]},pattern:{measure:4,measureCount:1,bpm:140,selectedTrack:0,tracks:[{scroll:1e3,events:[]}],scrollLeft:0}},v=new WeakMap,y=function(e,t,u){return n.when().then(function(){var n=o.filter(function(n){return n.id===e})[0];return n?n:T.getEntry(e)}).then(function(n){if(n){var o=MUSIC.Formats.MultiSerializer.serialize(n.type,t);return u&&u.noHistory||(v[e]=v[e]||r(),v[e].registerVersion(JSON.stringify(t))),i.setItem(e,o)}}).then(function(){return R.reload()}).then(function(){d.emit("changed")})},g=function(e){return i.removeItem(e).then(function(){return n.all({r:R.removeEntry(e),l:T.removeEntry(e)})})},b=function(e){return R.removeEntry(e)},S=function(e){return C(e).then(function(){m.emit("changed"),d.emit("changed")})},C=function P(e){return R.getEntry(e).then(function(t){if(t)return R.removeEntry(e).then(function(){return T.createEntry(t)}).then(function(){var e=t.ref||[];return t.project&&e.push(t.project),n.all(e.map(P))})})},M=function(e){return w(e).then(function(){m.emit("changed"),d.emit("changed")})},w=function J(e){var t=function(e){return e.id},r=function(e){return"project"===e.type};return T.willRemove(e).then(function(){return T.getEntry(e).then(function(n){if(n)return R.getAll().then(function(n){if(n&&n.length>=100)return R.getFreeItems().then(function(n){if(n[0])return R.removeEntry(n[0].id).then(function(){return i.removeItem(e)})})}).then(function(){return T.removeEntry(e)}).then(function(){return R.createEntry(n)})})}).then(function(){return T.getOrphan(o.map(t),o.filter(r).map(t))}).then(function(e){return n.all(e.map(t).map(J))["catch"](function(e){console.error(e)})})},k=function(e){var t=function(n){return n.project===e.project},r=function(e){return"pattern"===e.type||"song"===e.type},u=function(e){return"song"===e.type},i=function(e){return I(e.id)};return n.all({storage:T.getAll(),builtin:o}).then(function(e){var o=e.storage.concat(e.builtin),a=o.filter(t).filter(r);return a.some(u)&&(a=a.filter(u)),n.all(a.map(i))})},x=function(e,n){var t={};e.forEach(function(e){var r=n(e);t[r]=(t[r]||0)+1});var r,u=0;for(var i in t){var o=t[i];o>u&&(r=i,u=o)}return r},E=function(e){return k(e).then(function(e){return e.length?x(e,function(e){return e.contents.measure}):4})},j=function(e){return k(e).then(function(e){return e.length?x(e,function(e){return e.contents.bpm}):140})},I=function(e){var n=!1;return l.then(function(){var t=o.filter(function(n){return n.id===e})[0];return t?(n=!0,t):T.getEntry(e)}).then(function(t){return i.getItem(e).then(function(r){if(r){var u=MUSIC.Formats.MultiSerializer.deserialize(t.type,r);return{index:{name:t.name,id:t.id,builtIn:n,type:t.type,ref:t.ref||N(t.type,u),updated:!0,project:t.project},contents:u}}if(t)return{index:{name:t.name,id:t.id,builtIn:n,type:t.type,ref:t.ref,project:t.project,noExportable:t.noExportable},contents:JSON.parse(JSON.stringify(a[e]))}})})},F=function(e){var t=e.id||p(),u=e.contents||h[e.type]||{};return n.all({defaultMeasure:E(e),defaultBPM:j(e)}).then(function(e){u.measure=parseInt(e.defaultMeasure),u.bpm=parseInt(e.defaultBPM)}).then(function(){v[t]=v[t]||r(),v[t].registerVersion(JSON.stringify(u));var n=MUSIC.Formats.MultiSerializer.serialize(e.type,u);return i.setItem(t,n)}).then(function(){return T.createEntry({type:e.type,name:e.name,project:e.project,id:t,ref:e.ref})}).then(function(){return R.reload()}).then(function(){return m.emit("changed"),d.emit("changed"),t})["catch"](function(e){})},O=MUSIC.Formats.JSONSerializer,z=MUSIC.Formats.CachedSerializer(MUSIC.Formats.PackedJSONSerializer),U=MUSIC.Formats.HuffmanSerializerWrapper(O),_=MUSIC.Formats.HuffmanSerializerWrapper(z),A=MUSIC.Formats.CachedSerializer(MUSIC.Formats.PackedJSONSerializerB),L=MUSIC.Formats.HuffmanSerializerWrapper(A);MUSIC.Formats.MultiSerializer.setSerializers([{serializer:O,base:"0"},{serializer:z,base:"1"},{serializer:U,base:"2"},{serializer:_,base:"3"},{serializer:A,base:"4"},{serializer:L,base:"5"}]);var T=u("index"),R=u("recycle");R.getAll().then(function(){d.emit("changed")});var B=function(){m.emit("changed"),d.emit("changed")},N=function(e,n){var t=[];return"song"===e?n.tracks.forEach(function(e){for(var n=0;n<e.blocks.length;n++){var r=e.blocks[n].id;r&&t.indexOf(r)===-1&&t.push(r)}}):"pattern"===e&&n.tracks.forEach(function(e){e.instrument&&t.indexOf(e.instrument)===-1&&t.push(e.instrument)}),t},W=function(e){return T.getAll().then(function(n){return n.concat(o).filter(function(n){return n.project===e||n.id===e})})};return{getRefs:N,getProjectFiles:W,undo:function(e){var n=v[e].undo();if(n)return y(e,JSON.parse(n),{noHistory:!0})},redo:function(e){var n=v[e].redo();if(n)return y(e,JSON.parse(n),{noHistory:!0})},purgeFromRecycleBin:b,moveToRecycleBin:M,restoreFromRecycleBin:S,destroyFile:g,createFile:F,changed:B,updateIndex:function(e,t){var r=o.filter(function(n){return n.id===e})[0];return r?(r.name=t.name,m.emit("changed"),n.when(r)):T.updateEntry(e,t).then(function(){m.emit("changed")})},getIndex:function(e){var t=o.filter(function(n){return n.id===e})[0];return t?n.when(t):T.getEntry(e)},updateFile:y,getFile:I,observeRecycled:function(e){return R.reload().then(function(){d.emit("changed")}),d.addListener("changed",e),{destroy:function(){d.removeListener("changed",e)}}},searchRecycled:function(e,n){n=n||{};var t="undefined"==typeof n.limit?10:n.limit,r=function(){return!0};return e&&e.length>0&&(e=e.toLowerCase(),r=function(n){return n.name.toLowerCase().indexOf(e)!==-1}),R.getAll().then(function(e){var n=(e||[]).filter(r).reverse();return{results:t?n.slice(0,t):n,total:n.length}})},search:function(e,r){r=r||{};var u=function(){return!0};e&&e.length>0&&(e=e.toLowerCase(),u=function(n){return n.name.toLowerCase().indexOf(e)!==-1});var i=function(){return!0};r.project?i=function(e){return(!r.type||r.type.indexOf(e.type)!==-1)&&("tempo"===e.type||r.project.indexOf(e.project)!==-1)}:r.type&&(i=function(e){return r.type.indexOf(e.type)!==-1});var a=new EventEmitter,c=function(){l.then(function(){n.all([T.getAll(),o,t.getTypes(e)]).then(function(e){var n=function(e){return!0},t=e[0]||[];t.map(function(e){return e.id});e[1]&&(t=t.concat(e[1].filter(n))),t=t.concat(e[2].map(convertType)),t=t.filter(u).filter(i),a.emit("changed",{results:t.slice(0,15),total:t.length})})})};return{observe:function(e){return a.addListener("changed",e),m.addListener("changed",c),c(),{close:function(){a.removeListener("changed",e),m.removeListener("changed",c)}}}}}}}]);var convertType=function(e){return{type:"fx",name:e.name,id:"type"+e.name,project:"core"}};musicShowCaseApp.factory("pruneWrapper",function(){return function(e){return e._wrapper||(e._wrapper=function(n,t){var r,u=n.sfxBase(),i=e(u,t);return i.dispose?(r=i.dispose.bind(i),i.dispose=function(){r(),u.prune()}):i.dispose=function(){u.prune()},i}),e._wrapper}}),musicShowCaseApp.factory("sfxBaseOneEntryCacheWrapper",function(){return function(e){var n,t,r=function(r,u){return u=u||{},!u.nowrap&&n&&n===r?t:(n=r,t=e(r,u))};return r.update=function(){return e.update.bind(e).apply(null,arguments),r},r}});
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.factory("ErrMessage",["$uibModal","$translate",function(r,e){return function(t,o){var a=r.open({templateUrl:"site/templates/modal/error.html",controller:"errorModalCtrl",windowClass:"error",resolve:{text:function(){return e(o)},title:function(){return e(t)}}});return a}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.factory("Export",["$q","FileRepository",function(n,e){var t=function(n,e){var t=document.createElement("a");document.body.appendChild(t),t.style="display: none";var r=new Blob([JSON.stringify(e)]),o=window.URL.createObjectURL(r);t.href=o,t.download=n+".json",t.click(),window.URL.revokeObjectURL(o)},r=function(n){if("project"===n.index.type)return n.index.ref||[];var t=e.getRefs(n.index.type,n.contents);return n.index.project&&t.push(n.index.project),t},o=function(n,e){return n.concat(e)},i=function d(t){var o=[];return e.getFile(t).then(function(e){return e?e.index.noExportable?[]:(o.push({name:e.index.name,type:e.index.type,id:e.index.id,contents:e.contents,project:e.index.project,ref:e.index.ref}),n.all(r(e).map(d)).then(function(n){return n.forEach(function(n){o=o.concat(n)}),o})):[]})},c=function(n){var e={};return n.forEach(function(n){e[n.id]=n}),Object.keys(e).map(function(n){return e[n]})},u=function(r,u){var p=function(n){return n.id};e.getProjectFiles(u).then(function(e){return n.all(e.map(p).map(i))}).then(function(n){n=n.reduce(o,[]),t(r,c(n))})},p=function(n,e){return i(e).then(function(e){t(n,c(e))})},a=function(t){var r=function(n){return function(){return e.getIndex(n.id).then(function(t){return t?e.updateFile(n.id,n.contents).then(function(){return e.updateIndex(n.id,{name:n.name,project:n.project})}):e.purgeFromRecycleBin(n.id).then(function(){return e.createFile({id:n.id,contents:n.contents,type:n.type,name:n.name,project:n.project,ref:n.ref})})})}};return n.when().then(function(){var n=null,e=JSON.parse(t),o=e[0];return e.forEach(function(e){n=n?n.then(r(e)):r(e)()}),n.then(function(){return{id:o.id,type:o.type,project:o.project}})})};return{exportContents:t,exportFile:p,exportProject:u,importFile:a}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.factory("Index",["$q","$timeout","Sync","_localforage",function(t,n,e,r){function u(t,n){this.id=t,this.file=n,this.stack=(new Error).stack,this.type="cantremove"}u.prototype=new Error;var i=function o(n){var i=new e,c=function(){var t;return t=r.getItem(n).then(function(t){return t||[]})},f=function(t){var n={id:t.id,name:t.name,type:t.type,project:t.project,ref:t.ref};return t.c&&(n.c=t.c),n},a=i.sync(function(t){return c().then(function(e){if(e)return e=e.filter(function(n){return n.id!==t}),r.setItem(n,e.map(f))}).then(c)}),l=function(t){return c().then(function(n){return n?n.filter(function(n){return n.id===t})[0]:null})},p=i.sync(function(t){return c().then(function(e){return e=e||[],o.isolatedContext&&(t.c=o.isolatedContext),e.push(t),r.setItem(n,e.map(f))}).then(c)}),s=i.sync(function(t,e){return c().then(function(u){var i=u.filter(function(n){return n.id===t})[0];return i.name=e.name,i.ref=e.ref,o.isolatedContext&&(i.c=o.isolatedContext),r.setItem(n,u.map(f))}).then(c)}),h=function(){return c().then(function(t){var n=o.isolatedContext;return n?t.filter(function(t){return t.c===n}):t})},m=function(t,n){return t.filter(function(t){return(t.ref||[]).indexOf(n)!==-1})},d=function(t){return"project"===t.type},y=function(t){return t.id},v=function g(n){return c().then(function(e){var r=e.filter(function(t){return t.id===n})[0];if(r){var i=m(e,n);if(0!==i.length){if("project"!==r.type)throw new u(n,r);if(i.some(d))throw new u(n,r);return t.all(i.map(y).map(g))}}})},w=function(t,n){return c().then(function(e){var r=e.filter(d).map(y).concat(n),u=e.map(y).concat(t||[]),i=function(t){return!(!t.project||r.indexOf(t.project)!==-1)||(t.ref||[]).some(function(t){return u.indexOf(t)===-1})};return e.filter(i)})},x=function(){return c().then(function(t){var n={};return t.forEach(function(t){(t.ref||[]).forEach(function(t){n[t]=!0})}),t.filter(function(t){return!n[t.id]})})};return c(),{willRemove:v,reload:c,removeEntry:a,getOrphan:w,getEntry:l,getFreeItems:x,createEntry:p,updateEntry:s,getAll:h}};return i}]);
var musicJs=angular.module("MusicShowCaseApp");musicJs.factory("Midi",["$q","Sync","_localforage",function(n,e,t){var i,u,r,o=new e,s=o.sync(function(n,e){return t.getItem("midiSetup").then(function(i){return i=i||{},i.inputs=i.inputs||{},i.inputs[n]=e,t.setItem("midiSetup",i)})});navigator.requestMIDIAccess&&(r=navigator.requestMIDIAccess({sysex:!1}));var a=function(n){var e=function(){n.onmidimessage=m,n.enabled=!0,s(n.id,!0)},t=function(){n.onmidimessage=null,n.enabled=!1,s(n.id,!1)},i=function(){this.enabled?e():t()},u={enabled:!!n.onmidimessage,enable:e,disable:t,update:i,name:n.name,id:n.id};return u},c=function(){return u.then(function(){return r}).then(function(n){for(var e={connected:!1},t=n.inputs.values(),i=t.next();i&&!i.done;i=t.next())i.value.onmidimessage&&(e.connected=!0);return e})},f=function(){return r.then(function(n){for(var e=[],t=n.inputs.values(),i=t.next();i&&!i.done;i=t.next())e.push(a(i.value));return e})},d=[],p=function(n){var e=function(){d=d.filter(function(e){return e!==n})};return d.push(n),{destroy:e}},m=function(n){i.then(function(e){n.data[1]=n.data[1]-12*e.octave+e.transpose,d.forEach(function(e){e(n)})})},v=function(){i=t.getItem("midiSetup").then(function(n){return n||(n={}),"undefined"==typeof n.octave&&(n.octave=3),"undefined"==typeof n.transpose&&(n.transpose=0),n})};v(),u=n.all({inputs:f(),midiSetup:i}).then(function(n){var e=n.midiSetup;e&&e.inputs&&n.inputs.forEach(function(n){e.inputs[n.id]&&n.enable()})});var l=function(){return i},g=o.sync(function(n){return t.getItem("midiSetup").then(function(e){return e=e||{},e.inputs=e.inputs||{},e.octave=n.octave,e.transpose=n.transpose,t.setItem("midiSetup",e)}).then(v)});return{getInputs:f,registerEventListener:p,getStatus:c,getConfig:l,setConfig:g}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.factory("Recipe",["$q","$timeout","$rootScope","$http","Index","FileRepository",function(t,n,e,r,o,i){var a=["intro","create_a_song","create_an_instrument"],u=[],c={steps:[],currentStep:0},l=function(t,n){var e=c.steps[c.currentStep];e&&e.eventHandler&&e.eventHandler(t,n)},p=function x(t){t=t||c.currentStep;var r=c.steps[t];if(u=[],e.$broadcast("__blink_disable_all"),e.$broadcast("__tooltip_hide_all"),!r)return o.isolatedContext=null,void i.changed();(r.blink||[]).forEach(function(t){u.push(t),e.$broadcast("_blink_enable_"+t)});for(var a in r.tooltip||{})e.$broadcast("_tooltip_display_"+a,{text:r.tooltip[a]});r.duration&&n(function(){c.currentStep<=t&&(c.currentStep=t+1,x())},1e3*r.duration)},s=function(t){return function(n,e){n===t&&(c.currentStep++,p())}},d=function(t,e){return function(r,o){n(function(){t(r,o)},e)}},f=function(t,n){return"s"+t+"_tooltip_"+n},_=function(n){var e=function v(t){return t.next_step_on?s(t.next_step_on):t.delay?d(v(t.inner),t.delay):void 0},a=function(t,r){var o={};for(var i in t.tooltip)o[i]="recipe."+n+"."+f(r,i);return{blink:t.blink,tooltip:o,eventHandler:e(t.eventHandler),duration:t.duration}},u=function(t){return i.destroyFile(t.index.id).then(function(){return i.createFile({id:t.index.id,type:t.index.type,project:t.index.project,name:t.index.name,contents:t.contents})})},l=function(n){return t.all((n.data.files||[]).map(u)).then(function(){return n})},_=function(t){return t.data.project&&(document.location="#/editor/"+t.data.project),t};return r.get("recipes/"+n+".json").then(l).then(_).then(function(t){var n=t.data;t.data.isolatedContext&&(o.isolatedContext=t.data.isolatedContext+Math.floor(Date.now()/1e3),i.changed()),c.steps=n.steps.map(a),c.currentStep=0,p()})};_.raise=function(t){l(t)};var v=function(n){var e=n.key,o=function(t){return r.get("recipes/"+t+".json").then(function(t){var n=t.data;if(!n.lang)return{};var r=n.lang.indexOf(e);if(r===-1)return{};var o={};return n.steps.forEach(function(t,n){if(t.tooltip)for(var e in t.tooltip){var i=t.tooltip[e],a=f(n,e);Array.isArray(i)?o[a]=i[r]:0===r&&(o[a]=i)}}),o})},i={};return a.forEach(function(t){i[t]=o(t)}),t.all(i).then(function(t){return{recipe:t}})},h=function(){return u};return{start:_,step:p,handleEvent:l,loadTranslations:v,getBlinks:h}}]);
var musicJs=angular.module("MusicShowCaseApp");musicJs.factory("Sync",["$q",function(n){return function(){var t=n.when();this.sync=function(r){return function(){var c=arguments,e=this,u=n.defer();return t=t.then(function(){return r.apply(e,c).then(function(n){u.resolve(n)})["catch"](function(n){u.reject(n)})}),u.promise}}}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.factory("translationsLoader",["$q","TypeService","esTranslations","enTranslations","Recipe",function(n,a,e,r,s){return function(o){var i={};"es"===o.key&&(i=e),"en"===o.key&&(i=r);var t=function(n){for(var a in n)i[a]=n[a]};return n.all({typeTranslations:a.loadTranslations(o),recipeTranslations:s.loadTranslations(o)}).then(function(n){return t(n.typeTranslations),t(n.recipeTranslations),i})}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp"),ObjectCache=function(){var n=new WeakMap;this.get=function(e,t){var r=n.get(e),i=JSON.stringify(t);if(r){var u=r.filter(function(n){return n.obj===i})[0];return u&&u.value}},this.set=function(e,t,r){var i=n.get(e),u=JSON.stringify(t);i||(i=[]);var a=i.filter(function(n){return n.obj===u})[0];a?a.value=r:i.push({obj:u,value:r}),i.length>8&&(i=i.slice(1)),n.set(e,i)}};musicShowCaseApp.service("TypeService",["$http","$q",function($http,$q){var make_mutable=function(n,e){var t=new ObjectCache,r=function(n,e){var r=e.prune;return e.prune=function(){if(t=new ObjectCache,r)return r.apply(this,arguments)},function(r){return function(i,u){var a=e;return a.getOriginal&&(a=a.getOriginal()),t.set(a,n,i),r(i,u)}}};return function(i,u,a){var o,s=[];if(o=e&&e.reusableNode?function(e,o){var s=u[0],p=n(i,u.map(r(i,e)),a),l=e;l.getOriginal&&(l=l.getOriginal());var c=t.get(l,i);return c?s(c):p(e,o)}:n(i,u,a),o.update)return o;var p,l=function(n,e){var t,r={},i=o,u=function(n){r[n]=function(){return i!=o&&a(),t[n].apply(t,arguments)}},a=function(){var r=o(n,e);r!==t&&t&&t.dispose&&t.dispose(),t=r,s.push(r),i=o;for(var a in t)u(a)};return a(),r};return l.update=function(e,t){return a=t,JSON.stringify(e)===p?l:(p=JSON.stringify(e),s.forEach(function(n){n.dispose&&n.dispose()}),s=[],o=n(e,u,a),l)},l}},plugins=["core"],types=[],translation={},m=function(n){return{lang:function(e,t){translation[e]=translation[e]||{},translation[e][n]=t},type:function(e,t,r){types.push({templateUrl:"site/plugin/"+n+"/"+t.template+".html",parameters:t.parameters,constructor:make_mutable(r,{reusableNode:t.reusableNode}),name:e,composition:t.composition,components:t.components,description:t.description,_default:t._default,subobjects:t.subobjects,stackAppend:t.stackAppend,monitor:t.monitor})}}},loadPlugin=function loadPlugin(pluginName){return $http.get("site/plugin/"+pluginName+"/index.js").then(function(result){var runnerCode=result.data,module={"export":function(){}};eval(runnerCode),module["export"](m(pluginName))})},pluginsLoaded=$q.all(plugins.map(loadPlugin)),getTypes=function(n){var e=function(){return!0};return n&&(n=n.toLowerCase(),e=function(e){return e.name.toLowerCase().indexOf(n)!==-1}),pluginsLoaded.then(function(){return types.filter(e)})},getType=function(n,e){return pluginsLoaded.then(function(){var t=types.filter(function(e){return e.name===n})[0];return e&&e(t),t})},loadTranslations=function(n){return pluginsLoaded.then(function(){return translation[n.key]||{}})};return{getTypes:getTypes,getType:getType,loadTranslations:loadTranslations}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.factory("WelcomeMessage",["localforage",function(e){var o=function(){return e.getItem("welcome_skip").then(function(e){return!!e})},t=function(o){return o?e.setItem("welcome_skip",o):e.removeItem("welcome_skip")};return{setSkip:t,skip:o}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.factory("_localforage",["$q","localforage",function(e,t){var n=t.getItem.bind(t),r=function m(n,r){if(0===n.length)return e.when(n);if(r<=0)return e.when(n);var u=n.shift();return t.getItem(u.id).then(function(e){return t.removeItem(u.id).then(function(){return m(n,r-(e?e.length:0))})})},u=function(e){return{id:e.id,name:e.name,type:e.type}},i=function(e){return t.getItem("recycle").then(function(t){return r(t,e)}).then(function(e){return t.setItem("recycle",e.map(u))})},o=function f(e,n,r){return t.setItem(e,n)["catch"](function(t){if(!r)return i(n.length).then(function(){return f(e,n,!0)});throw t})},c=t.removeItem.bind(t);return{getItem:n,setItem:o,removeItem:c}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.filter("instrument_name",function(){return function(e,t){return t[e]&&t[e]?t[e].name:e}}),musicShowCaseApp.filter("instrument_type",function(){return function(e,t){return t[e]&&t[e]?t[e].type:"instrument"}}),musicShowCaseApp.filter("block_name",function(){return function(e,t){return t[e.id]&&t[e.id].index?t[e.id].index.name:e.id}}),musicShowCaseApp.filter("block_length",["Pattern",function(e){return function(t,n,o){return t.id&&n[t.id]&&n[t.id].contents?e.computeMeasureCount(n[t.id].contents,o):1}}]),musicShowCaseApp.controller("recordOptionsCtrl",["$scope","$uibModalInstance","Recipe",function(e,t,n){e.numChannels=2,e.encoding="wav",e.recipe=n.start,e.cancel=function(){t.dismiss()},e.start=function(){e.recipe.raise("song_rec_confirm"),t.close({encoding:e.encoding,numChannels:e.numChannels})}}]),musicShowCaseApp.controller("DashboardController",["$scope",function(e){e.$emit("switchProject","default")}]),musicShowCaseApp.controller("ProjectDashboardController",["$scope","$routeParams",function(e,t){e.$emit("switchProject",t.project)}]),musicShowCaseApp.controller("SongEditorController",["$scope","$uibModal","$q","$timeout","$routeParams","$http","MusicContext","FileRepository","InstrumentSet","Pattern","Export","TICKS_PER_BEAT","SONG_MAX_TRACKS",function(e,t,n,o,i,r,c,l,a,u,s,f,p){e.indexMap={};var d=i.id,m=a(),h=0;e.$emit("switchProject",i.project);var y=function(t){var n=154/e.file.measure,o=1;return f*t/o/n};e.seek=function(t){e.currentRec||(h=y(t.offsetX),e.$broadcast("resetClock",h),e.playing&&(e.playing.stop(),e.playing=null,e.replay()))},e.patternEdit=function(e){document.location="#/editor/"+i.project+"/pattern/"+e.id},e.exportItem=function(){s.exportFile(e.fileIndex.name,e.fileIndex.id)},e.removeItem=function(){return e.fileIndex.builtIn?(e.file=null,e.fileIndex=null,void l.destroyFile(d).then(function(){k()})):void l.moveToRecycleBin(d).then(function(){document.location="#/editor/"+i.project})},e.remove=function(t){delete t.id,g(),e.fileChanged()},e.currentRec=null,e.record=function(){e.playing&&(e.playing.stop(),e.playing=null,e.$broadcast("pauseClock"));var n=t.open({templateUrl:"site/templates/modal/recordOptions.html",controller:"recordOptionsCtrl"});n.result.then(function(t){e.currentRec=c.record({encoding:t.encoding,numChannels:t.numChannels},function(n){var o=document.createElement("a");document.body.appendChild(o),o.style="display: none";var i=window.URL.createObjectURL(n);o.href=i,o.download=e.fileIndex.name+"."+t.encoding,o.click(),window.URL.revokeObjectURL(i),e.recipe.raise("song_rec_stop")}),e.play()})},e.stop=function(){h=0,e.$broadcast("stopClock"),e.$broadcast("resetClock",h),e.playing&&e.playing.stop(),e.recipe.raise("song_play_stopped"),e.playing=null},e.playing=null,e.$on("pausedClock",function(e,t){h=t}),e.play=function(){return e.playing?(e.playing.stop(),e.playing=null,void e.$broadcast("pauseClock")):void e.replay()},e.replay=function(){c.resumeAudio(),n.all(m.all).then(function(t){var n={},i=function(o,i){if(!o)return null;if(n[o])return n[o];var r=e.indexMap[o].contents,c=Object.create(r);return c.bpm=e.file.bpm,n[o]=u.patternCompose(c,t,i*p,function(){}),n[o]},r=new MUSIC.Song(e.file.tracks.map(function(e,t){return e.blocks.map(function(e){return i(e.id,t)})}),{measure:e.file.measure,bpm:e.file.bpm,ticks_per_beat:f,start:h});e.$broadcast("startClock",r.timeToTicks()),e.playing=r.play({onStop:function(){e.$broadcast("stopClock"),e.$broadcast("resetClock",h),e.recipe.raise("song_play_stopped"),e.playing=null,e.currentRec&&e.currentRec.stop(),e.currentRec=null,o(function(){})}})})},e.indexChanged=function(){e.fileIndex.ref=l.getRefs("song",e.file),l.updateIndex(d,e.fileIndex)},e.fileChanged=fn.debounce(function(){l.updateFile(d,e.file).then(function(){e.indexChanged()})},100);var g=function(){var t=0,n=0;if(e.file&&e.file.tracks){e.file.tracks.forEach(function(o,i){for(var r=0;r<o.blocks.length;r++)if(o.blocks[r].id){var c=u.computeMeasureCount(e.indexMap[o.blocks[r].id].contents,e.file.measure);r+c>t&&(t=r+c),i>n&&(n=i)}}),e.file.tracks.length<n+2&&e.file.tracks.length<p?e.file.tracks.push({blocks:e.file.tracks[0].blocks.map(function(){return{}})}):e.file.tracks=e.file.tracks.slice(0,n+2);var o=t+1;e.file.tracks.forEach(function(e){if(o>e.blocks.length)for(var t=o-e.blocks.length,n=0;n<t;n++)e.blocks.push({});else e.blocks=e.blocks.slice(0,o)}),e.fileChanged()}};e.$watch("file.measure",g),e.onDropComplete=function(t,n,o,i){if(t.fromBlock){var r=o.id;return o.id=t.fromBlock.id,t.fromBlock.id=r,void g()}"pattern"===t.type&&(o.id=t.id,l.getFile(t.id).then(function(n){n.contents.tracks.forEach(function(e,t){e.instrument&&m.load(e.instrument,i*p+t)}),e.indexMap[t.id]=n,g(),e.fileChanged(),e.recipe.raise("song_pattern_dropped")}))};var k=function(){var t={};l.getFile(d).then(function(i){return i&&i.contents.tracks.forEach(function(e,n){e.blocks.forEach(function(e){e&&e.id&&(t[e.id]||(t[e.id]=l.getFile(e.id).then(function(e){return{file:e,idx:n}})))})}),n.all(t).then(function(t){e.indexMap={};for(var n in t){var o=t[n].file.contents,i=t[n].idx;e.indexMap[n]=t[n].file,o.tracks.forEach(function(e,t){e.instrument&&m.load(e.instrument,i*p+t)})}}).then(function(){o(function(){e.fileIndex=i.index,e.file=i.contents})})})};k();var v=function(e){"input"!==document.activeElement.tagName.toLowerCase()&&(90===e.keyCode&&e.ctrlKey&&l.undo(d).then(k),89===e.keyCode&&e.ctrlKey&&l.redo(d).then(k))};$(document).bind("keydown",v),e.$on("$destroy",function(){$(document).unbind("keydown",v),m.dispose()})}]),musicShowCaseApp.controller("PatternEditorController",["$q","$translate","$scope","$timeout","$routeParams","$http","TICKS_PER_BEAT","MusicContext","FileRepository","Pattern","InstrumentSet","Export","ErrMessage",function(e,t,n,o,i,r,c,l,a,u,s,f,p){var d=i.id,m=0;n.exportItem=function(){f.exportFile(n.fileIndex.name,n.fileIndex.id)},n.$emit("switchProject",i.project),n.instrumentEdit=function(e){document.location="#/editor/"+i.project+"/instrument/"+e.instrument},n.instrumentMap={},n.beatWidth=10,n.zoomLevel=8,n.selectedTrack=0,n.mutedState=[];var h=s(),y=function(e){var t=10;return c*e/n.zoomLevel/t};n.seek=function(e){m=y(e.offsetX+n.file.scrollLeft),n.$broadcast("resetClock",m),n.playing&&(n.playing.stop(),n.playing=null,n.replay())},n.updateMuted=function(){n.mutedState=u.getMutedState(n.file),n.fileChanged(),n.file.tracks.forEach(function(e,t){h.mute(t,n.mutedState[t])})},n.removeItem=function(){return n.fileIndex.builtIn?(n.file=null,n.fileIndex=null,void a.destroyFile(d).then(function(){b()})):void a.moveToRecycleBin(d).then(function(){document.location="#/editor/"+i.project})["catch"](function(e){if(!e.type||"cantremove"!==e.type)throw e;p("common.error_title","common.cantremove_error")})},n.removeTrack=function(e){n.file.tracks=n.file.tracks.slice(0,e).concat(n.file.tracks.slice(e+1)),n.file.selectedTrack=n.file.selectedTrack%n.file.tracks.length,n.updateMuted(),n.fileChanged()},n.addTrack=function(){n.file.tracks.push({events:[],scroll:1e3}),n.file.selectedTrack=n.file.tracks.length-1,n.updateMuted(),n.fileChanged()},n.stop=function(){m=0,n.$broadcast("stopClock"),n.$broadcast("resetClock",m),n.playing&&n.playing.stop(),n.recipe.raise("song_play_stopped"),n.playing=null},n.$on("pausedClock",function(e,t){m=t}),n.play=function(){return n.playing?(n.playing.stop(),n.playing=null,void n.$broadcast("pauseClock")):void n.replay()},n.replay=function(){l.resumeAudio();$(".playing-line");e.all(h.all).then(function(e){n.playing&&n.playing.stop();var t=function(){n.$broadcast("stopClock"),n.$broadcast("resetClock"),n.recipe.raise("pattern_play_stopped"),o(function(){n.playing=null}),m=0},i=u.patternCompose(n.file,e,0,t,{start:m});n.playing=i.play();var r=i.timeToTicks();n.$broadcast("startClock",r)})},n.zoomIn=function(){n.zoomLevel=2*n.zoomLevel,n.zoomLevel>32&&(n.zoomLevel=32)},n.zoomOut=function(){n.zoomLevel=n.zoomLevel/2,n.zoomLevel<1&&(n.zoomLevel=1)},n.indexChanged=function(){n.fileIndex.ref=a.getRefs("pattern",n.file),a.updateIndex(d,n.fileIndex)},n.fileChanged=fn.debounce(function(){a.updateFile(d,n.file).then(n.indexChanged)},100),n.$on("trackChanged",function(e){v(),n.fileChanged()});var g,k=function(e,t){e&&e.note&&(g&&g.stop(),g=e.note(t).play(),setTimeout(function(){g&&g.stop(),g=null},50))},v=function(){n.file&&n.file.tracks[0]&&(n.file.measureCount=u.computeMeasureCount(n.file,n.file.measure))},C=function(e){return n.mutedState[n.file.tracks.indexOf(e)]};n.$on("eventChanged",function(e,t){v(),t.oldevt.n===t.evt.n||C(t.track)||k(x.get(t.track),t.evt.n),n.fileChanged()}),n.$on("eventSelected",function(e,t){C(t.track)||k(x.get(t.track),t.evt.n)}),n.$watch("file.measure",v);var x=new WeakMap;n.updateInstrument=function(t){if(n.file.tracks[t]&&n.file.tracks[t].instrument)return e.all({musicObject:h.load(n.file.tracks[t].instrument,t),index:a.getIndex(n.file.tracks[t].instrument)}).then(function(e){return n.instrumentMap[n.file.tracks[t].instrument]=e.index,e.musicObject&&x.set(n.file.tracks[t],e.musicObject),e.musicObject})},n.onDropComplete=function(e,t){if(l.resumeAudio(),"instrument"===e.type||"tempo"===e.type){var o=n.file.selectedTrack;n.file.tracks=n.file.tracks||[],n.file.tracks[o]=n.file.tracks[o]||{},n.file.tracks[o].instrument=e.id,a.updateFile(d,n.file),n.updateInstrument(o).then(function(e){n.updateMuted(),n.mutedState[o]||k(e,36)})}};var b=function(){a.getFile(d).then(function(e){o(function(){n.fileIndex=e.index,n.file=e.contents,n.mutedState=u.getMutedState(n.file),n.updateMuted(),n.file.tracks||(n.file.tracks=[{}]),n.file.tracks.forEach(function(e,t){e.events=e.events||[],n.updateInstrument(t)})})})};b();var j=function(e){"input"!==document.activeElement.tagName.toLowerCase()&&(90===e.keyCode&&e.ctrlKey&&a.undo(d).then(b),89===e.keyCode&&e.ctrlKey&&a.redo(d).then(b))},w=$("button.play-button");w.bind("click",l.resumeAudio),$(document).bind("keydown",j),n.$on("$destroy",function(){w.unbind("click",l.resumeAudio),$(document).unbind("keydown",j),h.dispose()}),n.$on("enableTrack",function(e,t){n.file.selectedTrack=n.file.tracks.indexOf(t)}),n.$on("patternSelectEvent",function(e,t){o(function(){n.$broadcast("trackSelectEvent",t)})})}]),musicShowCaseApp.controller("EditorController",["$scope","$q","$timeout","$routeParams","$http","MusicContext","FileRepository","MusicObjectFactory","Export",function(e,t,n,o,i,r,c,l,a){var u=o.id;e.$emit("switchProject",o.project),e.exportItem=function(){a.exportFile(e.fileIndex.name,e.fileIndex.id)},e.removeItem=function(){return p(),e.fileIndex.builtIn?(e.file=null,e.fileIndex=null,void c.destroyFile(u).then(function(){y()})):void c.moveToRecycleBin(u).then(function(){document.location="#/editor/"+o.project})["catch"](function(e){if(!e.type||"cantremove"!==e.type)throw e;ErrMessage("common.error_title","common.cantremove_error")})};var s,f=l({monitor:!0}),p=function(){return(e.instruments||[]).forEach(function(e){e.dispose&&e.dispose()}),(e.playables||[]).forEach(function(t){e.stopPlay(t)}),f.destroyAll()},d=function(e){var t,n,o=function(e){return e.stop()},i=function(e){return e.play()},r=function(r){if(n)return n.note(r);var c;t||(t=e()),c=t.then(function(e){return n=e,e.note(r)});var l=function(){var e=c.then(i),t=function(){return e.then(o)};return{stop:t}};return{play:l}};return MUSIC.instrumentExtend({note:r}).stopDelay(10)},m=function(){return f.create(e.file)},h=fn.debounce(function(n,o){e.file&&t.when(null).then(function(){return p()}).then(function(){return d(m)}).then(function(t){return t?(t!==s&&(e.instruments=[],e.playables=[],t.note?e.instruments.push(t):t.play&&e.playables.push(t)),o&&(c.updateFile(u,e.file),e.fileIndex.updated=!0),void(s=t)):(e.instruments=[],void(e.playables=[]))})},250);e.$watch("file",h,!0),e.indexChanged=function(){c.updateIndex(u,e.fileIndex)};var y=function(){c.getFile(u).then(function(t){n(function(){var o={};e.outputFile=o,e.file=t.contents,e.fileIndex=t.index,e.observer={},e.observer.notify=function(){n(function(){e.instruments=[],e.playables=[]})}})})};y(),e.$on("stackChanged",function(){e.resetStack=!0,h()}),e.$on("$destroy",p),e.startPlay=function(e){e.playing=e.play()},e.stopPlay=function(e){e.playing&&(e.playing.stop(),e.playing=void 0)}}]),musicShowCaseApp.controller("MainController",["$q","$scope","$timeout","$uibModal","$translate","MusicContext","FileRepository","Recipe","WelcomeMessage","localforage","Export","ErrMessage",function(e,t,n,o,i,r,c,l,a,u,s,f){t.$on("switchProject",function(e,t){d(t)});var p,d=function(e){return c.getFile(e).then(function(n){return t.project=n,(n.index.ref||[]).concat([e])}).then(function(e){t.projectFilter=e.concat(["core"]),e.indexOf("default")!==-1&&t.projectFilter.push(void 0)}).then(m)["catch"](function(){document.location="#"})},m=fn.debounce(function(){p&&p.close(),p=c.search(null,{project:t.projectFilter,type:["instrument","pattern","song","fx"]}).observe(function(e){n(function(){t.filesTotal=e.total,t.files=e.results})})},100);t.fileInputClick=function(){n(function(){$(".choose-file-import-container input[type=file]").click()})},t.fileImport=function(t){for(var n,r=function(t){return e(function(e,n){var o=new FileReader;o.onload=function(t){e(t.target.result)},o.onerror=function(e){n(e)},o.readAsText(t)})},c=function(e){return function(t){return r(e).then(function(e){return s.importFile(e).then(function(e){t&&t.first&&(n="project"===e.type?"#/editor/"+e.id:"#/editor/"+e.project+"/"+e.type+"/"+e.id)})})}},l=null,a=0;a<t.length;a++)l=l?l.then(c(t[a])):c(t[a])({first:!0});l&&l.then(function(e){n&&(document.location=n)})["catch"](function(e){o.open({templateUrl:"site/templates/modal/error.html",controller:"errorModalCtrl",windowClass:"error",resolve:{text:function(){return i("common.loader_error")},title:function(){return i("common.error_title")}}})})},t.changeLanguage=function(e){u.setItem("lang",e),i.use(e)},u.getItem("lang").then(function(e){e&&t.changeLanguage(e),n(function(){t.langLoaded=!0})}),t.welcome=function(){o.open({templateUrl:"site/templates/modal/welcome.html",controller:"welcomeModalCtrl",resolve:{dontshowagain:["WelcomeMessage",function(e){return e.skip()}]}})},t.openRecycleBin=function(){o.open({templateUrl:"site/templates/modal/recycleBin.html",controller:"recycleBinModalCtrl"})},a.skip().then(function(e){e||t.welcome()}),t.recipe=l.start,t.activate=function(e){"instrument"!==e.type&&"song"!==e.type&&"pattern"!==e.type||(document.location="#/editor/"+t.project.index.id+"/"+e.type+"/"+e.id),"project"===e.type&&(document.location="#/editor/"+e.id)},t.keywordUpdated=fn.debounce(function(){p&&p.close(),p=c.search(t.searchKeyword,{project:t.projectFilter,type:["instrument","pattern","song","fx","tempo"]}).observe(function(e){t.filesTotal=e.total,t.files=e.results})},200),t.removeProject=function(){c.moveToRecycleBin(t.project.index.id).then(function(){document.location="#"})["catch"](function(e){if(!e.type||"cantremove"!==e.type)throw e;f("common.error_title","common.cantremove_project_error")})},t.exportProject=function(){s.exportProject(t.project.index.name,t.project.index.id)},t.projectSettings=function(){o.open({templateUrl:"site/templates/modal/projectSettings.html",controller:"projectSettingsModalCtrl",resolve:{project:{name:t.project.index.name,ref:t.project.index.ref},buttonText:function(){return"common.ok"}}}).result.then(function(e){t.project.index.name=e.name,c.updateIndex(t.project.index.id,{type:"project",name:e.name,ref:e.ref}).then(function(){d(t.project.index.id)})})},t.newProject=function(){i("project.new").then(function(e){o.open({templateUrl:"site/templates/modal/projectSettings.html",controller:"projectSettingsModalCtrl",resolve:{project:{name:e},buttonText:function(){return"common.create"}}}).result.then(function(e){c.createFile({type:"project",name:e.name,ref:e.ref}).then(function(e){document.location="#/editor/"+e})})})},t.openProject=function(){o.open({templateUrl:"site/templates/modal/openProject.html",controller:"openProjectModalCtrl"}).result.then(function(e){var t=function(e,t){return e.type===t.type?(e.ref||[]).length>(t.ref||[]).length?e:t:"song"===e.type?e:"song"===t.type?t:"pattern"===e.type?e:"pattern"===t.type?t:t};return c.getProjectFiles(e).then(function(n){if(n.length>0){var o=n.reduce(t,n[0]);o&&"project"!==o.type?document.location="#/editor/"+e+"/"+o.type+"/"+o.id:document.location="#/editor/"+e}else document.location="#/editor/"+e})})},t.newInstrument=function(){i("common.new_instrument").then(function(e){return c.createFile({type:"instrument",name:e,project:t.project.index.id})}).then(function(e){document.location="#/editor/"+t.project.index.id+"/instrument/"+e})["catch"](function(e){})},t.newSong=function(){i("common.new_song").then(function(e){return c.createFile({type:"song",name:e,project:t.project.index.id})}).then(function(e){document.location="#/editor/"+t.project.index.id+"/song/"+e})},t.newPattern=function(){i("common.new_pattern").then(function(e){return c.createFile({type:"pattern",name:e,project:t.project.index.id})}).then(function(e){document.location="#/editor/"+t.project.index.id+"/pattern/"+e})},t.about=function(){o.open({templateUrl:"site/templates/modal/about.html",controller:"infoModalCtrl"})},t.help=function(){o.open({templateUrl:"site/templates/modal/help.html",controller:"infoModalCtrl"})},t.todo=function(){o.open({templateUrl:"todoModal.html",controller:"todoModalCtrl"})}}]),musicShowCaseApp.controller("todoModalCtrl",["$scope","$uibModalInstance",function(e,t){e.dismiss=function(){t.dismiss()}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.controller("errorModalCtrl",["$scope","$uibModalInstance","text","title",function(s,t,e,i){s.text=e,s.title=i,s.dismiss=function(){t.dismiss()}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.controller("infoModalCtrl",["$scope","$uibModalInstance",function(s,o){s.dismiss=function(){o.dismiss()}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.controller("midiSettingsModalCtrl",["$scope","$q","$timeout","$uibModalInstance","Midi",function(n,o,i,t,e){e.getInputs().then(function(o){n.inputs=o}),e.getConfig().then(function(o){n.config=o}),n.updateConfig=function(){e.setConfig(n.config)},n.done=function(){t.close()}}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.controller("openProjectModalCtrl",["$q","$scope","$uibModalInstance","FileRepository",function(e,o,c,s){var n,t=function(){n&&n.close(),n=s.search(o.searchKeyword,{type:["project"]}).observe(function(e){o.filesTotal=e.total,o.files=e.results})};o.updateSearch=fn.debounce(t,250),o.cancel=function(){c.dismiss()},o.select=function(e){o.selected=e},o.open=function(e){c.close(e)},t()}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.controller("projectSettingsModalCtrl",["$q","$scope","$uibModalInstance","FileRepository","project","buttonText",function(e,t,n,o,r,c){var i,s=function(){i&&i.close(),i=o.search(t.searchKeyword,{type:["project"]}).observe(function(e){t.filesTotal=e.total,t.files=e.results})};t.project=r,t.buttonText=c;var u=function(e){return o.getFile(e).then(function(e){return e.index})};t.refs=[],e.all((t.project.ref||[]).map(u)).then(function(e){t.refs=e}),t.updateSearch=fn.debounce(s,250),t.cancel=function(){n.dismiss()},t.done=function(){t.project.ref=t.refs.map(f),n.close(t.project)};var f=function(e){return e.id};t.remove=function(e){t.refs=t.refs.filter(function(t){return t.id!==e.id})},t.add=function(e){t.refs.map(f).indexOf(e.id)===-1&&t.refs.push(e)},s()}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.controller("recycleBinModalCtrl",["$scope","$timeout","$uibModalInstance","FileRepository",function(e,o,i,c){e.dismiss=function(){i.dismiss()};var n=function(){c.searchRecycled(e.searchKeyword,{limit:10}).then(function(i){o(function(){e.files=i.results,e.filesTotal=i.total})})};e.updateSearch=fn.debounce(n,250),e.restoreFromRecycleBin=function(e){c.restoreFromRecycleBin(e.id).then(n)},n()}]);
var musicShowCaseApp=angular.module("MusicShowCaseApp");musicShowCaseApp.controller("welcomeModalCtrl",["$q","$scope","$uibModalInstance","Recipe","WelcomeMessage","dontshowagain",function(n,o,i,s,t,a){o.dontshowagain=a;var e=n.when(null);o.updateSkip=function(){e=t.setSkip(o.dontshowagain)},o.dismiss=function(){e.then(function(){i.dismiss()})},o.tutorial=function(){e.then(function(){i.dismiss(),s.start("intro")})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpdGUvYXBwLmpzIiwic2l0ZS9sYW5nL2VuLmpzIiwic2l0ZS9sYW5nL2VzLmpzIiwic2l0ZS9sYW5nU2V0dGluZ3MuanMiLCJzaXRlL3JvdXRlcy5qcyIsInNpdGUvZGlyZWN0aXZlcy5qcyIsInNpdGUvZGlyZWN0aXZlcy9mdW5jdGlvbkdyYXBoLmpzIiwic2l0ZS9kaXJlY3RpdmVzL2tleWJvYXJkLmpzIiwic2l0ZS9kaXJlY3RpdmVzL211c2ljRXZlbnRFZGl0b3IuanMiLCJzaXRlL2RpcmVjdGl2ZXMvbmdmRHJvcC5qcyIsInNpdGUvZGlyZWN0aXZlcy9uZ2ZMb2FkZXIuanMiLCJzaXRlL2RpcmVjdGl2ZXMvcGF0dGVyblRyYWNrQ29tcGFjdFZpZXcuanMiLCJzaXRlL2RpcmVjdGl2ZXMvcGxheWluZ0xpbmUuanMiLCJzaXRlL2RpcmVjdGl2ZXMvcmVjaXBlQmxpbmsuanMiLCJzaXRlL2RpcmVjdGl2ZXMvcmVjaXBlVG9vbHRpcC5qcyIsInNpdGUvZGlyZWN0aXZlcy9yZWNpcGVXaXphcmQuanMiLCJzaXRlL2RpcmVjdGl2ZXMvcmVjeWNsZUJpbkNvbXBhY3RWaWV3LmpzIiwic2l0ZS9kaXJlY3RpdmVzL3R5cGVJY29uLmpzIiwic2l0ZS9zZXJ2aWNlcy5qcyIsInNpdGUvc2VydmljZXMvZXJyTWVzc2FnZS5qcyIsInNpdGUvc2VydmljZXMvZXhwb3J0LmpzIiwic2l0ZS9zZXJ2aWNlcy9pbmRleC5qcyIsInNpdGUvc2VydmljZXMvbWlkaS5qcyIsInNpdGUvc2VydmljZXMvcmVjaXBlLmpzIiwic2l0ZS9zZXJ2aWNlcy9zeW5jLmpzIiwic2l0ZS9zZXJ2aWNlcy90cmFuc2xhdGlvbnNMb2FkZXIuanMiLCJzaXRlL3NlcnZpY2VzL3R5cGVTZXJ2aWNlLmpzIiwic2l0ZS9zZXJ2aWNlcy93ZWxjb21lTWVzc2FnZS5qcyIsInNpdGUvc2VydmljZXMvX2xvY2FsZm9yYWdlLmpzIiwic2l0ZS9jb250cm9sbGVycy5qcyIsInNpdGUvY29udHJvbGxlcnMvZXJyb3JNb2RhbEN0cmwuanMiLCJzaXRlL2NvbnRyb2xsZXJzL2luZm9Nb2RhbENvbnRyb2xsZXIuanMiLCJzaXRlL2NvbnRyb2xsZXJzL21pZGlTZXR0aW5nc01vZGFsQ3RybC5qcyIsInNpdGUvY29udHJvbGxlcnMvb3BlblByb2plY3RNb2RhbEN0cmwuanMiLCJzaXRlL2NvbnRyb2xsZXJzL3Byb2plY3RTZXR0aW5nc01vZGFsQ3RybC5qcyIsInNpdGUvY29udHJvbGxlcnMvcmVjeWNsZUJpbk1vZGFsQ3RybC5qcyIsInNpdGUvY29udHJvbGxlcnMvd2VsY29tZU1vZGFsQ3RybC5qcyJdLCJuYW1lcyI6WyJtdXNpY1Nob3dDYXNlQXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbnN0YW50IiwiTVVTSUMiLCJsb2NhbGZvcmFnZSIsImVuVHJhbnNsYXRpb25zIiwibWlkaSIsInNldHRpbmdzIiwiaW5wdXRzIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiZXZlbnRzIiwib2N0YXZlIiwidHJhbnNwb3NlIiwib3Blbl9wcm9qZWN0IiwicDEiLCJ0aXRsZSIsImFycmF5X2VkaXRvciIsInRvb2x0aXAiLCJyZW1vdmVfaXRlbSIsImFkZF9pdGVtIiwiZWRpdF9pdGVtIiwiaW5kZXgiLCJub3RfaW1wbGVtZW50ZWQiLCJmaWx0ZXIiLCJ0eXBlIiwiaW5zdHJ1bWVudCIsInBhdHRlcm4iLCJzb25nIiwiZngiLCJ0eXBlX3AxIiwidHlwZV9wMiIsInByb2plY3QiLCJiYXNpY19pbmZvIiwicmVmZXJlbmNlcyIsIm5ldyIsIm1lbnUiLCJuZXdfaW5zdHJ1bWVudCIsIm5ld19wYXR0ZXJuIiwibmV3X3NvbmciLCJuZXdfcHJvamVjdCIsImZpbGVfaW1wb3J0IiwidG9vbHMiLCJ0b29sc19wcmVmZXJlbmNlcyIsImhlbHBfdmlld19oZWxwIiwiaGVscF9yZWNpcGVzIiwiaGVscF9yZWNpcGVzX2ludHJvIiwiaGVscF9yZWNpcGVzX2hvd3RvX2NyZWF0ZV9zb25nIiwiaGVscF9yZWNpcGVzX2hvd3RvX2NyZWF0ZV9pbnN0cnVtZW50IiwiaGVscF9jb250ZXh0dWFsX2hlbHAiLCJoZWxwX3dlbGNvbWUiLCJoZWxwX2Fib3V0IiwicmVjeWNsZV9iaW4iLCJwcmVmZXJlbmNlcyIsImhlbHAiLCJwcm9qZWN0X3NldHRpbmdzIiwicHJvamVjdF9yZW1vdmVfcHJvamVjdCIsInByb2plY3RfZXhwb3J0X3Byb2plY3QiLCJjb250ZXh0dWFsX2hlbHAiLCJlbmFibGUiLCJkaXNhYmxlIiwicmVjeWNsZSIsInAyIiwicDMiLCJjb21wYWN0X3RpdGxlIiwiY29tcGFjdF9oaW50X3Jlc3RvcmUiLCJjb21wYWN0X2hpbnRfb3BlbiIsIkVNUFRZIiwid2VsY29tZSIsIm5ldmVyc2hvdyIsImFib3V0IiwiYXV0aG9ycyIsImlfYW0iLCJjcmVkaXQiLCJtb2hheW9uYW8iLCJoaWd1bWEiLCJrcmlzdG9wb2xvdXMiLCJjb250cmlidXRlIiwiY29udGFjdF9tZSIsImNvbW1vbiIsInllcyIsIm5vIiwib2siLCJkaXNtaXNzIiwiY2FuY2VsIiwiY3JlYXRlIiwib3BlbiIsIm5hbWUiLCJsYW5ndWFnZSIsImxvYWRlcl9lcnJvciIsImNhbnRyZW1vdmVfZXJyb3IiLCJjYW50cmVtb3ZlX3Byb2plY3RfZXJyb3IiLCJlcnJvcl90aXRsZSIsIkhFTFAiLCJtb3JlIiwicmVtb3ZlIiwiZXhwb3J0IiwicmVzZXQiLCJwbGF5IiwicGF1c2UiLCJzdG9wIiwicmVjb3JkIiwiYnBtIiwiYnBtX2xjIiwiYWRkIiwicGxheWluZ19zcGVlZCIsIm1vZHVsYXRpb24iLCJGTE9XIiwiUkVDSVBFUyIsInA0IiwicDUiLCJwNiIsInA3IiwicDgiLCJyZWNpcGVzIiwiQ09OVEVYVFVBTF9IRUxQIiwic3RhY2siLCJkcm9wX2VsZW1lbnRzX2hlcmUiLCJ5b3VfY2FuX2Ryb3BfbmV3X2VmZmVjdHNfaGVyZSIsInVwIiwiZG93biIsImV4cGFuZCIsImVkaXRvciIsImtleWJvYXJkX2luc3RydWN0aW9ucyIsInRlc3RfaW5zdHJ1bWVudF9oZXJlIiwidHlwZV9oZXJlX2luc3RydW1lbnQiLCJ0cmFja19tdXRlZCIsInRyYWNrX3NvbG8iLCJtZWFzdXJlX2JlYXRzIiwiYW1vdW50X2JlYXRzIiwibWVhc3VyZV9jb3VudCIsInpvb21fbGV2ZWwiLCJ0b3RhbF9tZWFzdXJlcyIsInRyYWNrcyIsImRyb3BfaW5zdHJ1bWVudCIsImNoYW5nZV9uYW1lIiwicmVtb3ZlX3RyYWNrIiwiY29tcGFjdF92aWV3X3AxIiwiY29tcGFjdF92aWV3X3AyIiwiZHJvcF96b25lIiwiZWRpdG9yX25vdGVzX3AxIiwiZWRpdG9yX25vdGVzX3AyIiwiZWRpdG9yX25vdGVzX3AzIiwiZWRpdG9yX25vdGVzX3A0IiwiYWRkX3RyYWNrIiwibm90ZV9ldmVudF9wMSIsIm5vdGVfZXZlbnRfcDIiLCJub3RlX2V2ZW50X3AzIiwibXV0ZWQiLCJzb2xvIiwiaW5zdHJ1bWVudF9lZGl0IiwiZHJvcF9wYXR0ZXJuIiwiZG93bmxvYWQiLCJyZW1vdmVfYmxvY2siLCJlZGl0X2Jsb2NrIiwiQlVUVE9OX0xBTkdfRU4iLCJCVVRUT05fTEFOR19FUyIsImVzVHJhbnNsYXRpb25zIiwiY29uZmlnIiwiJHRyYW5zbGF0ZVByb3ZpZGVyIiwiZ2V0QnJvd3Nlckxhbmd1YWdlIiwicmVzb2x2ZUNsaWVudExvY2FsZSIsImxhbmdDb2RlIiwic3BsaXQiLCJ0cmFuc2xhdGlvbnMiLCJwcmVmZXJyZWRMYW5ndWFnZSIsImZhbGxiYWNrTGFuZ3VhZ2UiLCJ1c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kiLCJ1c2VMb2FkZXIiLCIkcm91dGVQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsImRpcmVjdGl2ZSIsIiR0aW1lb3V0IiwiJGh0dHAiLCJUeXBlU2VydmljZSIsIlJlY2lwZSIsIk11c2ljT2JqZWN0RmFjdG9yeSIsInNjb3BlIiwiZmlsZSIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJ0eXBlcyIsImdldFR5cGVzIiwib3V0cHV0IiwicGFyYW1ldGVycyIsInJlY2lwZSIsInN0YXJ0IiwidGVybXNjaGFuZ2VkIiwiJGJyb2FkY2FzdCIsImZfdCIsInN0ciIsInN0YXRlIiwicmV0IiwiZXZhbCIsImVycm9yIiwiZSIsInRvU3RyaW5nIiwib3NjVGVybXNVcGRhdGVGcm9tV2F2ZUZvcm0iLCJmbiIsImRlYm91bmNlIiwid2F2ZWZvcm0iLCJ0ZXJtcyIsInJlc29sdXRpb24iLCJjb3VudCIsInZhbHVlcyIsIkFycmF5IiwiaSIsImlzTmFOIiwiZnQiLCJERlQiLCJsZW5ndGgiLCJmb3J3YXJkIiwiY29zIiwicmVhbCIsInNpbiIsImltYWciLCJmIiwidCIsImEiLCJiIiwiTWF0aCIsIlBJIiwibWF4dmFsdWUiLCJ2YWx1ZSIsImludmFsaWRXYXZlZm9ybSIsImVyciIsIm9zY1Rlcm1zVXBkYXRlIiwic2VyaWUiLCJlcnJWYXIiLCJuIiwicmFuZ2UiLCJpbml0IiwiZW5kIiwieCIsInB1c2giLCJ0cnV0aHkiLCJ1cGRhdGVPYmplY3QiLCJuZXdWYWx1ZSIsImNoYW5nZWQiLCJvdXRwdXRPYnNlcnZlciIsIiRvbiIsImRlc3Ryb3kiLCJ1cGRhdGVUZW1wbGF0ZSIsIm9ic2VydmVPdXRwdXQiLCJ0aGVuIiwic2VsZWN0ZWRUeXBlIiwiZ2V0VHlwZSIsImsiLCJfZGVmYXVsdCIsImRhdGEiLCJtYXAiLCJwYXJhbWV0ZXIiLCJjb21wb25lbnRzIiwibW9kdWxhdGlvbnMiLCJjb21wb25lbnQiLCJhcnJheSIsImNoYW5nZVR5cGUiLCIkd2F0Y2giLCJmb3JFYWNoIiwiJGVtaXQiLCJzdWJvYmplY3RzIiwibWF4RWxlbWVudHMiLCJtYXhlbGVtZW50cyIsInBhcnNlSW50IiwiSW5maW5pdHkiLCJjdXJyZW50VGFiIiwiYWRkT2JqZWN0IiwibmV3T2JqZWN0Iiwic2V0Q3VycmVudFRhYiIsImlkeCIsInJlbW92ZU9iamVjdCIsIm9iamVjdCIsIm8iLCJpbml0RmlsZSIsImRyb3B6b25lRXh0cmFOYW1lIiwic3dhcCIsImlkeDEiLCJpZHgyIiwidG1wIiwiZGVmYXVsdFN0YWNrQXBwZW5kIiwiY29uY2F0Iiwib25Ecm9wQ29tcGxldGUiLCJldmVudCIsInN0YWNrQXBwZW5kIiwib2xkQ29sbGVjdGlvbiIsIm5ld0ZpbGUiLCJ0ZW1wbGF0ZSIsInRlcm1zQ2hhbmdlZCIsInNjYWxlIiwic2VtaXRvbmVUb05vdGUiLCJub3RlVG9TZW1pdG9uZSIsIm5vdGF0aW9uNyIsIm5ld1ZhbCIsIlV0aWxzIiwiU2NhbGUiLCJkZWx0YXMiLCJpbml0VG9uZSIsIm5vdGVzIiwiZCIsInNlbWl0b25lIiwidG9uZSIsImFsdCIsIiRwYXJzZSIsInJlc3RyaWN0Iiwic2Nyb2xsVmFyR2V0dGVyIiwibmdTY3JvbGxUb3AiLCJzY3JvbGxWYXJTZXR0ZXIiLCJhc3NpZ24iLCIkIiwic2Nyb2xsVG9wIiwib24iLCJuZ1Njcm9sbExlZnQiLCJzY3JvbGxMZWZ0IiwicmVwbGFjZSIsInQwIiwicGFyc2VGbG9hdCIsInRmIiwic2FtcGxlcyIsInNjYWxleSIsIiRwYXJlbnQiLCJfZiIsInJlZHJhdyIsImNhbnZhcyIsImNvbnRleHQiLCJnZXRDb250ZXh0Iiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImhlaWdodCIsImNsaWVudEhlaWdodCIsImRyYXdMaW5lIiwieDAiLCJ5MCIsIngxIiwieTEiLCJjb2xvciIsInNhdmUiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZSIsInJlc3RvcmUiLCJkcmF3RnVuYyIsInRyYW5zbGF0ZSIsImxpbmVKb2luIiwiJHVpYk1vZGFsIiwiTWlkaSIsIk11c2ljQ29udGV4dCIsIm9uTUlESU1lc3NhZ2UiLCJjb21tYW5kIiwib2N0YXZlTnVtYmVyIiwiZmxvb3IiLCJvY3QiLCJvY3RhdmVzIiwidXBkYXRlIiwibGlzdGVuZXIiLCJyZWdpc3RlckV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVNaWRpU3RhdHVzIiwiZ2V0U3RhdHVzIiwibWlkaUNvbm5lY3RlZCIsImtleUNvZGVUb05vdGUiLCI5MCIsIjgzIiwiODgiLCI2OCIsIjY3IiwiODYiLCI3MSIsIjY2IiwiNzIiLCI3OCIsIjc0IiwiNzciLCJzdG9wQWxsIiwibWlkaVNldHVwIiwicmVzdWx0IiwiYmFzZSIsIm1vdXNlIiwia2V5Iiwibm90ZSIsInRoaXMiLCJ1bmRlZmluZWQiLCJnZXN0dXJlIiwicmVzdW1lQXVkaW8iLCJtb3VzZU9mZiIsIm1vdXNlTGVhdmUiLCJtb3VzZUVudGVyIiwia2V5RG93bkhhbmRsZXIiLCJkb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJrZXlDb2RlIiwibm90ZU5hbWUiLCJub3RlVG9Ob3RlTnVtIiwiJGRpZ2VzdCIsImtleVVwSGFuZGxlciIsImJpbmQiLCJwaWFub0ZpcnN0Um93IiwiZmluZCIsInBpYW5vU2Vjb25kUm93IiwidW5iaW5kIiwiVElDS1NfUEVSX0JFQVQiLCJQYXR0ZXJuIiwidHJhY2siLCJ6b29tTGV2ZWwiLCJiZWF0V2lkdGgiLCJtZWFzdXJlIiwibWVhc3VyZUNvdW50IiwiZGVmYXVsdEwiLCJjbGVhclNoYWRvdyIsInNoYWRvd0V2dCIsImRlZmF1bHRNb3VzZUxlYXZlIiwiZGVmYXVsdE1vdXNlTW92ZSIsImNsaXBEaXN0YW5jZSIsInRhcmdldCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwidXBwZXJMaW1pdCIsIm9mZnNldFkiLCJsIiwicyIsImV4YWN0UG9zaXRpb24iLCJvZmZzZXRYIiwiY2xpcFMiLCJmaW5kQ2xpcFMiLCJhYnMiLCJjdXRFdmVudCIsInJhaXNlRXZlbnRDaGFuZ2VkIiwib2xkZXZ0IiwiZXZ0Iiwibm90ZTciLCJpc0FycmF5IiwidXBkYXRlR3JpZCIsIm1haW5HcmlkU3R5bGUiLCJiYWNrZ3JvdW5kLXNpemUiLCJhZGROZXdFdmVudCIsIm5ld0V2dCIsImNvcHkiLCJjb2xsaXNpb24iLCJzZWxlY3RlZCIsInJhaXNlIiwibW91c2VNb3ZlIiwibW92ZUV2ZW50IiwibW91c2VNb3ZlRXZlbnQiLCJtb3ZlRXZlbnRGcm9tRXZlbnQiLCJjYW5jZWxNb3ZlIiwibW91c2VVcFJlc2l6ZUV2ZW50IiwibW91c2VVcEV2ZW50IiwibW91c2VVcCIsIm1vdXNlTW92ZVJlc2l6ZUV2ZW50Iiwic2hhZG93TW91c2VNb3ZlIiwiZGVsdGFTIiwiYWRkRnJvbVNoYWRvdyIsInByZXZlbnRDb2xsaXNpb24iLCJzYXZlZEV2dCIsImFwcGx5IiwiYXJndW1lbnRzIiwiZHJhZ2V2dCIsIm1vdXNlRG93biIsImV2ZW50U3BsaXQiLCJ0aWNrcyIsIm9yaWdpbmFsTCIsImV2ZW50TGVmdFNwbGl0IiwiZXZlbnRDZW50ZXJTcGxpdCIsImV2ZW50UmlnaHRTcGxpdCIsIm1vdXNlRGJsQ2xpY2tFdmVudCIsImVsZW1lbnRXaWR0aCIsIm1vdXNlRG93bkV2ZW50IiwicHJldmVudERlZmF1bHQiLCJibHVyIiwiX2NhbmNlbE1vdmUiLCJtb3VzZURvd25SZXNpemVFdmVudCIsImNsaXBMIiwiZmluZENsaXBMIiwiZXhhY3RMIiwicmVmcyIsIm5nZkRyb3BHZXR0ZXIiLCJuZ2ZEcm9wIiwiYWxsb3dEcmFnIiwiZGF0YVRyYW5zZmVyIiwiZHJvcEVmZmVjdCIsIm9uRHJvcCIsIiRmaWxlcyIsImZpbGVzIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJuZ2ZMb2FkZXJHZXR0ZXIiLCJuZ2ZMb2FkZXIiLCJvbkNoYW5nZSIsInZhbCIsIm9mZiIsImJhY2tncm91bmQtcG9zaXRpb24iLCJtb3ZlZCIsInBhcmVudEVsZW1lbnQiLCJ0aW1lVG9UaWNrcyIsInBsYXlpbmciLCJnZXRCcG0iLCJnZXRab29tTGV2ZWwiLCJnZXRCZWF0V2lkdGgiLCJ0aWNrc1RvUFgiLCJjYWxsYmFjayIsInBlcmZvcm1hbmNlIiwibm93IiwiZGlzcGxhY2VtZW50IiwiY3NzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdElkIiwiX3RpbWVUb1RpY2tzIiwiX3QwIiwiYmFzZVRpY2tzIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZWNpcGVCbGlua0dldHRlciIsInJlY2lwZUJsaW5rIiwiYmxpbmtFbGVtZW50SWQiLCJibGluayIsImFkZENsYXNzIiwibm9ibGluayIsInJlbW92ZUNsYXNzIiwicmVnaXN0ZXJFdmVudCIsImdldEJsaW5rcyIsImluZGV4T2YiLCJhcmdzIiwicnRJZEdldHRlciIsInJ0SWQiLCJ0b29sdGlwRWxlbWVudElkIiwidG9vbHRpcEVuYWJsZWQiLCJvbkNsaWNrIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwid2luZG93V2lkdGgiLCJtYXgiLCJkb2N1bWVudEVsZW1lbnQiLCJpbm5lcldpZHRoIiwiZWwiLCJvZmZzZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwiY2FwUmlnaHQiLCJ0ZXh0IiwiRmlsZVJlcG9zaXRvcnkiLCJFcnJNZXNzYWdlIiwib2JzZXJ2ZXIiLCJvYnNlcnZlUmVjeWNsZWQiLCJzZWFyY2hSZWN5Y2xlZCIsImxpbWl0IiwicmVzdWx0cyIsInNsaWNlIiwib3BlblJlY3ljbGVCaW4iLCJyZXN0b3JlRnJvbVJlY3ljbGVCaW4iLCJpZCIsImxvY2F0aW9uIiwibW92ZVRvUmVjeWNsZUJpbiIsImljb25UeXBlTmFtZSIsInR5cGVJY29uIiwiZmFjdG9yeSIsIiRxIiwicHJ1bmVXcmFwcGVyIiwiZmlsZU91dHB1dE1hcCIsIldlYWtNYXAiLCJvcHRpb25zIiwibmV4dElkIiwiX2xhc3RfdHlwZSIsIl9fX2NhY2hlIiwibW9uaXRvciIsImdldENvbnN0cnVjdG9yIiwiZGVzY3JpcHRvciIsImNoYW5uZWwiLCJ3cmFwcGVkIiwibXVzaWMiLCJidWlsZENvbXBvbmVudHMiLCJjb21wb25lbnROYW1lIiwiY3JlYXRlUGFyYW1ldHJpYyIsIm9iaiIsImFsbCIsIm9ianMiLCJsYXN0X3R5cGUiLCJfX2NhY2hlIiwic2V0IiwiY29uc3RydWN0b3IiLCJoYXMiLCJnZXQiLCJub2lkIiwiY3JlYXRlUGFyYW1ldHJpY0Zyb21TdGFjayIsImdldE9iamVjdCIsIm5ld0FycmF5IiwiZGF0YUxpbmsiLCJub3RpZnlDaGFuZ2VGb3IiLCJlZSIsImVtaXQiLCJkZXN0cm95QWxsIiwiYmFzZXMiLCJwcnVuZSIsImZjbiIsInNmeEJhc2UiLCJydW5GY24iLCJFdmVudEVtaXR0ZXIiLCJyZW1vdmVMaXN0ZW5lciIsInNlcnZpY2UiLCJSZWNvcmRhYmxlIiwicGxheWFibGUiLCJfcGxheWFibGUiLCJfbXVzaWMiLCJfbmFtZSIsInByb3RvdHlwZSIsInJlY29yZGluZyIsInJlY29yZEZpbGVOYW1lIiwiRnVuY3Rpb25TZXEiLCJwcmVjaXNlVGltZW91dCIsImV4cG9ydFdBViIsImJsb2IiLCJjcmVhdGVFbGVtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwic3R5bGUiLCJ1cmwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJocmVmIiwiY2xpY2siLCJyZXZva2VPYmplY3RVUkwiLCJkdXJhdGlvbiIsIkNvbnRleHQiLCJyZXN1bWUiLCJydW4iLCJjb2RlIiwiY3VycmVudFZlcnNpb24iLCJ1bmRvIiwicmVkbyIsInJlZ2lzdGVyVmVyc2lvbiIsInNjaGVkdWxlIiwibm90ZXNlcSIsImV2ZW50UHJlcHJvY2Vzc29yIiwib25TdG9wIiwiY3R4Iiwic29ydCIsImUxIiwiZTIiLCJzY2FsZWRFdmVudHMiLCJ0YyIsInBhZGRpbmdUbyIsInB1c2hDYWxsYmFjayIsIk5vdGVTZXF1ZW5jZSIsInBhdHRlcm5Db21wb3NlIiwiaW5zdHJ1bWVudHMiLCJpc1RlbXBvVHJhY2siLCJ0ZW1wbyIsImdldEV2ZW50cyIsImJ5U3RhcnQiLCJzb25nQ3R4IiwidGltZSIsInRpY2tzVG9UaW1lIiwidGlja3NfcGVyX2JlYXQiLCJicG1fZXZlbnRzIiwicmVkdWNlIiwibWFrZVBsYXlhYmxlIiwibm90ZVNlcXVlbmNlIiwiY29udGV4dHMiLCJoaWdoZXIiLCJjb21wdXRlTWVhc3VyZUNvdW50IiwiZW5kVGltZSIsIm1lYXN1cmVMZW5ndGgiLCJnZXRNdXRlZFN0YXRlIiwic29tZVNvbG8iLCJzb21lIiwiX25vdCIsInNlbGYiLCJuZWFyZXN0IiwiYzEiLCJjMiIsImFsbEV2ZW50cyIsImFsbE90aGVyRXZlbnRzIiwidHIiLCJjbGlwcyIsIm1lYXN1cmVUaWNrcyIsIm11c2ljT2JqZWN0RmFjdG9yeSIsInRyYWNrQ29udHJvbCIsImNyZWF0ZWQiLCJsb2FkIiwidHJhY2tObyIsIl9pZCIsImdhaW4iLCJnZXRGaWxlIiwiY29udGVudHMiLCJkaXNwb3NlIiwibXV0ZSIsIm11dGVTdGF0ZSIsIkhpc3RvcmlhbCIsIkluZGV4IiwiY3JlYXRlZEZpbGVzSW5kZXgiLCJjcmVhdGVkRmlsZXMiLCJidWlsdElucyIsImxvYWRCdWlsdEluIiwidXJpIiwiciIsIm9iamVjdElkIiwicmVmIiwiYnVpbHRJbiIsImNyZWF0ZURlZmF1bHQiLCJjb250ZW50Iiwibm9FeHBvcnRhYmxlIiwiYnVpbHRJbkxvYWRlZCIsImNyZWF0ZUlkIiwicmFuZG9tIiwiam9pbiIsImdlbmVyaWNTdGF0ZUVtbWl0ZXIiLCJyZWN5Y2xlZEVtbWl0ZXIiLCJkZWZhdWx0RmlsZSIsImJsb2NrcyIsInNlbGVjdGVkVHJhY2siLCJzY3JvbGwiLCJoaXN0IiwidXBkYXRlRmlsZSIsImxvY2FsRmlsZSIsInN0b3JhZ2VJbmRleCIsImdldEVudHJ5Iiwic2VyaWFsaXplZCIsIkZvcm1hdHMiLCJNdWx0aVNlcmlhbGl6ZXIiLCJzZXJpYWxpemUiLCJub0hpc3RvcnkiLCJKU09OIiwic3RyaW5naWZ5Iiwic2V0SXRlbSIsInJlY3ljbGVJbmRleCIsInJlbG9hZCIsImRlc3Ryb3lGaWxlIiwicmVtb3ZlSXRlbSIsInJlbW92ZUVudHJ5IiwicHVyZ2VGcm9tUmVjeWNsZUJpbiIsIl9yZXN0b3JlRnJvbVJlY3ljbGVCaW4iLCJjcmVhdGVFbnRyeSIsIl9tb3ZlVG9SZWN5Y2xlQmluIiwiZ2V0SWQiLCJpc1Byb2plY3RUeXBlIiwid2lsbFJlbW92ZSIsImdldEFsbCIsImdldEZyZWVJdGVtcyIsImdldE9ycGhhbiIsIm9ycGhhbkZpbGVzIiwiY29uc29sZSIsImdldFBhdHRlcm5Tb25ncyIsImJ5UHJvamVjdCIsImJ5VHlwZSIsInR5cGVTb25nIiwibG9hZEZpbGUiLCJzdG9yYWdlIiwiYnVpbHRpbiIsImZpbGVJbmRleGVzIiwibW9kZSIsIl9tIiwibWF4Y291bnQiLCJnZXREZWZhdWx0TWVhc3VyZSIsImdldERlZmF1bHRCUE0iLCJnZXRJdGVtIiwiZGVzZXJpYWxpemUiLCJnZXRSZWZzIiwidXBkYXRlZCIsInBhcnNlIiwiY3JlYXRlRmlsZSIsIm5ld2lkIiwiZGVmYXVsdE1lYXN1cmUiLCJkZWZhdWx0QlBNIiwiczAiLCJKU09OU2VyaWFsaXplciIsInMxIiwiQ2FjaGVkU2VyaWFsaXplciIsIlBhY2tlZEpTT05TZXJpYWxpemVyIiwiczIiLCJIdWZmbWFuU2VyaWFsaXplcldyYXBwZXIiLCJzMyIsInM0IiwiUGFja2VkSlNPTlNlcmlhbGl6ZXJCIiwiczUiLCJzZXRTZXJpYWxpemVycyIsInNlcmlhbGl6ZXIiLCJibG9ja0lkIiwiZ2V0UHJvamVjdEZpbGVzIiwicHJvamVjdElkIiwib2xkVmVyIiwibmV4dFZlciIsInVwZGF0ZUluZGV4IiwiYXR0cmlidXRlcyIsInVwZGF0ZUVudHJ5IiwiZ2V0SW5kZXgiLCJhZGRMaXN0ZW5lciIsImtleXdvcmQiLCJoYXNLZXl3b3JkIiwiZmlsdGVyZWQiLCJyZXZlcnNlIiwidG90YWwiLCJzZWFyY2giLCJ1cGRhdGVTZWFyY2giLCJub3RJblJlcyIsIml0ZW0iLCJyZXMiLCJjb252ZXJ0VHlwZSIsIm9ic2VydmUiLCJjYiIsImNsb3NlIiwiX3dyYXBwZXIiLCJtb2RXcmFwcGVyIiwib3JpZ2luYWxEaXNwb3NlIiwiX2xhc3RtdXNpYyIsIl9sYXN0aW5zdGFuY2UiLCJub3dyYXAiLCIkdHJhbnNsYXRlIiwibW9kYWxJbnMiLCJ3aW5kb3dDbGFzcyIsInJlc29sdmUiLCJleHBvcnRDb250ZW50cyIsIkJsb2IiLCJnZXRSZWxhdGVkSWRzIiwieSIsImdldEZpbGVXaXRoUmVsYXRlZCIsInJlbGFycmF5IiwicmVsIiwidW5pcSIsIk9iamVjdCIsImtleXMiLCJleHBvcnRQcm9qZWN0IiwiZXhwb3J0RmlsZSIsImltcG9ydEZpbGUiLCJpbXBvcnRJdGVtIiwicCIsInBhcnNlZCIsImZpcnN0SXRlbSIsIlN5bmMiLCJDYW50UmVtb3ZlIiwiRXJyb3IiLCJJbmRleEZhY3RvcnkiLCJpbmRleE5hbWUiLCJlbnRyeUNoYW5nZSIsImNsZWFySXRlbSIsImMiLCJzeW5jIiwiaXNvbGF0ZWRDb250ZXh0IiwiaWMiLCJlbnRyeSIsImV4dHJhSWRzIiwiZXh0cmFQcm9qZWN0SWRzIiwicHJvamVjdElkcyIsImlkcyIsImlzT3JwaGFuIiwicmVmZXJlbmNlZCIsIm11c2ljSnMiLCJtaWRpU2V0dXBSZXF1ZXN0ZWQiLCJtaWRpTG9hZGVkIiwibWlkaUFjY2Vzc1JlcXVlc3RlZCIsInNldHVwU3RvcmUiLCJzdG9yZUlucHV0RW5hYmxlZCIsImlucHV0SWQiLCJlbmFibGVkIiwibmF2aWdhdG9yIiwicmVxdWVzdE1JRElBY2Nlc3MiLCJzeXNleCIsIndyYXBJbnB1dCIsImlucHV0Iiwib25taWRpbWVzc2FnZSIsIm1pZGlBY2Nlc3MiLCJuZXh0IiwiZG9uZSIsImdldElucHV0cyIsInJldElucHV0cyIsImV2ZW50TGlzdGVuZXJzIiwiY2ZnIiwicmVsb2FkQ29uZmlnIiwiZ2V0Q29uZmlnIiwic2V0Q29uZmlnIiwiJHJvb3RTY29wZSIsInJlY2lwZUxpc3QiLCJibGlua3MiLCJjdXJyZW50UmVjaXBlIiwic3RlcHMiLCJjdXJyZW50U3RlcCIsImhhbmRsZUV2ZW50Iiwic3RlcCIsImV2ZW50SGFuZGxlciIsInJ1blJlY2lwZVN0ZXAiLCJibGlua19pZCIsInRvb2x0aXBfaWQiLCJuZXh0X3N0ZXBfb24iLCJldmVudE5hbWUiLCJkZWxheSIsIm1zIiwiZ2V0TG9jYWxlTmFtZSIsInN0ZXBJbmRleCIsInRvb2x0aXBOYW1lIiwibG9hZEV2ZW50SGFuZGxlciIsImV2ZW50SGFuZGxlckRhdGEiLCJpbm5lciIsImxvYWRTdGVwIiwic3RlcERhdGEiLCJjcmVhdGVGaWxlcyIsInN3aXRjaFByb2plY3QiLCJyZWNpcGVEYXRhIiwiRGF0ZSIsImxvYWRUcmFuc2xhdGlvbnMiLCJsb2FkUmVjaXBlVHJhbnNsYXRpb24iLCJsYW5nIiwibGFuZ0luZGV4IiwidHAiLCJsb2NhbGVOYW1lIiwiYWN0aW9ucyIsInJlY2lwZUlkIiwicmVjaXBlVHJhbnNsYXRpb25EYXRhIiwicHJvbWlzZSIsIl9hcmdzIiwiX3NlbGYiLCJkZWZlciIsInJlamVjdCIsImJhc2VUcmFuc2xhdGlvbiIsImFkZFRyYW5zbGF0aW9ucyIsInR5cGVUcmFuc2xhdGlvbnMiLCJyZWNpcGVUcmFuc2xhdGlvbnMiLCJPYmplY3RDYWNoZSIsIndtIiwic3Ryb2JqIiwiZWxlbSIsIm1ha2VfbXV0YWJsZSIsImNhY2hlRGF0YSIsImNhY2hlV3JhcCIsImJhc2VNdXNpYyIsIm9yaWdpbmFsUHJ1bmUiLCJwYXJhbXMiLCJnZXRPcmlnaW5hbCIsImN1cnJlbnQiLCJpbnN0YW5jZXMiLCJyZXVzYWJsZU5vZGUiLCJuZXdCYXNlIiwibGFzdE9iakRhdGEiLCJsYXN0Q3VycmVudCIsInByb3h5IiwibmV3ciIsIm5ld29iamVjdCIsIl9jb21wb25lbnRzIiwiaW5zdGFuY2UiLCJwbHVnaW5zIiwidHJhbnNsYXRpb24iLCJtIiwicGx1Z2luTmFtZSIsInRyYW5zbGF0ZURhdGEiLCJ0eXBlTmFtZSIsImNvbXBvc2l0aW9uIiwiZGVzY3JpcHRpb24iLCJsb2FkUGx1Z2luIiwicnVubmVyQ29kZSIsInBsdWdpbnNMb2FkZWQiLCJza2lwIiwic2V0U2tpcCIsInJlbGVhc2VXaXRoSW5kZXgiLCJieXRlcyIsIm5leHRFbnRyeSIsInNoaWZ0IiwicmVsZWFzZSIsIm5ld0luZGV4IiwiaXNyZXRyeSIsImluc3RydW1lbnRJZCIsImluc3RydW1lbnRNYXAiLCJibG9jayIsImluZGV4TWFwIiwiJHNjb3BlIiwiJHVpYk1vZGFsSW5zdGFuY2UiLCJudW1DaGFubmVscyIsImVuY29kaW5nIiwiJHJvdXRlUGFyYW1zIiwiSW5zdHJ1bWVudFNldCIsIkV4cG9ydCIsIlNPTkdfTUFYX1RSQUNLUyIsImluc3RTZXQiLCJwbGF5aW5nU3RhcnRPZmZzZXQiLCJweFRvVGlja3MiLCJweCIsInNlZWsiLCJjdXJyZW50UmVjIiwicmVwbGF5IiwicGF0dGVybkVkaXQiLCJleHBvcnRJdGVtIiwiZmlsZUluZGV4IiwicmVsb2FkRnJvbVJlcG8iLCJjaGVja1BheWxvYWQiLCJmaWxlQ2hhbmdlZCIsImVuY29kaW5nT3B0aW9ucyIsInBhdHRlcm5zIiwiY3JlYXRlUGF0dGVybiIsInNvbmdUcmFja0lkeCIsImNoYW5nZWRCcG0iLCJTb25nIiwiaW5kZXhDaGFuZ2VkIiwibWF4YmxvY2tzIiwibWF4VHJhY2tJbmRleCIsInRyYWNrSW5kZXgiLCJtQ291bnQiLCJwYXlsb2FkIiwiJGRhdGEiLCIkZXZlbnQiLCJmcm9tQmxvY2siLCJzd2FwSWQiLCJibG9ja19pZHMiLCJjdHJsS2V5IiwiaW5zdHJ1bWVudEVkaXQiLCJtdXRlZFN0YXRlIiwidXBkYXRlTXV0ZWQiLCJyZW1vdmVUcmFjayIsInRyYWNrSWR4IiwiYWRkVHJhY2siLCJ6b29tSW4iLCJ6b29tT3V0IiwibGFzdFBsYXlpbmciLCJiZWVwIiwic2V0VGltZW91dCIsInRyYWNrTXV0ZWQiLCJ1cGRhdGVJbnN0cnVtZW50IiwibXVzaWNPYmplY3QiLCJwbGF5QnV0dG9uIiwibGFzdE9iaiIsInBsYXlhYmxlcyIsInN0b3BQbGF5IiwibGF6eUxvYWRJbnN0cnVtZW50IiwiaW5zdHJ1bWVudFByb21pc2UiLCJpbm5lckluc3RydW1lbnQiLCJjYWxsU3RvcCIsImNhbGxQbGF5IiwiaW5uZXJOb3RlIiwiaW5zdCIsImluc3RydW1lbnRFeHRlbmQiLCJzdG9wRGVsYXkiLCJjcmVhdGVJbnN0cnVtZW50RnJvbUZpbGUiLCJvbGRGaWxlIiwib3V0cHV0RmlsZSIsIm5vdGlmeSIsInJlc2V0U3RhY2siLCJzdGFydFBsYXkiLCJXZWxjb21lTWVzc2FnZSIsImN1cnJlbnRPYnNlcnZlciIsInByb2plY3RGaWx0ZXIiLCJmaWxlc1RvdGFsIiwiZmlsZUlucHV0Q2xpY2siLCJmaWxlSW1wb3J0IiwibmV4dExvY2F0aW9uIiwicmVhZFRleHRGaWxlIiwiZmlsZVJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJvbmVycm9yIiwicmVhZEFzVGV4dCIsImpzb24iLCJmaXJzdCIsImNoYW5nZUxhbmd1YWdlIiwibGFuZ0tleSIsInVzZSIsImN1cnJlbnRMYW5ndWFnZSIsImxhbmdMb2FkZWQiLCJkb250c2hvd2FnYWluIiwiYWN0aXZhdGUiLCJleGFtcGxlIiwia2V5d29yZFVwZGF0ZWQiLCJzZWFyY2hLZXl3b3JkIiwicmVtb3ZlUHJvamVjdCIsInByb2plY3RTZXR0aW5ncyIsImJ1dHRvblRleHQiLCJuZXdQcm9qZWN0IiwicHJvamVjdE5hbWUiLCJvcGVuUHJvamVjdCIsIm1vcmVJbXBvcnRhbnQiLCJmaWxlMSIsImZpbGUyIiwiYmV0dGVyIiwibmV3SW5zdHJ1bWVudCIsIm5ld1NvbmciLCJuZXdQYXR0ZXJuIiwidG9kbyIsInVwZGF0ZUNvbmZpZyIsImltbWVkaWF0ZVVwZGF0ZVNlYXJjaCIsInNlbGVjdCIsInNraXBVcGRhdGVkIiwidXBkYXRlU2tpcCIsInR1dG9yaWFsIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFJQSxrQkFBbUJDLFFBQVFDLE9BQU8sb0JBQXFCLGdCQUFpQixVQUFXLGVBQWdCLGNBQWUsWUFBYSwwQkFFbklGLGtCQUFpQkcsU0FBUyxRQUFTQyxPQUNuQ0osaUJBQWlCRyxTQUFTLGlCQUFrQixJQUM1Q0gsaUJBQWlCRyxTQUFTLGtCQUFtQixJQUM3Q0gsaUJBQWlCRyxTQUFTLGNBQWVFO0FDTHpDLEdBQUlMLGtCQUFtQkMsUUFBUUMsT0FBTyxvQkFDbENJLGdCQUNGQyxNQUNFQyxTQUFVLGdCQUNWQyxPQUFRLFNBQ1JDLFVBQVcsdUJBQ1hDLGFBQWMsMkNBQ2RDLE9BQVEsU0FDUkMsT0FBUSxjQUNSQyxVQUFXLGFBRWJDLGNBQ0VDLEdBQUksc0NBQ0pDLE1BQU8sZ0JBRVRDLGNB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dmdCLEVBQUd0WSxLQUFLLEtBQzFCMnhCLEdBQU9tSCxXQUFhLFdBQ2xCRCxFQUFjMUMsRUFBZXBGLFFBQVFZLEVBQU80RixnQkFHOUM1RixFQUFPbjNCLFFBQVUsV0FDZnErQixFQUNHaDBCLEtBQUssV0FDSitzQixFQUFrQnAzQixhQUt4Qm0zQixFQUFPb0gsU0FBVyxXQUNoQkYsRUFDR2gwQixLQUFLLFdBQ0orc0IsRUFBa0JwM0IsVUFDbEIrRixFQUFPWSxNQUFNIiwiZmlsZSI6InNpdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiLCBbJ3VpLmNvZGVtaXJyb3InLCAnbmdSb3V0ZScsICd1aS5ib290c3RyYXAnLCAnbmdEcmFnZ2FibGUnLCAnbmdDb29raWVzJywgJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnXSk7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLmNvbnN0YW50KFwiTVVTSUNcIiwgTVVTSUMpO1xyXG5tdXNpY1Nob3dDYXNlQXBwLmNvbnN0YW50KFwiVElDS1NfUEVSX0JFQVRcIiwgOTYpO1xyXG5tdXNpY1Nob3dDYXNlQXBwLmNvbnN0YW50KFwiU09OR19NQVhfVFJBQ0tTXCIsIDMyKTtcclxubXVzaWNTaG93Q2FzZUFwcC5jb25zdGFudChcImxvY2FsZm9yYWdlXCIsIGxvY2FsZm9yYWdlKTtcclxuIiwidmFyIG11c2ljU2hvd0Nhc2VBcHAgPSBhbmd1bGFyLm1vZHVsZShcIk11c2ljU2hvd0Nhc2VBcHBcIik7XHJcbnZhciBlblRyYW5zbGF0aW9ucyA9IHtcclxuICBtaWRpOiB7XHJcbiAgICBzZXR0aW5nczogJ01JREkgU2V0dGluZ3MnLFxyXG4gICAgaW5wdXRzOiAnSW5wdXRzJyxcclxuICAgIGNvbm5lY3RlZDogJ01JREkgSW5wdXQgQ29ubmVjdGVkJyxcclxuICAgIGRpc2Nvbm5lY3RlZDogJ01JREkgSW5wdXQgRGlzY29ubmVjdGVkIChDbGljayB0byBzZXR1cCknLFxyXG4gICAgZXZlbnRzOiAnRXZlbnRzJyxcclxuICAgIG9jdGF2ZTogJ0Jhc2UgT2N0YXZlJyxcclxuICAgIHRyYW5zcG9zZTogJ1RyYW5zcG9zZSdcclxuICB9LFxyXG4gIG9wZW5fcHJvamVjdDoge1xyXG4gICAgcDE6ICdTZWxlY3QgdGhlIHByb2plY3QgeW91IHdhbnQgdG8gb3BlbicsXHJcbiAgICB0aXRsZTogJ09wZW4gUHJvamVjdCdcclxuICB9LFxyXG4gIGFycmF5X2VkaXRvcjoge1xyXG4gICAgdG9vbHRpcDoge1xyXG4gICAgICByZW1vdmVfaXRlbTogJ1JlbW92ZXMgdGhlIG9iamVjdCBmcm9tIGFycmF5JyxcclxuICAgICAgYWRkX2l0ZW06ICdDbGljayB0byBhZGQgYSBuZXcgb2JqZWN0IHRvIGFycmF5JyxcclxuICAgICAgZWRpdF9pdGVtOiAnQ2xpY2sgdG8gZWRpdCB0aGlzIG9iamVjdCdcclxuICAgIH1cclxuICB9LFxyXG4gIGluZGV4OiB7XHJcbiAgICBub3RfaW1wbGVtZW50ZWQ6ICdTb3JyeS4gTm90IGltcGxlbWVudGVkIFlldCA6UCcsXHJcbiAgICBmaWx0ZXI6ICdUeXBlIGhlcmUgdGhlIHdvcmQgdG8gZmlsdGVyIG9iamVjdHMnLFxyXG4gICAgdG9vbHRpcDoge1xyXG4gICAgICB0eXBlOiB7XHJcbiAgICAgICAgaW5zdHJ1bWVudDogJ1RoaXMgaXMgYSByZXNvdXJjZSBvYmplY3Qgb2YgdHlwZSBpbnN0cnVtZW50JyxcclxuICAgICAgICBwYXR0ZXJuOiAnVGhpcyBpcyBhIHJlc291cmNlIG9iamVjdCBvZiB0eXBlIHBhdHRlcm4nLFxyXG4gICAgICAgIHNvbmc6ICdUaGlzIGlzIGEgcmVzb3VyY2Ugb2JqZWN0IG9mIHR5cGUgc29uZycsXHJcbiAgICAgICAgZng6ICdUaGlzIGlzIGEgcmVzb3VyY2Ugb2JqZWN0IG9mIHR5cGUgZngnXHJcbiAgICAgIH0sXHJcbiAgICAgIHR5cGVfcDE6ICdUbyB1c2UgdGhlIHJlc291cmNlLCBkcmFnIHRoZW0gZnJvbSBoZXJlIGludG8geW91ciBjcmVhdGlvbiBvbiB0aGUgcmlnaHQnLFxyXG4gICAgICB0eXBlX3AyOiAnVG8gaW5zdGVhZCwgKmVkaXQqIHRoZSByZXNvdXJjZSwgZG91YmxlIGNsaWNrIGl0JyxcclxuICAgICAgaW5kZXg6ICdUaGlzIGlzIHRoZSBvYmplY3QgaW5kZXgsIHlvdSBjYW4gZmluZCBoZXJlIHlvdXIgY3JhZnRpbmcgb3V0cHV0cyBhbmQgaW5wdXRzJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgcHJvamVjdDoge1xyXG4gICAgYmFzaWNfaW5mbzogJ1Byb3BlcnRpZXMnLFxyXG4gICAgcmVmZXJlbmNlczogJ1JlZmVyZW5jZXMnLFxyXG4gICAgc2V0dGluZ3M6ICdQcm9qZWN0IFNldHRpbmdzJyxcclxuICAgICduZXcnOiAnTmV3IFByb2plY3QnXHJcbiAgfSxcclxuICBtZW51OiB7XHJcbiAgICAnbmV3JzogJ0ZpbGUnLFxyXG4gICAgbmV3X2luc3RydW1lbnQ6ICdOZXcgSW5zdHJ1bWVudCcsXHJcbiAgICBuZXdfcGF0dGVybjogJ05ldyBQYXR0ZXJuJyxcclxuICAgIG5ld19zb25nOiAnTmV3IFNvbmcnLFxyXG4gICAgbmV3X3Byb2plY3Q6ICdOZXcgUHJvamVjdC4uLicsXHJcbiAgICBvcGVuX3Byb2plY3Q6ICdPcGVuIFByb2plY3QuLi4nLFxyXG4gICAgZmlsZV9pbXBvcnQ6ICdJbXBvcnQuLi4nLFxyXG4gICAgdG9vbHM6ICdUb29scycsXHJcbiAgICB0b29sc19wcmVmZXJlbmNlczogJ1ByZWZlcmVuY2VzJyxcclxuICAgIGhlbHBfdmlld19oZWxwOiAnVmlldyBIZWxwJyxcclxuICAgIGhlbHBfcmVjaXBlczogJ1JlY2lwZXMnLFxyXG4gICAgaGVscF9yZWNpcGVzX2ludHJvOiAnQmFzaWMgaW50cm8gdG91cicsXHJcbiAgICBoZWxwX3JlY2lwZXNfaG93dG9fY3JlYXRlX3Nvbmc6ICdIb3cgdG8gY3JlYXRlIGEgc29uZycsXHJcbiAgICBoZWxwX3JlY2lwZXNfaG93dG9fY3JlYXRlX2luc3RydW1lbnQ6ICdIb3cgdG8gY3JlYXRlIGFuIGluc3RydW1lbnQgKHNxdWFyZSArIDIgdm9pY2VzIGVjaG8pJyxcclxuICAgIGhlbHBfY29udGV4dHVhbF9oZWxwOiAnQ29udGV4dHVhbCBIZWxwJyxcclxuICAgIGhlbHBfd2VsY29tZTogJ1dlbGNvbWUhJyxcclxuICAgIGhlbHBfYWJvdXQ6ICdBYm91dCBNdXNpYy5qcycsXHJcbiAgICByZWN5Y2xlX2JpbjogJ1JlY3ljbGUgQmluLi4uJyxcclxuICAgIHRvb2x0aXA6IHtcclxuICAgICAgJ25ldyc6ICdZb3UgY2FuIGNyZWF0ZSBuZXcgYmxhbmsgaXRlbXMgZnJvbSB0aGlzIG9wdGlvbicsXHJcbiAgICAgIHByZWZlcmVuY2VzOiAnWW91IGNhbiBlZGl0IHlvdXIgcHJlZmVyZW5jZXMgaGVyZScsXHJcbiAgICAgIGhlbHA6ICdNZW51IHRvIGFjY2VzcyBoZWxwIG9wdGlvbnMgYW5kIGFib3V0J1xyXG4gICAgfSxcclxuICAgIHByb2plY3Q6ICdQcm9qZWN0JyxcclxuICAgIHByb2plY3Rfc2V0dGluZ3M6ICdTZXR0aW5ncy4uLicsXHJcbiAgICBwcm9qZWN0X3JlbW92ZV9wcm9qZWN0OiAnUmVtb3ZlIFByb2plY3QnLFxyXG4gICAgcHJvamVjdF9leHBvcnRfcHJvamVjdDogJ0V4cG9ydCBQcm9qZWN0J1xyXG4gIH0sXHJcbiAgY29udGV4dHVhbF9oZWxwOiB7XHJcbiAgICBlbmFibGU6ICdFbmFibGUgQ29udGV4dHVhbCBIZWxwJyxcclxuICAgIGRpc2FibGU6ICdEaXNhYmxlIENvbnRleHR1YWwgSGVscCdcclxuICB9LFxyXG4gIHJlY3ljbGU6IHtcclxuICAgIHAxOiAnVGhpcyBpcyB0aGUgcmVjeWNsZSBiaW4sIGZyb20gaGVyZSwgeW91IGNhbiByZXN0b3JlIHRoZSBpdGVtcyB0aGF0IGhhdmUgYmVlbiByZW1vdmVkJyxcclxuICAgIHAyOiAnUmVtZW1iZXI6IGl0ZW1zIGluIHRoZSByZWN5Y2xlIGJpbiB3aWxsIGJlIHBlcm1hbmVudGx5IGRlbGV0ZWQgaWYgYW5kIHdoZW4gYXZhaWxhYmxlIHN0b3JhZ2Ugc3BhY2UgcnVucyBvdXQnLFxyXG4gICAgcDM6ICcqIERvdWJsZS1jbGljayB0aGUgaXRlbSB5b3Ugd2FudCB0byBSRVNUT1JFJyxcclxuICAgIHRpdGxlOiAnUmVjeWNsZSBCaW4nLFxyXG4gICAgY29tcGFjdF90aXRsZTogJ1JlY3ljbGUgQmluJyxcclxuICAgIGNvbXBhY3RfaGludF9yZXN0b3JlOiAnKiBEb3VibGUtY2xpY2sgdGhlIGl0ZW0geW91IHdhbnQgdG8gUkVTVE9SRScsXHJcbiAgICBjb21wYWN0X2hpbnRfb3BlbjogJyogQ2xpY2sgaGVyZSB0byBvcGVuIHJlY3ljbGUgYmluIHdpbmRvdycsXHJcbiAgICBFTVBUWTogJ0VNUFRZJ1xyXG4gIH0sXHJcbiAgd2VsY29tZToge1xyXG4gICAgdGl0bGU6ICdXZWxjb21lIHRvIE11c2ljLmpzOiA4Yml0IEVkaXRpb24nLFxyXG4gICAgcDE6ICdNdXNpYy5qcyBpcyBhIHdlYiBhcHBsaWNhdGlvbiB0aGF0IGFsbG93cyB0aGUgY29tcG9zaXRpb24gb2YgbWVsb2RpZXMgcG93ZXJlZCAob3B0aW9uYWxseSkgYnkgamF2YXNjcmlwdCBwcm9ncmFtbWluZycsXHJcbiAgICBwMjogJ1RoaXMgZmlyc3QgYmFzaWMgZWRpdGlvbiwgaXMgZnVsbHkgb3JpZW50ZWQgdG93YXJkcyByZXRyby84Yml0IG11c2ljIGJ5IHByb3ZpZGluZyBlbGVtZW50YWwgb3NjaWxsYXRvcnMsIG5vaXNlIGdlbmVyYXRvcnMgYW5kIGJhc2ljIG1vZHVsYXRpb24gcGF0dGVybnMnLFxyXG4gICAgcDM6ICdEbyB5b3Ugd2FudCBhIGJhc2ljIHRvdXI/JyxcclxuICAgIG5ldmVyc2hvdzogJ05ldmVyIHNob3cgdGhpcyBtZXNzYWdlIGFnYWluJ1xyXG4gIH0sXHJcbiAgYWJvdXQ6IHtcclxuICAgIHRpdGxlOiAnQWJvdXQgTXVzaWMuanM6IDhiaXQgRWRpdGlvbicsXHJcbiAgICBwMzogJ0luIHRoZSBsb25nIHRlcm0sIHRoZSBnb2FsIG9mIG11c2ljLmpzIGlzIHRvIGNvdmVyIGFsbCB0aGUgbGF5ZXJzIG5lZWRlZCBiZXR3ZWVuIEhUTUw1IFdlYiBBdWRpbyBBUEkgcHJvdmlkZWQgYnkgYnJvd3NlcnMgYW5kIGZ1bGx5IHVzYWJsZSBtdXNpYyBjb21wb3NpdGlvbiBhcHBsaWNhdGlvbiBzaW1pbGFyIHRvIGtub3duIG9uZXMgbGlrZSBGTCBTdHVkaW8nLFxyXG4gICAgYXV0aG9yczogJ0FVVEhPUlMnLFxyXG4gICAgaV9hbTogJ0kgYW0gRGFyaW8gU2VtaW5hcmEsIGJ1dCBhbHNvIEkgc2hvdWxkIGdpdmUgY3JlZGl0IHRvIHNvbWUga2V5IGxpYnJhcnkgYXV0aG9yczonLFxyXG4gICAgY3JlZGl0OiB7XHJcbiAgICAgIG1vaGF5b25hbzogJ0Btb2hheW9uYW8gKEF1dGhvciBvZiBUaW1icmUuanMpJyxcclxuICAgICAgaGlndW1hOiAnQGhpZ3VtYSAoQXV0aG9yIG9mIFdlYkF1ZGlvUmVjb3JkZXIpJyxcclxuICAgICAga3Jpc3RvcG9sb3VzOiAnQGtyaXN0b3BvbG91cyAoQXV0aG9yIG9mIEJPT1RTVFJBLjM4NiBCb290c3RyYXAgVGVtcGxhdGUpJ1xyXG4gICAgfSxcclxuICAgIGNvbnRyaWJ1dGU6ICdDT05UUklCVVRFJyxcclxuICAgIGNvbnRhY3RfbWU6ICdDb250YWN0IG1lIGF0IGdpdGh1YidcclxuICB9LFxyXG4gIGNvbW1vbjoge1xyXG4gICAgeWVzOiAnWWVzJyxcclxuICAgIG5vOiAnTm8nLFxyXG4gICAgb2s6ICdPaycsXHJcbiAgICBkaXNtaXNzOiAnRGlzbWlzcycsXHJcbiAgICBjYW5jZWw6ICdDYW5jZWwnLFxyXG4gICAgY3JlYXRlOiAnQ3JlYXRlJyxcclxuICAgIG9wZW46ICdPcGVuJyxcclxuICAgIG5hbWU6ICdOYW1lJyxcclxuICAgIGxhbmd1YWdlOiAnTGFuZ3VhZ2U6JyxcclxuICAgIGxvYWRlcl9lcnJvcjogJ0Vycm9yIHdoZW4gdHJ5aW5nIHRvIGxvYWQgZmlsZScsXHJcbiAgICBjYW50cmVtb3ZlX2Vycm9yOiAnQ2FuIG5vdCBkZWxldGUgdGhlIGZpbGUgaWYgaXQgaXMgYmVpbmcgdXNlZCcsXHJcbiAgICBjYW50cmVtb3ZlX3Byb2plY3RfZXJyb3I6ICdDYW4gbm90IGRlbGV0ZSB0aGUgcHJvamVjdCBpZiBpdCBpcyBiZWluZyB1c2VkIGluIGFub3RoZXIgcHJvamVjdCcsXHJcbiAgICBlcnJvcl90aXRsZTogJ0Vycm9yJyxcclxuICAgIEhFTFA6ICdIRUxQJyxcclxuICAgIG1vcmU6ICdtb3JlJyxcclxuICAgIHJlbW92ZTogJ1JlbW92ZScsXHJcbiAgICAnZXhwb3J0JzogJ0V4cG9ydCcsXHJcbiAgICByZXNldDogJ1Jlc2V0JyxcclxuICAgIHBsYXk6ICdQbGF5JyxcclxuICAgIHBhdXNlOiAnUGF1c2UnLFxyXG4gICAgc3RvcDogJ1N0b3AnLFxyXG4gICAgcmVjb3JkOiAnUmVjLicsXHJcbiAgICBicG06ICdCcG0nLFxyXG4gICAgYnBtX2xjOiAnYnBtJyxcclxuICAgIGFkZDogJ0FkZCcsXHJcbiAgICB0b29sdGlwOiB7XHJcbiAgICAgIHBsYXlpbmdfc3BlZWQ6ICdQbGF5aW5nIHNwZWVkLCBudW1iZXIgb2YgYmVhdHMgcGVyIG1pbnV0ZScsXHJcbiAgICAgIHJlbW92ZV9pdGVtOiAnUmVtb3ZlcyBpdGVtLCB5b3UgY2FuIHJlc3RvcmUgaXQgZnJvbSByZWN5Y2xlIGJpbicsXHJcbiAgICAgIG1vZHVsYXRpb246ICdZb3UgY2FuIHNldHVwIHRoZSBlZmZlY3RzIG1vZHVsYXRpb24gZm9yIHt7bmFtZX19IGhlcmUuIElmIHlvdSBsZWF2ZSBpdCBlbXB0eSwgdGhlcmUgd2lsbCBiZSBubyBtb2R1bGF0aW9uIGF0IGFsbCdcclxuICAgIH0sXHJcbiAgICBuZXdfaW5zdHJ1bWVudDogJ05ldyBJbnN0cnVtZW50JyxcclxuICAgIG5ld19wYXR0ZXJuOiAnTmV3IFBhdHRlcm4nLFxyXG4gICAgbmV3X3Nvbmc6ICdOZXcgU29uZycsXHJcbiAgICBtb2R1bGF0aW9uOiAne3tuYW1lfX0gTW9kdWxhdGlvbidcclxuICB9LFxyXG4gIGhlbHA6IHtcclxuICAgIEZMT1c6ICdNVVNJQy5KUyBGTE9XJyxcclxuICAgIFJFQ0lQRVM6ICdSRUNJUEVTJyxcclxuICAgIHAxOiAnSW4gb3JkZXIgdG8gY3JlYXRlIGEgc29uZywgeW91IG5lZWQgdG8gY3JhZnQgaXQsIGFuZCBjcmFmdCB0aGUgbWF0ZXJpYWxzLicsXHJcbiAgICBwMjogJ0FjdHVhbGx5LCB0aGVyZSBhcmUgdGhyZWUgdHlwZXMgb2YgY3JhZnRhYmxlIHJlc291cmNlczogaW5zdHJ1bWVudHMsIHBhdHRlcm5zIGFuZCBzb25ncycsXHJcbiAgICBwMzogJ1doaWxlIHRoZSByaWdodCBzZWN0aW9uIHNob3dzIHRoZSBpdGVtIGJlaW5nIGNyYWZ0ZWQuIFRoZSBsZWZ0IHBhbm5lbCBzaG93cyB0aGUgY3JhZnRpbmcgbWF0ZXJpYWxzJyxcclxuICAgIHA0OiAnWW91IGNhbiBkcm9wIHJlc291cmNlcyAoaW5zdHJ1bWVudHMgb3IgcGF0dGVybnMpIGludG8gZHJvcCB6b25lcywgd2hlbiBhcHBsaWNhYmxlJyxcclxuICAgIHA1OiAnVG8gdXNlIHRoZSByZXNvdXJjZSBvbiB0aGUgaXRlbSBiZWluZyBjcmFmdGVkLCB5b3UgbmVlZCB0byBkcmFnIGl0IHRvIGFueSBvZiB0aGUgZHJvcHpvbmVzJyxcclxuICAgIHA2OiAnRm9sbG93aW5nIHRoaXMgcHJpbmNpcGxlLCB5b3UgY2FuIHVzZSBpbnN0cnVtZW50cyB0byBjb21wb3NlIHBhdHRlcm5zLCBhbmQgZmluYWxseSwgcGF0dGVybnMgdG8gY29tcG9zZSBzb25ncycsXHJcbiAgICBwNzogJ0Z1cnRoZXJtb3JlLCB5b3UgY2FuIGNvbXBvc2UgeW91ciBjdXN0b20gaW5zdHJ1bWVudHMsIGZyb20gYSByYW5nZSBvZiBlZmZlY3RzOicsXHJcbiAgICBwODogJ0RvblxcJ3Qgd29ycnksIGlmIHlvdSBkb25cXCd0IGdldCBpdCBhdCBmaXJzdCwgdGhlcmUgYXJlIHJlY2lwZXMgYW5kIGNvbnRleHR1YWwgaGVscCBhdCB5b3VyIGRpc3Bvc2FsJyxcclxuICAgIHJlY2lwZXM6IHtcclxuICAgICAgcDE6ICdSZWNpcGVzIGFyZSBpbnRlcmFjdGl2ZSBtaW5pLXR1dG9yaWFscyBvbiBob3cgdG8gY3JhZnQgYW55dGhpbmcgaGVyZSAoZXhhbXBsZTogYSBzb25nKScsXHJcbiAgICAgIHAyOiAnU29tZSB0dXRvcmlhbHMgKHN1Y2ggYXMgXFwnaW50cm9cXCcpIG9ubHkgZXhwbGFpbiBhIGZldyB0aGluZ3MgYWJvdXQgdGhlIG1haW4gaW50ZXJmYWNlJyxcclxuICAgICAgcDM6ICdJdFxcJ3MgcmVjb21tZW5kZWQgdG8gZm9sbG93IHRoZXNlIHJlY2lwZXMgaWYgeW91IGRvblxcJ3Qga25vdyB3aGF0IHRvIGRvIG9yIGhvdyB0byBzdGFydCB1c2luZyB0aGUgYXBwLiBUaGUgcmVjaXBlcyBhcmUgcmVhY2hhYmxlIGZyb20gdGhlIGhlbHAgbWVudSAoPyknXHJcbiAgICB9LFxyXG4gICAgQ09OVEVYVFVBTF9IRUxQOiBcIkNPTlRFWFRVQUwgSEVMUFwiLFxyXG4gICAgY29udGV4dHVhbF9oZWxwOiB7XHJcbiAgICAgIHAxOiAnVGhlcmUgaXMgYSBzZXJpZXMgb2YgdG9vbHRpcHMgZXhwbGFpbmluZyBvbiBkZXRhaWwgdGhlIGRpZmZlcmVudCBmZWF0dXJlcyBvZiB0aGUgYXBwLiBZb3UgY2FuIGVuYWJsZSBvciBkaXNhYmxlIHRoZXNlIHRvb2x0aXBzIGJ5IGNsaWNraW5nIG9uIHRoZSBib3ggaW4gdGhlIGxlZnQtYm90dG9tIGNvcm5lciBvZiB0aGUgc2NyZWVuJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgc3RhY2s6IHtcclxuICAgIGRyb3BfZWxlbWVudHNfaGVyZTogXCJkcm9wIG5ldyBlbGVtZW50cyBoZXJlXCIsXHJcbiAgICB0b29sdGlwOiB7XHJcbiAgICAgIHlvdV9jYW5fZHJvcF9uZXdfZWZmZWN0c19oZXJlOiAnWW91IGNhbiBkcm9wIG5ldyBlZmZlY3RzIGZyb20gdGhlIG9iamVjdCBpbmRleCBoZXJlJyxcclxuICAgICAgcmVtb3ZlOiAnUmVtb3ZlcyB0aGUgZWZmZWN0IGVsZW1lbnQgZnJvbSB0aGUgcGlwZWxpbmUnLFxyXG4gICAgICB1cDogJ0NoYW5nZXMgdGhlIG9yZGVyIG9mIHRoZSBlbGVtZW50LCB0byBleGVjdXRlIGl0IEFGVEVSJyxcclxuICAgICAgZG93bjogJ0NoYW5nZXMgdGhlIG9yZGVyIG9mIHRoZSBlbGVtZW50LCB0byBleGVjdXRlIGl0IEJFRk9SRScsXHJcbiAgICAgIGV4cGFuZDogJ0V4cGFuZC9TaHJpbmsgdGhlIGRpc3BsYXkgb2YgYWR2YW5jZWQgb3B0aW9ucyBmb3IgdGhlIGVsZW1lbnQnXHJcbiAgICB9XHJcbiAgfSxcclxuICBlZGl0b3I6IHtcclxuICAgIGtleWJvYXJkX2luc3RydWN0aW9uczogJ1VzZSBaWENWQk5NIGtleXMgdG8gcGxheSBpbnN0cnVtZW50LCBvciBob3ZlciBtb3VzZSBvbiB2aXJ0dWFsIGtleWJvYXJkJyxcclxuICAgIHRvb2x0aXA6IHtcclxuICAgICAgdGVzdF9pbnN0cnVtZW50X2hlcmU6ICdUZXN0IHRoZSBpbnN0cnVtZW50IGhlcmUsIHVzaW5nIG1vdXNlIG9yIGtleWJvYXJkJyxcclxuICAgICAgdHlwZV9oZXJlX2luc3RydW1lbnQ6ICdUeXBlIGhlcmUgdGhlIG5hbWUgb2YgdGhlIGluc3RydW1lbnQnXHJcbiAgICB9XHJcbiAgfSxcclxuICBwYXR0ZXJuOiB7XHJcbiAgICB0cmFja19tdXRlZDogJ011dGVkJyxcclxuICAgIHRyYWNrX3NvbG86ICdTb2xvJyxcclxuICAgIG1lYXN1cmVfYmVhdHM6ICdNZWFzdXJlIGJlYXRzJyxcclxuICAgIGFtb3VudF9iZWF0czogJ0Ftb3VudCBvZiBiZWF0cyBwZXIgbWVhc3VyZScsXHJcbiAgICBtZWFzdXJlX2NvdW50OiAnTWVhc3VyZSBjb3VudCcsXHJcbiAgICB6b29tX2xldmVsOiAnWm9vbSBsZXZlbCcsXHJcbiAgICB0b3RhbF9tZWFzdXJlczogJ1RvdGFsIGNvdW50IG9mIG1lYXN1cmVzIG9uIHBhdHRlcm4nLFxyXG4gICAgdHJhY2tzOiAnVHJhY2tzJyxcclxuICAgIGRyb3BfaW5zdHJ1bWVudDogJ2Ryb3AgaW5zdHJ1bWVudCBoZXJlJyxcclxuICAgIHRvb2x0aXA6IHtcclxuICAgICAgY2hhbmdlX25hbWU6ICdDaGFuZ2UgdGhlIHBhdHRlcm4gbmFtZScsXHJcbiAgICAgIHpvb21fbGV2ZWw6ICdab29tIGxldmVsIGZvciBhbGwgdHJhY2tzJyxcclxuICAgICAgcGxheTogJ0NsaWNrIHRvIHBsYXkgdGhlIHBhdHRlcm4nLFxyXG4gICAgICBzdG9wOiAnQ2xpY2sgdG8gc3RvcCBwbGF5aW5nJyxcclxuICAgICAgcmVtb3ZlX3RyYWNrOiAnQ2xpY2sgdG8gcmVtb3ZlIHRyYWNrJyxcclxuICAgICAgY29tcGFjdF92aWV3X3AxOiAnVHJhY2sgY29tcGFjdCB2aWV3OiBzZWUgdGhlIG5vdGVzIHdpdGhvdXQgaGF2aW5nIHRvIGV4cGFuZCB0aGUgdHJhY2suJyxcclxuICAgICAgY29tcGFjdF92aWV3X3AyOiAnQ2xpY2sgaGVyZSB0byBleHBhbmQgdGhlIHRyYWNrJyxcclxuICAgICAgZHJvcF96b25lOiAnSW5zdHJ1bWVudCBkcm9wIHpvbmUsIGRyb3AgaW5zdHJ1bWVudHMgZnJvbSB0aGUgbGVmdCBwYW5lbCB0byB1c2UgaXQgb24gdGhlIHRyYWNrJyxcclxuICAgICAgZWRpdG9yX25vdGVzX3AxOiAnTm90ZSBhcmVhLCBhZGQgdGhlIG5vdGVzIGhlcmU6JyxcclxuICAgICAgZWRpdG9yX25vdGVzX3AyOiAnQ2xpY2sgdG8gYWRkIGEgbmV3IG9uZSwgYW5kIGRyYWcgdG8gY2hhbmdlIHZhbHVlL3RpbWUnLFxyXG4gICAgICBlZGl0b3Jfbm90ZXNfcDM6ICdDVFJMK1ogdG8gdW5kbyBjaGFuZ2VzJyxcclxuICAgICAgZWRpdG9yX25vdGVzX3A0OiAnQ1RSTCtZIHRvIHJlZG8gY2hhbmdlcycsXHJcbiAgICAgIGFkZF90cmFjazogJ0NsaWNrIHRoaXMgYnV0dG9uIHRvIGFkZCBuZXcgZW1wdHkgdHJhY2tzJyxcclxuICAgICAgbm90ZV9ldmVudF9wMTogJ05vdGUgZXZlbnQuIERyYWcgZnJvbSB0aGUgcmlnaHQgZWRnZSB0byBjaGFuZ2UgdGhlIGR1cmF0aW9uIG9yIHByZXNzIGRlbGV0ZSBrZXkgdG8gcmVtb3ZlJyxcclxuICAgICAgbm90ZV9ldmVudF9wMjogJ0RyYWcgdG8gY2hhbmdlIHRoZSB2YWx1ZSBhbmQvb3Igc3RhcnRpbmcgdGltZScsXHJcbiAgICAgIG5vdGVfZXZlbnRfcDM6ICdOb3RlIGV2ZW50LiBDbGljayB0byBzZWxlY3QgYW5kIGVkaXQgaXQnLFxyXG4gICAgICBtdXRlZDogJ0Rpc2FibGUgdGhlIHRyYWNrIGluIG9yZGVyIHRvIHNpbGVuY2UgaXQnLFxyXG4gICAgICBzb2xvOiAnSXNvbGF0ZSB0aGUgdHJhY2sgc28gdGhhdCBpdCBpcyB0aGUgb25seSBvbmUgdGhhdCBwbGF5cy4gQ2FuIGJlIG1vcmUgdGhhbiBvbmUnLFxyXG4gICAgICBpbnN0cnVtZW50X2VkaXQ6IFwiQ2xpY2sgdGhpcyBidXR0b24gdG8gZWRpdCB0aGUgaW5zdHJ1bWVudFwiXHJcbiAgICB9XHJcbiAgfSxcclxuICBzb25nOiB7XHJcbiAgICBkcm9wX3BhdHRlcm46IFwiRHJvcCBwYXR0ZXJuIGhlcmVcIixcclxuICAgIHRvb2x0aXA6IHtcclxuICAgICAgbWVhc3VyZV9iZWF0czogXCJBbW91bnQgb2YgYmVhdHMgcGVyIG1lYXN1cmUuIE1ha2Ugc3VyZSB0aGlzIHZhbHVlIG1hdGNoIHRoZSBtZWFzdXJlIGxlbmd0aCBvZiB0aGUgcGF0dGVybnNcIixcclxuICAgICAgcGxheTogXCJDbGljayB0byBwbGF5L3BhdXNlIHRoZSBzb25nXCIsXHJcbiAgICAgIHN0b3A6IFwiQ2xpY2sgdG8gc3RvcCBwbGF5aW5nIHRoZSBzb25nXCIsXHJcbiAgICAgIGRvd25sb2FkOiBcIkNsaWNrIHRvIHJlY29yZCB0aGUgc29uZyBhbmQgZG93bmxvYWQgdGhlIGF1ZGlvIGZpbGVcIixcclxuICAgICAgZHJvcF9wYXR0ZXJuOiBcIkRyb3Agem9uZSBmb3IgcGF0dGVybnMsIGRyb3AgaGVyZSBhIHBhdHRlcm4gZnJvbSB0aGUgcGFuZWwgb24gdGhlIGxlZnRcIixcclxuICAgICAgcmVtb3ZlX2Jsb2NrOiBcIkNsaWNrIGhlcmUgdG8gcmVtb3ZlIHRoZSBwYXR0ZXJuIGFuZCBsZWF2ZSB0aGUgYmxvY2sgZW1wdHlcIixcclxuICAgICAgZWRpdF9ibG9jazogXCJDbGljayBoZXJlIHRvIGVkaXQgdGhlIHBhdHRlcm4gdXNlZCBieSB0aGlzIGJsb2NrXCJcclxuICAgIH1cclxuICB9LFxyXG4gIEJVVFRPTl9MQU5HX0VOOiAnRW5nbGlzaCcsXHJcbiAgQlVUVE9OX0xBTkdfRVM6ICdTcGFuaXNoJ1xyXG5cclxufTtcclxuXHJcbm11c2ljU2hvd0Nhc2VBcHAuY29uc3RhbnQoXCJlblRyYW5zbGF0aW9uc1wiLCBlblRyYW5zbGF0aW9ucyk7XHJcbiIsInZhciBtdXNpY1Nob3dDYXNlQXBwID0gYW5ndWxhci5tb2R1bGUoXCJNdXNpY1Nob3dDYXNlQXBwXCIpO1xyXG52YXIgZXNUcmFuc2xhdGlvbnMgPSB7XHJcbiAgbWlkaToge1xyXG4gICAgc2V0dGluZ3M6ICdPcGNpb25lcyBkZSBNSURJJyxcclxuICAgIGlucHV0czogJ0VudHJhZGFzJyxcclxuICAgIGNvbm5lY3RlZDogJ0VudHJhZGEgTUlESSBDb25lY3RhZGEnLFxyXG4gICAgZGlzY29ubmVjdGVkOiAnRW50cmFkYSBNSURJIERlc2NvbmVjdGFkYSAoQ2xpY2sgcGFyYSBjb25maWd1cmFyKScsXHJcbiAgICBldmVudHM6ICdFdmVudG9zJyxcclxuICAgIG9jdGF2ZTogJ09jdGF2YSBCYXNlJyxcclxuICAgIHRyYW5zcG9zZTogJ1RyYW5zcG9zaWNpb24nXHJcbiAgfSxcclxuICBvcGVuX3Byb2plY3Q6IHtcclxuICAgIHAxOiAnU2VsZWNjaW9uYSBlbCBwcm95ZWN0byBxdWUgcXVpZXJhcyBhYnJpcicsXHJcbiAgICB0aXRsZTogJ0FicmlyIFByb3llY3RvJ1xyXG4gIH0sXHJcbiAgYXJyYXlfZWRpdG9yOiB7XHJcbiAgICB0b29sdGlwOiB7XHJcbiAgICAgIHJlbW92ZV9pdGVtOiAnRWxpbWluYSBlbCBvYmpldG8gZGUgbGEgY29sZWNjaW9uJyxcclxuICAgICAgYWRkX2l0ZW06ICdDbGljayBwYXJhIGFncmVnYXIgdW4gbnVldm8gb2JqZXRvIGEgbGEgY29sZWNjaW9uJyxcclxuICAgICAgZWRpdF9pdGVtOiAnQ2xpY2sgcGFyYSBlZGl0YXIgZXN0ZSBvYmpldG8nXHJcbiAgICB9XHJcbiAgfSxcclxuICBpbmRleDoge1xyXG4gICAgbm90X2ltcGxlbWVudGVkOiAnRGlzY3VscGEsIGZ1bmNpb25hbGlkYWQgbm8gaW1wbGVtZW50YWRhJyxcclxuICAgIGZpbHRlcjogJ1RpcGVhIGFxdWkgbGFzIHBhbGFicmFzIGNsYXZlIHBhcmEgZmlsdHJhciBsb3Mgb2JqZXRvcycsXHJcbiAgICB0b29sdGlwOiB7XHJcbiAgICAgIHR5cGU6IHtcclxuICAgICAgICBpbnN0cnVtZW50OiAnRXN0ZSBlcyB1biByZWN1cnNvIGRlbCB0aXBvIGluc3RydW1lbnRvJyxcclxuICAgICAgICBwYXR0ZXJuOiAnRXN0ZSBlcyB1biByZWN1cnNvIGRlbCB0aXBvIHBhdHJvbicsXHJcbiAgICAgICAgc29uZzogJ0VzdGUgZXMgdW4gcmVjdXJzbyBkZWwgdGlwbyBjYW5jaW9uJyxcclxuICAgICAgICBmeDogJ0VzdGUgZXMgdW4gcmVjdXJzbyBkZWwgdGlwbyBmeCAoZWZlY3RvKSdcclxuICAgICAgfSxcclxuICAgICAgdHlwZV9wMTogJ1BhcmEgdXNhciBlc3RlIHJlY3Vyc28sIGFycmFzdHJhbG8gZGVzZGUgYXF1aSBoYXN0YSB0dSBjcmVhY2lvbicsXHJcbiAgICAgIHR5cGVfcDI6ICdQYXJhLCBlbiBsdWdhciBkZSBlc28sIGVkaXRhcmxvLCBoYXogZG9ibGUgY2xpY2sgZW4gZWwnLFxyXG4gICAgICBpbmRleDogJ0VzdGUgZXMgZWwgaW5kaWNlIGRlIG9iamV0b3MsIHB1ZWRlcyBlbmNvbnRyYXIgdHVzIG1hdGVyaWFsZXMgeSBwcm9kdWN0b3MgbGlzdGFkb3MgYXF1aSdcclxuICAgIH1cclxuICB9LFxyXG4gIHByb2plY3Q6IHtcclxuICAgIGJhc2ljX2luZm86ICdQcm9waWVkYWRlcyBkZWwgcHJveWVjdG8nLFxyXG4gICAgcmVmZXJlbmNlczogJ1JlZmVyZW5jaWFzJyxcclxuICAgIHNldHRpbmdzOiAnQ29uZmlndXJhY2lvbiBkZWwgUHJveWVjdG8nLFxyXG4gICAgJ25ldyc6ICdOdWV2byBQcm95ZWN0bydcclxuICB9LFxyXG4gIG1lbnU6IHtcclxuICAgICduZXcnOiAnQXJjaGl2bycsXHJcbiAgICBuZXdfaW5zdHJ1bWVudDogJ051ZXZvIEluc3RydW1lbnRvJyxcclxuICAgIG5ld19wYXR0ZXJuOiAnTnVldm8gUGF0cm9uJyxcclxuICAgIG5ld19zb25nOiAnTnVldmEgQ2FuY2lvbicsXHJcbiAgICBuZXdfcHJvamVjdDogJ051ZXZvIFByb3llY3RvLi4uJyxcclxuICAgIG9wZW5fcHJvamVjdDogJ0FicmlyIFByb3llY3RvLi4uJyxcclxuICAgIGZpbGVfaW1wb3J0OiAnSW1wb3J0YXIuLi4nLFxyXG4gICAgdG9vbHM6ICdIZXJyYW1pZW50YXMnLFxyXG4gICAgdG9vbHNfcHJlZmVyZW5jZXM6ICdQcmVmZXJlbmNpYXMnLFxyXG4gICAgaGVscF92aWV3X2hlbHA6ICdWZXIgUGFnaW5hIGRlIEF5dWRhJyxcclxuICAgIGhlbHBfcmVjaXBlczogJ1JlY2V0YXMnLFxyXG4gICAgaGVscF9yZWNpcGVzX2ludHJvOiAnUmVjb3JyaWRvIEludHJvZHVjdG9yaW8nLFxyXG4gICAgaGVscF9yZWNpcGVzX2hvd3RvX2NyZWF0ZV9zb25nOiAnQ29tbyBjcmVhciB1bmEgY2FuY2lvbicsXHJcbiAgICBoZWxwX3JlY2lwZXNfaG93dG9fY3JlYXRlX2luc3RydW1lbnQ6ICdDb21vIGNyZWFyIHVuIGluc3RydW1lbnRvIChjdWFkcmFkYSArIGVjbyBhIGRvcyB2b2NlcyknLFxyXG4gICAgaGVscF9jb250ZXh0dWFsX2hlbHA6ICdBeXVkYSBDb250ZXh0dWFsJyxcclxuICAgIGhlbHBfd2VsY29tZTogJ8KhQmllbnZlbmlkbyEnLFxyXG4gICAgaGVscF9hYm91dDogJ0FjZXJjYSBkZSBNdXNpYy5qcycsXHJcbiAgICByZWN5Y2xlX2JpbjogJ1BhcGVsZXJhIGRlIFJlY2ljbGFqZS4uLicsXHJcbiAgICB0b29sdGlwOiB7XHJcbiAgICAgICduZXcnOiAnUHVlZGVzIGNyZWFyIG51ZXZvcyBpdGVtcyBlbiBibGFuY28gZGVzZGUgZXN0YSBvcGNpb24nLFxyXG4gICAgICBwcmVmZXJlbmNlczogJ1B1ZWRlcyBlZGl0YXIgdHVzIHByZWZlcmVuY2lhcyBhcXVpJyxcclxuICAgICAgaGVscDogJ01lbnUgcGFyYSBhY2NlZGVyIGEgbGFzIG9wY2lvbmVzIGRlIGF5dWRhIHkgKkFjZXJjYSBEZSonXHJcbiAgICB9LFxyXG4gICAgcHJvamVjdDogJ1Byb3llY3RvJyxcclxuICAgIHByb2plY3Rfc2V0dGluZ3M6ICdDb25maWd1cmFjaW9uLi4uJyxcclxuICAgIHByb2plY3RfcmVtb3ZlX3Byb2plY3Q6ICdFbGltaW5hciBQcm95ZWN0bycsXHJcbiAgICBwcm9qZWN0X2V4cG9ydF9wcm9qZWN0OiAnRXhwb3J0YXIgUHJveWVjdG8nXHJcbiAgfSxcclxuICBjb250ZXh0dWFsX2hlbHA6IHtcclxuICAgIGVuYWJsZTogJ0FjdGl2YXIgQXl1ZGEgQ29udGV4dHVhbCcsXHJcbiAgICBkaXNhYmxlOiAnRGVzYWN0aXZhciBBeXVkYSBDb250ZXh0dWFsJ1xyXG4gIH0sXHJcbiAgcmVjeWNsZToge1xyXG4gICAgcDE6ICdFc3RhIGVzIGxhIHBhcGVsZXJhIGRlIHJlY2ljbGFqZSwgZGVzZGUgYXF1aSBwdWVkZXMgcmVzdGF1cmFyIGxvcyBlbGVtZW50b3MgcXVlIGhhbiBzaWRvIGVsaW1pbmFkb3MnLFxyXG4gICAgcDI6ICdSZWN1ZXJkYSBxdWUgbG9zIGVsZW1lbnRvcyBlbiBsYSBwYXBlbGVyYSBzZSBlbGltaW5hcmFuIHBlcm1hbmVudGVtZW50ZSBjdWFuZG8gc2UgYWdvdGUgZWwgZXNwYWNpbyBkaXNwb25pYmxlJyxcclxuICAgIHAzOiAnKiBIYXogZG9ibGUtY2xpY2sgZW4gZWwgZWxlbWVudG8gcXVlIHF1aWVyYXMgUkVTVEFVUkFSJyxcclxuICAgIHRpdGxlOiAnUGFwZWxlcmEgZGUgUmVjaWNsYWplJyxcclxuICAgIGNvbXBhY3RfdGl0bGU6ICdQYXBlbGVyYSBkZSBSLicsXHJcbiAgICBjb21wYWN0X2hpbnRfcmVzdG9yZTogJyogSGF6IGRvYmxlLWNsaWNrIGVuIGVsIGVsZW1lbnRvIHF1ZSBxdWllcmFzIFJFU1RBVVJBUicsXHJcbiAgICBjb21wYWN0X2hpbnRfb3BlbjogJyogSGF6IGNsaWNrIGFxdWkgcGFyYSBhYnJpciBsYSBwYXBlbGVyYSBkZSByZWNpY2xhamUnLFxyXG4gICAgRU1QVFk6ICdWYWNpYSdcclxuICB9LFxyXG4gIHdlbGNvbWU6IHtcclxuICAgIHRpdGxlOiAnQmllbnZlbmlkbyBhIE11c2ljLmpzOiBFZGljaW9uIGRlIDhiaXQnLFxyXG4gICAgcDE6ICdNdXNpYy5qcyBlcyB1bmEgYXBsaWNhY2lvbiB3ZWIgcXVlIHBlcm1pdGUgY29tcG9uZXIgbXVzaWNhIGNvbiBlbCBwb2RlciBkZSBqYXZhc2NyaXB0IChvcGNpb25hbCknLFxyXG4gICAgcDI6ICdMYSBwcmltZXJhIHZlcnNpb24gZXN0YSB0b3RhbG1lbnRlIG9yaWVudGFkYSBhIGxhIG11c2ljYSByZXRyby84Yml0IG1lZGlhbnRlIG9zY2lsYWRvcmVzIGVsZW1lbnRhbGVzLCBnZW5lcmFkb3JlcyBkZSBydWlkbyB5IHBhdHJvbmVzIGRlIG1vZHVsYWNpb24nLFxyXG4gICAgcDM6ICfCv1F1aWVyZXMgcmVhbGl6YXIgdW4gcmVjb3JyaWRvIGJhc2ljbz8nLFxyXG4gICAgbmV2ZXJzaG93OiAnTnVuY2EgbW9zdHJhciBlc3RlIG1lbnNhamUgZGUgbnVldm8nXHJcbiAgfSxcclxuICBhYm91dDoge1xyXG4gICAgdGl0bGU6ICdBY2VyY2EgZGUgTXVzaWMuanM6IEVkaWNpb24gZGUgOGJpdCcsXHJcbiAgICBwMzogJ0EgbGFyZ28gcGxhem8sIGVsIG9iamV0aXZvIGRlIG11c2ljLmpzIGVzIGN1YnJpciB0b2RhcyBsYXMgY2FwYXMgbmVjZXNhcmlhcyBlbnRyZSBlbCBBUEkgZGUgV2ViIEF1ZGlvIHByb3Zpc3RhIHDDsnIgbG9zIG5hdmVnYWRvcmVzIHkgdW5hIHNvbHVjaW9uIGNvbXBsZXRhIGRlIGNvbXBvc2ljaW9uIG11c2ljYWwgc2ltaWxhciBhIGxhcyBtYXMgY29ub2NpZGFzIGNvbW8gcG9yIGVqIEZMIFN0dWRpbycsXHJcbiAgICBhdXRob3JzOiAnQVVUT1JFUycsXHJcbiAgICBpX2FtOiAnWW8gc295IERhcmlvIFNlbWluYXJhLCBwZXJvIHRhbWJpZW4gdGVuZ28gcXVlIGRhciBjcmVkaXRvIGEgYXV0b3JlcyBkZSB2YXJpYXMgbGlicmVyaWFzIHF1ZSBzb24gY2xhdmU6JyxcclxuICAgIGNyZWRpdDoge1xyXG4gICAgICBtb2hheW9uYW86ICdAbW9oYXlvbmFvIChBdXRvciBkZSBUaW1icmUuanMpJyxcclxuICAgICAgaGlndW1hOiAnQGhpZ3VtYSAoQXV0b3IgZGUgV2ViQXVkaW9SZWNvcmRlciknLFxyXG4gICAgICBrcmlzdG9wb2xvdXM6ICdAa3Jpc3RvcG9sb3VzIChBdXRvciBkZSBsYSBwbGFudGlsbGEgZGUgYm9vdHN0cmFwIEJPT1RTVFJBLjM4NiknXHJcbiAgICB9LFxyXG4gICAgY29udHJpYnV0ZTogJ0NPTU8gQ09OVFJJQlVJUicsXHJcbiAgICBjb250YWN0X21lOiAnQ29udGFjdGFtZSBhIHRyYXZleiBkZSBnaXRodWInXHJcbiAgfSxcclxuICBjb21tb246IHtcclxuICAgIHllczogJ1NpJyxcclxuICAgIG5vOiAnTm8nLFxyXG4gICAgb2s6ICdBY2VwdGFyJyxcclxuICAgIGRpc21pc3M6ICdDZXJyYXInLFxyXG4gICAgY2FuY2VsOiAnQ2FuY2VsYXInLFxyXG4gICAgY3JlYXRlOiAnQ3JlYXInLFxyXG4gICAgb3BlbjogJ0FicmlyJyxcclxuICAgIG5hbWU6ICdOb21icmUnLFxyXG4gICAgbG9hZGVyX2Vycm9yOiAnRXJyb3IgYWwgaW50ZW50YXIgY2FyZ2FyIGVsIGFyY2hpdm8nLFxyXG4gICAgY2FudHJlbW92ZV9lcnJvcjogJ05vIHNlIHB1ZWRlIGVsaW1pbmFyIGVsIGFyY2hpdm8gc2kgZXN0YSBzaWVuZG8gdXRpbGl6YWRvJyxcclxuICAgIGNhbnRyZW1vdmVfcHJvamVjdF9lcnJvcjogJ05vIHNlIHB1ZWRlIGVsaW1pbmFyIGVsIHByb3llY3RvIHNpIGVzdGEgc2llbmRvIHVzYWRvIGRlc2RlIG90cm8gcHJveWVjdG8nLFxyXG4gICAgZXJyb3JfdGl0bGU6ICdFcnJvcicsXHJcbiAgICBsYW5ndWFnZTogJ0lkaW9tYTonLFxyXG4gICAgSEVMUDogJ0FZVURBJyxcclxuICAgIG1vcmU6ICdtYXMnLFxyXG4gICAgcmVtb3ZlOiAnRWxpbWkuJyxcclxuICAgICdleHBvcnQnOiAnRXhwb3J0YXInLFxyXG4gICAgcmVzZXQ6ICdGYWJyLicsXHJcbiAgICBwbGF5OiAnUmVwcm9kLicsXHJcbiAgICBwYXVzZTogJ1BhdXNhcicsXHJcbiAgICBzdG9wOiAnRGV0ZW5lcicsXHJcbiAgICByZWNvcmQ6ICdSZWMuJyxcclxuICAgIGJwbTogJ1BwbScsXHJcbiAgICBicG1fbGM6ICdwcG0nLFxyXG4gICAgYWRkOiAnQWdyZWcuJyxcclxuICAgIHRvb2x0aXA6IHtcclxuICAgICAgcGxheWluZ19zcGVlZDogJ1ZlbG9jaWRhZCBkZSByZXByb2R1Y2Npb24sIGNhbnRpZGFkIGRlIHB1bHNvcyBwb3IgbWludXRvJyxcclxuICAgICAgcmVtb3ZlX2l0ZW06ICdFbGltaW5hIGVsIGVsZW1lbnRvLCBwdWVkZXMgcmVzdGF1cmFybG8gZGVzZGUgbGEgcGFwZWxlcmEgZGUgcmVjaWNsYWplJyxcclxuICAgICAgbW9kdWxhdGlvbjogJ1B1ZWRlcyBjb25maWd1cmFyIGxvcyBlZmVjdG9zIGRlIG1vZHVsYWNpb24gYXF1aS4gU2kgbG8gZGVqYXMgdmFjaW8sIG5vIGhhYnJhIG1vZHVsYWNpb24nXHJcbiAgICB9LFxyXG4gICAgbmV3X2luc3RydW1lbnQ6ICdOdWV2byBJbnN0cnVtZW50bycsXHJcbiAgICBuZXdfcGF0dGVybjogJ051ZXZvIFBhdHJvbicsXHJcbiAgICBuZXdfc29uZzogJ051ZXZhIENhbmNpb24nLFxyXG4gICAgbW9kdWxhdGlvbjogJ01vZHVsYWNpb24gZGUge3tuYW1lfX0nXHJcbiAgfSxcclxuICBoZWxwOiB7XHJcbiAgICBGTE9XOiAnRkxVSk8gREUgTVVTSUMuSlMnLFxyXG4gICAgUkVDSVBFUzogJ1JFQ0VUQVMnLFxyXG4gICAgcDE6ICdQYXJhIGNyZWFyIHVuYSBjYW5jaW9uLCB0aWVuZXMgcXVlIGVuc2FtYmxhcmxhLCBhc2kgY29tbyBzdXMgY29tcG9uZW50ZXMnLFxyXG4gICAgcDI6ICdIYXkgdHJlcyB0aXBvcyBkZSByZWN1cnNvcyBxdWUgc2UgcHVlZGVuIGNyZWFyOiBpbnN0cnVtZW50b3MsIHBhdHJvbmVzIHkgY2FuY2lvbmVzJyxcclxuICAgIHAzOiAnTWllbnRyYXMgcXVlIGxhIHNlY2Npb24gZGUgbGEgZGVyZWNoYSBtdWVzdHJhIGVsIGVsZW1lbnRvIHF1ZSBzZSBlc3RhIGNyZWFuZG8sIGxhIHNlY2Npb24gZGUgbGEgaXpxdWllcmRhIG11ZXN0cmEgbG9zIG1hdGVyaWFsZXMgcXVlIHNlIHB1ZWRlbiB1c2FyJyxcclxuICAgIHA0OiAnUHVlZGVzIGFycmFzdHJhciB5IHNvbHRhciBlc29zIG1hdGVyaWFsZXMgZW4gbGFzIHpvbmFzIGluZGljYWRhcycsXHJcbiAgICBwNTogJ1BhcmEgdXNhciBhbGd1biByZWN1cnNvIGVuIGFsZ3VuIGVsZW1lbnRvIHF1ZSBlc3RlcyBjcmVhbmRvLCBsbyB0aWVuZXMgcXVlIGFycmFzdHJhciBhIGVzYXMgem9uYXMnLFxyXG4gICAgcDY6ICdTaWd1aWVuZG8gZXN0ZSBwcmluY2lwaW8sIHB1ZWRlcyB1c2FyIGluc3RydW1lbnRvcyBwYXJhIGNvbXBvbmVyIHBhdHJvbmVzLCB5IGZpbmFsbWVudGUsIGxvcyBwYXRyb25lcyBwYXJhIGNvbXBvbmVyIGxhcyBjYW5jaW9uZXMnLFxyXG4gICAgcDc6ICdBZGVtYXMsIHB1ZWRlcyBjcmVhciB0dXMgcHJvcGlvcyBpbnN0cnVtZW50b3MsIGNvbWJpbmFuZG8gdmFyaW9zIGVmZWN0b3M6JyxcclxuICAgIHA4OiAnTm8gdGUgcHJlb2N1cGVzIHNpIG5vIGxvIGVudGllbmRlcyBhaG9yYSBtaXNtbywgaGF5IHJlY2V0YXMgeSBheXVkYSBjb250ZXh0dWFsIHF1ZSBwb2RyYXMgdXNhciBwYXJhIGZhbWlsaWFyaXphcnRlIGNvbiBlc3RvcyBjb25jZXB0b3MnLFxyXG4gICAgcmVjaXBlczoge1xyXG4gICAgICBwMTogJ0xhcyByZWNldGFzLCBzb24gbWluaS10dXRvcmlhbGVzIGludGVyYWN0aXZvcyBxdWUgZXhwbGljYW4gY29tbyBjcmVhciBhbGdvIChwb3IgZWplbXBsbywgdW5hIGNhbmNpb24pJyxcclxuICAgICAgcDI6ICdBbGd1bm9zIHR1dG9yaWFsZXMgKENvbW8gcG9yIGVqZW1wbG8gXFwnUmVjb3JyaWRvIEludHJvZHVjdG9yaW9cXCcpIHNvbG8gZXhwbGljYW4gYWxndW5hcyBjb3NhcyBkZSBsYSBpbnRlcmZheiBwcmluY2lwYWwnLFxyXG4gICAgICBwMzogJ1RlIHJlY29taWVuZG8gcXVlIHNpZ2FzIGVzdGFzIHJlY2V0YXMgc2kgbm8gc2FiZXMgcXVlIGhhY2VyIG8gY29tbyBlbXBlemFyIGEgdXNhciBsYSBhcGxpY2FjaW9uLiBQdWVkZXMgYWNjZWRlciBhIGxhcyByZWNldGFzIGRlc2RlIGVsIG1lbnUgZGUgYXl1ZGEgKD8pJ1xyXG4gICAgfSxcclxuICAgIENPTlRFWFRVQUxfSEVMUDogXCJBWVVEQSBDT05URVhUVUFMXCIsXHJcbiAgICBjb250ZXh0dWFsX2hlbHA6IHtcclxuICAgICAgcDE6ICdIYXkgdW5hIHNlcmllIGRlIHRvb2x0aXBzIHF1ZSBleHBsaWNhbiBkZXRhbGxhZGFtZW50ZSBsYXMgZGlzdGludGFzIGZ1bmNpb25hbGlkYWRlcyBkZSBsYSBhcGxpY2FjaW9uLiBQdWVkZXMgYWN0aXZhciBvIGRlc2FjdGl2YXIgZXN0YXMgYXl1ZGFzIGNsaWNrZWFuZG8gZW4gZWwgcmVjdWFkcm8gcXVlIGFwYXJlY2UgZW4gbGEgZXNxdWluYSBpbmZlcmlvciBpenF1aWVyZGEgZGUgbGEgcGFudGFsbGEnXHJcbiAgICB9XHJcbiAgfSxcclxuICBlZGl0b3I6IHtcclxuICAgIGtleWJvYXJkX2luc3RydWN0aW9uczogJ1VzYSBsYXMgdGVjbGFzIFpYQ1ZCTk0gcGFyYSB0b2NhciBlbCBpbnN0cnVtZW50bywgbyBwYXNhIGVsIHB1bnRlcm8gZGVsIG1vdXNlIHNvYnJlIGVsIHRlY2xhZG8gdmlydHVhbCcsXHJcbiAgICB0b29sdGlwOiB7XHJcbiAgICAgIHRlc3RfaW5zdHJ1bWVudF9oZXJlOiAnUHJ1ZWJhIGVsIGluc3RydW1lbnRvIGFxdWksIHVzYW5kbyBlbCB0ZWNsYWRvIG8gZWwgbW91c2UnLFxyXG4gICAgICB0eXBlX2hlcmVfaW5zdHJ1bWVudDogJ0VzY3JpYmUgYXF1aSBlbCBub21icmUgcGFyYSBlbCBpbnN0cnVtZW50bydcclxuICAgIH1cclxuICB9LFxyXG4gIHBhdHRlcm46IHtcclxuICAgIHRyYWNrX211dGVkOiAnQXBhZ2FkbycsXHJcbiAgICB0cmFja19zb2xvOiAnU29sbycsXHJcbiAgICBtZWFzdXJlX2JlYXRzOiAnUHVsc29zL2NvbXBhcycsXHJcbiAgICBtZWFzdXJlX2NvdW50OiAnQ2FudC4gZGUgY29tcGFzZXMnLFxyXG4gICAgem9vbV9sZXZlbDogJ05pdmVsIGRlIHpvb20nLFxyXG4gICAgdHJhY2tzOiAnUGlzdGFzJyxcclxuICAgIGRyb3BfaW5zdHJ1bWVudDogJ1N1ZWx0YSBlbCBpbnN0cnVtZW50byBhcXVpJyxcclxuICAgIHRvb2x0aXA6IHtcclxuICAgICAgYW1vdW50X2JlYXRzOiAnQ2FudGlkYWQgZGUgcHVsc29zIHBvciBjb21wYXMnLFxyXG4gICAgICB0b3RhbF9tZWFzdXJlczogJ0NhbnRpZGFkIHRvdGFsIGRlIGNvbXBhc2VzIGVuIGVsIHBhdHJvbicsXHJcbiAgICAgIGNoYW5nZV9uYW1lOiAnQ2FtYmlhIGVsIG5vbWJyZSBkZWwgcGF0cm9uJyxcclxuICAgICAgem9vbV9sZXZlbDogJ05pdmVsIGRlIHpvb20gcGFyYSB0b2RhcyBsYXMgcGlzdGFzJyxcclxuICAgICAgcGxheTogJ0NsaWNrIHBhcmEgcmVwcm9kdWNpciBlbCBwYXRyb24nLFxyXG4gICAgICBzdG9wOiAnQ2xpY2sgcGFyYSBkZXRlbmVyIGxhIHJlcHJvZHVjY2lvbicsXHJcbiAgICAgIHJlbW92ZV90cmFjazogJ0NsaWNrIHBhcmEgZWxpbWluYXIgbGEgcGlzdGEnLFxyXG4gICAgICBjb21wYWN0X3ZpZXdfcDE6ICdWaXN0YSBjb21wYWN0YSBkZSBsYSBwaXN0YTogbXVlc3RyYSBsYXMgbm90YXMgc2luIG5lY2VzaWRhZCBkZSBleHBhbmRpciBsYSBwaXN0YS4nLFxyXG4gICAgICBjb21wYWN0X3ZpZXdfcDI6ICdDbGlja2VhIGFxdWkgcGFyYSBleHBhbmRpciBsYSBwaXN0YScsXHJcbiAgICAgIGRyb3Bfem9uZTogJ0FyZWEgcGFyYSBzb2x0YXIgZWwgaW5zdHJ1bWVudG8sIGFycmFzdHJhIGFxdWkgaW5zdHJ1bWVudG9zIGRlbCBwYW5lbCBpenF1aWVyZG8gcGFyYSB1c2FybG9zIGVuIGxhIHBpc3RhJyxcclxuICAgICAgZWRpdG9yX25vdGVzX3AxOiAnQXJlYSBkZSBub3RhcywgcHVlZGVzIGFncmVnYXIgbGFzIG5vdGFzIGFxdWk6JyxcclxuICAgICAgZWRpdG9yX25vdGVzX3AyOiAnQ2xpY2tlYSBwYXJhIGFncmVnYXIgdW5hIG51ZXZhIG5vdGEsIHkgYXJyYXN0cmFsYXMgcGFyYSBjYW1iaWFyIHN1IHZhbG9yIHkgc3UgdGllbXBvIGRlIGluaWNpbyBlbiBsYSBzZWN1ZW5jaWEnLFxyXG4gICAgICBlZGl0b3Jfbm90ZXNfcDM6ICdDVFJMK1ogcGFyYSBkZXNoYWNlciBjYW1iaW9zJyxcclxuICAgICAgZWRpdG9yX25vdGVzX3A0OiAnQ1RSTCtZIHBhcmEgcmVoYWNlciBjYW1iaW9zJyxcclxuICAgICAgYWRkX3RyYWNrOiAnQ2xpY2tlYSBlc3RlIGJvdG9uIHBhcmEgYWdyZWdhciB1bmEgbnVldmEgcGlzdGEgdmFjaWEnLFxyXG5cclxuICAgICAgbm90ZV9ldmVudF9wMTogJ0V2ZW50byBkZSBub3RhLiBBcnJhc3RyYSBkZXNkZSBlbCBib3JkZSBkZXJlY2hvIHBhcmEgY2FtYmlhciBzdSBkdXJhY2lvbiwgbyBwcmVzaW9uYSBsYSB0ZWNsYSBTVVBSLiBwYXJhIGVsaW1pbmFybG8nLFxyXG4gICAgICBub3RlX2V2ZW50X3AyOiAnQXJyYXN0cmEgcGFyYSBjYW1iaWFyIGVsIHZhbG9yIG8gZWwgdGllbXBvIGRlIGNvbWllbnpvIGVuIGxhIHNlY3VlbmNpYScsXHJcbiAgICAgIG5vdGVfZXZlbnRfcDM6ICdFdmVudG8gZGUgbm90YS4gQ2xpY2tlYSBwYXJhIHNlbGVjY2lvbmFybG8geSBlZGl0YXJsbycsXHJcbiAgICAgIG11dGVkOiAnRGVzYWN0aXZhIGxhIHBpc3RhIGhhY2llbmRvIHF1ZSBubyBzZSByZXByb2R1emNhJyxcclxuICAgICAgc29sbzogJ0Fpc2xhIGxhIHBpc3RhIGRlIG1hbmVyYSBxdWUgc2VhIGxhIHVuaWNhIHF1ZSBzZSByZXByb2R1emNhLiBQdWVkZW4gYWlzbGFyc2UgdmFyaWFzJyxcclxuICAgICAgaW5zdHJ1bWVudF9lZGl0OiAnQ2xpY2tlYSBlc3RlIGJvdG9uIHBhcmEgZWRpdGFyIGVsIGluc3RydW1lbnRvJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgc29uZzoge1xyXG4gICAgZHJvcF9wYXR0ZXJuOiBcIlN1ZWx0YSBlbCBwYXRyb24gYXF1aVwiLFxyXG4gICAgdG9vbHRpcDoge1xyXG4gICAgICBtZWFzdXJlX2JlYXRzOiBcIlB1bHNvcy9Db21wYXMuIFRpZW5lIHF1ZSBjb2luY2lkaXIgY29uIGVsIGRlIGxvcyBwYXRyb25lcyBxdWUgc2UgdXNhblwiLFxyXG4gICAgICBwbGF5OiBcIkNsaWNrIHBhcmEgcmVwcm9kdWNpci9wYXVzYXIgbGEgY2FuY2lvblwiLFxyXG4gICAgICBzdG9wOiBcIkNsaWNrIHBhcmEgZGV0ZW5lciBsYSByZXByb2R1Y2Npb25cIixcclxuICAgICAgZG93bmxvYWQ6IFwiQ2xpY2sgcGFyYSBncmFiYXIgbGEgY2FuY2lvbiBhIHVuIGFyY2hpdm8gZGUgYXVkaW8geSBkZXNjYXJnYXJsb1wiLFxyXG4gICAgICBkcm9wX3BhdHRlcm46IFwiQXJlYSBwYXJhIHNvbHRhciBsb3MgcGF0cm9uZXMsIGFycmFzdHJhIGFxdWkgcGF0cm9uZXMgZGVzZGUgZWwgcGFuZWwgaXpxdWllcmRvXCIsXHJcbiAgICAgIHJlbW92ZV9ibG9jazogXCJDbGljayBhcXVpIHBhcmEgZWxpbWluYXIgZWwgcGF0cm9uIHkgZGVqYXIgZWwgYmxvcXVlIHZhY2lvXCIsXHJcbiAgICAgIGVkaXRfYmxvY2s6IFwiQ2xpY2sgYXF1aSBwYXJhIHNhbHRhciBhIGxhIGVkaWNpb24gZGVsIHBhdHJvbiB1dGlsaXphZG8gZW4gZXN0ZSBibG9xdWVcIlxyXG4gICAgfVxyXG4gIH0sXHJcbiAgc3RhY2s6IHtcclxuICAgIGRyb3BfZWxlbWVudHNfaGVyZTogXCJzdWVsdGEgbnVldm9zIGVsZW1lbnRvcyBhcXVpXCIsXHJcbiAgICB0b29sdGlwOiB7XHJcbiAgICAgIHlvdV9jYW5fZHJvcF9uZXdfZWZmZWN0c19oZXJlOiAnUHVlZGVzIHNvbHRhciBudWV2b3MgZWZlY3RvcyBkZWwgaW5kaWNlIGFxdWknLFxyXG4gICAgICByZW1vdmU6ICdFbGltaW5hIGVsIGVmZWN0byBkZSBsYSBzZWN1ZW5jaWEnLFxyXG4gICAgICB1cDogJ0NhbWJpYSBlbCBvcmRlbiBkZWwgZWxlbWVudG8sIHBhcmEgcXVlIHNlIGVqZWN1dGUgREVTUFVFUycsXHJcbiAgICAgIGRvd246ICdDYW1iaWEgZWwgb3JkZW4gZGVsIGVsZW1lbnRvLCBwYXJhIHF1ZSBzZSBlamVjdXRlIEFOVEVTJyxcclxuICAgICAgZXhwYW5kOiAnRXhwYW5kZS9Db21wcmltZSBsYSB2aXN0YSBhdmFuemFkYSBkZWwgZWxlbWVudG8nXHJcbiAgICB9XHJcbiAgfSxcclxuICBCVVRUT05fTEFOR19FTjogJ0luZ2xlcycsXHJcbiAgQlVUVE9OX0xBTkdfRVM6ICdFc3Bhw7FvbCdcclxufTtcclxuXHJcbm11c2ljU2hvd0Nhc2VBcHAuY29uc3RhbnQoXCJlc1RyYW5zbGF0aW9uc1wiLCBlc1RyYW5zbGF0aW9ucyk7XHJcbiIsInZhciBtdXNpY1Nob3dDYXNlQXBwID0gYW5ndWxhci5tb2R1bGUoXCJNdXNpY1Nob3dDYXNlQXBwXCIpO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5jb25maWcoWyckdHJhbnNsYXRlUHJvdmlkZXInLCBmdW5jdGlvbiAoJHRyYW5zbGF0ZVByb3ZpZGVyKSB7XHJcbiAgdmFyIGdldEJyb3dzZXJMYW5ndWFnZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCEkdHJhbnNsYXRlUHJvdmlkZXIucmVzb2x2ZUNsaWVudExvY2FsZSgpKSByZXR1cm4gJ2VuJ1xyXG4gICAgdmFyIGxhbmdDb2RlID0gJHRyYW5zbGF0ZVByb3ZpZGVyLnJlc29sdmVDbGllbnRMb2NhbGUoKS5zcGxpdChcIi1cIilbMF07XHJcbiAgICBpZiAoIWxhbmdDb2RlKSByZXR1cm4gJ2VuJztcclxuICAgIHJldHVybiAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKClbbGFuZ0NvZGVdID8gbGFuZ0NvZGUgOiAnZW4nO1xyXG4gIH07XHJcblxyXG4gICR0cmFuc2xhdGVQcm92aWRlclxyXG4gICAgLnByZWZlcnJlZExhbmd1YWdlKGdldEJyb3dzZXJMYW5ndWFnZSgpKTtcclxuXHJcbiAgJHRyYW5zbGF0ZVByb3ZpZGVyXHJcbiAgICAuZmFsbGJhY2tMYW5ndWFnZSgnZW4nKTtcclxuXHJcbiAgJHRyYW5zbGF0ZVByb3ZpZGVyLnVzZVNhbml0aXplVmFsdWVTdHJhdGVneShudWxsKTtcclxuICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlTG9hZGVyKCd0cmFuc2xhdGlvbnNMb2FkZXInKTtcclxuXHJcbn1dKTtcclxuIiwidmFyIG11c2ljU2hvd0Nhc2VBcHAgPSBhbmd1bGFyLm1vZHVsZShcIk11c2ljU2hvd0Nhc2VBcHBcIik7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLmNvbmZpZyhbXCIkcm91dGVQcm92aWRlclwiLCBcIiRsb2NhdGlvblByb3ZpZGVyXCIsIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xyXG4gICRyb3V0ZVByb3ZpZGVyXHJcbiAgICAud2hlbignL2VkaXRvci86cHJvamVjdC9pbnN0cnVtZW50LzppZCcsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICdzaXRlL3RlbXBsYXRlcy9lZGl0b3IuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdFZGl0b3JDb250cm9sbGVyJ1xyXG4gICAgfSlcclxuICAgIC53aGVuKCcvZWRpdG9yLzpwcm9qZWN0L3NvbmcvOmlkJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJ3NpdGUvdGVtcGxhdGVzL3NvbmdFZGl0b3IuaHRtbCcsXHJcbiAgICAgIGNvbnRyb2xsZXI6ICdTb25nRWRpdG9yQ29udHJvbGxlcidcclxuICAgIH0pXHJcbiAgICAud2hlbignL2VkaXRvci86cHJvamVjdC9wYXR0ZXJuLzppZCcsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICdzaXRlL3RlbXBsYXRlcy9wYXR0ZXJuRWRpdG9yLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnUGF0dGVybkVkaXRvckNvbnRyb2xsZXInXHJcbiAgICB9KVxyXG4gICAgLndoZW4oJy9lZGl0b3IvOnByb2plY3QnLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAnc2l0ZS90ZW1wbGF0ZXMvZGFzaGJvYXJkLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnUHJvamVjdERhc2hib2FyZENvbnRyb2xsZXInXHJcbiAgICB9KVxyXG4gICAgLndoZW4oJy8nLCB7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiAnc2l0ZS90ZW1wbGF0ZXMvZGFzaGJvYXJkLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnRGFzaGJvYXJkQ29udHJvbGxlcidcclxuICAgIH0pO1xyXG5cclxuICAvLyBjb25maWd1cmUgaHRtbDUgdG8gZ2V0IGxpbmtzIHdvcmtpbmcgb24ganNmaWRkbGVcclxuICAvLyRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcclxufV0pOztcclxuXHJcblxyXG5cclxuIiwidmFyIG11c2ljU2hvd0Nhc2VBcHAgPSBhbmd1bGFyLm1vZHVsZShcIk11c2ljU2hvd0Nhc2VBcHBcIik7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLmRpcmVjdGl2ZShcIm11c2ljT2JqZWN0RWRpdG9yXCIsIFtcIiR0aW1lb3V0XCIsIFwiJGh0dHBcIiwgXCJUeXBlU2VydmljZVwiLCBcIlJlY2lwZVwiLCBcIk11c2ljT2JqZWN0RmFjdG9yeVwiLCBmdW5jdGlvbigkdGltZW91dCwgJGh0dHAsIFR5cGVTZXJ2aWNlLCBSZWNpcGUsIE11c2ljT2JqZWN0RmFjdG9yeSkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge1xyXG4gICAgICBmaWxlOiBcIj1maWxlXCJcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZVVybDogXCJzaXRlL3RlbXBsYXRlcy9vYmplY3RFZGl0b3IuaHRtbFwiLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgIHZhciBmaWxlO1xyXG4gICAgICB2YXIgdHlwZXMgPSBUeXBlU2VydmljZS5nZXRUeXBlcygpO1xyXG5cclxuICAgICAgc2NvcGUub3V0cHV0ID0ge307XHJcblxyXG4gICAgICBzY29wZS5wYXJhbWV0ZXJzID0gW107XHJcbiAgICAgIHNjb3BlLnJlY2lwZSA9IFJlY2lwZS5zdGFydDtcclxuICAgICAgc2NvcGUudGVybXNjaGFuZ2VkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2NvcGUuJGJyb2FkY2FzdCgndGVybXNjaGFuZ2VkJyk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS5mX3QgPSBmdW5jdGlvbihzdHIsIHN0YXRlKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciByZXQgPSBldmFsKFwiKGZ1bmN0aW9uKHQpIHsgcmV0dXJuIFwiICsgc3RyICsgXCI7IH0pXCIpO1xyXG4gICAgICAgICAgZGVsZXRlIHN0YXRlLmVycm9yO1xyXG5cclxuICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICBzdGF0ZS5lcnJvciA9IGUudG9TdHJpbmcoKTtcclxuICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUub3NjVGVybXNVcGRhdGVGcm9tV2F2ZUZvcm0gPSBmbi5kZWJvdW5jZShmdW5jdGlvbih3YXZlZm9ybSwgdGVybXMsIHJlc29sdXRpb24pIHtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciB3YXZlZm9ybSA9IGV2YWwoXCIoZnVuY3Rpb24odCkgeyByZXR1cm4gXCIgKyB3YXZlZm9ybSArIFwiOyB9KVwiKTtcclxuICAgICAgICAgIHZhciBjb3VudCA9IHJlc29sdXRpb247XHJcbiAgICAgICAgICB2YXIgdmFsdWVzID0gbmV3IEFycmF5KGNvdW50KTtcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICB2YWx1ZXNbaV0gPSB3YXZlZm9ybShpL2NvdW50KTtcclxuICAgICAgICAgICAgaWYgKGlzTmFOKHZhbHVlc1tpXSkpIHRocm93IFwiTm90IGEgbnVtYmVyOiBcIiArIHZhbHVlc1tpXTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB2YXIgZnQgPSBuZXcgREZUKHZhbHVlcy5sZW5ndGgpO1xyXG4gICAgICAgICAgZnQuZm9yd2FyZCh2YWx1ZXMpO1xyXG5cclxuICAgICAgICAgIGZvciAodmFyIGk9MDtpPGNvdW50O2krKykge1xyXG4gICAgICAgICAgICB0ZXJtcy5jb3NbaV0gPSBmdC5yZWFsW2ldO1xyXG4gICAgICAgICAgICB0ZXJtcy5zaW5baV0gPSBmdC5pbWFnW2ldO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGVybXMuY29zLmxlbmd0aCA9IGZ0LnJlYWwubGVuZ3RoLzI7XHJcbiAgICAgICAgICB0ZXJtcy5zaW4ubGVuZ3RoID0gZnQuaW1hZy5sZW5ndGgvMjtcclxuXHJcbiAgICAgICAgICB2YXIgZiA9IGZ1bmN0aW9uKHQpe1xyXG4gICAgICAgICAgICB2YXIgcmV0ID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaT0xO2k8Y291bnQvMjtpKyspIHtcclxuICAgICAgICAgICAgICB2YXIgYSA9IHRlcm1zLnNpbltpXTtcclxuICAgICAgICAgICAgICB2YXIgYiA9IHRlcm1zLmNvc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgcmV0ID0gcmV0ICsgYSAqIE1hdGguc2luKHQqMipNYXRoLlBJKmkpO1xyXG4gICAgICAgICAgICAgIHJldCA9IHJldCArIGIgKiBNYXRoLmNvcyh0KjIqTWF0aC5QSSppKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICB2YXIgbWF4dmFsdWUgPSAwO1xyXG4gICAgICAgICAgdmFyIGNvdW50ID0gdGVybXMuc2luLmxlbmd0aDtcclxuICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGYoaS9jb3VudCk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZT5tYXh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIG1heHZhbHVlPXZhbHVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlPC1tYXh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIG1heHZhbHVlPS12YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGZvciAodmFyIGk9MDtpPGNvdW50O2krKykge1xyXG4gICAgICAgICAgICB0ZXJtcy5zaW5baV0gPSB0ZXJtcy5zaW5baV0gLyBtYXh2YWx1ZTtcclxuICAgICAgICAgICAgdGVybXMuY29zW2ldID0gdGVybXMuY29zW2ldIC8gbWF4dmFsdWU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLmludmFsaWRXYXZlZm9ybSA9IGZhbHNlO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBzY29wZS4kYnJvYWRjYXN0KCd0ZXJtc2NoYW5nZWQnKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzY29wZS5pbnZhbGlkV2F2ZWZvcm0gPSBlcnIudG9TdHJpbmcoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0sNDAwKTtcclxuXHJcbiAgICAgIHNjb3BlLm9zY1Rlcm1zVXBkYXRlID0gZm4uZGVib3VuY2UoZnVuY3Rpb24oc2VyaWUsIHRlcm1zLCBlcnJWYXIpIHtcclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciBzZXJpZSA9IGV2YWwoXCIoZnVuY3Rpb24obikgeyByZXR1cm4gXCIgKyBzZXJpZSArIFwiOyB9KVwiKTtcclxuICAgICAgICAgIGZvciAodmFyIG49MTtuPDUxMjtuKyspIHtcclxuICAgICAgICAgICAgdGVybXNbbl09c2VyaWUobik7XHJcbiAgICAgICAgICAgIGlmIChpc05hTih0ZXJtc1tuXSkpIHRocm93IFwiTm90IGEgbnVtYmVyOiBcIiArIHRlcm1zW25dO1xyXG4gIFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc2NvcGVbZXJyVmFyXSA9IGZhbHNlO1xyXG4gICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLiRicm9hZGNhc3QoJ3Rlcm1zY2hhbmdlZCcpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2NvcGVbZXJyVmFyXSA9IGVyci50b1N0cmluZygpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LDQwMCk7XHJcblxyXG4gICAgICBzY29wZS5yYW5nZSA9IGZ1bmN0aW9uKGluaXQsIGVuZCkge1xyXG4gICAgICAgIHZhciB4ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaT1pbml0O2k8PWVuZDtpKyspIHtcclxuICAgICAgICAgIHgucHVzaChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgdHJ1dGh5ID0gZnVuY3Rpb24oeCApIHsgcmV0dXJuIHg7IH07XHJcbiAgICAgIHZhciB1cGRhdGVPYmplY3QgPSBmdW5jdGlvbihuZXdWYWx1ZSkge1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKHNjb3BlLmZpbGUgJiYgc2NvcGUuZmlsZS5jaGFuZ2VkKSBzY29wZS5maWxlLmNoYW5nZWQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBvdXRwdXRPYnNlcnZlcjtcclxuICAgICAgc2NvcGUuJG9uKFwiJGRlc3Ryb3lcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKG91dHB1dE9ic2VydmVyKSBvdXRwdXRPYnNlcnZlci5kZXN0cm95KCk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdmFyIHVwZGF0ZVRlbXBsYXRlID0gZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICAgIGlmICghZmlsZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZiAob3V0cHV0T2JzZXJ2ZXIpIG91dHB1dE9ic2VydmVyLmRlc3Ryb3koKTtcclxuICAgICAgICB2YXIgb3V0cHV0T2JzZXJ2ZXIgPSBNdXNpY09iamVjdEZhY3RvcnkoKS5vYnNlcnZlT3V0cHV0KGZpbGUsIGZ1bmN0aW9uKG91dHB1dCkge1xyXG4gICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLm91dHB1dCA9IG91dHB1dDtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0eXBlcy50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNjb3BlLnNlbGVjdGVkVHlwZSA9IGZpbGUudHlwZTtcclxuXHJcbiAgICAgICAgICAgIFR5cGVTZXJ2aWNlLmdldFR5cGUoZmlsZS50eXBlLCBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzY29wZS50ZW1wbGF0ZVVybCA9IHR5cGUudGVtcGxhdGVVcmw7XHJcbiAgICAgICAgICAgICAgICBzY29wZS50eXBlID0gdHlwZTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIHR5cGUuX2RlZmF1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWxlLmRhdGFba10gPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWxlLmRhdGFba10gPXR5cGUuX2RlZmF1bHRba107XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZS5wYXJhbWV0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgIHNjb3BlLnBhcmFtZXRlcnMgPSB0eXBlLnBhcmFtZXRlcnMubWFwKGZ1bmN0aW9uKHBhcmFtZXRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBwYXJhbWV0ZXIubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHBhcmFtZXRlcixcclxuICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmaWxlLmRhdGEgJiYgdHlwZW9mIGZpbGUuZGF0YVtwYXJhbWV0ZXIubmFtZV0gIT09IFwidW5kZWZpbmVkXCIgPyBmaWxlLmRhdGFbcGFyYW1ldGVyLm5hbWVdIDogcGFyYW1ldGVyLnZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZS5jb21wb25lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgIHNjb3BlLm1vZHVsYXRpb25zID0gKHR5cGUuY29tcG9uZW50c3x8W10pLm1hcChmdW5jdGlvbihjb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogY29tcG9uZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IChmaWxlLmRhdGEgJiYgZmlsZS5kYXRhLm1vZHVsYXRpb24gJiYgZmlsZS5kYXRhLm1vZHVsYXRpb25bY29tcG9uZW50XSl8fCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3RhY2tcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5OiBbXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdXBkYXRlT2JqZWN0KGZpbGUuZGF0YSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChzY29wZS5maWxlKSB1cGRhdGVUZW1wbGF0ZShzY29wZS5maWxlKTtcclxuXHJcbiAgICAgIHR5cGVzLnRoZW4oZnVuY3Rpb24odHlwZXMpIHtcclxuICAgICAgICBzY29wZS50eXBlcyA9IHR5cGVzO1xyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgICAgIHZhciBjaGFuZ2VUeXBlID0gZnVuY3Rpb24obmV3VmFsdWUpIHtcclxuICAgICAgICBpZiAoIW5ld1ZhbHVlKSByZXR1cm47XHJcbiAgICAgICAgaWYgKCFzY29wZS5maWxlKSByZXR1cm47XHJcbiAgICAgICAgc2NvcGUuZmlsZS50eXBlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgdXBkYXRlVGVtcGxhdGUoc2NvcGUuZmlsZSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS4kd2F0Y2goXCJtb2R1bGF0aW9uc1wiLCBmdW5jdGlvbihuZXdWYWx1ZSkge1xyXG4gICAgICAgIGlmICghc2NvcGUubW9kdWxhdGlvbnMpIHJldHVybjtcclxuICAgICAgICBzY29wZS5tb2R1bGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG1vZHVsYXRpb24pIHtcclxuICAgICAgICAgIHNjb3BlLmZpbGUuZGF0YS5tb2R1bGF0aW9uID0gc2NvcGUuZmlsZS5kYXRhLm1vZHVsYXRpb258fHt9O1xyXG4gICAgICAgICAgc2NvcGUuZmlsZS5kYXRhLm1vZHVsYXRpb25bbW9kdWxhdGlvbi5uYW1lXSA9IG1vZHVsYXRpb24udmFsdWU7XHJcbiAgICAgICAgfSk7IFxyXG4gICAgICAgIHNjb3BlLiRlbWl0KFwib2JqZWN0Q2hhbmdlZFwiKTtcclxuICAgICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgICBzY29wZS4kd2F0Y2goXCJwYXJhbWV0ZXJzXCIsIGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCFzY29wZS5wYXJhbWV0ZXJzKSByZXR1cm47XHJcbiAgICAgICAgc2NvcGUucGFyYW1ldGVycy5mb3JFYWNoKGZ1bmN0aW9uKHBhcmFtZXRlcikge1xyXG4gICAgICAgICAgc2NvcGUuZmlsZS5kYXRhW3BhcmFtZXRlci5kYXRhLm5hbWVdID0gcGFyYW1ldGVyLnZhbHVlO1xyXG4gICAgICAgIH0pOyBcclxuICAgICAgICBzY29wZS4kZW1pdChcIm9iamVjdENoYW5nZWRcIik7XHJcbiAgICAgIH0sIHRydWUpO1xyXG4gICAgICBzY29wZS4kd2F0Y2goXCJzZWxlY3RlZFR5cGVcIiwgY2hhbmdlVHlwZSlcclxuICAgICAgc2NvcGUuJHdhdGNoKFwiZmlsZVwiLCB1cGRhdGVUZW1wbGF0ZSk7XHJcbiAgICAgIC8vc2NvcGUuJHdhdGNoKFwiZmlsZS5kYXRhXCIsIGZuLmRlYm91bmNlKGZ1bmN0aW9uKG5ld1ZhbHVlKSB7IGRlYnVnZ2VyOyB9LDgwMCksIHRydWUpO1xyXG4gICAgfVxyXG4gIH07XHJcbn1dKTtcclxuXHJcbm11c2ljU2hvd0Nhc2VBcHAuZGlyZWN0aXZlKFwiYXJyYXlFZGl0b3JcIiwgW1wiJHRpbWVvdXRcIiwgXCJSZWNpcGVcIiwgZnVuY3Rpb24oJHRpbWVvdXQsIFJlY2lwZSkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge1xyXG4gICAgICBkYXRhOiBcIj1kYXRhXCJcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZVVybDogXCJzaXRlL3RlbXBsYXRlcy9hcnJheUVkaXRvci5odG1sXCIsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgc2NvcGUuZGF0YS5zdWJvYmplY3RzPXNjb3BlLmRhdGEuc3Vib2JqZWN0c3x8W107XHJcbiAgICAgIHNjb3BlLm1heEVsZW1lbnRzID0gYXR0cnMubWF4ZWxlbWVudHMgPyBwYXJzZUludChhdHRycy5tYXhlbGVtZW50cykgOiBJbmZpbml0eTtcclxuICAgICAgc2NvcGUuY3VycmVudFRhYiA9IDA7XHJcbiAgICAgIHNjb3BlLnJlY2lwZSA9IFJlY2lwZS5zdGFydDtcclxuXHJcbiAgICAgIHZhciBhZGRPYmplY3QgPSBmdW5jdGlvbihuZXdPYmplY3QpIHtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHNjb3BlLmRhdGEuc3Vib2JqZWN0cz1zY29wZS5kYXRhLnN1Ym9iamVjdHN8fFtdO1xyXG4gICAgICAgICAgc2NvcGUuZGF0YS5zdWJvYmplY3RzLnB1c2gobmV3T2JqZWN0KTtcclxuICAgICAgICAgIHNjb3BlLnNldEN1cnJlbnRUYWIoc2NvcGUuZGF0YS5zdWJvYmplY3RzLmxlbmd0aC0xKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNjb3BlLnNldEN1cnJlbnRUYWIgPSBmdW5jdGlvbihpZHgpIHtcclxuICAgICAgICBzY29wZS5jdXJyZW50VGFiID0gaWR4O1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUucmVtb3ZlT2JqZWN0ID0gZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgICAgc2NvcGUuZGF0YS5zdWJvYmplY3RzID0gc2NvcGUuZGF0YS5zdWJvYmplY3RzLmZpbHRlcihmdW5jdGlvbihvKSB7cmV0dXJuIG8gIT09IG9iamVjdDsgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS5hZGRPYmplY3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBhZGRPYmplY3Qoe2RhdGE6IHthcnJheTogW119LCB0eXBlOiBcInN0YWNrXCJ9KVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKHNjb3BlLmRhdGEuc3Vib2JqZWN0cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBzY29wZS5hZGRPYmplY3QoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbn1dKTtcclxuXHJcbm11c2ljU2hvd0Nhc2VBcHAuZGlyZWN0aXZlKFwibXVzaWNTdGFja1wiLCBbXCIkdGltZW91dFwiLCBcIlJlY2lwZVwiLCBcIlR5cGVTZXJ2aWNlXCIsIGZ1bmN0aW9uKCR0aW1lb3V0LCBSZWNpcGUsIFR5cGVTZXJ2aWNlKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB7XHJcbiAgICAgIGluaXRGaWxlOiBcIj1pbml0RmlsZVwiLFxyXG4gICAgICBkcm9wem9uZUV4dHJhTmFtZTogXCI9ZHJvcHpvbmVFeHRyYU5hbWVcIlxyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlVXJsOiBcInNpdGUvdGVtcGxhdGVzL3N0YWNrLmh0bWxcIixcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICBzY29wZS5yZWNpcGUgPSBSZWNpcGUuc3RhcnQ7XHJcblxyXG4gICAgICB2YXIgc3dhcCA9IGZ1bmN0aW9uKGlkeDEsIGlkeDIpIHtcclxuICAgICAgICBzY29wZS4kZW1pdChcInN0YWNrQ2hhbmdlZFwiKTtcclxuXHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgdG1wID0gc2NvcGUuZmlsZS5hcnJheVtpZHgxXTtcclxuICAgICAgICAgIHNjb3BlLmZpbGUuYXJyYXlbaWR4MV0gPSBzY29wZS5maWxlLmFycmF5W2lkeDJdO1xyXG4gICAgICAgICAgc2NvcGUuZmlsZS5hcnJheVtpZHgyXSA9IHRtcDtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBkZWZhdWx0U3RhY2tBcHBlbmQgPSBmdW5jdGlvbihmaWxlLCBkYXRhKSB7XHJcbiAgICAgICAgZmlsZS5hcnJheSA9IFt7XHJcbiAgICAgICAgICB0eXBlOiBkYXRhLm5hbWUsXHJcbiAgICAgICAgICBkYXRhOiB7fVxyXG4gICAgICAgIH1dLmNvbmNhdChmaWxlLmFycmF5KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNjb3BlLm9uRHJvcENvbXBsZXRlID0gZnVuY3Rpb24oZGF0YSwgZXZlbnQpIHtcclxuICAgICAgICBpZiAoZGF0YS50eXBlID09PSBcImZ4XCIpIHtcclxuICAgICAgICAgIFR5cGVTZXJ2aWNlLmdldFR5cGUoZGF0YS5uYW1lKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgICAgICAgKHR5cGUuc3RhY2tBcHBlbmQgfHxkZWZhdWx0U3RhY2tBcHBlbmQpKHNjb3BlLmZpbGUsIGRhdGEpO1xyXG4gICAgICAgICAgICAgIHNjb3BlLiRlbWl0KFwic3RhY2tDaGFuZ2VkXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS51cCA9IGZ1bmN0aW9uKGlkeCkge1xyXG4gICAgICAgIHN3YXAoaWR4LTEsIGlkeCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS5kb3duID0gZnVuY3Rpb24oaWR4KSB7XHJcbiAgICAgICAgc3dhcChpZHgrMSwgaWR4KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNjb3BlLnJlbW92ZSA9IGZ1bmN0aW9uKGlkeCkge1xyXG4gICAgICAgIHNjb3BlLiRlbWl0KFwic3RhY2tDaGFuZ2VkXCIpO1xyXG5cclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBvbGRDb2xsZWN0aW9uID0gc2NvcGUuZmlsZS5hcnJheTtcclxuICAgICAgICAgIHNjb3BlLmZpbGUuYXJyYXkgPSBbXTtcclxuICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxvbGRDb2xsZWN0aW9uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpIT09aWR4KSBzY29wZS5maWxlLmFycmF5LnB1c2gob2xkQ29sbGVjdGlvbltpXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS5hZGQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBzY29wZS4kZW1pdChcInN0YWNrQ2hhbmdlZFwiKTtcclxuXHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzY29wZS5maWxlLmFycmF5LnB1c2goe2RhdGE6IHt9LCB0eXBlOiBcIm51bGxcIn0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUuJHdhdGNoKFwiaW5pdEZpbGVcIiwgZnVuY3Rpb24obmV3RmlsZSkge1xyXG4gICAgICAgIGlmIChuZXdGaWxlKSB7XHJcbiAgICAgICAgICBzY29wZS5maWxlID0gbmV3RmlsZS5kYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTsgIFxyXG5cclxufV0pO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5kaXJlY3RpdmUoXCJjdXN0b21Pc2NHcmFwaFwiLCBbXCIkdGltZW91dFwiLCBmdW5jdGlvbigkdGltZW91dCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge1xyXG4gICAgICB0ZXJtczogXCI9dGVybXNcIlxyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlOiAnPGZ1bmN0aW9uLWdyYXBoIGY9XCJmXCIgc2FtcGxlcz02NCB0MD1cIjBcIiB0Zj1cIjFcIiBzY2FsZXk9XCIwLjhcIj48L2Z1bmN0aW9uLWdyYXBoPicsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgdmFyIHRlcm1zQ2hhbmdlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNjb3BlLmYgPSBmdW5jdGlvbih0KXtcclxuICAgICAgICAgIHZhciByZXQgPSAwO1xyXG4gICAgICAgICAgZm9yICh2YXIgaT0xO2k8c2NvcGUudGVybXMuc2luLmxlbmd0aDtpKyspIHtcclxuICAgICAgICAgICAgdmFyIGEgPSBzY29wZS50ZXJtcy5zaW5baV07XHJcbiAgICAgICAgICAgIHZhciBiID0gc2NvcGUudGVybXMuY29zW2ldO1xyXG5cclxuICAgICAgICAgICAgcmV0ID0gcmV0ICsgYSAqIE1hdGguc2luKHQqMipNYXRoLlBJKmkpO1xyXG4gICAgICAgICAgICByZXQgPSByZXQgKyBiICogTWF0aC5jb3ModCoyKk1hdGguUEkqaSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgIH07XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS5mID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xyXG4gICAgICBzY29wZS4kb24oXCJ0ZXJtc2NoYW5nZWRcIiwgZm4uZGVib3VuY2UodGVybXNDaGFuZ2VkLDEwKSk7XHJcblxyXG4gICAgICB0ZXJtc0NoYW5nZWQoKTtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLmRpcmVjdGl2ZShcInNob3dTY2FsZVwiLCBbXCIkdGltZW91dFwiLCBmdW5jdGlvbigkdGltZW91dCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge1xyXG4gICAgICBzY2FsZTogXCI9c2NhbGVcIlxyXG4gICAgfSxcclxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm5vdGUtY2VsbFwiIG5nLXJlcGVhdD1cIm5vdGUgaW4gbm90ZXNcIj57e25vdGV9fTwvZGl2PjxkaXYgY2xhc3M9XCJub3RlLWNlbGxcIiBuZy1yZXBlYXQ9XCJub3RlIGluIG5vdGVzXCI+e3tub3RlfX08L2Rpdj4nLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgIHZhciBzZW1pdG9uZVRvTm90ZSA9IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICByZXR1cm4gWzAsWzAsMV0sIDEsIFsxLDJdLCAyLCAzLCBbMyw0XSwgNCwgWzQsNV0sIDUsIFs1LDZdLCA2XVtuJTEyXTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBub3RlVG9TZW1pdG9uZSA9IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICByZXR1cm4gWzAsMiw0LDUsNyw5LDExXVtuJTddO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIG5vdGF0aW9uNyA9IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICByZXR1cm4gW1wiQ1wiLFwiRFwiLFwiRVwiLFwiRlwiLFwiR1wiLFwiQVwiLFwiQlwiXVtuICUgN107XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS4kd2F0Y2goXCJzY2FsZVwiLCBmdW5jdGlvbihuZXdWYWwpIHtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBzY2FsZSA9IE1VU0lDLlV0aWxzLlNjYWxlKG5ld1ZhbCk7XHJcbiAgICAgICAgICB2YXIgZGVsdGFzID0gWzAsMSwyLDMsNCw1LDZdO1xyXG5cclxuICAgICAgICAgIHZhciBpbml0VG9uZSA9IHNlbWl0b25lVG9Ob3RlKG5ld1ZhbCk7XHJcbiAgICAgICAgICBpZiAoaW5pdFRvbmUubGVuZ3RoKSBpbml0VG9uZSA9IGluaXRUb25lWzFdO1xyXG5cclxuICAgICAgICAgIHNjb3BlLm5vdGVzID0gZGVsdGFzLm1hcChmdW5jdGlvbihkKSB7XHJcbiAgICAgICAgICAgIHZhciBzZW1pdG9uZSA9IHNjYWxlLmFkZChuZXdWYWwsZCk7XHJcbiAgICAgICAgICAgIHZhciB0b25lID0gKGluaXRUb25lICsgZCkgJSA3O1xyXG4gICAgICAgICAgICB2YXIgYWx0ID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgIGlmIChub3RlVG9TZW1pdG9uZSh0b25lKSA+IHNlbWl0b25lICUgMTIpIGFsdCA9IFwiYlwiO1xyXG4gICAgICAgICAgICBpZiAobm90ZVRvU2VtaXRvbmUodG9uZSkgPCBzZW1pdG9uZSAlIDEyKSBhbHQgPSBcIiNcIjtcclxuICAgICAgICAgICAgcmV0dXJuIG5vdGF0aW9uNyh0b25lKSArIGFsdDtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLmRpcmVjdGl2ZShcIm5nU2Nyb2xsVG9wXCIsIFtcIiRwYXJzZVwiLCBcIiR0aW1lb3V0XCIsIGZ1bmN0aW9uKCRwYXJzZSwgJHRpbWVvdXQpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICB2YXIgc2Nyb2xsVmFyR2V0dGVyID0gJHBhcnNlKGF0dHJzLm5nU2Nyb2xsVG9wKTtcclxuICAgICAgdmFyIHNjcm9sbFZhclNldHRlciA9IHNjcm9sbFZhckdldHRlci5hc3NpZ247XHJcblxyXG4gICAgICBzY29wZS4kd2F0Y2goYXR0cnMubmdTY3JvbGxUb3AsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoZWxlbWVudCkuc2Nyb2xsVG9wKHNjcm9sbFZhckdldHRlcihzY29wZSkpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGVsZW1lbnQub24oJ3Njcm9sbCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc2Nyb2xsVmFyU2V0dGVyKHNjb3BlLCAkKGVsZW1lbnQpLnNjcm9sbFRvcCgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxufV0pO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5kaXJlY3RpdmUoXCJuZ1Njcm9sbExlZnRcIiwgW1wiJHBhcnNlXCIsIFwiJHRpbWVvdXRcIiwgZnVuY3Rpb24oJHBhcnNlLCAkdGltZW91dCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgIHZhciBzY3JvbGxWYXJHZXR0ZXIgPSAkcGFyc2UoYXR0cnMubmdTY3JvbGxMZWZ0KTtcclxuICAgICAgdmFyIHNjcm9sbFZhclNldHRlciA9IHNjcm9sbFZhckdldHRlci5hc3NpZ247XHJcblxyXG4gICAgICBzY29wZS4kd2F0Y2goYXR0cnMubmdTY3JvbGxMZWZ0LCBmdW5jdGlvbigpIHtcclxuICAgICAgICAkKGVsZW1lbnQpLnNjcm9sbExlZnQoc2Nyb2xsVmFyR2V0dGVyKHNjb3BlKSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZWxlbWVudC5vbignc2Nyb2xsJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzY3JvbGxWYXJTZXR0ZXIoc2NvcGUsICQoZWxlbWVudCkuc2Nyb2xsTGVmdCgpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxufV0pO1xyXG5cclxuIiwibXVzaWNTaG93Q2FzZUFwcC5kaXJlY3RpdmUoXCJmdW5jdGlvbkdyYXBoXCIsIFtcIiR0aW1lb3V0XCIsIFwiJHBhcnNlXCIsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkcGFyc2UpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHt9LFxyXG4gICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgIHRlbXBsYXRlOiAnPGNhbnZhcyBjbGFzcz1cIndhdmVncmFwaFwiPjwvY2FudmFzPicsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgdmFyIGY7XHJcbiAgICAgIHZhciB0MCA9IHBhcnNlRmxvYXQoYXR0cnMudDApO1xyXG4gICAgICB2YXIgdGYgPSBwYXJzZUZsb2F0KGF0dHJzLnRmKTtcclxuICAgICAgdmFyIHNhbXBsZXMgPSBwYXJzZUludChhdHRycy5zYW1wbGVzKTtcclxuICAgICAgdmFyIHNjYWxleSA9IHBhcnNlRmxvYXQoYXR0cnMuc2NhbGV5KTtcclxuXHJcbiAgICAgIHNjb3BlLiRwYXJlbnQuJHdhdGNoKGF0dHJzLmYsIGZ1bmN0aW9uKF9mKSB7XHJcbiAgICAgICAgZiA9IF9mO1xyXG4gICAgICAgIGlmIChmKSByZWRyYXcoKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2YXIgcmVkcmF3ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGNhbnZhcyA9IGVsZW1lbnRbMF07XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICAgICAgY2FudmFzLndpZHRoID0gY2FudmFzLmNsaWVudFdpZHRoLzQ7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQvNDtcclxuXHJcbiAgICAgICAgdmFyIGRyYXdMaW5lID0gZnVuY3Rpb24oeDAsIHkwLCB4MSwgeTEsIGNvbG9yKSB7XHJcbiAgICAgICAgICBjb250ZXh0LnNhdmUoKTtcclxuICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICBjb250ZXh0Lm1vdmVUbyh4MCwgeTApO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lVG8oeDEsIHkxKTtcclxuICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBjb2xvcjtcclxuICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMTtcclxuICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICBjb250ZXh0LnJlc3RvcmUoKTsgXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGRyYXdGdW5jID0gZnVuY3Rpb24oY29sb3IpIHtcclxuICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG4gICAgICAgICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZSgwLGNhbnZhcy5oZWlnaHQvMik7XHJcbiAgICAgICAgICBjb250ZXh0LnNjYWxlKGNhbnZhcy53aWR0aCxjYW52YXMuaGVpZ2h0LzIpO1xyXG5cclxuICAgICAgICAgIGNvbnRleHQubW92ZVRvKDAsIC1mKHQwKSpzY2FsZXkpO1xyXG4gICAgICAgICAgZm9yICh2YXIgaT0xOyBpPD1zYW1wbGVzOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIHggPSBpL3NhbXBsZXM7XHJcbiAgICAgICAgICAgIHZhciB0ID0gKHRmLXQwKSAqIHggKyB0MDtcclxuICAgICAgICAgICAgY29udGV4dC5saW5lVG8oeCwgLWYodCkqc2NhbGV5KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG4gICAgICAgICAgY29udGV4dC5saW5lSm9pbiA9ICdyb3VuZCc7XHJcbiAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDE7XHJcbiAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gY29sb3I7XHJcbiAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZHJhd0xpbmUoMCwgY2FudmFzLmhlaWdodC8yLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQvMiwgJ2FxdWEnKTtcclxuICAgICAgICBkcmF3RnVuYyhcIiNGRkZcIik7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfTtcclxufV0pO1xyXG5cclxuIiwidmFyIG11c2ljU2hvd0Nhc2VBcHAgPSBhbmd1bGFyLm1vZHVsZShcIk11c2ljU2hvd0Nhc2VBcHBcIik7XHJcbm11c2ljU2hvd0Nhc2VBcHAuZGlyZWN0aXZlKFwia2V5Ym9hcmRcIiwgW1wiJHRpbWVvdXRcIiwgXCIkdWliTW9kYWxcIiwgXCJNaWRpXCIsIFwiTXVzaWNDb250ZXh0XCIsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkdWliTW9kYWwsIE1pZGksIE11c2ljQ29udGV4dCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge1xyXG4gICAgICBpbnN0cnVtZW50OiAnPWluc3RydW1lbnQnXHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGVVcmw6IFwic2l0ZS90ZW1wbGF0ZXMva2V5Ym9hcmQuaHRtbFwiLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgIHZhciBpbnB1dHM7XHJcbiAgICAgIHZhciBvbk1JRElNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICB2YXIgY29tbWFuZCA9IGV2ZW50LmRhdGFbMF07XHJcbiAgICAgICAgdmFyIHZhbHVlID0gZXZlbnQuZGF0YVsxXTtcclxuICAgICAgICB2YXIgdmVsb2NpdHkgPSBldmVudC5kYXRhWzJdO1xyXG5cclxuICAgICAgICB2YXIgb2N0YXZlTnVtYmVyID0gTWF0aC5mbG9vcih2YWx1ZS8xMik7XHJcbiAgICAgICAgaWYgKG9jdGF2ZU51bWJlciA8IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIG9jdCA9IHNjb3BlLm9jdGF2ZXNbb2N0YXZlTnVtYmVyXTtcclxuICAgICAgICBpZiAoIW9jdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZiAoY29tbWFuZCA9PT0gMTQ0KSB7XHJcbiAgICAgICAgICBvY3QubWlkaVt2YWx1ZSAlIDEyXSA9IHRydWU7XHJcbiAgICAgICAgICBvY3QudXBkYXRlKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjb21tYW5kID09PSAxMjgpIHtcclxuICAgICAgICAgIG9jdC5taWRpW3ZhbHVlICUgMTJdID0gZmFsc2U7XHJcbiAgICAgICAgICBvY3QudXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgICB2YXIgbGlzdGVuZXIgPSBNaWRpLnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcihvbk1JRElNZXNzYWdlKTtcclxuICAgICAgdmFyIHVwZGF0ZU1pZGlTdGF0dXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBNaWRpLmdldFN0YXR1cygpXHJcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHNjb3BlLm1pZGlDb25uZWN0ZWQgPSBkYXRhLmNvbm5lY3RlZDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHVwZGF0ZU1pZGlTdGF0dXMoKTtcclxuXHJcbiAgICAgIHNjb3BlLiRvbihcIiRkZXN0cm95XCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGxpc3RlbmVyLmRlc3Ryb3koKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2YXIga2V5Q29kZVRvTm90ZSA9IHtcclxuICAgICAgICAgICAgICA5MDogJ0MnLCA4MzogJ0MjJywgODg6ICdEJywgIDY4OiAnRCMnLCA2NzogJ0UnLFxyXG4gICAgICAgICAgICAgIDg2OiAnRicsIDcxOiAnRiMnLCA2NjogJ0cnLCA3MjogJ0cjJywgNzg6ICdBJywgXHJcbiAgICAgICAgICAgICAgNzQ6ICdBIycsIDc3OiAnQid9O1xyXG5cclxuICAgICAgdmFyIHN0b3BBbGwgPSBmdW5jdGlvbih4KSB7XHJcbiAgICAgICAgcmV0dXJuIHguc3RvcEFsbCgpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uKG9jdGF2ZSkge1xyXG4gICAgICAgIHJldHVybiBvY3RhdmUudXBkYXRlKCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS5taWRpU2V0dXAgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbW9kYWxJbnMgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJzaXRlL3RlbXBsYXRlcy9tb2RhbC9taWRpU2V0dGluZ3MuaHRtbFwiLFxyXG4gICAgICAgICAgY29udHJvbGxlcjogXCJtaWRpU2V0dGluZ3NNb2RhbEN0cmxcIlxyXG4gICAgICAgIH0pLnJlc3VsdC50aGVuKHVwZGF0ZU1pZGlTdGF0dXMpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUuc3RvcEFsbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNjb3BlLm9jdGF2ZXMuZm9yRWFjaChzdG9wQWxsKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBvY3RhdmUgPSBmdW5jdGlvbihiYXNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIG1vdXNlOiB7fSxcclxuICAgICAgICAgIGtleToge30sXHJcbiAgICAgICAgICBtaWRpOiB7fSxcclxuICAgICAgICAgIG5vdGU6IFtdLFxyXG4gICAgICAgICAgcGxheTogZnVuY3Rpb24oaWR4KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm5vdGVbaWR4XSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5ub3RlW2lkeF0gPSBzY29wZS5pbnN0cnVtZW50Lm5vdGUoYmFzZStpZHgpLnBsYXkoKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBzdG9wOiBmdW5jdGlvbihpZHgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm5vdGVbaWR4XSlyZXR1cm47XHJcbiAgICAgICAgICAgIHRoaXMubm90ZVtpZHhdLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5ub3RlW2lkeF0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaWR4PTA7IGlkeDwxMjsgaWR4KyspIHtcclxuICAgICAgICAgICAgICBpZiAodGhpcy5tb3VzZVtpZHhdIHx8IHRoaXMua2V5W2lkeF0gfHwgdGhpcy5taWRpW2lkeF0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheShpZHgpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoaWR4KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7fSk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc3RvcEFsbDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90ZS5mb3JFYWNoKGZ1bmN0aW9uKG5vdGUpIHtcclxuICAgICAgICAgICAgICBpZihub3RlICYmIG5vdGUuc3RvcCkgbm90ZS5zdG9wKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLm5vdGUgPSBbXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGdlc3R1cmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBNdXNpY0NvbnRleHQucmVzdW1lQXVkaW8oKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBtb3VzZU9mZiA9IGZ1bmN0aW9uKG9jdGF2ZSkge1xyXG4gICAgICAgIGdlc3R1cmUoKTtcclxuXHJcbiAgICAgICAgb2N0YXZlLm1vdXNlID0ge307XHJcbiAgICAgICAgb2N0YXZlLnVwZGF0ZSgpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUubW91c2VMZWF2ZSA9IGZ1bmN0aW9uKG9jdGF2ZSwgaWR4KSB7XHJcbiAgICAgICAgZ2VzdHVyZSgpO1xyXG5cclxuICAgICAgICBvY3RhdmUubW91c2VbaWR4XSA9IGZhbHNlO1xyXG4gICAgICAgIG9jdGF2ZS51cGRhdGUoKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNjb3BlLm1vdXNlRW50ZXIgPSBmdW5jdGlvbihvY3RhdmUsIGlkeCkge1xyXG4gICAgICAgIGdlc3R1cmUoKTtcclxuXHJcbiAgICAgICAgc2NvcGUub2N0YXZlcy5mb3JFYWNoKG1vdXNlT2ZmKTtcclxuICAgICAgICBvY3RhdmUubW91c2VbaWR4XSA9IHRydWU7XHJcblxyXG4gICAgICAgIHNjb3BlLm9jdGF2ZXMuZm9yRWFjaCh1cGRhdGUpO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGtleURvd25IYW5kbGVyID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGdlc3R1cmUoKTtcclxuXHJcbiAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIGtleUNvZGUgPSBlLmtleUNvZGU7XHJcbiAgICAgICAgdmFyIG5vdGVOYW1lID0ga2V5Q29kZVRvTm90ZVtrZXlDb2RlXTtcclxuICAgICAgICBpZiAoIW5vdGVOYW1lKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBpZHggPSBNVVNJQy5ub3RlVG9Ob3RlTnVtKG5vdGVOYW1lKTtcclxuICAgICAgICBzY29wZS5vY3RhdmVzWzFdLmtleVtpZHhdID0gdHJ1ZTtcclxuICAgICAgICBzY29wZS5vY3RhdmVzWzFdLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICBzY29wZS4kZGlnZXN0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBrZXlVcEhhbmRsZXIgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgZ2VzdHVyZSgpO1xyXG5cclxuICAgICAgICB2YXIga2V5Q29kZSA9IGUua2V5Q29kZTtcclxuICAgICAgICB2YXIgbm90ZU5hbWUgPSBrZXlDb2RlVG9Ob3RlW2tleUNvZGVdO1xyXG4gICAgICAgIGlmICghbm90ZU5hbWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgdmFyIGlkeCA9IE1VU0lDLm5vdGVUb05vdGVOdW0obm90ZU5hbWUpO1xyXG4gICAgICAgIHNjb3BlLm9jdGF2ZXNbMV0ua2V5W2lkeF0gPSBmYWxzZTtcclxuICAgICAgICBzY29wZS5vY3RhdmVzWzFdLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICBzY29wZS4kZGlnZXN0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICQoZG9jdW1lbnQpLmJpbmQoXCJrZXlkb3duXCIsIGtleURvd25IYW5kbGVyKTtcclxuICAgICAgJChkb2N1bWVudCkuYmluZChcImtleXVwXCIsIGtleVVwSGFuZGxlcik7XHJcbiAgICAgIFxyXG4gICAgICB2YXIgcGlhbm9GaXJzdFJvdyA9ICQoZWxlbWVudCkuZmluZChcIi5waWFuby1maXJzdHJvdyAua2V5XCIpO1xyXG4gICAgICB2YXIgcGlhbm9TZWNvbmRSb3cgPSAkKGVsZW1lbnQpLmZpbmQoXCIucGlhbm8tc2Vjb25kcm93IC5rZXlcIik7XHJcbiAgICAgIFxyXG4gICAgICBwaWFub0ZpcnN0Um93LmJpbmQoXCJjbGlja1wiLCBnZXN0dXJlKTtcclxuICAgICAgcGlhbm9TZWNvbmRSb3cuYmluZChcImNsaWNrXCIsIGdlc3R1cmUpO1xyXG5cclxuICAgICAgc2NvcGUuJG9uKFwiJGRlc3Ryb3lcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJChkb2N1bWVudCkudW5iaW5kKFwia2V5ZG93blwiLCBrZXlEb3duSGFuZGxlcik7XHJcbiAgICAgICAgJChkb2N1bWVudCkudW5iaW5kKFwia2V5dXBcIiwga2V5VXBIYW5kbGVyKTtcclxuXHJcbiAgICAgICAgcGlhbm9GaXJzdFJvdy51bmJpbmQoXCJjbGlja1wiLCBnZXN0dXJlKTtcclxuICAgICAgICBwaWFub1NlY29uZFJvdy51bmJpbmQoXCJjbGlja1wiLCBnZXN0dXJlKTtcclxuXHJcbiAgICAgICAgc2NvcGUub2N0YXZlcy5mb3JFYWNoKGZ1bmN0aW9uKG9jdGF2ZSkge1xyXG4gICAgICAgICAgb2N0YXZlLnN0b3BBbGwoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzY29wZS5vY3RhdmVzID0gWzI0LDM2LDQ4LDYwLDcyXS5tYXAob2N0YXZlKTtcclxuICAgICAgc2NvcGUuJHdhdGNoKFwiaW5zdHJ1bWVudFwiLCBmdW5jdGlvbihpbnN0cnVtZW50KSB7XHJcbiAgICAgICAgc2NvcGUuaW5zdHJ1bWVudCA9IGluc3RydW1lbnQ7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG59XSk7XHJcbiIsIm11c2ljU2hvd0Nhc2VBcHAuZGlyZWN0aXZlKFwibXVzaWNFdmVudEVkaXRvclwiLCBbXCIkdGltZW91dFwiLCBcIlRJQ0tTX1BFUl9CRUFUXCIsIFwiUGF0dGVyblwiLCBcIk11c2ljQ29udGV4dFwiLCBmdW5jdGlvbigkdGltZW91dCwgVElDS1NfUEVSX0JFQVQsIFBhdHRlcm4sIE11c2ljQ29udGV4dCkge1xyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge1xyXG4gICAgICAvKiBDdXJyZW50IHBhdHRlcm4gKi9cclxuICAgICAgcGF0dGVybjogXCI9cGF0dGVyblwiLFxyXG4gICAgICAvKiBDdXJyZW50IHRyYWNrICovXHJcbiAgICAgIHRyYWNrOiBcIj10cmFja1wiLFxyXG4gICAgICAvKiBEaXNwbGF5IHBhcmFtcyAqL1xyXG4gICAgICB6b29tTGV2ZWw6IFwiPXpvb21MZXZlbFwiLFxyXG4gICAgICBiZWF0V2lkdGg6IFwiPWJlYXRXaWR0aFwiLFxyXG4gICAgICAvKiBGaWxlIHBhcmFtcyAoY29tbW9uIHRvIGFsbCB0cmFja3MpICovXHJcbiAgICAgIG1lYXN1cmU6IFwiPW1lYXN1cmVcIixcclxuICAgICAgbWVhc3VyZUNvdW50OiBcIj1tZWFzdXJlQ291bnRcIixcclxuICAgICAgcmVjaXBlOiAnPXJlY2lwZSdcclxuICAgIH0sXHJcbiAgICB0ZW1wbGF0ZVVybDogXCJzaXRlL3RlbXBsYXRlcy9kaXJlY3RpdmVzL211c2ljRXZlbnRFZGl0b3IuaHRtbFwiLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgIHNjb3BlLlRJQ0tTX1BFUl9CRUFUID0gVElDS1NfUEVSX0JFQVQ7XHJcbiAgICAgIHZhciBkZWZhdWx0TCA9IFRJQ0tTX1BFUl9CRUFUO1xyXG5cclxuICAgICAgdmFyIGNsZWFyU2hhZG93ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2NvcGUuc2hhZG93RXZ0ID0gbnVsbDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBkZWZhdWx0TW91c2VMZWF2ZSA9IGNsZWFyU2hhZG93O1xyXG5cclxuICAgICAgdmFyIGRlZmF1bHRNb3VzZU1vdmUgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIHZhciBjbGlwRGlzdGFuY2UgPSBUSUNLU19QRVJfQkVBVCAvIHNjb3BlLnpvb21MZXZlbDtcclxuICAgICAgICBpZiAoIWV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJldmVudC1saXN0XCIpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgc2NvcGUuc2hhZG93RXZ0ID0gc2NvcGUuc2hhZG93RXZ0IHx8IHt9O1xyXG4gICAgICAgIHNjb3BlLnNoYWRvd0V2dC5uID0gTWF0aC5mbG9vcih1cHBlckxpbWl0KCkgLSBldmVudC5vZmZzZXRZIC8gMjApO1xyXG4gICAgICAgIHNjb3BlLnNoYWRvd0V2dC5sID0gZGVmYXVsdEw7XHJcblxyXG4gICAgICAgIGlmIChzY29wZS5zaGFkb3dFdnQucykge1xyXG4gICAgICAgICAgdmFyIGV4YWN0UG9zaXRpb24gPSBNYXRoLmZsb29yKGV2ZW50Lm9mZnNldFggLyBzY29wZS5iZWF0V2lkdGggLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVCk7XHJcbiAgICAgICAgICBleGFjdFBvc2l0aW9uID0gTWF0aC5mbG9vcihleGFjdFBvc2l0aW9uKTtcclxuICAgICAgICAgIHZhciBjbGlwUyA9IFBhdHRlcm4uZmluZENsaXBTKHNjb3BlLnBhdHRlcm4sIHNjb3BlLnRyYWNrLCB7czogZXhhY3RQb3NpdGlvbiwgbDogZGVmYXVsdEx9LCBleGFjdFBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgICBpZiAoTWF0aC5hYnMoZXhhY3RQb3NpdGlvbiAtIGNsaXBTIC0gY2xpcERpc3RhbmNlIC8gMikgPCBjbGlwRGlzdGFuY2UpIHtcclxuICAgICAgICAgICAgc2NvcGUuc2hhZG93RXZ0LnMgPSBjbGlwUztcclxuXHJcbiAgICAgICAgICAgIFBhdHRlcm4uY3V0RXZlbnQoc2NvcGUucGF0dGVybiwgc2NvcGUudHJhY2ssIHNjb3BlLnNoYWRvd0V2dCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNjb3BlLnNoYWRvd0V2dC5zID0gTWF0aC5mbG9vcihNYXRoLmZsb29yKGV2ZW50Lm9mZnNldFggLyAyIC8gc2NvcGUuYmVhdFdpZHRoKSAqIDIgLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVCk7XHJcbiAgICAgICAgaWYgKHNjb3BlLnNoYWRvd0V2dC5zIDwgMCkgc2NvcGUuc2hhZG93RXZ0LnMgPSAwO1xyXG4gICAgICAgIFBhdHRlcm4uY3V0RXZlbnQoc2NvcGUucGF0dGVybiwgc2NvcGUudHJhY2ssIHNjb3BlLnNoYWRvd0V2dCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgc2VtaXRvbmVUb05vdGUgPSBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgcmV0dXJuIFswLFswLDFdLCAxLCBbMSwyXSwgMiwgMywgWzMsNF0sIDQsIFs0LDVdLCA1LCBbNSw2XSwgNl1bbiUxMl07XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgbm90ZVRvU2VtaXRvbmUgPSBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgcmV0dXJuIFswLDIsNCw1LDcsOSwxMV1bbiU3XTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBub3RhdGlvbjcgPSBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcIkNcIixcIkRcIixcIkVcIixcIkZcIixcIkdcIixcIkFcIixcIkJcIl1bbiAlIDddO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUucmFpc2VFdmVudENoYW5nZWQgPSBmdW5jdGlvbihvbGRldnQsIGV2dCwgdHJhY2spIHtcclxuICAgICAgICBzY29wZS4kZW1pdCgnZXZlbnRDaGFuZ2VkJywge29sZGV2dDogb2xkZXZ0LGV2dDogZXZ0LCB0cmFjazogdHJhY2t9KVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUubm90ZU5hbWUgPSBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgdmFyIG5vdGU3ID0gc2VtaXRvbmVUb05vdGUobik7XHJcbiAgICAgICAgdmFyIG9jdGF2ZSA9IE1hdGguZmxvb3Iobi8xMik7XHJcblxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vdGU3KSkge1xyXG4gICAgICAgICAgbm90ZTcgPSBub3RlN1swXVxyXG4gICAgICAgICAgcmV0dXJuIG5vdGF0aW9uNyhub3RlNykgKyAnIycgKyBvY3RhdmU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBub3RhdGlvbjcobm90ZTcpICsgb2N0YXZlO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciB1cGRhdGVHcmlkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2NvcGUubWFpbkdyaWRTdHlsZSA9IHtcImJhY2tncm91bmQtc2l6ZVwiOiAoc2NvcGUubWVhc3VyZSpzY29wZS5iZWF0V2lkdGgqc2NvcGUuem9vbUxldmVsKSArIFwicHggMjQwcHhcIn07XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS4kd2F0Y2goXCJbbWVhc3VyZSwgYmVhdFdpZHRoLCB6b29tTGV2ZWxdXCIsIHVwZGF0ZUdyaWQpO1xyXG4gICAgICBzY29wZS4kd2F0Y2goXCJ0cmFjay5zY3JvbGxcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2NvcGUuJGVtaXQoXCJ0cmFja0NoYW5nZWRcIiwgc2NvcGUudHJhY2spOyAgICAgICAgXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgJHRpbWVvdXQodXBkYXRlR3JpZCk7XHJcblxyXG4gICAgICB2YXIgYWRkTmV3RXZlbnQgPSBmdW5jdGlvbihuZXdFdnQpIHtcclxuICAgICAgICBpZiAoc2NvcGUudHJhY2suZXZlbnRzLmZpbmQoZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICAgICAgICByZXR1cm4gbmV3RXZ0LnMgPT09IGV2dC5zICYmIG5ld0V2dC5uID09PSBldnQubjtcclxuICAgICAgICB9KSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbmV3RXZ0ID0gYW5ndWxhci5jb3B5KG5ld0V2dCk7XHJcblxyXG4gICAgICAgIGlmIChQYXR0ZXJuLmNvbGxpc2lvbihzY29wZS50cmFjaywgbmV3RXZ0KSkgcmV0dXJuO1xyXG5cclxuICAgICAgICBzY29wZS4kZW1pdChcInBhdHRlcm5TZWxlY3RFdmVudFwiLCBuZXdFdnQpO1xyXG4gICAgICAgIHNjb3BlLnNlbGVjdGVkID0gbmV3RXZ0O1xyXG5cclxuICAgICAgICBzY29wZS5yZWNpcGUucmFpc2UoJ3BhdHRlcm5fbm90ZV9hZGRlZCcpO1xyXG4gICAgICAgIHNjb3BlLnRyYWNrLmV2ZW50cy5wdXNoKG5ld0V2dCk7XHJcblxyXG4gICAgICAgIHNjb3BlLiRlbWl0KFwidHJhY2tDaGFuZ2VkXCIsIHNjb3BlLnRyYWNrKTtcclxuICAgICAgICBzY29wZS4kZW1pdChcImV2ZW50Q2hhbmdlZFwiLCB7b2xkZXZ0Ont9LCBldnQ6bmV3RXZ0LCB0cmFjazogc2NvcGUudHJhY2t9KTtcclxuXHJcbiAgICAgICAgc2NvcGUubW91c2VNb3ZlID0gbW92ZUV2ZW50KG5ld0V2dCwgMCk7XHJcbiAgICAgICAgc2NvcGUubW91c2VNb3ZlRXZlbnQgPSBtb3ZlRXZlbnRGcm9tRXZlbnQobmV3RXZ0LCAwKTtcclxuXHJcbiAgICAgICAgY2xlYXJTaGFkb3coKTtcclxuXHJcbiAgICAgICAgc2NvcGUubW91c2VMZWF2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgZGVmYXVsdE1vdXNlTGVhdmUoKTtcclxuICAgICAgICAgIGNhbmNlbE1vdmUoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzY29wZS5tb3VzZVVwUmVzaXplRXZlbnQgPSBjYW5jZWxNb3ZlO1xyXG4gICAgICAgIHNjb3BlLm1vdXNlVXBFdmVudCA9IGNhbmNlbE1vdmU7XHJcbiAgICAgICAgc2NvcGUubW91c2VVcCA9IGNhbmNlbE1vdmU7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS5tb3VzZU1vdmVSZXNpemVFdmVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNsZWFyU2hhZG93KCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS5zaGFkb3dNb3VzZU1vdmUgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIHZhciBkZWx0YVMgPSBNYXRoLmZsb29yKGV2ZW50Lm9mZnNldFggLyAyIC8gc2NvcGUuYmVhdFdpZHRoKSAqIDIgLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVDtcclxuICAgICAgICBpZiAoZGVsdGFTID4gMCkgc2NvcGUuc2hhZG93RXZ0LnMgPSBzY29wZS5zaGFkb3dFdnQucyArIGRlbHRhUztcclxuXHJcbiAgICAgICAgUGF0dGVybi5jdXRFdmVudChzY29wZS5wYXR0ZXJuLCBzY29wZS50cmFjaywgc2NvcGUuc2hhZG93RXZ0KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNjb3BlLmFkZEZyb21TaGFkb3cgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIGFkZE5ld0V2ZW50KHNjb3BlLnNoYWRvd0V2dCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS5tb3VzZVVwID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICBzY29wZS5tb3VzZU1vdmUgPSBkZWZhdWx0TW91c2VNb3ZlO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUubW91c2VMZWF2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGRlZmF1bHRNb3VzZUxlYXZlKCk7XHJcbiAgICAgICAgc2NvcGUubW91c2VNb3ZlID0gZGVmYXVsdE1vdXNlTW92ZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNjb3BlLm1vdXNlTW92ZSA9IGRlZmF1bHRNb3VzZU1vdmU7XHJcbiAgICAgIHNjb3BlLm1vdXNlTW92ZUV2ZW50ID0gY2xlYXJTaGFkb3c7XHJcblxyXG4gICAgICB2YXIgdXBwZXJMaW1pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBzY29wZS50cmFjay5pbnN0cnVtZW50ID09PSAndGVtcG8nID8gMTAyNCA6IDEyMDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBtYXggPSBmdW5jdGlvbihjMSwgYzIpIHtcclxuICAgICAgICByZXR1cm4gYzEgPiBjMiA/IGMxIDogYzI7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgcHJldmVudENvbGxpc2lvbiA9IGZ1bmN0aW9uKGV2dCwgZikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBzYXZlZEV2dCA9IGFuZ3VsYXIuY29weShldnQpO1xyXG4gICAgICAgICAgdmFyIHJldCA9IGYuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxuXHJcbiAgICAgICAgICBpZiAoUGF0dGVybi5jb2xsaXNpb24oc2NvcGUudHJhY2ssIGV2dCkpIHtcclxuICAgICAgICAgICAgZXZ0Lm4gPSBzYXZlZEV2dC5uO1xyXG4gICAgICAgICAgICBldnQucyA9IHNhdmVkRXZ0LnM7XHJcbiAgICAgICAgICAgIGV2dC5sID0gc2F2ZWRFdnQubDtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChldnQubiAhPT0gc2F2ZWRFdnQubiB8fCBldnQubCAhPT0gc2F2ZWRFdnQubCB8fCBldnQucyAhPT0gc2F2ZWRFdnQucykge1xyXG4gICAgICAgICAgICBzY29wZS4kZW1pdChcInRyYWNrQ2hhbmdlZFwiLCBzY29wZS50cmFjayk7XHJcbiAgICAgICAgICAgIHNjb3BlLiRlbWl0KFwiZXZlbnRDaGFuZ2VkXCIsIHtvbGRldnQ6IHNhdmVkRXZ0LCBldnQ6ZXZ0LCB0cmFjazogc2NvcGUudHJhY2t9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIG1vdmVFdmVudCA9IGZ1bmN0aW9uKGV2dCwgb2Zmc2V0WCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgTXVzaWNDb250ZXh0LnJlc3VtZUF1ZGlvKCk7XHJcblxyXG4gICAgICAgICAgdmFyIGNsaXBEaXN0YW5jZSA9IFRJQ0tTX1BFUl9CRUFUIC8gc2NvcGUuem9vbUxldmVsO1xyXG4gICAgICAgICAgdmFyIG9sZGV2dCA9IHtuOmV2dC5uLCBzOmV2dC5zLCBsOmV2dC5sfTtcclxuXHJcbiAgICAgICAgICB2YXIgZXhhY3RQb3NpdGlvbiA9IE1hdGguZmxvb3IoKGV2ZW50Lm9mZnNldFggLSBvZmZzZXRYKSAvIHNjb3BlLmJlYXRXaWR0aCAvIHNjb3BlLnpvb21MZXZlbCAqIFRJQ0tTX1BFUl9CRUFUKTtcclxuICAgICAgICAgIGV4YWN0UG9zaXRpb24gPSBNYXRoLmZsb29yKGV4YWN0UG9zaXRpb24pO1xyXG4gICAgICAgICAgdmFyIGNsaXBTID0gUGF0dGVybi5maW5kQ2xpcFMoc2NvcGUucGF0dGVybiwgc2NvcGUudHJhY2ssIGV2dCwgZXhhY3RQb3NpdGlvbik7XHJcblxyXG4gICAgICAgICAgaWYgKCFldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZXZlbnQtbGlzdFwiKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIGlmIChNYXRoLmFicyhleGFjdFBvc2l0aW9uIC0gY2xpcFMgLSBjbGlwRGlzdGFuY2UgLyAyKSA8IGNsaXBEaXN0YW5jZSkge1xyXG4gICAgICAgICAgICBldnQucyA9IGNsaXBTO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZXZ0LnMgPSBNYXRoLmZsb29yKChldmVudC5vZmZzZXRYIC0gb2Zmc2V0WCkgLyAyIC8gc2NvcGUuYmVhdFdpZHRoKSAqIDIgLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVDtcclxuICAgICAgICAgICAgZXZ0LnMgPSBNYXRoLmZsb29yKGV2dC5zKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoZXZ0LnMgPCAwKSBldnQucyA9IDA7XHJcblxyXG4gICAgICAgICAgdmFyIG9sZE4gPSBldnQubjtcclxuICAgICAgICAgIGV2dC5uID0gTWF0aC5mbG9vcih1cHBlckxpbWl0KCkgLSBldmVudC5vZmZzZXRZIC8gMjApO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgbW92ZUV2ZW50RnJvbUV2ZW50ID0gZnVuY3Rpb24oZXZ0LCBvZmZzZXRYKSB7XHJcbiAgICAgICAgY2xlYXJTaGFkb3coKTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZHJhZ2V2dCwgZXZlbnQpIHtcclxuICAgICAgICAgIE11c2ljQ29udGV4dC5yZXN1bWVBdWRpbygpO1xyXG5cclxuICAgICAgICAgIHZhciBjbGlwRGlzdGFuY2UgPSBUSUNLU19QRVJfQkVBVCAvIHNjb3BlLnpvb21MZXZlbDtcclxuICAgICAgICAgIHZhciBvbGRldnQgPSB7bjpldnQubiwgczpldnQucywgbDpldnQubH07XHJcblxyXG4gICAgICAgICAgdmFyIGV4YWN0UG9zaXRpb24gPSBkcmFnZXZ0LnMgKyBNYXRoLmZsb29yKChldmVudC5vZmZzZXRYIC0gb2Zmc2V0WCkgLyBzY29wZS5iZWF0V2lkdGggLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVCk7XHJcbiAgICAgICAgICBleGFjdFBvc2l0aW9uID0gTWF0aC5mbG9vcihleGFjdFBvc2l0aW9uKTtcclxuICAgICAgICAgIHZhciBjbGlwUyA9IFBhdHRlcm4uZmluZENsaXBTKHNjb3BlLnBhdHRlcm4sIHNjb3BlLnRyYWNrLCBldnQsIGV4YWN0UG9zaXRpb24pO1xyXG5cclxuICAgICAgICAgIGlmIChNYXRoLmFicyhleGFjdFBvc2l0aW9uIC0gY2xpcFMgLSBjbGlwRGlzdGFuY2UgLyAyKSA8IGNsaXBEaXN0YW5jZSkge1xyXG4gICAgICAgICAgICBldnQucyA9IGNsaXBTO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZXZ0LnMgPSBkcmFnZXZ0LnMgKyBNYXRoLmZsb29yKChldmVudC5vZmZzZXRYIC0gb2Zmc2V0WCkgLyAyIC8gc2NvcGUuYmVhdFdpZHRoKSAqIDIgLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVDtcclxuICAgICAgICAgICAgZXZ0LnMgPSBNYXRoLmZsb29yKGV2dC5zKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBldnQubiA9IGRyYWdldnQubjtcclxuICAgICAgICAgIGlmIChldnQucyA8IDApIGV2dC5zID0gMDtcclxuICAgICAgICB9O1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGNhbmNlbE1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBzY29wZS5tb3VzZU1vdmVFdmVudCA9IGNsZWFyU2hhZG93O1xyXG4gICAgICAgIHNjb3BlLm1vdXNlTW92ZSA9IGRlZmF1bHRNb3VzZU1vdmU7XHJcbiAgICAgICAgc2NvcGUubW91c2VMZWF2ZSA9IGRlZmF1bHRNb3VzZUxlYXZlO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUubW91c2VEb3duID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICBNdXNpY0NvbnRleHQucmVzdW1lQXVkaW8oKTtcclxuXHJcbiAgICAgICAgaWYgKCFldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZXZlbnQtbGlzdFwiKSkgcmV0dXJuO1xyXG4gICAgICAgIHZhciBuZXdFdnQgPSB7XHJcbiAgICAgICAgICBuOiBNYXRoLmZsb29yKHVwcGVyTGltaXQoKSAtIGV2ZW50Lm9mZnNldFkgLyAyMCksXHJcbiAgICAgICAgICBzOiBNYXRoLmZsb29yKGV2ZW50Lm9mZnNldFggLyBzY29wZS5iZWF0V2lkdGgpIC8gc2NvcGUuem9vbUxldmVsICogVElDS1NfUEVSX0JFQVQsXHJcbiAgICAgICAgICBsOiBkZWZhdWx0TFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIG5ld0V2dC5zID0gTWF0aC5mbG9vcihuZXdFdnQucyk7XHJcblxyXG4gICAgICAgIFBhdHRlcm4uY3V0RXZlbnQoc2NvcGUucGF0dGVybiwgc2NvcGUudHJhY2ssIG5ld0V2dCk7XHJcbiAgICAgICAgYWRkTmV3RXZlbnQobmV3RXZ0KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBldmVudFNwbGl0ID0gZnVuY3Rpb24oZXZ0LCB0aWNrcykge1xyXG4gICAgICAgIHZhciBvcmlnaW5hbEwgPSBldnQubDtcclxuICAgICAgICBldnQubCA9IHRpY2tzO1xyXG4gICAgICAgIHZhciBuZXdFdnQgPSB7XHJcbiAgICAgICAgICBuOiBldnQubixcclxuICAgICAgICAgIHM6IGV2dC5zICsgZXZ0LmwsXHJcbiAgICAgICAgICBsOiBvcmlnaW5hbEwgLSB0aWNrc1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2NvcGUucmVjaXBlLnJhaXNlKCdwYXR0ZXJuX25vdGVfYWRkZWQnKTtcclxuICAgICAgICBzY29wZS50cmFjay5ldmVudHMucHVzaChuZXdFdnQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgZXZlbnRMZWZ0U3BsaXQgPSBmdW5jdGlvbihldnQpIHtcclxuICAgICAgICBpZiAoZXZ0LmwgJSAzID09PSAwKSB7XHJcbiAgICAgICAgICBldmVudFNwbGl0KGV2dCwgZXZ0LmwgLyAzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZXZlbnRDZW50ZXJTcGxpdChldnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBldmVudFJpZ2h0U3BsaXQgPSBmdW5jdGlvbihldnQpIHtcclxuICAgICAgICBpZiAoZXZ0LmwgJSAzID09PSAwKSB7XHJcbiAgICAgICAgICBldmVudFNwbGl0KGV2dCwgZXZ0LmwgKiAyIC8gMyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGV2ZW50Q2VudGVyU3BsaXQoZXZ0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgZXZlbnRDZW50ZXJTcGxpdCA9IGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICAgIGlmIChldnQubCAlIDIgPT09IDApIHtcclxuICAgICAgICAgIGV2ZW50U3BsaXQoZXZ0LCBldnQubCAvIDIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNjb3BlLm1vdXNlRGJsQ2xpY2tFdmVudCA9IGZ1bmN0aW9uKGV2dCwgZXZlbnQpIHtcclxuICAgICAgICB2YXIgZWxlbWVudFdpZHRoID0gJChldmVudC50YXJnZXQpWzBdLmNsaWVudFdpZHRoKzU7XHJcblxyXG4gICAgICAgIGlmIChldmVudC5vZmZzZXRYIDwgZWxlbWVudFdpZHRoLzMpIHtcclxuICAgICAgICAgIGV2ZW50TGVmdFNwbGl0KGV2dCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChldmVudC5vZmZzZXRYID4gZWxlbWVudFdpZHRoKjIvMykge1xyXG4gICAgICAgICAgZXZlbnRSaWdodFNwbGl0KGV2dCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGV2ZW50Q2VudGVyU3BsaXQoZXZ0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS5tb3VzZURvd25FdmVudCA9IGZ1bmN0aW9uKGV2dCwgZXZlbnQpIHtcclxuICAgICAgICBNdXNpY0NvbnRleHQucmVzdW1lQXVkaW8oKTtcclxuXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcclxuXHJcbiAgICAgICAgc2NvcGUuJGVtaXQoXCJldmVudFNlbGVjdGVkXCIsIHtldnQ6IGV2dCwgdHJhY2s6IHNjb3BlLnRyYWNrfSk7XHJcblxyXG4gICAgICAgIHNjb3BlLiRlbWl0KFwicGF0dGVyblNlbGVjdEV2ZW50XCIsIGV2dCk7XHJcbiAgICAgICAgc2NvcGUuc2VsZWN0ZWQgPSBldnQ7XHJcblxyXG4gICAgICAgIHNjb3BlLm1vdXNlTW92ZSA9IHByZXZlbnRDb2xsaXNpb24oZXZ0LCBtb3ZlRXZlbnQoZXZ0LCBldmVudC5vZmZzZXRYKSk7XHJcbiAgICAgICAgc2NvcGUubW91c2VNb3ZlRXZlbnQgPSBwcmV2ZW50Q29sbGlzaW9uKGV2dCwgbW92ZUV2ZW50RnJvbUV2ZW50KGV2dCwgZXZlbnQub2Zmc2V0WCkpO1xyXG5cclxuICAgICAgICBjbGVhclNoYWRvdygpO1xyXG5cclxuICAgICAgICBzY29wZS5tb3VzZUxlYXZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBkZWZhdWx0TW91c2VMZWF2ZSgpO1xyXG4gICAgICAgICAgY2FuY2VsTW92ZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBfY2FuY2VsTW92ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc2NvcGUucmVjaXBlLnJhaXNlKCdwYXR0ZXJuX25vdGVfZHJhZycpO1xyXG4gICAgICAgICAgY2FuY2VsTW92ZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNjb3BlLm1vdXNlVXBSZXNpemVFdmVudCA9IF9jYW5jZWxNb3ZlO1xyXG4gICAgICAgIHNjb3BlLm1vdXNlVXBFdmVudCA9IF9jYW5jZWxNb3ZlO1xyXG4gICAgICAgIHNjb3BlLm1vdXNlVXAgPSBfY2FuY2VsTW92ZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNjb3BlLm1vdXNlRG93blJlc2l6ZUV2ZW50ID0gZnVuY3Rpb24oZXZ0LCBldmVudCkge1xyXG4gICAgICAgIE11c2ljQ29udGV4dC5yZXN1bWVBdWRpbygpO1xyXG5cclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBzY29wZS4kZW1pdChcInBhdHRlcm5TZWxlY3RFdmVudFwiLCBldnQpO1xyXG4gICAgICAgIHNjb3BlLnNlbGVjdGVkID0gZXZ0O1xyXG5cclxuICAgICAgICBzY29wZS5tb3VzZU1vdmUgPSBwcmV2ZW50Q29sbGlzaW9uKGV2dCwgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgIHZhciBvbGRldnQgPSB7bjpldnQubiwgczpldnQucywgbDpldnQubH07XHJcbiAgICAgICAgICB2YXIgY2xpcERpc3RhbmNlID0gVElDS1NfUEVSX0JFQVQgLyBzY29wZS56b29tTGV2ZWw7XHJcbiAgICAgICAgICB2YXIgY2xpcEwgPSBQYXR0ZXJuLmZpbmRDbGlwTChzY29wZS5wYXR0ZXJuLCBzY29wZS50cmFjaywgZXZ0LCBldnQucyk7XHJcblxyXG4gICAgICAgICAgaWYgKCFldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZXZlbnQtbGlzdFwiKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIHZhciBleGFjdEwgPSBNYXRoLmZsb29yKGV2ZW50Lm9mZnNldFggLyBzY29wZS5iZWF0V2lkdGggLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVCkgLSBldnQucztcclxuXHJcbiAgICAgICAgICBpZiAoTWF0aC5hYnMoZXhhY3RMIC0gY2xpcEwgLSBjbGlwRGlzdGFuY2UpIDwgY2xpcERpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGV2dC5sID0gY2xpcEw7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcmVmcyA9IE1hdGguZmxvb3IoZXZlbnQub2Zmc2V0WCAvIHNjb3BlLmJlYXRXaWR0aCAvIDIpICogMiAvIHNjb3BlLnpvb21MZXZlbCAqIFRJQ0tTX1BFUl9CRUFUO1xyXG4gICAgICAgICAgICBldnQubCA9IHJlZnMgLSBldnQucztcclxuICAgICAgICAgICAgZXZ0LmwgPSBNYXRoLmZsb29yKGV2dC5sKTtcclxuICAgICAgICAgICAgaWYgKGV2dC5sPFRJQ0tTX1BFUl9CRUFUL3Njb3BlLnpvb21MZXZlbCkgZXZ0Lmw9VElDS1NfUEVSX0JFQVQvc2NvcGUuem9vbUxldmVsO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdEwgPSBldnQubDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2NvcGUubW91c2VNb3ZlRXZlbnQgPSBwcmV2ZW50Q29sbGlzaW9uKGV2dCwgZnVuY3Rpb24oZHJhZ2V2dCwgZXZlbnQpIHtcclxuICAgICAgICAgIHZhciBvbGRldnQgPSB7bjpldnQubiwgczpldnQucywgbDpldnQubH07XHJcbiAgICAgICAgICB2YXIgY2xpcERpc3RhbmNlID0gVElDS1NfUEVSX0JFQVQgLyBzY29wZS56b29tTGV2ZWw7XHJcbiAgICAgICAgICB2YXIgY2xpcEwgPSBQYXR0ZXJuLmZpbmRDbGlwTChzY29wZS5wYXR0ZXJuLCBzY29wZS50cmFjaywgZXZ0LCBldnQucyk7XHJcblxyXG4gICAgICAgICAgdmFyIGV4YWN0TCA9IGRyYWdldnQucyArIFxyXG4gICAgICAgICAgICBNYXRoLmZsb29yKGV2ZW50Lm9mZnNldFggLyBzY29wZS5iZWF0V2lkdGggLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVCkgLVxyXG4gICAgICAgICAgICBldnQucztcclxuXHJcbiAgICAgICAgICBpZiAoTWF0aC5hYnMoZXhhY3RMIC0gY2xpcEwgLSBjbGlwRGlzdGFuY2UpIDwgY2xpcERpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGV2dC5sID0gY2xpcEw7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcmVmcyA9IGRyYWdldnQucyArIE1hdGguZmxvb3IoZXZlbnQub2Zmc2V0WCAvIHNjb3BlLmJlYXRXaWR0aCAvIDIpICogMiAvIHNjb3BlLnpvb21MZXZlbCAqIFRJQ0tTX1BFUl9CRUFUO1xyXG4gICAgICAgICAgICBldnQubCA9IHJlZnMgLSBldnQucztcclxuICAgICAgICAgICAgZXZ0LmwgPSBNYXRoLmZsb29yKGV2dC5sKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChldnQubDxUSUNLU19QRVJfQkVBVC9zY29wZS56b29tTGV2ZWwpIGV2dC5sPVRJQ0tTX1BFUl9CRUFUL3Njb3BlLnpvb21MZXZlbDtcclxuXHJcbiAgICAgICAgICAgIGRlZmF1bHRMID0gZXZ0Lmw7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNjb3BlLm1vdXNlVXBSZXNpemVFdmVudCA9IGNhbmNlbE1vdmU7XHJcbiAgICAgICAgc2NvcGUubW91c2VVcEV2ZW50ID0gY2FuY2VsTW92ZTtcclxuICAgICAgICBzY29wZS5tb3VzZVVwID0gY2FuY2VsTW92ZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBrZXlEb3duSGFuZGxlciA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIikgcmV0dXJuO1xyXG5cclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09IDQ2KSB7XHJcbiAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2NvcGUudHJhY2suZXZlbnRzID0gc2NvcGUudHJhY2suZXZlbnRzLmZpbHRlcihmdW5jdGlvbihldnQpIHsgcmV0dXJuIGV2dCAhPT0gc2NvcGUuc2VsZWN0ZWQ7IH0pO1xyXG4gICAgICAgICAgICBzY29wZS4kZW1pdChcInRyYWNrQ2hhbmdlZFwiLCBzY29wZS50cmFjayk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICAkKGRvY3VtZW50KS5iaW5kKFwia2V5ZG93blwiLCBrZXlEb3duSGFuZGxlcik7XHJcbiAgICAgIHNjb3BlLiRvbihcIiRkZXN0cm95XCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoZG9jdW1lbnQpLnVuYmluZChcImtleWRvd25cIiwga2V5RG93bkhhbmRsZXIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNjb3BlLiRvbihcInRyYWNrU2VsZWN0RXZlbnRcIiwgZnVuY3Rpb24oZXZ0LCBldmVudCkge1xyXG4gICAgICAgIHNjb3BlLnNlbGVjdGVkID0gZXZlbnQ7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1dKTtcclxuIiwidmFyIG11c2ljU2hvd0Nhc2VBcHAgPSBhbmd1bGFyLm1vZHVsZShcIk11c2ljU2hvd0Nhc2VBcHBcIik7XHJcbm11c2ljU2hvd0Nhc2VBcHAuZGlyZWN0aXZlKFwibmdmRHJvcFwiLCBbXCIkcGFyc2VcIiwgZnVuY3Rpb24oJHBhcnNlKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgdmFyIG5nZkRyb3BHZXR0ZXIgPSAkcGFyc2UoYXR0cnMubmdmRHJvcCk7XHJcblxyXG4gICAgICB2YXIgYWxsb3dEcmFnID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnY29weSc7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgb25Ecm9wID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIG5nZkRyb3BHZXR0ZXIoc2NvcGUsIHsnJGZpbGVzJzogZS5kYXRhVHJhbnNmZXIuZmlsZXN9KTtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgYWxsb3dEcmFnKTtcclxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgYWxsb3dEcmFnKVxyXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIG9uRHJvcCk7XHJcblxyXG4gICAgICBzY29wZS4kb24oXCIkZGVzdHJveVwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgYWxsb3dEcmFnKTtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBhbGxvd0RyYWcpO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdkcm9wJywgb25Ecm9wKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxufV0pO1xyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5kaXJlY3RpdmUoXCJuZ2ZMb2FkZXJcIiwgW1wiJHBhcnNlXCIsIGZ1bmN0aW9uKCRwYXJzZSkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgIHZhciBuZ2ZMb2FkZXJHZXR0ZXIgPSAkcGFyc2UoYXR0cnMubmdmTG9hZGVyKTtcclxuICAgICAgdmFyIG9uQ2hhbmdlID0gIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBuZ2ZMb2FkZXJHZXR0ZXIoc2NvcGUsIHsnJGZpbGVzJzogZS50YXJnZXQuZmlsZXN9KTtcclxuICAgICAgICAkKGVsZW1lbnQpLnZhbChcIlwiKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgICQoZWxlbWVudCkub24oJ2NoYW5nZScsIG9uQ2hhbmdlKTtcclxuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoZWxlbWVudCkub2ZmKCdjaGFuZ2UnLCBvbkNoYW5nZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1dKTtcclxuIiwibXVzaWNTaG93Q2FzZUFwcC5kaXJlY3RpdmUoXCJwYXR0ZXJuVHJhY2tDb21wYWN0Vmlld1wiLCBbXCIkdGltZW91dFwiLCBcIlRJQ0tTX1BFUl9CRUFUXCIsIFwiUmVjaXBlXCIsIFwiUGF0dGVyblwiLCBcIk11c2ljQ29udGV4dFwiLCBmdW5jdGlvbigkdGltZW91dCwgVElDS1NfUEVSX0JFQVQsIFJlY2lwZSwgUGF0dGVybiwgTXVzaWNDb250ZXh0KSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHNjb3BlOiB7XHJcbiAgICAgIC8qIEN1cnJlbnQgcGF0dGVybiAqL1xyXG4gICAgICBwYXR0ZXJuOiBcIj1wYXR0ZXJuXCIsXHJcbiAgICAgIC8qIEN1cnJlbnQgdHJhY2sgKi9cclxuICAgICAgdHJhY2s6IFwiPXRyYWNrXCIsXHJcbiAgICAgIC8qIERpc3BsYXkgcGFyYW1zICovXHJcbiAgICAgIHpvb21MZXZlbDogXCI9em9vbUxldmVsXCIsXHJcbiAgICAgIGJlYXRXaWR0aDogXCI9YmVhdFdpZHRoXCIsXHJcbiAgICAgIC8qIEZpbGUgcGFyYW1zIChjb21tb24gdG8gYWxsIHRyYWNrcykgKi9cclxuICAgICAgbWVhc3VyZTogXCI9bWVhc3VyZVwiLFxyXG4gICAgICBtZWFzdXJlQ291bnQ6IFwiPW1lYXN1cmVDb3VudFwiXHJcbiAgICB9LFxyXG4gICAgdGVtcGxhdGVVcmw6IFwic2l0ZS90ZW1wbGF0ZXMvZGlyZWN0aXZlcy9wYXR0ZXJuVHJhY2tDb21wYWN0Vmlldy5odG1sXCIsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCkge1xyXG4gICAgICBzY29wZS5yZWNpcGUgPSBSZWNpcGUuc3RhcnQ7XHJcblxyXG4gICAgICBzY29wZS5USUNLU19QRVJfQkVBVCA9IFRJQ0tTX1BFUl9CRUFUO1xyXG4gICAgICB2YXIgc2VtaXRvbmVUb05vdGUgPSBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgcmV0dXJuIFswLFswLDFdLCAxLCBbMSwyXSwgMiwgMywgWzMsNF0sIDQsIFs0LDVdLCA1LCBbNSw2XSwgNl1bbiUxMl07XHJcbiAgICAgIH07XHJcbiAgICAgIHZhciBub3RhdGlvbjcgPSBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcIkNcIixcIkRcIixcIkVcIixcIkZcIixcIkdcIixcIkFcIixcIkJcIl1bbiAlIDddO1xyXG4gICAgICB9O1xyXG4gICAgICBzY29wZS5ub3RlTmFtZSA9IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICB2YXIgbm90ZTcgPSBzZW1pdG9uZVRvTm90ZShuKTtcclxuICAgICAgICB2YXIgb2N0YXZlID0gTWF0aC5mbG9vcihuLzEyKTtcclxuXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm90ZTcpKSB7XHJcbiAgICAgICAgICBub3RlNyA9IG5vdGU3WzBdXHJcbiAgICAgICAgICByZXR1cm4gbm90YXRpb243KG5vdGU3KSArICcjJyArIG9jdGF2ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG5vdGF0aW9uNyhub3RlNykgKyBvY3RhdmU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgICBcclxuICAgICAgdmFyIHVwZGF0ZUdyaWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBzY29wZS5tYWluR3JpZFN0eWxlID0ge1xyXG4gICAgICAgICAgXCJiYWNrZ3JvdW5kLXNpemVcIjogKHNjb3BlLm1lYXN1cmUqc2NvcGUuYmVhdFdpZHRoKnNjb3BlLnpvb21MZXZlbCkgKyBcInB4IDI0MHB4XCIsXHJcbiAgICAgICAgICBcImJhY2tncm91bmQtcG9zaXRpb25cIjogLXNjb3BlLnBhdHRlcm4uc2Nyb2xsTGVmdCArIFwicHhcIlxyXG4gICAgICAgIH07XHJcbiAgICAgIH07XHJcbiAgICAgIHNjb3BlLiR3YXRjaChcIlttZWFzdXJlLCBiZWF0V2lkdGgsIHpvb21MZXZlbCwgcGF0dGVybi5zY3JvbGxMZWZ0XVwiLCB1cGRhdGVHcmlkKTtcclxuICAgICAgc2NvcGUuJG9uKFwidHJhY2tTZWxlY3RFdmVudFwiLCBmdW5jdGlvbihldnQsIGV2ZW50KSB7XHJcbiAgICAgICAgc2NvcGUuc2VsZWN0ZWQgPSBldmVudDtcclxuICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgdmFyIG1vdXNlVXAgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgIHNjb3BlLiRlbWl0KFwiZW5hYmxlVHJhY2tcIiwgc2NvcGUudHJhY2spO1xyXG4gICAgICAgIHNjb3BlLm1vdXNlTW92ZSA9IGZ1bmN0aW9uKCkge307XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS5tb3VzZVVwID0gbW91c2VVcDtcclxuXHJcbiAgICAgIHNjb3BlLm1vdXNlTGVhdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBzY29wZS5tb3VzZU1vdmUgPSBmdW5jdGlvbigpIHt9O1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGNhbmNlbE1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBzY29wZS5tb3VzZU1vdmVFdmVudCA9IGZ1bmN0aW9uKCl7fTtcclxuICAgICAgICBzY29wZS5tb3VzZU1vdmUgPSBmdW5jdGlvbigpe307XHJcbiAgICAgICAgc2NvcGUubW91c2VMZWF2ZSA9IGZ1bmN0aW9uKCl7fTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNjb3BlLm1vdXNlRG93bkV2ZW50ID0gZnVuY3Rpb24oZXZ0LCBldmVudCkge1xyXG4gICAgICAgIHZhciBtb3ZlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICB2YXIgbW92ZUV2ZW50ID0gZnVuY3Rpb24oZXZ0LCBvZmZzZXRYKSB7XHJcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgTXVzaWNDb250ZXh0LnJlc3VtZUF1ZGlvKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2xpcERpc3RhbmNlID0gVElDS1NfUEVSX0JFQVQgLyBzY29wZS56b29tTGV2ZWw7XHJcbiAgICAgICAgICAgIHZhciBvbGRldnQgPSB7bjpldnQubiwgczpldnQucywgbDpldnQubH07XHJcblxyXG4gICAgICAgICAgICBpZiAoIWV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcInRyYWNrLWNvbXBhY3Qtdmlld1wiKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdmFyIGV4YWN0UG9zaXRpb24gPSBNYXRoLmZsb29yKChldmVudC5vZmZzZXRYIC0gb2Zmc2V0WCkgLyBzY29wZS5iZWF0V2lkdGggLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVCk7XHJcbiAgICAgICAgICAgIGV4YWN0UG9zaXRpb24gPSBNYXRoLmZsb29yKGV4YWN0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICB2YXIgY2xpcFMgPSBQYXR0ZXJuLmZpbmRDbGlwUyhzY29wZS5wYXR0ZXJuLCBzY29wZS50cmFjaywgZXZ0LCBleGFjdFBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhleGFjdFBvc2l0aW9uIC0gY2xpcFMgLSBjbGlwRGlzdGFuY2UgLyAyKSA8IGNsaXBEaXN0YW5jZSkge1xyXG4gICAgICAgICAgICAgIGV2dC5zID0gY2xpcFM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZXZ0LnMgPSBNYXRoLmZsb29yKChldmVudC5vZmZzZXRYIC0gb2Zmc2V0WCkgLyAyIC8gc2NvcGUuYmVhdFdpZHRoKSAqIDIgLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVDtcclxuICAgICAgICAgICAgICBldnQucyA9IE1hdGguZmxvb3IoZXZ0LnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZXZ0LnMgPCAwKSBldnQucyA9IDA7XHJcbiAgICAgICAgICAgIGlmIChldnQucyAhPT0gb2xkZXZ0LnMpIG1vdmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHNjb3BlLiRlbWl0KFwidHJhY2tDaGFuZ2VkXCIsIHNjb3BlLnRyYWNrKTtcclxuICAgICAgICAgICAgc2NvcGUuJGVtaXQoXCJldmVudENoYW5nZWRcIiwge29sZGV2dDogb2xkZXZ0LCBldnQ6ZXZ0LCB0cmFjazogc2NvcGUudHJhY2t9KTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG1vdmVFdmVudEZyb21FdmVudCA9IGZ1bmN0aW9uKGV2dCwgb2Zmc2V0WCkge1xyXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRyYWdldnQsIGV2ZW50KSB7XHJcbiAgICAgICAgICAgIE11c2ljQ29udGV4dC5yZXN1bWVBdWRpbygpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNsaXBEaXN0YW5jZSA9IFRJQ0tTX1BFUl9CRUFUIC8gc2NvcGUuem9vbUxldmVsO1xyXG4gICAgICAgICAgICB2YXIgb2xkZXZ0ID0ge246ZXZ0Lm4sIHM6ZXZ0LnMsIGw6ZXZ0Lmx9O1xyXG5cclxuICAgICAgICAgICAgdmFyIGV4YWN0UG9zaXRpb24gPSBkcmFnZXZ0LnMgKyBNYXRoLmZsb29yKChldmVudC5vZmZzZXRYIC0gb2Zmc2V0WCkgLyBzY29wZS5iZWF0V2lkdGggLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVCk7XHJcbiAgICAgICAgICAgIGV4YWN0UG9zaXRpb24gPSBNYXRoLmZsb29yKGV4YWN0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICB2YXIgY2xpcFMgPSBQYXR0ZXJuLmZpbmRDbGlwUyhzY29wZS5wYXR0ZXJuLCBzY29wZS50cmFjaywgZXZ0LCBleGFjdFBvc2l0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhleGFjdFBvc2l0aW9uIC0gY2xpcFMgLSBjbGlwRGlzdGFuY2UgLyAyKSA8IGNsaXBEaXN0YW5jZSkge1xyXG4gICAgICAgICAgICAgIGV2dC5zID0gY2xpcFM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgZXZ0LnMgPSBkcmFnZXZ0LnMgKyBNYXRoLmZsb29yKChldmVudC5vZmZzZXRYIC0gb2Zmc2V0WCkgLyAyIC8gc2NvcGUuYmVhdFdpZHRoKSAqIDIgLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVDtcclxuICAgICAgICAgICAgICBldnQucyA9IE1hdGguZmxvb3IoZXZ0LnMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZXZ0LnMgPCAwKSBldnQucyA9IDA7XHJcbiAgICAgICAgICAgIGlmIChldnQucyAhPT0gb2xkZXZ0LnMpIG1vdmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHNjb3BlLiRlbWl0KFwidHJhY2tDaGFuZ2VkXCIsIHNjb3BlLnRyYWNrKTtcclxuICAgICAgICAgICAgc2NvcGUuJGVtaXQoXCJldmVudENoYW5nZWRcIiwge29sZGV2dDogb2xkZXZ0LCBldnQ6ZXZ0LCB0cmFjazogc2NvcGUudHJhY2t9KTtcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmJsdXIoKTtcclxuXHJcbiAgICAgICAgc2NvcGUuJGVtaXQoXCJldmVudFNlbGVjdGVkXCIsIHtldnQ6IGV2dCwgdHJhY2s6IHNjb3BlLnRyYWNrfSk7XHJcblxyXG4gICAgICAgIHNjb3BlLm1vdXNlTW92ZSA9IG1vdmVFdmVudChldnQsIGV2ZW50Lm9mZnNldFgpO1xyXG4gICAgICAgIHNjb3BlLm1vdXNlTW92ZUV2ZW50ID0gbW92ZUV2ZW50RnJvbUV2ZW50KGV2dCwgZXZlbnQub2Zmc2V0WCk7XHJcblxyXG4gICAgICAgIHNjb3BlLm1vdXNlTGVhdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGNhbmNlbE1vdmUoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgX2NhbmNlbE1vdmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHNjb3BlLnJlY2lwZS5yYWlzZSgncGF0dGVybl9ub3RlX2RyYWcnKTtcclxuICAgICAgICAgIGNhbmNlbE1vdmUoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzY29wZS5tb3VzZVVwUmVzaXplRXZlbnQgPSBfY2FuY2VsTW92ZTtcclxuICAgICAgICBzY29wZS5tb3VzZVVwRXZlbnQgPSBfY2FuY2VsTW92ZTtcclxuICAgICAgICBzY29wZS5tb3VzZVVwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzY29wZS5tb3VzZVVwID0gbW91c2VVcDtcclxuXHJcbiAgICAgICAgICBpZiAoIW1vdmVkKSBzY29wZS4kZW1pdChcImVuYWJsZVRyYWNrXCIsIHNjb3BlLnRyYWNrKTtcclxuXHJcbiAgICAgICAgICBzY29wZS4kZW1pdChcInBhdHRlcm5TZWxlY3RFdmVudFwiLCBldnQpO1xyXG4gICAgICAgICAgX2NhbmNlbE1vdmUoKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUubW91c2VEb3duUmVzaXplRXZlbnQgPSBmdW5jdGlvbihldnQsIGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIG1vdmVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIHNjb3BlLm1vdXNlTW92ZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICBNdXNpY0NvbnRleHQucmVzdW1lQXVkaW8oKTtcclxuXHJcbiAgICAgICAgICB2YXIgb2xkZXZ0ID0ge246ZXZ0Lm4sIHM6ZXZ0LnMsIGw6ZXZ0Lmx9O1xyXG4gICAgICAgICAgdmFyIGNsaXBEaXN0YW5jZSA9IFRJQ0tTX1BFUl9CRUFUIC8gc2NvcGUuem9vbUxldmVsO1xyXG4gICAgICAgICAgdmFyIGNsaXBMID0gUGF0dGVybi5maW5kQ2xpcEwoc2NvcGUucGF0dGVybiwgc2NvcGUudHJhY2ssIGV2dCwgZXZ0LnMpO1xyXG5cclxuICAgICAgICAgIGlmICghZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwidHJhY2stY29tcGFjdC12aWV3XCIpKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgdmFyIGV4YWN0TCA9IE1hdGguZmxvb3IoZXZlbnQub2Zmc2V0WCAvIHNjb3BlLmJlYXRXaWR0aCAvIHNjb3BlLnpvb21MZXZlbCAqIFRJQ0tTX1BFUl9CRUFUKSAtIGV2dC5zO1xyXG5cclxuICAgICAgICAgIGlmIChNYXRoLmFicyhleGFjdEwgLSBjbGlwTCAtIGNsaXBEaXN0YW5jZSkgPCBjbGlwRGlzdGFuY2UpIHtcclxuICAgICAgICAgICAgZXZ0LmwgPSBjbGlwTDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciByZWZzID0gTWF0aC5mbG9vcihldmVudC5vZmZzZXRYIC8gc2NvcGUuYmVhdFdpZHRoIC8gMikgKiAyIC8gc2NvcGUuem9vbUxldmVsICogVElDS1NfUEVSX0JFQVQ7XHJcbiAgICAgICAgICAgIGV2dC5sID0gcmVmcyAtIGV2dC5zO1xyXG4gICAgICAgICAgICBldnQubCA9IE1hdGguZmxvb3IoZXZ0LmwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGV2dC5sPFRJQ0tTX1BFUl9CRUFUL3Njb3BlLnpvb21MZXZlbCkgZXZ0Lmw9VElDS1NfUEVSX0JFQVQvc2NvcGUuem9vbUxldmVsO1xyXG4gICAgICAgICAgICBkZWZhdWx0TCA9IGV2dC5sO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChldnQubCAhPT0gb2xkZXZ0LmwpIHtcclxuICAgICAgICAgICAgbW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHNjb3BlLiRlbWl0KFwidHJhY2tDaGFuZ2VkXCIsIHNjb3BlLnRyYWNrKTtcclxuICAgICAgICAgIHNjb3BlLiRlbWl0KFwiZXZlbnRDaGFuZ2VkXCIsIHtvbGRldnQ6b2xkZXZ0LCBldnQ6ZXZ0LCB0cmFjazogc2NvcGUudHJhY2t9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzY29wZS5tb3VzZU1vdmVFdmVudCA9IGZ1bmN0aW9uKGRyYWdldnQsIGV2ZW50KSB7XHJcbiAgICAgICAgICBNdXNpY0NvbnRleHQucmVzdW1lQXVkaW8oKTtcclxuXHJcbiAgICAgICAgICB2YXIgb2xkZXZ0ID0ge246ZXZ0Lm4sIHM6ZXZ0LnMsIGw6ZXZ0Lmx9O1xyXG4gICAgICAgICAgdmFyIGNsaXBEaXN0YW5jZSA9IFRJQ0tTX1BFUl9CRUFUIC8gc2NvcGUuem9vbUxldmVsO1xyXG4gICAgICAgICAgdmFyIGNsaXBMID0gUGF0dGVybi5maW5kQ2xpcEwoc2NvcGUucGF0dGVybiwgc2NvcGUudHJhY2ssIGV2dCwgZXZ0LnMpO1xyXG5cclxuICAgICAgICAgIHZhciBleGFjdEwgPSBkcmFnZXZ0LnMgKyBcclxuICAgICAgICAgICAgTWF0aC5mbG9vcihldmVudC5vZmZzZXRYIC8gc2NvcGUuYmVhdFdpZHRoIC8gc2NvcGUuem9vbUxldmVsICogVElDS1NfUEVSX0JFQVQpIC1cclxuICAgICAgICAgICAgZXZ0LnM7XHJcblxyXG4gICAgICAgICAgaWYgKE1hdGguYWJzKGV4YWN0TCAtIGNsaXBMIC0gY2xpcERpc3RhbmNlKSA8IGNsaXBEaXN0YW5jZSkge1xyXG4gICAgICAgICAgICBldnQubCA9IGNsaXBMO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHJlZnMgPSBkcmFnZXZ0LnMgKyBNYXRoLmZsb29yKGV2ZW50Lm9mZnNldFggLyBzY29wZS5iZWF0V2lkdGggLyAyKSAqIDIgLyBzY29wZS56b29tTGV2ZWwgKiBUSUNLU19QRVJfQkVBVDtcclxuICAgICAgICAgICAgZXZ0LmwgPSByZWZzIC0gZXZ0LnM7XHJcbiAgICAgICAgICAgIGV2dC5sID0gTWF0aC5mbG9vcihldnQubCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZXZ0Lmw8VElDS1NfUEVSX0JFQVQvc2NvcGUuem9vbUxldmVsKSBldnQubD1USUNLU19QRVJfQkVBVC9zY29wZS56b29tTGV2ZWw7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0TCA9IGV2dC5sO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChldnQubCAhPT0gb2xkZXZ0LmwpIHtcclxuICAgICAgICAgICAgbW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgfSAgICAgICAgICBcclxuXHJcbiAgICAgICAgICBzY29wZS4kZW1pdChcInRyYWNrQ2hhbmdlZFwiLCBzY29wZS50cmFjayk7XHJcbiAgICAgICAgICBzY29wZS4kZW1pdChcImV2ZW50Q2hhbmdlZFwiLCB7b2xkZXZ0Om9sZGV2dCwgZXZ0OmV2dCwgdHJhY2s6IHNjb3BlLnRyYWNrfSk7XHJcbiAgICAgICAgfTsgICAgICAgIFxyXG5cclxuICAgICAgICBzY29wZS5tb3VzZVVwUmVzaXplRXZlbnQgPSBjYW5jZWxNb3ZlO1xyXG4gICAgICAgIHNjb3BlLm1vdXNlVXBFdmVudCA9IGNhbmNlbE1vdmU7XHJcbiAgICAgICAgc2NvcGUubW91c2VVcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc2NvcGUubW91c2VVcCA9IG1vdXNlVXA7XHJcblxyXG4gICAgICAgICAgaWYgKCFtb3ZlZCkgc2NvcGUuJGVtaXQoXCJlbmFibGVUcmFja1wiLCBzY29wZS50cmFjayk7XHJcblxyXG4gICAgICAgICAgc2NvcGUuJGVtaXQoXCJwYXR0ZXJuU2VsZWN0RXZlbnRcIiwgZXZ0KTtcclxuICAgICAgICAgIGNhbmNlbE1vdmUoKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9O1xyXG5cclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcblxyXG4iLCJtdXNpY1Nob3dDYXNlQXBwLmRpcmVjdGl2ZShcInBsYXlpbmdMaW5lXCIsIFtcIiR0aW1lb3V0XCIsIFwiJHBhcnNlXCIsIFwiVElDS1NfUEVSX0JFQVRcIiwgZnVuY3Rpb24oJHRpbWVvdXQsICRwYXJzZSwgVElDS1NfUEVSX0JFQVQpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2NvcGU6IHt9LFxyXG4gICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgIHRlbXBsYXRlVXJsOiBcInNpdGUvdGVtcGxhdGVzL2RpcmVjdGl2ZXMvcGxheWluZ0xpbmUuaHRtbFwiLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgIHZhciB0MDtcclxuICAgICAgdmFyIHRpbWVUb1RpY2tzO1xyXG4gICAgICB2YXIgcGxheWluZyA9IGZhbHNlO1xyXG4gICAgICB2YXIgZ2V0QnBtID0gJHBhcnNlKGF0dHJzLmJwbSk7XHJcbiAgICAgIHZhciBnZXRab29tTGV2ZWwgPSAkcGFyc2UoYXR0cnMuem9vbUxldmVsKTtcclxuICAgICAgdmFyIGdldEJlYXRXaWR0aCA9ICRwYXJzZShhdHRycy5iZWF0V2lkdGgpO1xyXG5cclxuICAgICAgdmFyIGJwbSwgem9vbUxldmVsLCBiZWF0V2lkdGg7XHJcblxyXG4gICAgICB2YXIgdGlja3NUb1BYID0gZnVuY3Rpb24odGlja3MpIHtcclxuICAgICAgICB6b29tTGV2ZWwgPSBnZXRab29tTGV2ZWwoc2NvcGUuJHBhcmVudCk7XHJcbiAgICAgICAgYmVhdFdpZHRoID0gZ2V0QmVhdFdpZHRoKHNjb3BlLiRwYXJlbnQpO1xyXG4gICAgICAgIHJldHVybiB0aWNrcyp6b29tTGV2ZWwqYmVhdFdpZHRoL1RJQ0tTX1BFUl9CRUFUO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKGJwbSAmJiBwbGF5aW5nKSB7XHJcbiAgICAgICAgICB2YXIgdGlja3MgPSB0aW1lVG9UaWNrcygod2luZG93LnBlcmZvcm1hbmNlLm5vdygpIC0gdDApKTtcclxuICAgICAgICAgIHZhciBkaXNwbGFjZW1lbnQgPSB0aWNrc1RvUFgodGlja3MpO1xyXG5cclxuICAgICAgICAgIGVsZW1lbnQuY3NzKFwibGVmdFwiLCAoZGlzcGxhY2VtZW50KSArIFwicHhcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgcGxheWluZ0xpbmUgPSAkKGVsZW1lbnQpO1xyXG4gICAgICB2YXIgcmVxdWVzdElkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTtcclxuXHJcbiAgICAgIHNjb3BlLiRvbignc3RhcnRDbG9jaycsIGZ1bmN0aW9uKGV2dCwgX3RpbWVUb1RpY2tzKSB7XHJcbiAgICAgICAgdmFyIF90MCA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcclxuXHJcbiAgICAgICAgcGxheWluZyA9IHRydWU7XHJcbiAgICAgICAgYnBtID0gZ2V0QnBtKHNjb3BlLiRwYXJlbnQpO1xyXG5cclxuICAgICAgICB0aW1lVG9UaWNrcyA9IF90aW1lVG9UaWNrcztcclxuICAgICAgICB0MCA9IF90MDtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzY29wZS4kb24oJ3N0b3BDbG9jaycsIGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICAgIHBsYXlpbmcgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzY29wZS4kb24oJ3BhdXNlQ2xvY2snLCBmdW5jdGlvbihldnQpIHtcclxuICAgICAgICB2YXIgdGlja3MgPSB0aW1lVG9UaWNrcygod2luZG93LnBlcmZvcm1hbmNlLm5vdygpIC0gdDApKTtcclxuICAgICAgICB2YXIgZGlzcGxhY2VtZW50ID0gdGlja3NUb1BYKHRpY2tzIHx8IDApO1xyXG5cclxuICAgICAgICBwbGF5aW5nID0gZmFsc2U7XHJcbiAgICAgICAgc2NvcGUuJGVtaXQoJ3BhdXNlZENsb2NrJywgdGlja3MpO1xyXG4gICAgICAgIGVsZW1lbnQuY3NzKFwibGVmdFwiLCAoZGlzcGxhY2VtZW50KSArIFwicHhcIik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc2NvcGUuJG9uKCdyZXNldENsb2NrJywgZnVuY3Rpb24oZXZ0LCBiYXNlVGlja3MpIHtcclxuICAgICAgICB2YXIgZGlzcGxhY2VtZW50ID0gdGlja3NUb1BYKGJhc2VUaWNrcyB8fCAwKTtcclxuXHJcbiAgICAgICAgcGxheWluZyA9IGZhbHNlO1xyXG4gICAgICAgIGVsZW1lbnQuY3NzKFwibGVmdFwiLCAoZGlzcGxhY2VtZW50KSArIFwicHhcIik7XHJcbiAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyZXF1ZXN0SWQpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcblxyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5kaXJlY3RpdmUoXCJyZWNpcGVCbGlua1wiLCBbXCIkcGFyc2VcIiwgXCIkdGltZW91dFwiLCBcIlJlY2lwZVwiLCBmdW5jdGlvbigkcGFyc2UsICR0aW1lb3V0LCBSZWNpcGUpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICB2YXIgcmVjaXBlQmxpbmtHZXR0ZXIgPSAkcGFyc2UoYXR0cnMucmVjaXBlQmxpbmspO1xyXG4gICAgICB2YXIgYmxpbmtFbGVtZW50SWQgPSByZWNpcGVCbGlua0dldHRlcihzY29wZSk7XHJcblxyXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYmxpbmtFbGVtZW50SWQpKSB7XHJcbiAgICAgICAgYmxpbmtFbGVtZW50SWQgPSBbYmxpbmtFbGVtZW50SWRdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgYmxpbmsgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICQoZWxlbWVudCkuYWRkQ2xhc3MoJ2JsaW5rJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgbm9ibGluayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJChlbGVtZW50KS5yZW1vdmVDbGFzcygnYmxpbmsnKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciByZWdpc3RlckV2ZW50ID0gZnVuY3Rpb24oYmxpbmtFbGVtZW50SWQpIHtcclxuICAgICAgICBpZiAoUmVjaXBlLmdldEJsaW5rcygpLmluZGV4T2YoYmxpbmtFbGVtZW50SWQpICE9PSAtMSkge1xyXG4gICAgICAgICAgYmxpbmsoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNjb3BlLiRvbihcIl9ibGlua19lbmFibGVfXCIgKyBibGlua0VsZW1lbnRJZCwgZnVuY3Rpb24oZXZlbnQsIGFyZ3MpIHtcclxuICAgICAgICAgIGJsaW5rKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNjb3BlLiRvbihcIl9ibGlua19kaXNhYmxlX1wiICsgYmxpbmtFbGVtZW50SWQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgbm9ibGluaygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzY29wZS4kb24oXCJfX2JsaW5rX2Rpc2FibGVfYWxsXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgbm9ibGluaygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgYmxpbmtFbGVtZW50SWQuZm9yRWFjaChyZWdpc3RlckV2ZW50KTtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcblxyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5kaXJlY3RpdmUoXCJyZWNpcGVUb29sdGlwXCIsIFtcIiRwYXJzZVwiLCBcIiR0aW1lb3V0XCIsIGZ1bmN0aW9uKCRwYXJzZSwgJHRpbWVvdXQpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdFJyxcclxuICAgIHNjb3BlOiB7fSxcclxuICAgIHRlbXBsYXRlOiAnPGRpdiBuZy1jbGljaz1cIm9uQ2xpY2soJGV2ZW50KVwiIG5nLWNsYXNzPVwie1xcJ3Nob3ctcmVjaXBlLXRvb2x0aXBcXCc6IHRvb2x0aXBFbmFibGVkLCBcXCdjYXAtcmlnaHRcXCc6IGNhcFJpZ2h0fVwiIGNsYXNzPVwiaGVscC10b29sdGlwIHJlY2lwZS10b29sdGlwXCI+PHA+e3t0ZXh0fHRyYW5zbGF0ZX19PC9wPjwvZGl2PicsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgdmFyIHJ0SWRHZXR0ZXIgPSAkcGFyc2UoYXR0cnMucnRJZCk7XHJcbiAgICAgIHZhciB0b29sdGlwRWxlbWVudElkID0gcnRJZEdldHRlcihzY29wZS4kcGFyZW50KTtcclxuXHJcbiAgICAgIHNjb3BlLnRvb2x0aXBFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgIHNjb3BlLm9uQ2xpY2sgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgc2NvcGUuJHBhcmVudC5yZWNpcGUucmFpc2UoXCJ0b29sdGlwX2NsaWNrXCIpO1xyXG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBzY29wZS4kb24oXCJfdG9vbHRpcF9kaXNwbGF5X1wiICsgdG9vbHRpcEVsZW1lbnRJZCwgZnVuY3Rpb24oZXZlbnQsIGFyZ3MpIHtcclxuICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciB3aW5kb3dXaWR0aCA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XHJcbiAgICAgICAgICB2YXIgZWwgPSBlbGVtZW50WzBdO1xyXG4gICAgICAgICAgdmFyIG9mZnNldCA9IHdpbmRvd1dpZHRoIC0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcclxuXHJcbiAgICAgICAgICBzY29wZS5jYXBSaWdodCA9IG9mZnNldCA8IDMwMDtcclxuXHJcbiAgICAgICAgICBzY29wZS50ZXh0ID0gYXJncy50ZXh0O1xyXG4gICAgICAgICAgc2NvcGUudG9vbHRpcEVuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc2NvcGUuJG9uKFwiX3Rvb2x0aXBfaGlkZV9cIiArIHRvb2x0aXBFbGVtZW50SWQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNjb3BlLnRvb2x0aXBFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc2NvcGUuJG9uKFwiX190b29sdGlwX2hpZGVfYWxsXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHNjb3BlLnRvb2x0aXBFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbn1dKTtcclxuXHJcbiIsInZhciBtdXNpY1Nob3dDYXNlQXBwID0gYW5ndWxhci5tb2R1bGUoXCJNdXNpY1Nob3dDYXNlQXBwXCIpO1xyXG5tdXNpY1Nob3dDYXNlQXBwLmRpcmVjdGl2ZShcInJlY2lwZVdpemFyZFwiLCBbXCIkdGltZW91dFwiLCBmdW5jdGlvbigkdGltZW91dCkge1xyXG4gIHJldHVybiB7XHJcbiAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicmVjaXBlLXdpemFyZFwiPjxwPnt7dGV4dH19PC9wPjwvZGl2PicsXHJcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcblxyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5kaXJlY3RpdmUoXCJyZWN5Y2xlQmluQ29tcGFjdFZpZXdcIiwgW1wiJHRpbWVvdXRcIiwgXCIkdWliTW9kYWxcIiwgXCJGaWxlUmVwb3NpdG9yeVwiLCBcIkVyck1lc3NhZ2VcIiwgZnVuY3Rpb24oJHRpbWVvdXQsICR1aWJNb2RhbCwgRmlsZVJlcG9zaXRvcnksIEVyck1lc3NhZ2UpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdGVtcGxhdGVVcmw6ICdzaXRlL3RlbXBsYXRlcy9kaXJlY3RpdmVzL3JlY3ljbGVCaW5Db21wYWN0Vmlldy5odG1sJyxcclxuICAgIHNjb3BlOiB7fSxcclxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBGaWxlUmVwb3NpdG9yeS5vYnNlcnZlUmVjeWNsZWQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgRmlsZVJlcG9zaXRvcnkuc2VhcmNoUmVjeWNsZWQobnVsbCwge2xpbWl0OiAxMH0pXHJcbiAgICAgICAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgc2NvcGUuZmlsZXMgPSByZXN1bHQucmVzdWx0cy5zbGljZSgwLCA0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzY29wZS4kb24oXCJkZXN0cm95XCIsIG9ic2VydmVyLmRlc3Ryb3kpO1xyXG4gICAgICBcclxuICAgICAgc2NvcGUub3BlblJlY3ljbGVCaW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBzaG93IHJlY3ljbGUgYmluIG1vZGFsXHJcbiAgICAgICAgdmFyIG1vZGFsSW5zID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgdGVtcGxhdGVVcmw6IFwic2l0ZS90ZW1wbGF0ZXMvbW9kYWwvcmVjeWNsZUJpbi5odG1sXCIsXHJcbiAgICAgICAgICBjb250cm9sbGVyOiBcInJlY3ljbGVCaW5Nb2RhbEN0cmxcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUucmVzdG9yZSA9IGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgICBGaWxlUmVwb3NpdG9yeS5yZXN0b3JlRnJvbVJlY3ljbGVCaW4oZmlsZS5pZClcclxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoZmlsZS50eXBlID09PSAncHJvamVjdCcpIHtcclxuICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbiA9IFwiIy9lZGl0b3IvXCIgKyBmaWxlLmlkO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uID0gXCIjL2VkaXRvci9cIitmaWxlLnByb2plY3QrXCIvXCIrZmlsZS50eXBlK1wiL1wiK2ZpbGUuaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgc2NvcGUub25Ecm9wQ29tcGxldGU9IGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgICBGaWxlUmVwb3NpdG9yeS5tb3ZlVG9SZWN5Y2xlQmluKGZpbGUuaWQpXHJcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnIudHlwZSAmJiBlcnIudHlwZSA9PT0gJ2NhbnRyZW1vdmUnKSB7XHJcbiAgICAgICAgICAgICAgRXJyTWVzc2FnZSgnY29tbW9uLmVycm9yX3RpdGxlJywgJ2NvbW1vbi5jYW50cmVtb3ZlX2Vycm9yJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcblxyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxuXHJcbm11c2ljU2hvd0Nhc2VBcHAuZmlsdGVyKFwiaWNvbl9mcm9tX3R5cGVcIiwgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgIGlmICh0eXBlID09PSBcImluc3RydW1lbnRcIikgcmV0dXJuIFwia2V5Ym9hcmRcIjtcclxuICAgIGlmICh0eXBlID09PSBcInRlbXBvXCIpIHJldHVybiBcImNsb2NrXCI7XHJcbiAgICBpZiAodHlwZSA9PT0gXCJzb25nXCIpIHJldHVybiBcInRoXCI7XHJcbiAgICBpZiAodHlwZSA9PT0gXCJwYXR0ZXJuXCIpIHJldHVybiBcIm11c2ljXCI7XHJcbiAgICBpZiAodHlwZSA9PT0gXCJmeFwiKSByZXR1cm4gXCJtYWdpY1wiO1xyXG4gICAgaWYgKHR5cGUgPT09IFwicHJvamVjdFwiKSByZXR1cm4gXCJmb2xkZXJcIjtcclxuICAgIHJldHVybiBcInF1ZXN0aW9uXCI7XHJcbiAgfTtcclxufSk7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLmRpcmVjdGl2ZShcInR5cGVJY29uXCIsIFtcIiRwYXJzZVwiLCBmdW5jdGlvbigkcGFyc2UpIHtcclxuICByZXR1cm4ge1xyXG4gICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIHNjb3BlOiB7fSxcclxuICAgIHJlcGxhY2U6IHRydWUsXHJcbiAgICB0ZW1wbGF0ZTogJzxzcGFuIGNsYXNzPVwiZmEgZmEte3t0eXBlSWNvbiB8IGljb25fZnJvbV90eXBlfX1cIj4nLFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgIHZhciBpY29uVHlwZU5hbWUgPSAkcGFyc2UoYXR0cnMudHlwZUljb24pO1xyXG5cclxuICAgICAgc2NvcGUuJHBhcmVudC4kd2F0Y2goaWNvblR5cGVOYW1lLCBmdW5jdGlvbihuZXdWYWx1ZSkge1xyXG4gICAgICAgIHNjb3BlLnR5cGVJY29uID0gaWNvblR5cGVOYW1lKHNjb3BlLiRwYXJlbnQpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59XSk7XHJcbiIsInZhciBtdXNpY1Nob3dDYXNlQXBwID0gYW5ndWxhci5tb2R1bGUoXCJNdXNpY1Nob3dDYXNlQXBwXCIpO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5mYWN0b3J5KFwiTXVzaWNPYmplY3RGYWN0b3J5XCIsIFtcIk11c2ljQ29udGV4dFwiLCBcIiRxXCIsIFwiVHlwZVNlcnZpY2VcIiwgXCJwcnVuZVdyYXBwZXJcIiwgZnVuY3Rpb24oTXVzaWNDb250ZXh0LCAkcSwgVHlwZVNlcnZpY2UsIHBydW5lV3JhcHBlcikge1xyXG4gIHZhciBmaWxlT3V0cHV0TWFwID0gbmV3IFdlYWtNYXAoKTtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgIHZhciBuZXh0SWQgPSAwO1xyXG5cclxuICAgIHZhciBfbGFzdF90eXBlID0ge307XHJcbiAgICB2YXIgX19fY2FjaGUgPSB7fTtcclxuXHJcbiAgICB2YXIgbW9uaXRvciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5tb25pdG9yO1xyXG5cclxuICAgIHZhciBnZXRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGRlc2NyaXB0b3IsIGNoYW5uZWwpIHtcclxuICAgICAgICByZXR1cm4gVHlwZVNlcnZpY2UuZ2V0VHlwZShkZXNjcmlwdG9yLnR5cGUpXHJcbiAgICAgICAgICAudGhlbihmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlLm1vbml0b3IgJiYgIW1vbml0b3IpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oc3Vib2JqZWN0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdyYXBwZWQgPSBzdWJvYmplY3RzWzBdO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG11c2ljKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiB3cmFwcGVkKG11c2ljKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHJldCA9IGZ1bmN0aW9uKHN1Ym9iamVjdHMpIHtcclxuICAgICAgICAgICAgICB2YXIgYnVpbGRDb21wb25lbnRzID0gW107XHJcblxyXG4gICAgICAgICAgICAgIGlmICh0eXBlLmNvbXBvbmVudHMpIHtcclxuICAgICAgICAgICAgICAgIHR5cGUuY29tcG9uZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGNvbXBvbmVudE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKCFkZXNjcmlwdG9yLmRhdGEubW9kdWxhdGlvbikgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZGVzY3JpcHRvci5kYXRhLm1vZHVsYXRpb25bY29tcG9uZW50TmFtZV07XHJcbiAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZS5kYXRhKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUuZGF0YS5hcnJheSkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICBpZiAodmFsdWUuZGF0YS5hcnJheS5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGJ1aWxkQ29tcG9uZW50cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVBhcmFtZXRyaWModmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBjb21wb25lbnROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9iajogb2JqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChidWlsZENvbXBvbmVudHMpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihvYmpzKSB7XHJcbiAgICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnRzID0ge307XHJcbiAgICAgICAgICAgICAgICAgIG9ianMuZm9yRWFjaChmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzW29iai5uYW1lXSA9IG9iai5vYmo7XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgX2xhc3RfdHlwZVtjaGFubmVsXSA9IF9sYXN0X3R5cGVbY2hhbm5lbF0gfHwgbmV3IFdlYWtNYXAoKTtcclxuICAgICAgICAgICAgICAgICAgX19fY2FjaGVbY2hhbm5lbF0gPSBfX19jYWNoZVtjaGFubmVsXSB8fCBuZXcgV2Vha01hcCgpO1xyXG4gICAgICAgICAgICAgICAgICB2YXIgbGFzdF90eXBlID0gX2xhc3RfdHlwZVtjaGFubmVsXTtcclxuICAgICAgICAgICAgICAgICAgdmFyIF9fY2FjaGUgPSBfX19jYWNoZVtjaGFubmVsXTtcclxuXHJcbi8qPiAgICAgICAgICAgICAgICAgIGlmICghbGFzdF90eXBlLmhhcyhkZXNjcmlwdG9yKXx8bGFzdF90eXBlLmdldChkZXNjcmlwdG9yKSA9PT0gZGVzY3JpcHRvci50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1Ym9iamVjdHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoX19jYWNoZS5oYXMoZGVzY3JpcHRvcikgJiYgX19jYWNoZS5nZXQoZGVzY3JpcHRvcilbc3Vib2JqZWN0c1swXS5pZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF9fY2FjaGUuZ2V0KGRlc2NyaXB0b3IpW3N1Ym9iamVjdHNbMF0uaWRdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnVwZGF0ZShkZXNjcmlwdG9yLmRhdGEsIGNvbXBvbmVudHMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdWJvYmplY3RzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKF9fY2FjaGUuaGFzKGRlc2NyaXB0b3IpICYmIF9fY2FjaGUuZ2V0KGRlc2NyaXB0b3IpLm5vaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKF9fY2FjaGUuZ2V0KGRlc2NyaXB0b3IpLm5vaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXBkYXRlKGRlc2NyaXB0b3IuZGF0YSwgY29tcG9uZW50cykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH0qL1xyXG5cclxuICAgICAgICAgICAgICAgICAgbGFzdF90eXBlLnNldChkZXNjcmlwdG9yLCBkZXNjcmlwdG9yLnR5cGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgdmFyIHJldCA9IHR5cGUuY29uc3RydWN0b3IoZGVzY3JpcHRvci5kYXRhLCBzdWJvYmplY3RzLCBjb21wb25lbnRzKTtcclxuICAgICAgICAgICAgICAgICAgbmV4dElkKys7XHJcbiAgICAgICAgICAgICAgICAgIHJldC5pZCA9IG5leHRJZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgIGlmIChzdWJvYmplY3RzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX19jYWNoZS5oYXMoZGVzY3JpcHRvcikpIF9fY2FjaGUuc2V0KGRlc2NyaXB0b3IsIHt9KTtcclxuICAgICAgICAgICAgICAgICAgICBfX2NhY2hlLmdldChkZXNjcmlwdG9yKVtzdWJvYmplY3RzWzBdLmlkXSA9IHJldDtcclxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdWJvYmplY3RzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX19jYWNoZS5oYXMoZGVzY3JpcHRvcikpIF9fY2FjaGUuc2V0KGRlc2NyaXB0b3IsIHt9KTtcclxuICAgICAgICAgICAgICAgICAgICBfX2NhY2hlLmdldChkZXNjcmlwdG9yKS5ub2lkID0gcmV0O1xyXG4gICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xyXG5cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXQuc3Vib2JqZWN0cyA9IHR5cGUuc3Vib2JqZWN0cztcclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXQ7XHJcbiAgICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGNyZWF0ZVBhcmFtZXRyaWNGcm9tU3RhY2sgPSBmdW5jdGlvbihhcnJheSwgaWR4LCBjaGFubmVsKSB7XHJcbiAgICAgIGlmIChhcnJheS5sZW5ndGggPT09IDApIHJldHVybiAkcS53aGVuKG51bGwpO1xyXG5cclxuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBhcnJheVtpZHhdO1xyXG4gICAgICBjaGFubmVsID0gY2hhbm5lbCB8fCAwO1xyXG5cclxuICAgICAgcmV0dXJuIGdldENvbnN0cnVjdG9yKGRlc2NyaXB0b3IsIGNoYW5uZWwpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oY29uc3RydWN0b3IpIHtcclxuICAgICAgICAgIGlmIChjb25zdHJ1Y3Rvci5zdWJvYmplY3RzKSB7XHJcbiAgICAgICAgICAgIHZhciBnZXRPYmplY3QgPSBmdW5jdGlvbihkLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgIHZhciBuZXdBcnJheSA9IGQuZGF0YS5hcnJheS5jb25jYXQoYXJyYXkuc2xpY2UoaWR4KzEpKTtcclxuICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlUGFyYW1ldHJpY0Zyb21TdGFjayhuZXdBcnJheSwgMCwgY2hhbm5lbCoxNiArIGluZGV4KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiAkcS5hbGwoZGVzY3JpcHRvci5kYXRhLnN1Ym9iamVjdHMubWFwKGdldE9iamVjdCkpXHJcbiAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ob2Jqcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yKG9ianMpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChhcnJheS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yKFtdKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gY3JlYXRlUGFyYW1ldHJpY0Zyb21TdGFjayhhcnJheS5zbGljZShpZHgrMSksIDAsIGNoYW5uZWwpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICAgIHJldHVybiBjb25zdHJ1Y3Rvcihbb2JqXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICBpZiAob2JqICYmIG9iai5kYXRhTGluaykge1xyXG4gICAgICAgICAgICBvYmouZGF0YUxpbmsobm90aWZ5Q2hhbmdlRm9yKGRlc2NyaXB0b3IpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBub3RpZnlDaGFuZ2VGb3IgPSBmdW5jdGlvbihkZXNjcmlwdG9yKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihvdXRwdXQpIHtcclxuICAgICAgICBpZiAoZmlsZU91dHB1dE1hcC5oYXMoZGVzY3JpcHRvcikpIHtcclxuICAgICAgICAgIHZhciBlZSA9IGZpbGVPdXRwdXRNYXAuZ2V0KGRlc2NyaXB0b3IpO1xyXG4gICAgICAgICAgZWUuZW1pdCgnY2hhbmdlZCcsIG91dHB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgY3JlYXRlUGFyYW1ldHJpYyA9IGZ1bmN0aW9uKGRlc2NyaXB0b3IpIHtcclxuICAgICAgaWYgKGRlc2NyaXB0b3IudHlwZSA9PT0gXCJzdGFja1wiKSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVBhcmFtZXRyaWNGcm9tU3RhY2soZGVzY3JpcHRvci5kYXRhLmFycmF5LCAwKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBnZXRDb25zdHJ1Y3RvcihkZXNjcmlwdG9yLCAwKVxyXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oY29uc3RydWN0b3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yKFtdKTsgXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZGVzdHJveUFsbCA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICBmb3IgKHZhciBjaGFubmVsIGluIF9sYXN0X3R5cGUpIHtcclxuICAgICAgICBfbGFzdF90eXBlW2NoYW5uZWxdID0gbmV3IFdlYWtNYXAoKTtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKHZhciBjaGFubmVsIGluIF9fX2NhY2hlKSB7XHJcbiAgICAgICAgX19fY2FjaGVbY2hhbm5lbF0gPSBuZXcgV2Vha01hcCgpOyBcclxuICAgICAgfVxyXG5cclxuICAgICAgYmFzZXMuZm9yRWFjaChmdW5jdGlvbihiYXNlKSB7XHJcbiAgICAgICAgYmFzZS5wcnVuZSgpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGJhc2VzID0gW107XHJcblxyXG4gICAgICByZXR1cm4gJHEud2hlbihudWxsKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGJhc2VzID0gW107XHJcbiAgICB2YXIgY3JlYXRlID0gZnVuY3Rpb24oZGVzY3JpcHRvciwgbXVzaWMpIHtcclxuICAgICAgcmV0dXJuIGNyZWF0ZVBhcmFtZXRyaWMoZGVzY3JpcHRvcilcclxuICAgICAgICAudGhlbihmdW5jdGlvbihmY24pIHtcclxuICAgICAgICAgIGlmICghZmNuKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgaWYgKG11c2ljKSB7XHJcbiAgICAgICAgICAgIHZhciBiYXNlPSBtdXNpYy5zZnhCYXNlKCk7XHJcbiAgICAgICAgICAgIGJhc2VzLnB1c2goYmFzZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmY24oYmFzZSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gTXVzaWNDb250ZXh0LnJ1bkZjbihmdW5jdGlvbihtdXNpYykge1xyXG4gICAgICAgICAgICB2YXIgYmFzZSA9IG11c2ljLnNmeEJhc2UoKTtcclxuICAgICAgICAgICAgYmFzZXMucHVzaChiYXNlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZjbihiYXNlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgb2JzZXJ2ZU91dHB1dCA9IGZ1bmN0aW9uKGZpbGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgIHZhciBlZTtcclxuXHJcbiAgICAgIGlmIChmaWxlT3V0cHV0TWFwLmhhcyhmaWxlKSkge1xyXG4gICAgICAgIGVlID0gZmlsZU91dHB1dE1hcC5nZXQoZmlsZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZWUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgICAgZmlsZU91dHB1dE1hcC5zZXQoZmlsZSwgZWUpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGVlLm9uKCdjaGFuZ2VkJywgbGlzdGVuZXIpO1xyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGVlLnJlbW92ZUxpc3RlbmVyKCdjaGFuZ2VkJywgbGlzdGVuZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjcmVhdGU6IGNyZWF0ZSxcclxuICAgICAgZGVzdHJveUFsbDogZGVzdHJveUFsbCxcclxuICAgICAgb2JzZXJ2ZU91dHB1dDogb2JzZXJ2ZU91dHB1dFxyXG4gICAgfTtcclxuICB9O1xyXG59XSk7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLnNlcnZpY2UoXCJNdXNpY0NvbnRleHRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgdmFyIG11c2ljO1xyXG4gIHZhciBjb250ZXh0O1xyXG5cclxuICB2YXIgUmVjb3JkYWJsZSA9IGZ1bmN0aW9uKG11c2ljLCBwbGF5YWJsZSwgbmFtZSkge1xyXG4gICAgdGhpcy5fcGxheWFibGUgPSBwbGF5YWJsZTtcclxuICAgIHRoaXMuX211c2ljID0gbXVzaWM7XHJcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcclxuICB9O1xyXG5cclxuICBSZWNvcmRhYmxlLnByb3RvdHlwZS5yZWNvcmQgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBwbGF5YWJsZSA9IHRoaXMuX3BsYXlhYmxlO1xyXG4gICAgdmFyIHJlY29yZGluZyA9IG11c2ljLnJlY29yZCgpO1xyXG4gICAgdmFyIHJlY29yZEZpbGVOYW1lID0gdGhpcy5fbmFtZTtcclxuICAgIHZhciBwbGF5aW5nID0gcGxheWFibGUucGxheSgpO1xyXG5cclxuICAgIE1VU0lDLlV0aWxzLkZ1bmN0aW9uU2VxLnByZWNpc2VUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgIHJlY29yZGluZy5zdG9wKCk7XHJcbiAgICAgIHJlY29yZGluZy5leHBvcnRXQVYoZnVuY3Rpb24oYmxvYikge1xyXG4gICAgICAgIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhKTtcclxuICAgICAgICBhLnN0eWxlID0gXCJkaXNwbGF5OiBub25lXCI7XHJcblxyXG4gICAgICAgIHZhciB1cmwgID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcbiAgICAgICAgYS5ocmVmID0gdXJsO1xyXG4gICAgICAgIGEuZG93bmxvYWQgPSByZWNvcmRGaWxlTmFtZSArIFwiLndhdlwiO1xyXG4gICAgICAgIGEuY2xpY2soKTtcclxuICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xyXG4gICAgICB9KTtcclxuICAgIH0sIHBsYXlhYmxlLmR1cmF0aW9uKCkpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICByZXN1bWVBdWRpbzogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICghbXVzaWMpIHtcclxuICAgICAgICBjb250ZXh0ID0gbmV3IE1VU0lDLkNvbnRleHQoKTtcclxuICAgICAgICBtdXNpYyA9IGNvbnRleHQuc2Z4QmFzZSgpOyBcclxuICAgICAgfVxyXG5cclxuICAgICAgY29udGV4dC5yZXN1bWUoKTtcclxuICAgIH0sXHJcblxyXG4gICAgcnVuRmNuOiBmdW5jdGlvbihmKSB7XHJcbiAgICAgIGlmICghbXVzaWMpIHtcclxuICAgICAgICBjb250ZXh0ID0gbmV3IE1VU0lDLkNvbnRleHQoKTtcclxuICAgICAgICBtdXNpYyA9IGNvbnRleHQuc2Z4QmFzZSgpOyBcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZihtdXNpYyk7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlY29yZDogZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2spIHtcclxuICAgICAgcmV0dXJuIHRoaXMucnVuRmNuKGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgcmV0dXJuIGNvbnRleHQucmVjb3JkKG9wdGlvbnMsIGNhbGxiYWNrKTtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHJ1bjogZnVuY3Rpb24oY29kZSkge1xyXG4gICAgICBpZiAobXVzaWMpIHtcclxuICAgICAgICBtdXNpYy5wcnVuZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIG11c2ljID0gbmV3IE1VU0lDLkNvbnRleHQoKS5zZnhCYXNlKCk7XHJcblxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiB7b2JqZWN0OiBldmFsKFwiKGZ1bmN0aW9uKCkge1xcblwiICsgY29kZSArIFwiXFxufSlcIikoKX07XHJcbiAgICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgIHJldHVybiB7ZXJyb3I6IGUudG9TdHJpbmcoKX07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59KTtcclxuXHJcbm11c2ljU2hvd0Nhc2VBcHAuc2VydmljZShcIkhpc3RvcmlhbFwiLCBbZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGFycmF5ID0gW107XHJcbiAgICB2YXIgY3VycmVudFZlcnNpb24gPSAwO1xyXG5cclxuICAgIHZhciB1bmRvID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmIChjdXJyZW50VmVyc2lvbiA+IDApIGN1cnJlbnRWZXJzaW9uLS07XHJcbiAgICAgIHJldHVybiBhcnJheVtjdXJyZW50VmVyc2lvbl07XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciByZWRvID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmIChjdXJyZW50VmVyc2lvbiA8IGFycmF5Lmxlbmd0aC0xKSBjdXJyZW50VmVyc2lvbisrO1xyXG4gICAgICByZXR1cm4gYXJyYXlbY3VycmVudFZlcnNpb25dO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgcmVnaXN0ZXJWZXJzaW9uID0gZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICBhcnJheSA9IGFycmF5LnNsaWNlKDAsIGN1cnJlbnRWZXJzaW9uKzEpO1xyXG4gICAgICBhcnJheS5wdXNoKGRhdGEpO1xyXG4gICAgICBpZiAoYXJyYXkubGVuZ3RoID4gMTI4KSBhcnJheSA9IGFycmF5LnNsaWNlKDEpO1xyXG4gICAgICBjdXJyZW50VmVyc2lvbiA9IGFycmF5Lmxlbmd0aC0xO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZWdpc3RlclZlcnNpb246IHJlZ2lzdGVyVmVyc2lvbixcclxuICAgICAgdW5kbzogdW5kbyxcclxuICAgICAgcmVkbzogcmVkb1xyXG4gICAgfTtcclxuICB9O1xyXG59XSk7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLnNlcnZpY2UoXCJQYXR0ZXJuXCIsIFtcIk1VU0lDXCIsICdUSUNLU19QRVJfQkVBVCcsIGZ1bmN0aW9uKE1VU0lDLCBUSUNLU19QRVJfQkVBVCkge1xyXG5cclxuICB2YXIgc2NoZWR1bGUgPSBmdW5jdGlvbihub3Rlc2VxLCBmaWxlLCB0cmFjaywgZXZlbnRQcmVwcm9jZXNzb3IsIG9uU3RvcCwgY3R4KSB7XHJcbiAgICB2YXIgZXZlbnRzID0gdHJhY2suZXZlbnRzLnNvcnQoZnVuY3Rpb24oZTEsIGUyKSB7IHJldHVybiBlMS5zIC0gZTIuczsgfSk7XHJcbiAgICB2YXIgc2NhbGVkRXZlbnRzID0gZXZlbnRzLm1hcChmdW5jdGlvbihldnQpIHtcclxuICAgICAgcmV0dXJuIFtldnQubiwgZXZ0LnMsIGV2dC5sLCB7dGM6IGV2dC50Y31dO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZm9yICh2YXIgaT0wOyBpPHNjYWxlZEV2ZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgZXZ0ID0gc2NhbGVkRXZlbnRzW2ldO1xyXG4gICAgICBub3Rlc2VxLnB1c2goZXZlbnRQcmVwcm9jZXNzb3IoZXZ0LCBzY2FsZWRFdmVudHMpLCBjdHgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5vdGVzZXEucGFkZGluZ1RvKFRJQ0tTX1BFUl9CRUFUICogZmlsZS5tZWFzdXJlQ291bnQgKiBmaWxlLm1lYXN1cmUpO1xyXG4gICAgbm90ZXNlcS5wdXNoQ2FsbGJhY2soW1RJQ0tTX1BFUl9CRUFUKmZpbGUubWVhc3VyZUNvdW50ICogZmlsZS5tZWFzdXJlLCBvblN0b3BdKTtcclxuXHJcbiAgICB2YXIgdG90YWxCZWF0cyA9IGZpbGUubWVhc3VyZSAqIGZpbGUubWVhc3VyZUNvdW50O1xyXG4gIH07XHJcblxyXG4gIHZhciBub3Rlc2VxID0gZnVuY3Rpb24oZmlsZSwgdHJhY2ssIGV2ZW50UHJlcHJvY2Vzc29yLCBvblN0b3ApIHtcclxuICAgIHZhciBub3Rlc2VxID0gbmV3IE1VU0lDLk5vdGVTZXF1ZW5jZSgpO1xyXG4gICAgc2NoZWR1bGUobm90ZXNlcSwgZmlsZSwgdHJhY2ssIGV2ZW50UHJlcHJvY2Vzc29yLCBvblN0b3ApO1xyXG4gICAgcmV0dXJuIG5vdGVzZXE7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHBhdHRlcm5Db21wb3NlID0gZnVuY3Rpb24oZmlsZSwgaW5zdHJ1bWVudHMsIGJhc2UsIG9uU3RvcCwgb3B0aW9ucykge1xyXG4gICAgdmFyIHN0YXJ0ID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5zdGFydCkgfHwgMDtcclxuICAgIHZhciBpc1RlbXBvVHJhY2sgPSBmdW5jdGlvbih0cmFjaywgaWR4KSB7XHJcbiAgICAgIGlkeCA9IGJhc2UgKyBpZHg7XHJcbiAgICAgIHZhciBpbnN0cnVtZW50ID0gaW5zdHJ1bWVudHNbdHJhY2suaW5zdHJ1bWVudCArICdfJyArIGlkeF07XHJcbiAgICAgIHJldHVybiBpbnN0cnVtZW50ICYmIGluc3RydW1lbnQudGVtcG87XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBnZXRFdmVudHMgPSBmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICByZXR1cm4gdHJhY2suZXZlbnRzO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgY29uY2F0ID0gZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICByZXR1cm4gYS5jb25jYXQoYik7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBieVN0YXJ0ID0gZnVuY3Rpb24oYSwgYikge1xyXG4gICAgICByZXR1cm4gYS5zLWIucztcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHNvbmdDdHggPSB7fTtcclxuICAgIHZhciBub3Rlc2VxID0gbmV3IE1VU0lDLk5vdGVTZXF1ZW5jZShudWxsLFxyXG4gICAge1xyXG4gICAgICB0aW1lOiBNVVNJQy5NYXRoLnRpY2tzVG9UaW1lKHtcclxuICAgICAgICBicG06IGZpbGUuYnBtLFxyXG4gICAgICAgIHRpY2tzX3Blcl9iZWF0OiBUSUNLU19QRVJfQkVBVCxcclxuICAgICAgICBicG1fZXZlbnRzOiBmaWxlLnRyYWNrcy5maWx0ZXIoaXNUZW1wb1RyYWNrKS5tYXAoZ2V0RXZlbnRzKS5yZWR1Y2UoY29uY2F0LCBbXSkuc29ydChieVN0YXJ0KSxcclxuICAgICAgICBzdGFydDogc3RhcnRcclxuICAgICAgfSksXHJcbiAgICAgIHNvbmdDdHg6IHNvbmdDdHhcclxuICAgIH0pO1xyXG5cclxuICAgIGZpbGUudHJhY2tzLmZvckVhY2goZnVuY3Rpb24odHJhY2ssIGlkeCkge1xyXG4gICAgICBpZHggPSBiYXNlICsgaWR4O1xyXG5cclxuICAgICAgdmFyIGluc3RydW1lbnQgPSBpbnN0cnVtZW50c1t0cmFjay5pbnN0cnVtZW50ICsgJ18nICsgaWR4XTtcclxuXHJcbiAgICAgIGlmIChpbnN0cnVtZW50ICYmICFpbnN0cnVtZW50LnRlbXBvKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50UHJlcHJvY2Vzc29yID0gaW5zdHJ1bWVudC5ldmVudFByZXByb2Nlc3NvciB8fCBmdW5jdGlvbih4KXsgcmV0dXJuIHg7IH07XHJcbiAgICAgICAgdmFyIGNvbnRleHQgPSBNVVNJQy5Ob3RlU2VxdWVuY2UuY29udGV4dChpbnN0cnVtZW50LCBudWxsLCBzb25nQ3R4KTtcclxuICAgICAgICBzY2hlZHVsZShub3Rlc2VxLCBmaWxlLCB0cmFjaywgZXZlbnRQcmVwcm9jZXNzb3IsIG9uU3RvcCwgY29udGV4dCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHZhciByZXQgPSBub3Rlc2VxLm1ha2VQbGF5YWJsZShudWxsKTtcclxuICAgIHJldC5zY2hlZHVsZSA9IGZ1bmN0aW9uKG5vdGVTZXF1ZW5jZSwgc29uZ0N0eCkge1xyXG4gICAgICB2YXIgY29udGV4dHMgPSBbXTtcclxuICAgICAgc29uZ0N0eCA9IHNvbmdDdHggfHwge307XHJcblxyXG4gICAgICBmaWxlLnRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrLCBpZHgpIHtcclxuICAgICAgICBpZHggPSBiYXNlICsgaWR4O1xyXG5cclxuICAgICAgICB2YXIgaW5zdHJ1bWVudCA9IGluc3RydW1lbnRzW3RyYWNrLmluc3RydW1lbnQgKyAnXycgKyBpZHhdO1xyXG5cclxuICAgICAgICBpZiAoaW5zdHJ1bWVudCkge1xyXG4gICAgICAgICAgdmFyIGV2ZW50UHJlcHJvY2Vzc29yID0gaW5zdHJ1bWVudC5ldmVudFByZXByb2Nlc3NvciB8fCBmdW5jdGlvbih4KXsgcmV0dXJuIHg7IH07XHJcbiAgICAgICAgICB2YXIgY29udGV4dCA9IE1VU0lDLk5vdGVTZXF1ZW5jZS5jb250ZXh0KGluc3RydW1lbnQsIG51bGwsIHNvbmdDdHgpO1xyXG5cclxuICAgICAgICAgIGNvbnRleHRzLnB1c2goY29udGV4dCk7XHJcbiAgICAgICAgICBzY2hlZHVsZShub3RlU2VxdWVuY2UsIGZpbGUsIHRyYWNrLCBldmVudFByZXByb2Nlc3Nvciwgb25TdG9wLCBjb250ZXh0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcmV0dXJuIGNvbnRleHRzO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXQudGltZVRvVGlja3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIE1VU0lDLk1hdGgudGltZVRvVGlja3Moe1xyXG4gICAgICAgIGJwbTogZmlsZS5icG0sXHJcbiAgICAgICAgdGlja3NfcGVyX2JlYXQ6IFRJQ0tTX1BFUl9CRUFULFxyXG4gICAgICAgIGJwbV9ldmVudHM6IGZpbGUudHJhY2tzLmZpbHRlcihpc1RlbXBvVHJhY2spLm1hcChnZXRFdmVudHMpLnJlZHVjZShjb25jYXQsIFtdKS5zb3J0KGJ5U3RhcnQpLFxyXG4gICAgICAgIHN0YXJ0OiBzdGFydFxyXG4gICAgICB9KTtcclxuICAgIH07IFxyXG5cclxuICAgIHJldC5icG1fZXZlbnRzID0gZmlsZS50cmFja3MuZmlsdGVyKGlzVGVtcG9UcmFjaykubWFwKGdldEV2ZW50cykucmVkdWNlKGNvbmNhdCwgW10pLnNvcnQoYnlTdGFydCk7XHJcblxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9O1xyXG5cclxuICB2YXIgaGlnaGVyID0gZnVuY3Rpb24oYSxiKSB7XHJcbiAgICByZXR1cm4gYT5iID8gYSA6IGI7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGNvbXB1dGVNZWFzdXJlQ291bnQgPSBmdW5jdGlvbihmaWxlLCBtZWFzdXJlKSB7XHJcbiAgICBpZiAobWVhc3VyZTwxKSBtZWFzdXJlPTE7XHJcbiAgICB2YXIgZW5kVGltZSA9IGZpbGUudHJhY2tzLm1hcChmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICByZXR1cm4gdHJhY2suZXZlbnRzLm1hcChmdW5jdGlvbihldnQpIHtcclxuICAgICAgICByZXR1cm4gZXZ0LnMgKyBldnQubDtcclxuICAgICAgfSkucmVkdWNlKGhpZ2hlciwgMClcclxuICAgIH0pLnJlZHVjZShoaWdoZXIsMCk7XHJcblxyXG4gICAgdmFyIG1lYXN1cmVMZW5ndGggPSBtZWFzdXJlICogVElDS1NfUEVSX0JFQVQ7XHJcbiAgICB2YXIgbWVhc3VyZUNvdW50ID0gTWF0aC5mbG9vcigoZW5kVGltZS0xKS9tZWFzdXJlTGVuZ3RoKSArIDE7XHJcbiAgICBpZiAobWVhc3VyZUNvdW50PDEpIHJldHVybiAxO1xyXG4gICAgcmV0dXJuIG1lYXN1cmVDb3VudDtcclxuICB9O1xyXG5cclxuICB2YXIgZ2V0TXV0ZWRTdGF0ZSA9IGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgIHZhciBzb21lU29sbyA9IGZpbGUudHJhY2tzLnNvbWUoZnVuY3Rpb24odCkge3JldHVybiB0LnNvbG87IH0pO1xyXG4gICAgcmV0dXJuIGZpbGUudHJhY2tzLm1hcChmdW5jdGlvbih0KSB7XHJcbiAgICAgIGlmIChzb21lU29sbykge1xyXG4gICAgICAgIHJldHVybiB0Lm11dGVkIHx8ICF0LnNvbG87XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHQubXV0ZWQgfHwgIXQuaW5zdHJ1bWVudDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGNvbmNhdCA9IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgIHJldHVybiBhLmNvbmNhdChiKTtcclxuICB9O1xyXG5cclxuICB2YXIgX25vdCA9IGZ1bmN0aW9uKHNlbGYpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihldnQpIHtcclxuICAgICAgcmV0dXJuIGV2dCAhPT0gc2VsZjtcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgdmFyIGZpbmRDbGlwUyA9IGZ1bmN0aW9uKHBhdHRlcm4sIHRyYWNrLCBzZWxmLCBzKSB7XHJcbiAgICB2YXIgbmVhcmVzdCA9IGZ1bmN0aW9uKGMxLCBjMikge1xyXG4gICAgICByZXR1cm4gTWF0aC5hYnMoc2VsZi5zIC0gYzEpIDwgTWF0aC5hYnMoc2VsZi5zIC0gYzIpID8gYzEgOiBjMjtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGFsbEV2ZW50cyA9IHBhdHRlcm4udHJhY2tzLm1hcChmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICByZXR1cm4gdHJhY2suZXZlbnRzLmZpbHRlcihfbm90KHNlbGYpKTtcclxuICAgIH0pLnJlZHVjZShjb25jYXQpO1xyXG5cclxuICAgIHZhciBhbGxPdGhlckV2ZW50cyA9IHBhdHRlcm4udHJhY2tzLm1hcChmdW5jdGlvbih0cikge1xyXG4gICAgICBpZiAodHJhY2sgPT09IHRyKSByZXR1cm4gW107XHJcbiAgICAgIHJldHVybiB0ci5ldmVudHMuZmlsdGVyKF9ub3Qoc2VsZikpO1xyXG4gICAgfSkucmVkdWNlKGNvbmNhdCk7XHJcblxyXG4gICAgaWYgKGFsbEV2ZW50cy5sZW5ndGggPT09IDApIHJldHVybiAwO1xyXG5cclxuICAgIHZhciBjbGlwcyA9IGFsbEV2ZW50cy5tYXAoZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICAgIHJldHVybiBldnQucyArIGV2dC5sO1xyXG4gICAgfSkuY29uY2F0KGFsbEV2ZW50cy5tYXAoZnVuY3Rpb24oZXZ0KSB7XHJcbiAgICAgIHJldHVybiBldnQucyAtIHNlbGYubDtcclxuICAgIH0pKS5jb25jYXQoYWxsT3RoZXJFdmVudHMubWFwKGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICByZXR1cm4gZXZ0LnM7XHJcbiAgICB9KSk7XHJcblxyXG4gICAgcmV0dXJuIGNsaXBzLnJlZHVjZShuZWFyZXN0KTtcclxuICB9OyAgICAgICBcclxuXHJcbiAgdmFyIGZpbmRDbGlwTCA9IGZ1bmN0aW9uKHBhdHRlcm4sIHRyYWNrLCBzZWxmLCBzKSB7XHJcbiAgICB2YXIgbmVhcmVzdCA9IGZ1bmN0aW9uKGMxLCBjMikge1xyXG4gICAgICByZXR1cm4gTWF0aC5hYnMoc2VsZi5zICsgc2VsZi5sIC0gYzEpIDwgTWF0aC5hYnMoc2VsZi5zICsgc2VsZi5sIC0gYzIpID8gYzEgOiBjMjtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGFsbEV2ZW50cyA9IHBhdHRlcm4udHJhY2tzLm1hcChmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICByZXR1cm4gdHJhY2suZXZlbnRzLmZpbHRlcihfbm90KHNlbGYpKTtcclxuICAgIH0pLnJlZHVjZShjb25jYXQpO1xyXG5cclxuICAgIHZhciBhbGxPdGhlckV2ZW50cyA9IHBhdHRlcm4udHJhY2tzLm1hcChmdW5jdGlvbih0cikge1xyXG4gICAgICBpZiAodHJhY2sgPT09IHRyKSByZXR1cm4gW107XHJcbiAgICAgIHJldHVybiB0ci5ldmVudHMuZmlsdGVyKF9ub3Qoc2VsZikpO1xyXG4gICAgfSkucmVkdWNlKGNvbmNhdCk7XHJcblxyXG4gICAgaWYgKGFsbEV2ZW50cy5sZW5ndGggPT09IDApIHJldHVybiAwO1xyXG4gICAgdmFyIGNsaXBzID0gYWxsRXZlbnRzLm1hcChmdW5jdGlvbihldnQpIHtcclxuICAgICAgcmV0dXJuIGV2dC5zO1xyXG4gICAgfSkuY29uY2F0KGFsbE90aGVyRXZlbnRzLm1hcChmdW5jdGlvbihldnQpIHtcclxuICAgICAgcmV0dXJuIGV2dC5zICsgZXZ0Lmw7XHJcbiAgICB9KSk7XHJcblxyXG4gICAgcmV0dXJuIGNsaXBzLnJlZHVjZShuZWFyZXN0KSAtIHNlbGYucztcclxuICB9O1xyXG5cclxuICB2YXIgY3V0RXZlbnQgPSBmdW5jdGlvbihwYXR0ZXJuLCB0cmFjaywgc2VsZikge1xyXG4gICAgdmFyIGFsbEV2ZW50cyA9IHRyYWNrLmV2ZW50cy5maWx0ZXIoX25vdChzZWxmKSk7XHJcblxyXG4gICAgYWxsRXZlbnRzLmZpbHRlcihmdW5jdGlvbihldnQpIHtcclxuICAgICAgcmV0dXJuIGV2dC5zID4gc2VsZi5zO1xyXG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbihldnQpIHtcclxuICAgICAgaWYgKHNlbGYucyArIHNlbGYubCA+IGV2dC5zKSB7XHJcbiAgICAgICAgc2VsZi5sID0gZXZ0LnMgLSBzZWxmLnM7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBtZWFzdXJlVGlja3MgPSBwYXR0ZXJuLm1lYXN1cmUgKiBUSUNLU19QRVJfQkVBVDtcclxuICAgIGlmICgoc2VsZi5zICsgc2VsZi5sKSAlIG1lYXN1cmVUaWNrcyA8IHNlbGYucyAlIG1lYXN1cmVUaWNrcykge1xyXG4gICAgICBzZWxmLmwgPSBzZWxmLmwgLSAoc2VsZi5zICsgc2VsZi5sKSAlIG1lYXN1cmVUaWNrcztcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgY29sbGlzaW9uID0gZnVuY3Rpb24odHJhY2ssIHNlbGYpIHtcclxuICAgIHZhciBhbGxFdmVudHMgPSB0cmFjay5ldmVudHMuZmlsdGVyKF9ub3Qoc2VsZikpO1xyXG4gICAgcmV0dXJuIGFsbEV2ZW50cy5zb21lKGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICBpZiAoZXZ0Lm4gIT09IHNlbGYubikgcmV0dXJuIGZhbHNlO1xyXG4gICAgICBpZiAoZXZ0LnMgPD0gc2VsZi5zICYmIHNlbGYucyA8IGV2dC5zICsgZXZ0LmwpIHJldHVybiB0cnVlO1xyXG4gICAgICBpZiAoc2VsZi5zIDw9IGV2dC5zICYmIGV2dC5zIDwgc2VsZi5zICsgc2VsZi5sKSByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBub3Rlc2VxOiBub3Rlc2VxLFxyXG4gICAgcGF0dGVybkNvbXBvc2U6IHBhdHRlcm5Db21wb3NlLFxyXG4gICAgY29tcHV0ZU1lYXN1cmVDb3VudDogY29tcHV0ZU1lYXN1cmVDb3VudCxcclxuICAgIGdldE11dGVkU3RhdGU6IGdldE11dGVkU3RhdGUsXHJcbiAgICBmaW5kQ2xpcEw6IGZpbmRDbGlwTCxcclxuICAgIGZpbmRDbGlwUzogZmluZENsaXBTLFxyXG4gICAgY3V0RXZlbnQ6IGN1dEV2ZW50LFxyXG4gICAgY29sbGlzaW9uOiBjb2xsaXNpb25cclxuICB9O1xyXG59XSk7XHJcblxyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5zZXJ2aWNlKFwiSW5zdHJ1bWVudFNldFwiLCBbXCJGaWxlUmVwb3NpdG9yeVwiLCBcIk11c2ljT2JqZWN0RmFjdG9yeVwiLCBcIk11c2ljQ29udGV4dFwiLCBmdW5jdGlvbihGaWxlUmVwb3NpdG9yeSwgTXVzaWNPYmplY3RGYWN0b3J5LCBNdXNpY0NvbnRleHQpIHtcclxuICB2YXIgcmV0ID0gZnVuY3Rpb24obXVzaWMpIHtcclxuICAgIHZhciBtdXNpY09iamVjdEZhY3Rvcnk7XHJcbiAgICB2YXIgdHJhY2tDb250cm9sID0ge307XHJcblxyXG4gICAgdmFyIHNldCA9IHt9O1xyXG4gICAgdmFyIGNyZWF0ZWQgPSBbXTtcclxuICAgIHZhciBsb2FkID0gZnVuY3Rpb24oaWQsIHRyYWNrTm8pIHtcclxuICAgICAgdHJhY2tObyA9IHRyYWNrTm8gfHwgMDtcclxuICAgICAgdmFyIF9pZCA9IGlkICsgXCJfXCIgKyB0cmFja05vO1xyXG4gICAgICBpZiAoIXNldFtfaWRdKSB7XHJcbiAgICAgICAgdHJhY2tDb250cm9sW3RyYWNrTm9dID0gdHJhY2tDb250cm9sW3RyYWNrTm9dIHx8IG11c2ljLmdhaW4oMS4wKTtcclxuXHJcbiAgICAgICAgc2V0W19pZF0gPSBGaWxlUmVwb3NpdG9yeS5nZXRGaWxlKGlkKVxyXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICAgICAgICBpZiAoZmlsZS5pbmRleC50eXBlID09PSAnaW5zdHJ1bWVudCcpIHtcclxuICAgICAgICAgICAgICBpZiAoIW11c2ljT2JqZWN0RmFjdG9yeSkgbXVzaWNPYmplY3RGYWN0b3J5ID0gTXVzaWNPYmplY3RGYWN0b3J5KCk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG11c2ljT2JqZWN0RmFjdG9yeS5jcmVhdGUoZmlsZS5jb250ZW50cywgdHJhY2tDb250cm9sW3RyYWNrTm9dKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ob2JqKXtcclxuICAgICAgICAgICAgICAgICAgY3JlYXRlZC5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHt0ZW1wbzogdHJ1ZX07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9IFxyXG5cclxuICAgICAgcmV0dXJuIHNldFtfaWRdO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZGlzcG9zZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBjcmVhdGVkLmZvckVhY2goZnVuY3Rpb24oaW5zdHJ1bWVudCl7XHJcbiAgICAgICAgaWYgKGluc3RydW1lbnQuZGlzcG9zZSkge1xyXG4gICAgICAgICAgaW5zdHJ1bWVudC5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChtdXNpY09iamVjdEZhY3RvcnkpIHtcclxuICAgICAgICByZXR1cm4gbXVzaWNPYmplY3RGYWN0b3J5LmRlc3Ryb3lBbGwoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbXV0ZSA9IGZ1bmN0aW9uKHRyYWNrTm8sIG11dGVTdGF0ZSkge1xyXG4gICAgICB0cmFja0NvbnRyb2xbdHJhY2tOb10gPSB0cmFja0NvbnRyb2xbdHJhY2tOb10gfHwgbXVzaWMuZ2FpbigxLjApO1xyXG4gICAgICB0cmFja0NvbnRyb2xbdHJhY2tOb10udXBkYXRlKG11dGVTdGF0ZSA/IDAuMCA6IDEuMCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGxvYWQ6IGxvYWQsXHJcbiAgICAgIG11dGU6IG11dGUsXHJcbiAgICAgIGFsbDogc2V0LFxyXG4gICAgICBkaXNwb3NlOiBkaXNwb3NlXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbihtdXNpYykge1xyXG4gICAgaWYgKG11c2ljKSByZXR1cm4gcmV0KG11c2ljKTtcclxuICAgIHJldHVybiBNdXNpY0NvbnRleHQucnVuRmNuKHJldCk7XHJcbiAgfTtcclxufV0pO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5zZXJ2aWNlKFwiRmlsZVJlcG9zaXRvcnlcIiwgW1wiJGh0dHBcIiwgXCIkcVwiLCBcIlR5cGVTZXJ2aWNlXCIsIFwiSGlzdG9yaWFsXCIsIFwiSW5kZXhcIiwgXCJfbG9jYWxmb3JhZ2VcIiwgZnVuY3Rpb24oJGh0dHAsICRxLCBUeXBlU2VydmljZSwgSGlzdG9yaWFsLCBJbmRleCwgbG9jYWxmb3JhZ2UpIHtcclxuICB2YXIgY3JlYXRlZEZpbGVzSW5kZXggPSBbXTtcclxuICB2YXIgY3JlYXRlZEZpbGVzID0ge307XHJcblxyXG4gIHZhciBidWlsdElucyA9IFtcclxuICAgIFwic2l0ZS9idWlsdGluL2RlZmF1bHRQcm9qZWN0Lmpzb25cIixcclxuICAgIFwic2l0ZS9idWlsdGluL3NhbXBsZXMuanNvblwiLFxyXG4gICAgXCJzaXRlL2J1aWx0aW4vc21iLXVuZGVyd29ybGQuanNvblwiLFxyXG4gICAgXCJzaXRlL2J1aWx0aW4vc21iLW92ZXJ3b3JsZC5qc29uXCIsXHJcbiAgICBcInNpdGUvYnVpbHRpbi9ib21iZXJtYW4uanNvblwiLFxyXG4gICAgXCJzaXRlL2J1aWx0aW4vZW50ZXJ0YWluZXIuanNvblwiLFxyXG4gICAgXCJzaXRlL2J1aWx0aW4vZXZhLXRoYW5hdG9zLmpzb25cIixcclxuICAgIFwic2l0ZS9idWlsdGluL2Jpb3Nob2NrLXNvbGFjZS5qc29uXCJcclxuICBdO1xyXG5cclxuICB2YXIgbG9hZEJ1aWx0SW4gPSBmdW5jdGlvbih1cmkpIHtcclxuICAgIHJldHVybiAkaHR0cC5nZXQodXJpKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihyKSB7XHJcbiAgICAgICAgci5kYXRhLmZvckVhY2goZnVuY3Rpb24ob2JqKSB7XHJcbiAgICAgICAgICB2YXIgb2JqZWN0SWQgPSBvYmouaWQ7XHJcblxyXG4gICAgICAgICAgY3JlYXRlZEZpbGVzW29iamVjdElkXSA9IG9iai5jb250ZW50cztcclxuXHJcbiAgICAgICAgICBjcmVhdGVkRmlsZXNJbmRleC5wdXNoKHtcclxuICAgICAgICAgICAgcHJvamVjdDogb2JqLnByb2plY3QsXHJcbiAgICAgICAgICAgIHR5cGU6IG9iai50eXBlLFxyXG4gICAgICAgICAgICBuYW1lOiBvYmoubmFtZSxcclxuICAgICAgICAgICAgaWQ6IG9iamVjdElkLFxyXG4gICAgICAgICAgICByZWY6IG9iai5yZWYsXHJcbiAgICAgICAgICAgIGJ1aWx0SW46IHRydWVcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgY3JlYXRlRGVmYXVsdCA9IGZ1bmN0aW9uKGlkLCB0eXBlLCBuYW1lLCBjb250ZW50KSB7XHJcbiAgICBjcmVhdGVkRmlsZXNJbmRleC5wdXNoKHtcclxuICAgICAgcHJvamVjdDogXCJkZWZhdWx0XCIsXHJcbiAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgIGlkOiBpZCxcclxuICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgbm9FeHBvcnRhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuXHJcbiAgICBjcmVhdGVkRmlsZXNbaWRdID0gY29udGVudDtcclxuICB9O1xyXG5cclxuICBjcmVhdGVEZWZhdWx0KCd0ZW1wbycsICd0ZW1wbycsICdUZW1wbycsIHt9KVxyXG5cclxuICB2YXIgYnVpbHRJbkxvYWRlZCA9ICRxLmFsbChidWlsdElucy5tYXAobG9hZEJ1aWx0SW4pKTtcclxuXHJcbiAgdmFyIGNyZWF0ZUlkID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgYXJyYXkgPSBbXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7IGkrKykge1xyXG4gICAgICB2YXIgdmFsdWUgPSBbMCwxLDIsMyw0LDUsNiw3LDgsOSwnYScsJ2InLCdjJywnZCcsJ2UnLCdmJ11bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjE2KV07XHJcbiAgICAgIGFycmF5LnB1c2godmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhcnJheS5qb2luKFwiXCIpO1xyXG4gIH07XHJcblxyXG4gIHZhciBnZW5lcmljU3RhdGVFbW1pdGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gIHZhciByZWN5Y2xlZEVtbWl0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIHZhciBkZWZhdWx0RmlsZSA9IHtcclxuICAgIGluc3RydW1lbnQ6IHtcclxuICAgICAgdHlwZTogXCJzdGFja1wiLFxyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgYXJyYXk6IFtdXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzb25nOiB7XHJcbiAgICAgIG1lYXN1cmU6IDQsXHJcbiAgICAgIGJwbTogMTQwLFxyXG4gICAgICB0cmFja3M6IFtcclxuICAgICAgICB7YmxvY2tzOiBbe30se30se31dfSxcclxuICAgICAgICB7YmxvY2tzOiBbe30se30se31dfVxyXG4gICAgICBdXHJcbiAgICB9LFxyXG4gICAgcGF0dGVybjoge1xyXG4gICAgICBtZWFzdXJlOiA0LFxyXG4gICAgICBtZWFzdXJlQ291bnQ6IDEsXHJcbiAgICAgIGJwbTogMTQwLFxyXG4gICAgICBzZWxlY3RlZFRyYWNrOiAwLFxyXG4gICAgICB0cmFja3M6W1xyXG4gICAgICAgIHtzY3JvbGw6IDEwMDAsIGV2ZW50czogW119XHJcbiAgICAgIF0sXHJcbiAgICAgIHNjcm9sbExlZnQ6IDBcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgaGlzdCA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG4gIHZhciB1cGRhdGVGaWxlID0gZnVuY3Rpb24oaWQsIGNvbnRlbnRzLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gJHEud2hlbigpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBsb2NhbEZpbGUgPSBjcmVhdGVkRmlsZXNJbmRleC5maWx0ZXIoZnVuY3Rpb24oeCkge3JldHVybiB4LmlkID09PSBpZDsgfSlbMF07XHJcbiAgICAgICAgaWYgKGxvY2FsRmlsZSkgcmV0dXJuIGxvY2FsRmlsZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHN0b3JhZ2VJbmRleC5nZXRFbnRyeShpZCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGxvY2FsRmlsZSkge1xyXG4gICAgICAgIGlmIChsb2NhbEZpbGUpIHtcclxuICAgICAgICAgIHZhciBzZXJpYWxpemVkID0gTVVTSUMuRm9ybWF0cy5NdWx0aVNlcmlhbGl6ZXIuc2VyaWFsaXplKGxvY2FsRmlsZS50eXBlLCBjb250ZW50cyk7XHJcblxyXG4gICAgICAgICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLm5vSGlzdG9yeSkge1xyXG4gICAgICAgICAgICBoaXN0W2lkXSA9IGhpc3RbaWRdIHx8IEhpc3RvcmlhbCgpO1xyXG4gICAgICAgICAgICBoaXN0W2lkXS5yZWdpc3RlclZlcnNpb24oSlNPTi5zdHJpbmdpZnkoY29udGVudHMpKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gbG9jYWxmb3JhZ2Uuc2V0SXRlbShpZCwgc2VyaWFsaXplZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gcmVjeWNsZUluZGV4LnJlbG9hZCgpO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZWN5Y2xlZEVtbWl0ZXIuZW1pdChcImNoYW5nZWRcIik7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBkZXN0cm95RmlsZSA9IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICByZXR1cm4gbG9jYWxmb3JhZ2UucmVtb3ZlSXRlbShpZClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuICRxLmFsbCh7cjogcmVjeWNsZUluZGV4LnJlbW92ZUVudHJ5KGlkKSwgbDogc3RvcmFnZUluZGV4LnJlbW92ZUVudHJ5KGlkKX0pO1xyXG4gICAgICB9KVxyXG4gIH07XHJcblxyXG4gIHZhciBwdXJnZUZyb21SZWN5Y2xlQmluID0gZnVuY3Rpb24oaWQpIHtcclxuICAgIHJldHVybiByZWN5Y2xlSW5kZXgucmVtb3ZlRW50cnkoaWQpO1xyXG4gIH07XHJcblxyXG4gIHZhciByZXN0b3JlRnJvbVJlY3ljbGVCaW4gPSBmdW5jdGlvbihpZCkge1xyXG4gICAgcmV0dXJuIF9yZXN0b3JlRnJvbVJlY3ljbGVCaW4oaWQpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGdlbmVyaWNTdGF0ZUVtbWl0ZXIuZW1pdChcImNoYW5nZWRcIik7XHJcbiAgICAgICAgcmVjeWNsZWRFbW1pdGVyLmVtaXQoXCJjaGFuZ2VkXCIpO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgX3Jlc3RvcmVGcm9tUmVjeWNsZUJpbiA9IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICByZXR1cm4gcmVjeWNsZUluZGV4LmdldEVudHJ5KGlkKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihsb2NhbEZpbGUpIHtcclxuICAgICAgICBpZiAobG9jYWxGaWxlKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVjeWNsZUluZGV4LnJlbW92ZUVudHJ5KGlkKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gc3RvcmFnZUluZGV4LmNyZWF0ZUVudHJ5KGxvY2FsRmlsZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHZhciByZWZzID0gKGxvY2FsRmlsZS5yZWZ8fFtdKVxyXG4gICAgICAgICAgICAgIGlmIChsb2NhbEZpbGUucHJvamVjdCkgcmVmcy5wdXNoKGxvY2FsRmlsZS5wcm9qZWN0KTtcclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChyZWZzLm1hcChfcmVzdG9yZUZyb21SZWN5Y2xlQmluKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIG1vdmVUb1JlY3ljbGVCaW4gPSBmdW5jdGlvbihpZCkge1xyXG4gICAgcmV0dXJuIF9tb3ZlVG9SZWN5Y2xlQmluKGlkKVxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICBnZW5lcmljU3RhdGVFbW1pdGVyLmVtaXQoXCJjaGFuZ2VkXCIpO1xyXG4gICAgICAgIHJlY3ljbGVkRW1taXRlci5lbWl0KFwiY2hhbmdlZFwiKTtcclxuICAgICAgfSlcclxuICB9O1xyXG5cclxuICB2YXIgX21vdmVUb1JlY3ljbGVCaW4gPSBmdW5jdGlvbihpZCkge1xyXG4gICAgdmFyIGdldElkID0gZnVuY3Rpb24oeCl7IHJldHVybiB4LmlkOyB9O1xyXG4gICAgdmFyIGlzUHJvamVjdFR5cGUgPSBmdW5jdGlvbihmaWxlKSB7XHJcbiAgICAgIHJldHVybiBmaWxlLnR5cGUgPT09ICdwcm9qZWN0JztcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHN0b3JhZ2VJbmRleC53aWxsUmVtb3ZlKGlkKVxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gc3RvcmFnZUluZGV4LmdldEVudHJ5KGlkKVxyXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24obG9jYWxGaWxlKSB7XHJcbiAgICAgICAgICAgIGlmIChsb2NhbEZpbGUpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gcmVjeWNsZUluZGV4LmdldEFsbCgpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihpZHgpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKGlkeCAmJiBpZHgubGVuZ3RoID49IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWN5Y2xlSW5kZXguZ2V0RnJlZUl0ZW1zKClcclxuICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGlkeCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlkeFswXSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY3ljbGVJbmRleC5yZW1vdmVFbnRyeShpZHhbMF0uaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxmb3JhZ2UucmVtb3ZlSXRlbShpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gc3RvcmFnZUluZGV4LnJlbW92ZUVudHJ5KGlkKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlY3ljbGVJbmRleC5jcmVhdGVFbnRyeShsb2NhbEZpbGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gc3RvcmFnZUluZGV4LmdldE9ycGhhbihcclxuICAgICAgICAgIGNyZWF0ZWRGaWxlc0luZGV4Lm1hcChnZXRJZCksXHJcbiAgICAgICAgICBjcmVhdGVkRmlsZXNJbmRleC5maWx0ZXIoaXNQcm9qZWN0VHlwZSkubWFwKGdldElkKSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKG9ycGhhbkZpbGVzKSB7XHJcbiAgICAgICAgcmV0dXJuICRxLmFsbChvcnBoYW5GaWxlcy5tYXAoZ2V0SWQpLm1hcChfbW92ZVRvUmVjeWNsZUJpbikpXHJcbiAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBnZXRQYXR0ZXJuU29uZ3MgPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICB2YXIgYnlQcm9qZWN0ID0gZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICByZXR1cm4gZmlsZS5wcm9qZWN0ID09PSBvcHRpb25zLnByb2plY3Q7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBieVR5cGUgPSBmdW5jdGlvbihmaWxlKSB7XHJcbiAgICAgIHJldHVybiBmaWxlLnR5cGUgPT09ICdwYXR0ZXJuJyB8fCBmaWxlLnR5cGUgPT09ICdzb25nJztcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHR5cGVTb25nID0gZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICByZXR1cm4gZmlsZS50eXBlID09PSAnc29uZyc7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBsb2FkRmlsZSA9IGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgcmV0dXJuIGdldEZpbGUoZmlsZS5pZCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiAkcS5hbGwoe1xyXG4gICAgICAgIHN0b3JhZ2U6IHN0b3JhZ2VJbmRleC5nZXRBbGwoKSxcclxuICAgICAgICBidWlsdGluOiBjcmVhdGVkRmlsZXNJbmRleFxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgIHZhciBmaWxlcyA9IHJlc3VsdC5zdG9yYWdlLmNvbmNhdChyZXN1bHQuYnVpbHRpbik7XHJcbiAgICAgICAgdmFyIGZpbGVJbmRleGVzID0gZmlsZXMuZmlsdGVyKGJ5UHJvamVjdCkuZmlsdGVyKGJ5VHlwZSk7XHJcblxyXG4gICAgICAgIGlmIChmaWxlSW5kZXhlcy5zb21lKHR5cGVTb25nKSkge1xyXG4gICAgICAgICAgZmlsZUluZGV4ZXMgPSBmaWxlSW5kZXhlcy5maWx0ZXIodHlwZVNvbmcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICRxLmFsbChmaWxlSW5kZXhlcy5tYXAobG9hZEZpbGUpKTtcclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIG1vZGUgPSBmdW5jdGlvbihmaWxlcywgZmNuKSB7XHJcbiAgICB2YXIgb2JqID0ge307XHJcbiAgICBmaWxlcy5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgdmFyIHZhbHVlID0gZmNuKGZpbGUpO1xyXG4gICAgICBvYmpbdmFsdWVdID0gKG9ialt2YWx1ZV0gfHwgMCkgKyAxO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIG1heGNvdW50ID0gMDtcclxuICAgIHZhciBfbTtcclxuICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XHJcbiAgICAgIHZhciBjb3VudCA9IG9ialtrXTtcclxuICAgICAgaWYgKGNvdW50ID4gbWF4Y291bnQpIHtcclxuICAgICAgICBfbSA9IGs7XHJcbiAgICAgICAgbWF4Y291bnQgPSBjb3VudDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gX207XHJcbiAgfTtcclxuXHJcbiAgdmFyIGdldERlZmF1bHRNZWFzdXJlID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGdldFBhdHRlcm5Tb25ncyhvcHRpb25zKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihmaWxlcykge1xyXG4gICAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm4gNDtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1vZGUoZmlsZXMsIGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgICAgIHJldHVybiBmaWxlLmNvbnRlbnRzLm1lYXN1cmU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBnZXREZWZhdWx0QlBNID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIGdldFBhdHRlcm5Tb25ncyhvcHRpb25zKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihmaWxlcykge1xyXG4gICAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm4gMTQwO1xyXG5cclxuICAgICAgICByZXR1cm4gbW9kZShmaWxlcywgZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICAgICAgcmV0dXJuIGZpbGUuY29udGVudHMuYnBtO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgZ2V0RmlsZSA9IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgIHZhciBidWlsdEluID0gZmFsc2U7XHJcbiAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgIHJldHVybiBidWlsdEluTG9hZGVkXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgbG9jYWxGaWxlID0gY3JlYXRlZEZpbGVzSW5kZXguZmlsdGVyKGZ1bmN0aW9uKHgpIHtyZXR1cm4geC5pZCA9PT0gaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgaWYgKGxvY2FsRmlsZSkge1xyXG4gICAgICAgICAgICBidWlsdEluID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIGxvY2FsRmlsZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gc3RvcmFnZUluZGV4LmdldEVudHJ5KGlkKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGxvY2FsRmlsZSkge1xyXG4gICAgICAgICAgcmV0dXJuIGxvY2FsZm9yYWdlLmdldEl0ZW0oaWQpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHNlcmlhbGl6ZWQpIHtcclxuICAgICAgICAgICAgICBpZiAoc2VyaWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRzID0gTVVTSUMuRm9ybWF0cy5NdWx0aVNlcmlhbGl6ZXIuZGVzZXJpYWxpemUobG9jYWxGaWxlLnR5cGUsIHNlcmlhbGl6ZWQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgaW5kZXg6IHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBsb2NhbEZpbGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBpZDogbG9jYWxGaWxlLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWx0SW46IGJ1aWx0SW4sXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogbG9jYWxGaWxlLnR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVmOiBsb2NhbEZpbGUucmVmfHxnZXRSZWZzKGxvY2FsRmlsZS50eXBlLCBjb250ZW50cyksXHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBsb2NhbEZpbGUucHJvamVjdFxyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICBjb250ZW50czogY29udGVudHNcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChsb2NhbEZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogbG9jYWxGaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICBpZDogbG9jYWxGaWxlLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgYnVpbHRJbjogYnVpbHRJbixcclxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGxvY2FsRmlsZS50eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcmVmOiBsb2NhbEZpbGUucmVmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogbG9jYWxGaWxlLnByb2plY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICBub0V4cG9ydGFibGU6IGxvY2FsRmlsZS5ub0V4cG9ydGFibGVcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzOiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNyZWF0ZWRGaWxlc1tpZF0pKVxyXG4gICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTsgIFxyXG5cclxuICB2YXIgY3JlYXRlRmlsZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgIHZhciBuZXdpZCA9IG9wdGlvbnMuaWQgfHwgY3JlYXRlSWQoKTtcclxuXHJcbiAgICB2YXIgY29udGVudHMgPSBvcHRpb25zLmNvbnRlbnRzIHx8IGRlZmF1bHRGaWxlW29wdGlvbnMudHlwZV0gfHwge307XHJcblxyXG4gICAgcmV0dXJuICRxLmFsbCh7XHJcbiAgICAgIGRlZmF1bHRNZWFzdXJlOiBnZXREZWZhdWx0TWVhc3VyZShvcHRpb25zKSxcclxuICAgICAgZGVmYXVsdEJQTTogZ2V0RGVmYXVsdEJQTShvcHRpb25zKVxyXG4gICAgfSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICBjb250ZW50cy5tZWFzdXJlID0gcGFyc2VJbnQodmFsdWUuZGVmYXVsdE1lYXN1cmUpO1xyXG4gICAgICBjb250ZW50cy5icG0gPSBwYXJzZUludCh2YWx1ZS5kZWZhdWx0QlBNKTtcclxuICAgIH0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgIGhpc3RbbmV3aWRdID0gaGlzdFtuZXdpZF0gfHwgSGlzdG9yaWFsKCk7XHJcbiAgICAgIGhpc3RbbmV3aWRdLnJlZ2lzdGVyVmVyc2lvbihKU09OLnN0cmluZ2lmeShjb250ZW50cykpO1xyXG5cclxuICAgICAgdmFyIHNlcmlhbGl6ZWQgPSBNVVNJQy5Gb3JtYXRzLk11bHRpU2VyaWFsaXplci5zZXJpYWxpemUob3B0aW9ucy50eXBlLCBjb250ZW50cyk7XHJcbiAgICAgIHJldHVybiBsb2NhbGZvcmFnZS5zZXRJdGVtKG5ld2lkLCBzZXJpYWxpemVkKVxyXG4gICAgfSkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gc3RvcmFnZUluZGV4LmNyZWF0ZUVudHJ5KHtcclxuICAgICAgICAgIHR5cGU6IG9wdGlvbnMudHlwZSxcclxuICAgICAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcclxuICAgICAgICAgIHByb2plY3Q6IG9wdGlvbnMucHJvamVjdCxcclxuICAgICAgICAgIGlkOiBuZXdpZCxcclxuICAgICAgICAgIHJlZjogb3B0aW9ucy5yZWZcclxuICAgICAgICB9KTtcclxuICAgIH0pXHJcbiAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHJlY3ljbGVJbmRleC5yZWxvYWQoKTtcclxuICAgIH0pXHJcbiAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICBnZW5lcmljU3RhdGVFbW1pdGVyLmVtaXQoXCJjaGFuZ2VkXCIpO1xyXG4gICAgICAgIHJlY3ljbGVkRW1taXRlci5lbWl0KFwiY2hhbmdlZFwiKTtcclxuICAgICAgICByZXR1cm4gbmV3aWQ7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICBkZWJ1Z2dlcjtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG5cclxuICB2YXIgczAgPSBNVVNJQy5Gb3JtYXRzLkpTT05TZXJpYWxpemVyO1xyXG4gIHZhciBzMSA9IE1VU0lDLkZvcm1hdHMuQ2FjaGVkU2VyaWFsaXplcihNVVNJQy5Gb3JtYXRzLlBhY2tlZEpTT05TZXJpYWxpemVyKTtcclxuICB2YXIgczIgPSBNVVNJQy5Gb3JtYXRzLkh1ZmZtYW5TZXJpYWxpemVyV3JhcHBlcihzMCk7XHJcbiAgdmFyIHMzID0gTVVTSUMuRm9ybWF0cy5IdWZmbWFuU2VyaWFsaXplcldyYXBwZXIoczEpO1xyXG4gIHZhciBzNCA9IE1VU0lDLkZvcm1hdHMuQ2FjaGVkU2VyaWFsaXplcihNVVNJQy5Gb3JtYXRzLlBhY2tlZEpTT05TZXJpYWxpemVyQik7XHJcbiAgdmFyIHM1ID0gTVVTSUMuRm9ybWF0cy5IdWZmbWFuU2VyaWFsaXplcldyYXBwZXIoczQpO1xyXG5cclxuICBNVVNJQy5Gb3JtYXRzLk11bHRpU2VyaWFsaXplci5zZXRTZXJpYWxpemVycyhbXHJcbiAgICB7c2VyaWFsaXplcjogczAsIGJhc2U6ICcwJ30sXHJcbiAgICB7c2VyaWFsaXplcjogczEsIGJhc2U6ICcxJ30sXHJcbiAgICB7c2VyaWFsaXplcjogczIsIGJhc2U6ICcyJ30sXHJcbiAgICB7c2VyaWFsaXplcjogczMsIGJhc2U6ICczJ30sXHJcbiAgICB7c2VyaWFsaXplcjogczQsIGJhc2U6ICc0J30sXHJcbiAgICB7c2VyaWFsaXplcjogczUsIGJhc2U6ICc1J31cclxuICBdKTtcclxuXHJcbiAgdmFyIHN0b3JhZ2VJbmRleCA9IEluZGV4KFwiaW5kZXhcIik7XHJcbiAgdmFyIHJlY3ljbGVJbmRleCA9IEluZGV4KFwicmVjeWNsZVwiKTtcclxuXHJcbiAgcmVjeWNsZUluZGV4LmdldEFsbCgpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICByZWN5Y2xlZEVtbWl0ZXIuZW1pdChcImNoYW5nZWRcIik7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBjaGFuZ2VkID0gZnVuY3Rpb24oKSB7XHJcbiAgICBnZW5lcmljU3RhdGVFbW1pdGVyLmVtaXQoXCJjaGFuZ2VkXCIpO1xyXG4gICAgcmVjeWNsZWRFbW1pdGVyLmVtaXQoXCJjaGFuZ2VkXCIpO1xyXG4gIH07XHJcblxyXG4gIHZhciBnZXRSZWZzID0gZnVuY3Rpb24odHlwZSwgY29udGVudHMpIHtcclxuICAgIHZhciByZWYgPSBbXTtcclxuICAgIGlmICh0eXBlID09PSAnc29uZycpIHtcclxuICAgICAgY29udGVudHMudHJhY2tzLmZvckVhY2goZnVuY3Rpb24odHJhY2spIHtcclxuICAgICAgICBmb3IgKHZhciBpPTA7aTx0cmFjay5ibG9ja3MubGVuZ3RoO2krKykge1xyXG4gICAgICAgICAgdmFyIGJsb2NrSWQgPSB0cmFjay5ibG9ja3NbaV0uaWQ7XHJcbiAgICAgICAgICBpZiAoYmxvY2tJZCAmJiByZWYuaW5kZXhPZihibG9ja0lkKSA9PT0gLTEpIHJlZi5wdXNoKGJsb2NrSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdwYXR0ZXJuJykge1xyXG4gICAgICBjb250ZW50cy50cmFja3MuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICAgIGlmICh0cmFjay5pbnN0cnVtZW50ICYmIHJlZi5pbmRleE9mKHRyYWNrLmluc3RydW1lbnQpID09PSAtMSkgcmVmLnB1c2godHJhY2suaW5zdHJ1bWVudCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZWY7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGdldFByb2plY3RGaWxlcyA9IGZ1bmN0aW9uKHByb2plY3RJZCkge1xyXG4gICAgcmV0dXJuIHN0b3JhZ2VJbmRleC5nZXRBbGwoKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihpZHgpIHtcclxuICAgICAgICByZXR1cm4gaWR4LmNvbmNhdChjcmVhdGVkRmlsZXNJbmRleCkuZmlsdGVyKGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgICAgIHJldHVybiBmaWxlLnByb2plY3QgPT09IHByb2plY3RJZCB8fCBmaWxlLmlkID09PSBwcm9qZWN0SWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBnZXRSZWZzOiBnZXRSZWZzLFxyXG4gICAgZ2V0UHJvamVjdEZpbGVzOiBnZXRQcm9qZWN0RmlsZXMsXHJcbiAgICB1bmRvOiBmdW5jdGlvbihpZCkge1xyXG4gICAgICB2YXIgb2xkVmVyID0gaGlzdFtpZF0udW5kbygpO1xyXG4gICAgICBpZiAoIW9sZFZlcikgcmV0dXJuO1xyXG5cclxuICAgICAgcmV0dXJuIHVwZGF0ZUZpbGUoaWQsIEpTT04ucGFyc2Uob2xkVmVyKSwge25vSGlzdG9yeTogdHJ1ZX0pO1xyXG4gICAgfSxcclxuICAgIHJlZG86IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgIHZhciBuZXh0VmVyID0gaGlzdFtpZF0ucmVkbygpO1xyXG4gICAgICBpZiAoIW5leHRWZXIpIHJldHVybjtcclxuXHJcbiAgICAgIHJldHVybiB1cGRhdGVGaWxlKGlkLCBKU09OLnBhcnNlKG5leHRWZXIpLCB7bm9IaXN0b3J5OiB0cnVlfSk7XHJcbiAgICB9LFxyXG4gICAgcHVyZ2VGcm9tUmVjeWNsZUJpbjogcHVyZ2VGcm9tUmVjeWNsZUJpbixcclxuICAgIG1vdmVUb1JlY3ljbGVCaW46IG1vdmVUb1JlY3ljbGVCaW4sXHJcbiAgICByZXN0b3JlRnJvbVJlY3ljbGVCaW46IHJlc3RvcmVGcm9tUmVjeWNsZUJpbixcclxuICAgIGRlc3Ryb3lGaWxlOiBkZXN0cm95RmlsZSxcclxuICAgIGNyZWF0ZUZpbGU6IGNyZWF0ZUZpbGUsXHJcbiAgICBjaGFuZ2VkOiBjaGFuZ2VkLFxyXG4gICAgdXBkYXRlSW5kZXg6IGZ1bmN0aW9uKGlkLCBhdHRyaWJ1dGVzKSB7XHJcbiAgICAgIHZhciBsb2NhbEZpbGUgPSBjcmVhdGVkRmlsZXNJbmRleC5maWx0ZXIoZnVuY3Rpb24oeCkgeyByZXR1cm4geC5pZCA9PT0gaWQ7IH0pWzBdO1xyXG4gICAgICBpZiAobG9jYWxGaWxlKSB7XHJcbiAgICAgICAgbG9jYWxGaWxlLm5hbWUgPSBhdHRyaWJ1dGVzLm5hbWU7XHJcbiAgICAgICAgZ2VuZXJpY1N0YXRlRW1taXRlci5lbWl0KFwiY2hhbmdlZFwiKTtcclxuICAgICAgICByZXR1cm4gJHEud2hlbihsb2NhbEZpbGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gc3RvcmFnZUluZGV4LnVwZGF0ZUVudHJ5KGlkLCBhdHRyaWJ1dGVzKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgZ2VuZXJpY1N0YXRlRW1taXRlci5lbWl0KFwiY2hhbmdlZFwiKTtcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBnZXRJbmRleDogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgdmFyIGxvY2FsRmlsZSA9IGNyZWF0ZWRGaWxlc0luZGV4LmZpbHRlcihmdW5jdGlvbih4KSB7IHJldHVybiB4LmlkID09PSBpZDsgfSlbMF07XHJcbiAgICAgIGlmIChsb2NhbEZpbGUpIHJldHVybiAkcS53aGVuKGxvY2FsRmlsZSk7XHJcblxyXG4gICAgICByZXR1cm4gc3RvcmFnZUluZGV4LmdldEVudHJ5KGlkKTtcclxuICAgIH0sXHJcbiAgICB1cGRhdGVGaWxlOiB1cGRhdGVGaWxlLFxyXG4gICAgZ2V0RmlsZTogZ2V0RmlsZSxcclxuICAgIG9ic2VydmVSZWN5Y2xlZDogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuICAgICAgcmVjeWNsZUluZGV4LnJlbG9hZCgpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZWN5Y2xlZEVtbWl0ZXIuZW1pdChcImNoYW5nZWRcIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICByZWN5Y2xlZEVtbWl0ZXIuYWRkTGlzdGVuZXIoXCJjaGFuZ2VkXCIsIGNhbGxiYWNrKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZWN5Y2xlZEVtbWl0ZXIucmVtb3ZlTGlzdGVuZXIoXCJjaGFuZ2VkXCIsIGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgc2VhcmNoUmVjeWNsZWQ6IGZ1bmN0aW9uKGtleXdvcmQsIG9wdGlvbnMpIHtcclxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICAgIHZhciBsaW1pdCA9IHR5cGVvZiBvcHRpb25zLmxpbWl0ID09PSAndW5kZWZpbmVkJyA/IDEwIDogb3B0aW9ucy5saW1pdDtcclxuICAgICAgdmFyIGhhc0tleXdvcmQgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWUgfTtcclxuICAgICAgaWYgKGtleXdvcmQgJiYga2V5d29yZC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAga2V5d29yZCA9IGtleXdvcmQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBoYXNLZXl3b3JkID0gZnVuY3Rpb24oeCkgeyByZXR1cm4geC5uYW1lLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihrZXl3b3JkKSAhPT0gLTEgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlY3ljbGVJbmRleC5nZXRBbGwoKS50aGVuKGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgdmFyIGZpbHRlcmVkID0gKGluZGV4fHxbXSkuZmlsdGVyKGhhc0tleXdvcmQpLnJldmVyc2UoKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgcmVzdWx0czogbGltaXQgPyBmaWx0ZXJlZC5zbGljZSgwLGxpbWl0KSA6IGZpbHRlcmVkLFxyXG4gICAgICAgICAgdG90YWw6IGZpbHRlcmVkLmxlbmd0aFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIHNlYXJjaDogZnVuY3Rpb24oa2V5d29yZCwgb3B0aW9ucykge1xyXG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgICAgIHZhciBoYXNLZXl3b3JkID0gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlIH07XHJcbiAgICAgIGlmIChrZXl3b3JkICYmIGtleXdvcmQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGtleXdvcmQgPSBrZXl3b3JkLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgaGFzS2V5d29yZCA9IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHgubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoa2V5d29yZCkgIT09IC0xIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBieVByb2plY3QgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWUgfTtcclxuICAgICAgaWYgKG9wdGlvbnMucHJvamVjdCkge1xyXG4gICAgICAgIGJ5UHJvamVjdCA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgIGlmIChvcHRpb25zLnR5cGUpIHtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudHlwZS5pbmRleE9mKHgudHlwZSkgPT09IC0xKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4geC50eXBlID09PSAndGVtcG8nIHx8IG9wdGlvbnMucHJvamVjdC5pbmRleE9mKHgucHJvamVjdCkgIT09IC0xO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudHlwZSkge1xyXG4gICAgICAgICAgYnlQcm9qZWN0ID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50eXBlLmluZGV4T2YoeC50eXBlKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgZWUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAgIHZhciB1cGRhdGVTZWFyY2ggPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBidWlsdEluTG9hZGVkXHJcbiAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgJHEuYWxsKFtcclxuICAgICAgICAgICAgICBzdG9yYWdlSW5kZXguZ2V0QWxsKCksXHJcbiAgICAgICAgICAgICAgY3JlYXRlZEZpbGVzSW5kZXgsXHJcbiAgICAgICAgICAgICAgVHlwZVNlcnZpY2UuZ2V0VHlwZXMoa2V5d29yZClcclxuICAgICAgICAgICAgXSkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgICAgICB2YXIgbm90SW5SZXMgPSBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuLy8gICAgICAgICAgICAgICAgcmV0dXJuIGlkcy5pbmRleE9mKGl0ZW0uaWQpID09PSAtMTtcclxuICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICB2YXIgcmVzID0gcmVzdWx0WzBdfHxbXTtcclxuICAgICAgICAgICAgICB2YXIgaWRzID0gcmVzLm1hcChmdW5jdGlvbih4KXsgcmV0dXJuIHguaWQ7IH0pO1xyXG4gICAgICAgICAgICAgIGlmIChyZXN1bHRbMV0pIHJlcyA9IHJlcy5jb25jYXQocmVzdWx0WzFdLmZpbHRlcihub3RJblJlcykpO1xyXG4gICAgICAgICAgICAgIHJlcyA9IHJlcy5jb25jYXQocmVzdWx0WzJdLm1hcChjb252ZXJ0VHlwZSkpO1xyXG4gICAgICAgICAgICAgIHJlcyA9IHJlcy5maWx0ZXIoaGFzS2V5d29yZCkuZmlsdGVyKGJ5UHJvamVjdCk7XHJcblxyXG4gICAgICAgICAgICAgIGVlLmVtaXQoXCJjaGFuZ2VkXCIsIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHM6IHJlcy5zbGljZSgwLDE1KSxcclxuICAgICAgICAgICAgICAgIHRvdGFsOiByZXMubGVuZ3RoXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIG9ic2VydmU6IGZ1bmN0aW9uKGNiKSB7XHJcbiAgICAgICAgICBlZS5hZGRMaXN0ZW5lcihcImNoYW5nZWRcIiwgY2IpO1xyXG4gICAgICAgICAgZ2VuZXJpY1N0YXRlRW1taXRlci5hZGRMaXN0ZW5lcihcImNoYW5nZWRcIiwgdXBkYXRlU2VhcmNoKTtcclxuICAgICAgICAgIHVwZGF0ZVNlYXJjaCgpO1xyXG5cclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICBlZS5yZW1vdmVMaXN0ZW5lcihcImNoYW5nZWRcIiwgY2IpO1xyXG4gICAgICAgICAgICAgIGdlbmVyaWNTdGF0ZUVtbWl0ZXIucmVtb3ZlTGlzdGVuZXIoXCJjaGFuZ2VkXCIsIHVwZGF0ZVNlYXJjaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH07XHJcbn1dKTtcclxuXHJcbnZhciBjb252ZXJ0VHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogXCJmeFwiLFxyXG4gICAgbmFtZTogdHlwZS5uYW1lLFxyXG4gICAgaWQ6IFwidHlwZVwiKyB0eXBlLm5hbWUsXHJcbiAgICBwcm9qZWN0OiAnY29yZSdcclxuICB9O1xyXG59O1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5mYWN0b3J5KFwicHJ1bmVXcmFwcGVyXCIsIGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiBmdW5jdGlvbihmY24pIHtcclxuICAgIGlmICghZmNuLl93cmFwcGVyKSB7XHJcbiAgICAgIGZjbi5fd3JhcHBlciA9IGZ1bmN0aW9uKG11c2ljLCBtb2RXcmFwcGVyKSB7XHJcbiAgICAgICAgdmFyIHNmeEJhc2UgPSBtdXNpYy5zZnhCYXNlKCk7XHJcbiAgICAgICAgdmFyIG9iaiA9IGZjbihzZnhCYXNlLCBtb2RXcmFwcGVyKTtcclxuICAgICAgICB2YXIgb3JpZ2luYWxEaXNwb3NlO1xyXG5cclxuICAgICAgICBpZiAob2JqLmRpc3Bvc2UpIHtcclxuICAgICAgICAgIG9yaWdpbmFsRGlzcG9zZSA9IG9iai5kaXNwb3NlLmJpbmQob2JqKTsgXHJcbiAgICAgICAgICBvYmouZGlzcG9zZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBvcmlnaW5hbERpc3Bvc2UoKTtcclxuICAgICAgICAgICAgc2Z4QmFzZS5wcnVuZSgpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgb2JqLmRpc3Bvc2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2Z4QmFzZS5wcnVuZSgpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmNuLl93cmFwcGVyO1xyXG4gIH07XHJcbn0pO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5mYWN0b3J5KFwic2Z4QmFzZU9uZUVudHJ5Q2FjaGVXcmFwcGVyXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGZjbil7XHJcbiAgICAgIHZhciBfbGFzdG11c2ljO1xyXG4gICAgICB2YXIgX2xhc3RpbnN0YW5jZTtcclxuICAgICAgdmFyIHJldCA9IGZ1bmN0aW9uKG11c2ljLCBvcHRpb25zKSB7XHJcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHx7fTtcclxuXHJcbiAgICAgICAgaWYgKCFvcHRpb25zLm5vd3JhcCkge1xyXG4gICAgICAgICAgaWYgKF9sYXN0bXVzaWMgJiYgX2xhc3RtdXNpYyA9PT0gbXVzaWMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9sYXN0aW5zdGFuY2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBfbGFzdG11c2ljID0gbXVzaWM7XHJcbiAgICAgICAgX2xhc3RpbnN0YW5jZSA9IGZjbihtdXNpYywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHJldHVybiBfbGFzdGluc3RhbmNlO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0LnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZjbi51cGRhdGUuYmluZChmY24pLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgIH07XHJcbn0pO1xyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5mYWN0b3J5KFwiRXJyTWVzc2FnZVwiLCBbJyR1aWJNb2RhbCcsICckdHJhbnNsYXRlJywgZnVuY3Rpb24oJHVpYk1vZGFsLCAkdHJhbnNsYXRlKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKHRpdGxlLCB0ZXh0KSB7XHJcbiAgICB2YXIgbW9kYWxJbnMgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcInNpdGUvdGVtcGxhdGVzL21vZGFsL2Vycm9yLmh0bWxcIixcclxuICAgICAgY29udHJvbGxlcjogXCJlcnJvck1vZGFsQ3RybFwiLFxyXG4gICAgICB3aW5kb3dDbGFzczogJ2Vycm9yJyxcclxuICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgIHRleHQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuICR0cmFuc2xhdGUodGV4dCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0aXRsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZXR1cm4gJHRyYW5zbGF0ZSh0aXRsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gbW9kYWxJbnM7XHJcbiAgfTtcclxufV0pO1xyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5mYWN0b3J5KFwiRXhwb3J0XCIsIFsnJHEnLCAnRmlsZVJlcG9zaXRvcnknLCBmdW5jdGlvbigkcSwgRmlsZVJlcG9zaXRvcnkpIHtcclxuICB2YXIgZXhwb3J0Q29udGVudHMgPSBmdW5jdGlvbihuYW1lLCBjb250ZW50cykge1xyXG4gICAgdmFyIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICBhLnN0eWxlID0gXCJkaXNwbGF5OiBub25lXCI7XHJcblxyXG4gICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkoY29udGVudHMpXSk7XHJcbiAgICB2YXIgdXJsICA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICAgYS5ocmVmID0gdXJsO1xyXG4gICAgYS5kb3dubG9hZCA9IG5hbWUgKyBcIi5qc29uXCI7XHJcbiAgICBhLmNsaWNrKCk7XHJcbiAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xyXG4gIH07XHJcblxyXG4gIHZhciBnZXRSZWxhdGVkSWRzID0gZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgaWYgKGZpbGUuaW5kZXgudHlwZSA9PT0gJ3Byb2plY3QnKSB7XHJcbiAgICAgIHJldHVybiAoZmlsZS5pbmRleC5yZWZ8fFtdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciByZXQgPSBGaWxlUmVwb3NpdG9yeS5nZXRSZWZzKGZpbGUuaW5kZXgudHlwZSwgZmlsZS5jb250ZW50cyk7XHJcbiAgICAgIGlmIChmaWxlLmluZGV4LnByb2plY3QpIHJldC5wdXNoKGZpbGUuaW5kZXgucHJvamVjdCk7XHJcbiAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIGNvbmNhdCA9IGZ1bmN0aW9uKHgsIHkpIHtyZXR1cm4geC5jb25jYXQoeSk7IH07XHJcbiAgdmFyIGdldEZpbGVXaXRoUmVsYXRlZCA9IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICB2YXIgcmV0ID0gW107XHJcbiAgICByZXR1cm4gRmlsZVJlcG9zaXRvcnkuZ2V0RmlsZShpZClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICAgIGlmICghZmlsZSkgcmV0dXJuIFtdO1xyXG4gICAgICAgIGlmIChmaWxlLmluZGV4Lm5vRXhwb3J0YWJsZSkge1xyXG4gICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0LnB1c2goe1xyXG4gICAgICAgICAgbmFtZTogZmlsZS5pbmRleC5uYW1lLFxyXG4gICAgICAgICAgdHlwZTogZmlsZS5pbmRleC50eXBlLFxyXG4gICAgICAgICAgaWQ6IGZpbGUuaW5kZXguaWQsXHJcbiAgICAgICAgICBjb250ZW50czogZmlsZS5jb250ZW50cyxcclxuICAgICAgICAgIHByb2plY3Q6IGZpbGUuaW5kZXgucHJvamVjdCxcclxuICAgICAgICAgIHJlZjogZmlsZS5pbmRleC5yZWZcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuICRxLmFsbChnZXRSZWxhdGVkSWRzKGZpbGUpLm1hcChnZXRGaWxlV2l0aFJlbGF0ZWQpKVxyXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVsYXJyYXkpIHtcclxuICAgICAgICAgICAgcmVsYXJyYXkuZm9yRWFjaChmdW5jdGlvbihyZWwpIHtcclxuICAgICAgICAgICAgICByZXQgPSByZXQuY29uY2F0KHJlbCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciB1bmlxID0gZnVuY3Rpb24oYXJyYXkpIHtcclxuICAgIHZhciBmaWxlcyA9IHt9O1xyXG4gICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbihmaWxlKSB7XHJcbiAgICAgIGZpbGVzW2ZpbGUuaWRdID0gZmlsZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhmaWxlcykubWFwKGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgIHJldHVybiBmaWxlc1tpZF07XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgZXhwb3J0UHJvamVjdCA9IGZ1bmN0aW9uKG5hbWUsIGlkKSB7XHJcbiAgICB2YXIgZ2V0SWQgPSBmdW5jdGlvbih4KSB7IHJldHVybiB4LmlkOyB9O1xyXG5cclxuICAgIEZpbGVSZXBvc2l0b3J5LmdldFByb2plY3RGaWxlcyhpZClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24oZmlsZXMpIHtcclxuICAgICAgICByZXR1cm4gJHEuYWxsKGZpbGVzLm1hcChnZXRJZCkubWFwKGdldEZpbGVXaXRoUmVsYXRlZCkpO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihmdW5jdGlvbihhcnJheSl7XHJcbiAgICAgICAgYXJyYXkgPSBhcnJheS5yZWR1Y2UoY29uY2F0LCBbXSk7XHJcbiAgICAgICAgZXhwb3J0Q29udGVudHMobmFtZSwgdW5pcShhcnJheSkpO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgZXhwb3J0RmlsZSA9IGZ1bmN0aW9uKG5hbWUsIGlkKSB7XHJcbiAgICByZXR1cm4gZ2V0RmlsZVdpdGhSZWxhdGVkKGlkKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihhcnJheSkge1xyXG4gICAgICAgIGV4cG9ydENvbnRlbnRzKG5hbWUsIHVuaXEoYXJyYXkpKTtcclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGltcG9ydEZpbGUgPSBmdW5jdGlvbihjb250ZW50cykge1xyXG4gICAgdmFyIGltcG9ydEl0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gRmlsZVJlcG9zaXRvcnkuZ2V0SW5kZXgoaXRlbS5pZClcclxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBGaWxlUmVwb3NpdG9yeS51cGRhdGVGaWxlKGl0ZW0uaWQsIGl0ZW0uY29udGVudHMpXHJcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIEZpbGVSZXBvc2l0b3J5LnVwZGF0ZUluZGV4KGl0ZW0uaWQsIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDogaXRlbS5wcm9qZWN0XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIEZpbGVSZXBvc2l0b3J5LnB1cmdlRnJvbVJlY3ljbGVCaW4oaXRlbS5pZClcclxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gRmlsZVJlcG9zaXRvcnkuY3JlYXRlRmlsZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGl0ZW0uaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudHM6IGl0ZW0uY29udGVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogaXRlbS50eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0OiBpdGVtLnByb2plY3QsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVmOiBpdGVtLnJlZlxyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuICRxLndoZW4oKVxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcCA9IG51bGw7XHJcbiAgICAgICAgdmFyIHBhcnNlZCA9IEpTT04ucGFyc2UoY29udGVudHMpO1xyXG4gICAgICAgIHZhciBmaXJzdEl0ZW0gPSBwYXJzZWRbMF07XHJcblxyXG4gICAgICAgIHBhcnNlZC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgIGlmIChwKSB7XHJcbiAgICAgICAgICAgIHAgPSBwLnRoZW4oaW1wb3J0SXRlbShpdGVtKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwID0gaW1wb3J0SXRlbShpdGVtKSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gcC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHtpZDogZmlyc3RJdGVtLmlkLCB0eXBlOiBmaXJzdEl0ZW0udHlwZSwgcHJvamVjdDogZmlyc3RJdGVtLnByb2plY3R9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZXhwb3J0Q29udGVudHM6IGV4cG9ydENvbnRlbnRzLFxyXG4gICAgZXhwb3J0RmlsZTogZXhwb3J0RmlsZSxcclxuICAgIGV4cG9ydFByb2plY3Q6IGV4cG9ydFByb2plY3QsXHJcbiAgICBpbXBvcnRGaWxlOiBpbXBvcnRGaWxlXHJcbiAgfTtcclxufV0pO1xyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5mYWN0b3J5KFwiSW5kZXhcIiwgWyckcScsICckdGltZW91dCcsICdTeW5jJywgJ19sb2NhbGZvcmFnZScsIGZ1bmN0aW9uKCRxLCAkdGltZW91dCwgU3luYywgbG9jYWxmb3JhZ2UpIHtcclxuICBmdW5jdGlvbiBDYW50UmVtb3ZlKGlkLCBmaWxlKSB7XHJcbiAgICAgIHRoaXMuaWQgPSBpZDtcclxuICAgICAgdGhpcy5maWxlID0gZmlsZTtcclxuICAgICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2s7XHJcbiAgICAgIHRoaXMudHlwZSA9IFwiY2FudHJlbW92ZVwiO1xyXG4gIH1cclxuICBDYW50UmVtb3ZlLnByb3RvdHlwZSA9IG5ldyBFcnJvclxyXG5cclxuICB2YXIgSW5kZXhGYWN0b3J5ID0gZnVuY3Rpb24oaW5kZXhOYW1lKSB7XHJcbiAgICB2YXIgZW50cnlDaGFuZ2UgPSBuZXcgU3luYygpO1xyXG5cclxuICAgIHZhciByZWxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgLy8gbG9hZCBzdG9hcmdlSW5kZXhcclxuICAgICAgdmFyIHN0b3JhZ2VJbmRleDtcclxuICAgICAgc3RvcmFnZUluZGV4ID0gbG9jYWxmb3JhZ2UuZ2V0SXRlbShpbmRleE5hbWUpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oYXJyYXkpe1xyXG4gICAgICAgICAgcmV0dXJuIGFycmF5fHxbXTtcclxuICAgICAgICB9KTtcclxuICAgICAgcmV0dXJuIHN0b3JhZ2VJbmRleDtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGNsZWFySXRlbSA9IGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgdmFyIHJldCA9IHtpZDogZGF0YS5pZCwgbmFtZTogZGF0YS5uYW1lLCB0eXBlOiBkYXRhLnR5cGUsIHByb2plY3Q6IGRhdGEucHJvamVjdCwgcmVmOiBkYXRhLnJlZn07XHJcbiAgICAgIGlmIChkYXRhLmMpIHJldC5jPWRhdGEuYztcclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHJlbW92ZUVudHJ5ID0gZW50cnlDaGFuZ2Uuc3luYyhmdW5jdGlvbihpZCkge1xyXG4gICAgICByZXR1cm4gcmVsb2FkKClcclxuICAgICAgICAudGhlbihmdW5jdGlvbihpbmRleCkge1xyXG4gICAgICAgICAgaWYgKCFpbmRleCkgcmV0dXJuO1xyXG4gICAgICAgICAgaW5kZXggPSBpbmRleC5maWx0ZXIoZnVuY3Rpb24oeCkgeyByZXR1cm4geC5pZCAhPT0gaWQ7IH0pO1xyXG4gICAgICAgICAgcmV0dXJuIGxvY2FsZm9yYWdlLnNldEl0ZW0oaW5kZXhOYW1lLCBpbmRleC5tYXAoY2xlYXJJdGVtKSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbihyZWxvYWQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIGdldEVudHJ5ID0gZnVuY3Rpb24oaWQpIHtcclxuICAgICAgcmV0dXJuIHJlbG9hZCgpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICAgIGlmICghaW5kZXgpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgcmV0dXJuIGluZGV4LmZpbHRlcihmdW5jdGlvbih4KSB7IHJldHVybiB4LmlkID09PSBpZDsgfSlbMF07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBjcmVhdGVFbnRyeSA9IGVudHJ5Q2hhbmdlLnN5bmMoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICByZXR1cm4gcmVsb2FkKClcclxuICAgICAgICAudGhlbihmdW5jdGlvbihpbmRleCkge1xyXG4gICAgICAgICAgaW5kZXggPSBpbmRleCB8fCBbXTtcclxuXHJcbiAgICAgICAgICBpZiAoSW5kZXhGYWN0b3J5Lmlzb2xhdGVkQ29udGV4dCkge1xyXG4gICAgICAgICAgICBkYXRhLmMgPSBJbmRleEZhY3RvcnkuaXNvbGF0ZWRDb250ZXh0O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGluZGV4LnB1c2goZGF0YSk7XHJcbiAgICAgICAgICByZXR1cm4gbG9jYWxmb3JhZ2Uuc2V0SXRlbShpbmRleE5hbWUsIGluZGV4Lm1hcChjbGVhckl0ZW0pKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlbG9hZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgdXBkYXRlRW50cnkgPSBlbnRyeUNoYW5nZS5zeW5jKGZ1bmN0aW9uKGlkLCBhdHRyaWJ1dGVzKSB7XHJcbiAgICAgIHJldHVybiByZWxvYWQoKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgICB2YXIgbG9jYWxGaWxlID0gaW5kZXguZmlsdGVyKGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHguaWQgPT09IGlkOyB9KVswXTtcclxuICAgICAgICAgIGxvY2FsRmlsZS5uYW1lID0gYXR0cmlidXRlcy5uYW1lO1xyXG4gICAgICAgICAgbG9jYWxGaWxlLnJlZiA9IGF0dHJpYnV0ZXMucmVmO1xyXG5cclxuICAgICAgICAgIGlmIChJbmRleEZhY3RvcnkuaXNvbGF0ZWRDb250ZXh0KSB7XHJcbiAgICAgICAgICAgIGxvY2FsRmlsZS5jID0gSW5kZXhGYWN0b3J5Lmlzb2xhdGVkQ29udGV4dDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gbG9jYWxmb3JhZ2Uuc2V0SXRlbShpbmRleE5hbWUsIGluZGV4Lm1hcChjbGVhckl0ZW0pKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKHJlbG9hZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgZ2V0QWxsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiByZWxvYWQoKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgICB2YXIgaWMgPSBJbmRleEZhY3RvcnkuaXNvbGF0ZWRDb250ZXh0O1xyXG4gICAgICAgICAgaWYgKGljKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleC5maWx0ZXIoZnVuY3Rpb24oZW50cnkpIHtyZXR1cm4gZW50cnkuYyA9PT0gaWM7IH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgcmVmcyA9IGZ1bmN0aW9uKGluZGV4LCBpZCkge1xyXG4gICAgICByZXR1cm4gaW5kZXguZmlsdGVyKGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgICByZXR1cm4gKGZpbGUucmVmfHxbXSkuaW5kZXhPZihpZCkgIT09IC0xO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGlzUHJvamVjdFR5cGUgPSBmdW5jdGlvbihmaWxlKSB7XHJcbiAgICAgIHJldHVybiBmaWxlLnR5cGUgPT09ICdwcm9qZWN0JztcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGdldElkID0gZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICByZXR1cm4gZmlsZS5pZDtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHdpbGxSZW1vdmUgPSBmdW5jdGlvbihpZCkge1xyXG4gICAgICByZXR1cm4gcmVsb2FkKClcclxuICAgICAgICAudGhlbihmdW5jdGlvbihpbmRleCkge1xyXG4gICAgICAgICAgdmFyIGxvY2FsRmlsZSA9IGluZGV4LmZpbHRlcihmdW5jdGlvbih4KSB7IHJldHVybiB4LmlkID09PSBpZDsgfSlbMF07XHJcblxyXG4gICAgICAgICAgaWYgKCFsb2NhbEZpbGUpIHJldHVybjtcclxuXHJcbiAgICAgICAgICB2YXIgciA9IHJlZnMoaW5kZXgsIGlkKTtcclxuICAgICAgICAgIC8vIGlmIHRoZSBpdGVtIGhhcyBubyByZWZlcmVuY2VzLCBpdCBjYW4gYmUgcmVtb3ZlZCFcclxuICAgICAgICAgIGlmIChyLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgIGlmIChsb2NhbEZpbGUudHlwZSA9PT0gJ3Byb2plY3QnKSB7XHJcbiAgICAgICAgICAgIGlmIChyLnNvbWUoaXNQcm9qZWN0VHlwZSkpIHtcclxuICAgICAgICAgICAgICB0aHJvdyBuZXcgQ2FudFJlbW92ZShpZCwgbG9jYWxGaWxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IENhbnRSZW1vdmUoaWQsIGxvY2FsRmlsZSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuICRxLmFsbChyLm1hcChnZXRJZCkubWFwKHdpbGxSZW1vdmUpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGdldE9ycGhhbiA9IGZ1bmN0aW9uKGV4dHJhSWRzLCBleHRyYVByb2plY3RJZHMpIHtcclxuICAgICAgcmV0dXJuIHJlbG9hZCgpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICAgIHZhciBwcm9qZWN0SWRzID0gaW5kZXguZmlsdGVyKGlzUHJvamVjdFR5cGUpLm1hcChnZXRJZCkuY29uY2F0KGV4dHJhUHJvamVjdElkcyk7XHJcbiAgICAgICAgICB2YXIgaWRzID0gaW5kZXgubWFwKGdldElkKS5jb25jYXQoZXh0cmFJZHN8fFtdKTtcclxuICAgICAgICAgIHZhciBpc09ycGhhbiA9IGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgICAgICAgaWYgKGZpbGUucHJvamVjdCkge1xyXG4gICAgICAgICAgICAgIGlmIChwcm9qZWN0SWRzLmluZGV4T2YoZmlsZS5wcm9qZWN0KSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKGZpbGUucmVmfHxbXSkuc29tZShmdW5jdGlvbihpZCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBpZHMuaW5kZXhPZihpZCkgPT09IC0xO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgcmV0dXJuIGluZGV4LmZpbHRlcihpc09ycGhhbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBnZXRGcmVlSXRlbXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHJlbG9hZCgpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICAgIHZhciByZWZlcmVuY2VkID0ge307XHJcbiAgICAgICAgICBpbmRleC5mb3JFYWNoKGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgICAgICAgKGZpbGUucmVmfHxbXSkuZm9yRWFjaChmdW5jdGlvbihyKSB7XHJcbiAgICAgICAgICAgICAgcmVmZXJlbmNlZFtyXT10cnVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHJldHVybiBpbmRleC5maWx0ZXIoZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gIXJlZmVyZW5jZWRbZmlsZS5pZF07XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgcmVsb2FkKCk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd2lsbFJlbW92ZTogd2lsbFJlbW92ZSxcclxuICAgICAgcmVsb2FkOiByZWxvYWQsXHJcbiAgICAgIHJlbW92ZUVudHJ5OiByZW1vdmVFbnRyeSxcclxuICAgICAgZ2V0T3JwaGFuOiBnZXRPcnBoYW4sXHJcbiAgICAgIGdldEVudHJ5OiBnZXRFbnRyeSxcclxuICAgICAgZ2V0RnJlZUl0ZW1zOiBnZXRGcmVlSXRlbXMsXHJcbiAgICAgIGNyZWF0ZUVudHJ5OiBjcmVhdGVFbnRyeSxcclxuICAgICAgdXBkYXRlRW50cnk6IHVwZGF0ZUVudHJ5LFxyXG4gICAgICBnZXRBbGw6IGdldEFsbFxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gSW5kZXhGYWN0b3J5O1xyXG59XSk7XHJcbiIsInZhciBtdXNpY0pzID0gYW5ndWxhci5tb2R1bGUoXCJNdXNpY1Nob3dDYXNlQXBwXCIpO1xyXG5tdXNpY0pzLmZhY3RvcnkoXCJNaWRpXCIsIFsnJHEnLCAnU3luYycsICdfbG9jYWxmb3JhZ2UnLCBmdW5jdGlvbigkcSwgU3luYywgbG9jYWxmb3JhZ2UpIHtcclxuICB2YXIgc2V0dXBTdG9yZSA9IG5ldyBTeW5jKCk7XHJcbiAgdmFyIG1pZGlTZXR1cFJlcXVlc3RlZDtcclxuICB2YXIgbWlkaUxvYWRlZDtcclxuICB2YXIgc3RvcmVJbnB1dEVuYWJsZWQgPSBzZXR1cFN0b3JlLnN5bmMoZnVuY3Rpb24oaW5wdXRJZCwgZW5hYmxlZCkge1xyXG4gICAgcmV0dXJuIGxvY2FsZm9yYWdlLmdldEl0ZW0oXCJtaWRpU2V0dXBcIilcclxuICAgICAgLnRoZW4oZnVuY3Rpb24obWlkaVNldHVwKSB7XHJcbiAgICAgICAgbWlkaVNldHVwID0gbWlkaVNldHVwIHx8IHt9O1xyXG4gICAgICAgIG1pZGlTZXR1cC5pbnB1dHMgPSBtaWRpU2V0dXAuaW5wdXRzIHx8IHt9O1xyXG4gICAgICAgIG1pZGlTZXR1cC5pbnB1dHNbaW5wdXRJZF0gPSBlbmFibGVkO1xyXG5cclxuICAgICAgICByZXR1cm4gbG9jYWxmb3JhZ2Uuc2V0SXRlbShcIm1pZGlTZXR1cFwiLCBtaWRpU2V0dXApO1xyXG4gICAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgdmFyIG1pZGlBY2Nlc3NSZXF1ZXN0ZWQ7XHJcbiAgaWYgKG5hdmlnYXRvci5yZXF1ZXN0TUlESUFjY2Vzcykge1xyXG4gICAgICBtaWRpQWNjZXNzUmVxdWVzdGVkID0gbmF2aWdhdG9yLnJlcXVlc3RNSURJQWNjZXNzKHsgc3lzZXg6IGZhbHNlIH0pO1xyXG4gIH1cclxuXHJcbiAgdmFyIHdyYXBJbnB1dCA9IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICB2YXIgZW5hYmxlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlucHV0Lm9ubWlkaW1lc3NhZ2UgPSBvbk1JRElNZXNzYWdlO1xyXG4gICAgICBpbnB1dC5lbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgIHN0b3JlSW5wdXRFbmFibGVkKGlucHV0LmlkLCB0cnVlKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGRpc2FibGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaW5wdXQub25taWRpbWVzc2FnZSA9IG51bGw7XHJcbiAgICAgIGlucHV0LmVuYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgIHN0b3JlSW5wdXRFbmFibGVkKGlucHV0LmlkLCBmYWxzZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICAgIGVuYWJsZSgpXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGlzYWJsZSgpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciByZXQgPSB7XHJcbiAgICAgIGVuYWJsZWQ6ICEhaW5wdXQub25taWRpbWVzc2FnZSxcclxuICAgICAgZW5hYmxlOiBlbmFibGUsXHJcbiAgICAgIGRpc2FibGU6IGRpc2FibGUsXHJcbiAgICAgIHVwZGF0ZTogdXBkYXRlLFxyXG4gICAgICBuYW1lOiBpbnB1dC5uYW1lLFxyXG4gICAgICBpZDogaW5wdXQuaWRcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9O1xyXG5cclxuICB2YXIgZ2V0U3RhdHVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gbWlkaUxvYWRlZFxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gbWlkaUFjY2Vzc1JlcXVlc3RlZFxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihmdW5jdGlvbihtaWRpQWNjZXNzKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB7Y29ubmVjdGVkOiBmYWxzZX07XHJcbiAgICAgICAgdmFyIGlucHV0cyA9IG1pZGlBY2Nlc3MuaW5wdXRzLnZhbHVlcygpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpbnB1dCA9IGlucHV0cy5uZXh0KCk7IGlucHV0ICYmICFpbnB1dC5kb25lOyBpbnB1dCA9IGlucHV0cy5uZXh0KCkpIHtcclxuICAgICAgICAgIGlmIChpbnB1dC52YWx1ZS5vbm1pZGltZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIGRhdGEuY29ubmVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBnZXRJbnB1dHMgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBtaWRpQWNjZXNzUmVxdWVzdGVkXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKG1pZGlBY2Nlc3MpIHtcclxuICAgICAgICB2YXIgcmV0SW5wdXRzID0gW107XHJcbiAgICAgICAgdmFyIGlucHV0cyA9IG1pZGlBY2Nlc3MuaW5wdXRzLnZhbHVlcygpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpbnB1dCA9IGlucHV0cy5uZXh0KCk7IGlucHV0ICYmICFpbnB1dC5kb25lOyBpbnB1dCA9IGlucHV0cy5uZXh0KCkpIHtcclxuICAgICAgICAgICAgcmV0SW5wdXRzLnB1c2god3JhcElucHV0KGlucHV0LnZhbHVlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXRJbnB1dHM7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBldmVudExpc3RlbmVycyA9IFtdO1xyXG4gIHZhciByZWdpc3RlckV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgdmFyIGRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAgICAgZXZlbnRMaXN0ZW5lcnMgPSBldmVudExpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24oYykgeyByZXR1cm4gYyAhPT0gY2FsbGJhY2s7IH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBldmVudExpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBkZXN0cm95OiBkZXN0cm95XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHZhciBvbk1JRElNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgIG1pZGlTZXR1cFJlcXVlc3RlZC50aGVuKGZ1bmN0aW9uKGNmZykge1xyXG4gICAgICBldmVudC5kYXRhWzFdID0gZXZlbnQuZGF0YVsxXSAtIGNmZy5vY3RhdmUqMTIgKyBjZmcudHJhbnNwb3NlO1xyXG4gICAgICBldmVudExpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgY2FsbGJhY2soZXZlbnQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciByZWxvYWRDb25maWcgPSBmdW5jdGlvbigpIHtcclxuICAgIG1pZGlTZXR1cFJlcXVlc3RlZCA9IGxvY2FsZm9yYWdlLmdldEl0ZW0oXCJtaWRpU2V0dXBcIilcclxuICAgICAgLnRoZW4oZnVuY3Rpb24obWlkaVNldHVwKSB7XHJcbiAgICAgICAgaWYgKCFtaWRpU2V0dXApIG1pZGlTZXR1cCA9IHt9O1xyXG4gICAgICAgIGlmICh0eXBlb2YgbWlkaVNldHVwLm9jdGF2ZSA9PT0gJ3VuZGVmaW5lZCcpIG1pZGlTZXR1cC5vY3RhdmUgPSAzO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbWlkaVNldHVwLnRyYW5zcG9zZSA9PT0gJ3VuZGVmaW5lZCcpIG1pZGlTZXR1cC50cmFuc3Bvc2UgPSAwO1xyXG5cclxuICAgICAgICByZXR1cm4gbWlkaVNldHVwO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICByZWxvYWRDb25maWcoKTtcclxuXHJcbiAgbWlkaUxvYWRlZCA9ICRxLmFsbCh7XHJcbiAgICBpbnB1dHM6IGdldElucHV0cygpLFxyXG4gICAgbWlkaVNldHVwOiBtaWRpU2V0dXBSZXF1ZXN0ZWRcclxuICB9KS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgdmFyIG1pZGlTZXR1cCA9IHJlc3VsdC5taWRpU2V0dXA7XHJcblxyXG4gICAgaWYgKG1pZGlTZXR1cCAmJiBtaWRpU2V0dXAuaW5wdXRzKSB7XHJcbiAgICAgIHJlc3VsdC5pbnB1dHMuZm9yRWFjaChmdW5jdGlvbihpbnB1dCkge1xyXG4gICAgICAgIGlmIChtaWRpU2V0dXAuaW5wdXRzW2lucHV0LmlkXSkge1xyXG4gICAgICAgICAgaW5wdXQuZW5hYmxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgdmFyIGdldENvbmZpZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG1pZGlTZXR1cFJlcXVlc3RlZDtcclxuICB9O1xyXG5cclxuICB2YXIgc2V0Q29uZmlnID0gc2V0dXBTdG9yZS5zeW5jKGZ1bmN0aW9uKGNmZykge1xyXG4gICAgcmV0dXJuIGxvY2FsZm9yYWdlLmdldEl0ZW0oXCJtaWRpU2V0dXBcIilcclxuICAgICAgLnRoZW4oZnVuY3Rpb24obWlkaVNldHVwKSB7XHJcbiAgICAgICAgbWlkaVNldHVwID0gbWlkaVNldHVwIHx8IHt9O1xyXG4gICAgICAgIG1pZGlTZXR1cC5pbnB1dHMgPSBtaWRpU2V0dXAuaW5wdXRzIHx8IHt9O1xyXG4gICAgICAgIG1pZGlTZXR1cC5vY3RhdmUgPSBjZmcub2N0YXZlO1xyXG4gICAgICAgIG1pZGlTZXR1cC50cmFuc3Bvc2UgPSBjZmcudHJhbnNwb3NlO1xyXG5cclxuICAgICAgICByZXR1cm4gbG9jYWxmb3JhZ2Uuc2V0SXRlbShcIm1pZGlTZXR1cFwiLCBtaWRpU2V0dXApO1xyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihyZWxvYWRDb25maWcpO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZ2V0SW5wdXRzOiBnZXRJbnB1dHMsXHJcbiAgICByZWdpc3RlckV2ZW50TGlzdGVuZXI6IHJlZ2lzdGVyRXZlbnRMaXN0ZW5lcixcclxuICAgIGdldFN0YXR1czogZ2V0U3RhdHVzLFxyXG4gICAgZ2V0Q29uZmlnOiBnZXRDb25maWcsXHJcbiAgICBzZXRDb25maWc6IHNldENvbmZpZ1xyXG4gIH07XHJcbn1dKTtcclxuIiwidmFyIG11c2ljU2hvd0Nhc2VBcHAgPSBhbmd1bGFyLm1vZHVsZShcIk11c2ljU2hvd0Nhc2VBcHBcIik7XHJcbm11c2ljU2hvd0Nhc2VBcHAuZmFjdG9yeShcIlJlY2lwZVwiLCBbJyRxJywgJyR0aW1lb3V0JywgJyRyb290U2NvcGUnLCAnJGh0dHAnLCAnSW5kZXgnLCAnRmlsZVJlcG9zaXRvcnknLCBmdW5jdGlvbigkcSwgJHRpbWVvdXQsICRyb290U2NvcGUsICRodHRwLCBJbmRleCwgRmlsZVJlcG9zaXRvcnkpIHtcclxuXHJcbiAgICB2YXIgcmVjaXBlTGlzdCA9IFsnaW50cm8nLCAnY3JlYXRlX2Ffc29uZycsICdjcmVhdGVfYW5faW5zdHJ1bWVudCddO1xyXG4gICAgdmFyIGJsaW5rcyA9IFtdO1xyXG5cclxuICAgIHZhciBjdXJyZW50UmVjaXBlID0ge1xyXG4gICAgICBzdGVwczogW10sXHJcbiAgICAgIGN1cnJlbnRTdGVwOiAwXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBoYW5kbGVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50LCBhcmdzKSB7XHJcbiAgICAgIHZhciBzdGVwID0gY3VycmVudFJlY2lwZS5zdGVwc1tjdXJyZW50UmVjaXBlLmN1cnJlbnRTdGVwXTtcclxuXHJcbiAgICAgIGlmICghc3RlcCkgcmV0dXJuO1xyXG4gICAgICBpZiAoc3RlcC5ldmVudEhhbmRsZXIpIHN0ZXAuZXZlbnRIYW5kbGVyKGV2ZW50LCBhcmdzKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHJ1blJlY2lwZVN0ZXAgPSBmdW5jdGlvbihjdXJyZW50U3RlcCkge1xyXG4gICAgICBjdXJyZW50U3RlcCA9IGN1cnJlbnRTdGVwfHxjdXJyZW50UmVjaXBlLmN1cnJlbnRTdGVwO1xyXG5cclxuICAgICAgdmFyIHN0ZXAgPSBjdXJyZW50UmVjaXBlLnN0ZXBzW2N1cnJlbnRTdGVwXTtcclxuXHJcbiAgICAgIGJsaW5rcyA9IFtdO1xyXG5cclxuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KFwiX19ibGlua19kaXNhYmxlX2FsbFwiKTtcclxuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KFwiX190b29sdGlwX2hpZGVfYWxsXCIpO1xyXG4gICAgICBpZiAoIXN0ZXApIHtcclxuICAgICAgICAvLyByZWNpcGUgZW5kc1xyXG4gICAgICAgIEluZGV4Lmlzb2xhdGVkQ29udGV4dCA9IG51bGw7XHJcbiAgICAgICAgRmlsZVJlcG9zaXRvcnkuY2hhbmdlZCgpO1xyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIChzdGVwLmJsaW5rfHxbXSkuZm9yRWFjaChmdW5jdGlvbihibGlua19pZCkge1xyXG4gICAgICAgIGJsaW5rcy5wdXNoKGJsaW5rX2lkKTtcclxuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoXCJfYmxpbmtfZW5hYmxlX1wiICsgYmxpbmtfaWQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGZvciAodmFyIHRvb2x0aXBfaWQgaW4gc3RlcC50b29sdGlwfHx7fSkge1xyXG4gICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdChcIl90b29sdGlwX2Rpc3BsYXlfXCIgKyB0b29sdGlwX2lkLCB7dGV4dDogc3RlcC50b29sdGlwW3Rvb2x0aXBfaWRdfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzdGVwLmR1cmF0aW9uKSB7XHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoY3VycmVudFJlY2lwZS5jdXJyZW50U3RlcCA8PSBjdXJyZW50U3RlcCkge1xyXG4gICAgICAgICAgICBjdXJyZW50UmVjaXBlLmN1cnJlbnRTdGVwID0gY3VycmVudFN0ZXAgKyAxO1xyXG4gICAgICAgICAgICBydW5SZWNpcGVTdGVwKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgc3RlcC5kdXJhdGlvbioxMDAwKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbmV4dF9zdGVwX29uID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihldmVudCwgYXJncykge1xyXG4gICAgICAgIGlmIChldmVudCA9PT0gZXZlbnROYW1lKSB7XHJcbiAgICAgICAgICBjdXJyZW50UmVjaXBlLmN1cnJlbnRTdGVwKys7XHJcbiAgICAgICAgICBydW5SZWNpcGVTdGVwKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBkZWxheSA9IGZ1bmN0aW9uKGZjbiwgbXMpIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50LCBhcmdzKSB7XHJcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBmY24oZXZlbnQsIGFyZ3MpO1xyXG4gICAgICAgIH0sIG1zKTtcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGdldExvY2FsZU5hbWUgPSBmdW5jdGlvbihzdGVwSW5kZXgsIHRvb2x0aXBOYW1lKSB7XHJcbiAgICAgICByZXR1cm4gXCJzXCIrc3RlcEluZGV4K1wiX3Rvb2x0aXBfXCIgKyB0b29sdGlwTmFtZTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICB2YXIgbG9hZEV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50SGFuZGxlckRhdGEpIHtcclxuICAgICAgICBpZiAoZXZlbnRIYW5kbGVyRGF0YS5uZXh0X3N0ZXBfb24pIHtcclxuICAgICAgICAgIHJldHVybiBuZXh0X3N0ZXBfb24oZXZlbnRIYW5kbGVyRGF0YS5uZXh0X3N0ZXBfb24pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRIYW5kbGVyRGF0YS5kZWxheSkge1xyXG4gICAgICAgICAgcmV0dXJuIGRlbGF5KGxvYWRFdmVudEhhbmRsZXIoZXZlbnRIYW5kbGVyRGF0YS5pbm5lciksIGV2ZW50SGFuZGxlckRhdGEuZGVsYXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBsb2FkU3RlcCA9IGZ1bmN0aW9uKHN0ZXBEYXRhLCBzdGVwSW5kZXgpIHtcclxuXHJcbiAgICAgICAgdmFyIHRyID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgayBpbiBzdGVwRGF0YS50b29sdGlwKSB7XHJcbiAgICAgICAgICB0cltrXSA9IFwicmVjaXBlXCIgKyBcIi5cIiArIG5hbWUgKyBcIi5cIiArIGdldExvY2FsZU5hbWUoc3RlcEluZGV4LCBrKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBibGluazogc3RlcERhdGEuYmxpbmssXHJcbiAgICAgICAgICB0b29sdGlwOiB0cixcclxuICAgICAgICAgIGV2ZW50SGFuZGxlcjogbG9hZEV2ZW50SGFuZGxlcihzdGVwRGF0YS5ldmVudEhhbmRsZXIpLFxyXG4gICAgICAgICAgZHVyYXRpb246IHN0ZXBEYXRhLmR1cmF0aW9uXHJcbiAgICAgICAgfTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBjcmVhdGVGaWxlID0gZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICAgIHJldHVybiBGaWxlUmVwb3NpdG9yeS5kZXN0cm95RmlsZShmaWxlLmluZGV4LmlkKVxyXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBGaWxlUmVwb3NpdG9yeS5jcmVhdGVGaWxlKHtcclxuICAgICAgICAgICAgICBpZDogZmlsZS5pbmRleC5pZCxcclxuICAgICAgICAgICAgICB0eXBlOiBmaWxlLmluZGV4LnR5cGUsXHJcbiAgICAgICAgICAgICAgcHJvamVjdDogZmlsZS5pbmRleC5wcm9qZWN0LFxyXG4gICAgICAgICAgICAgIG5hbWU6IGZpbGUuaW5kZXgubmFtZSxcclxuICAgICAgICAgICAgICBjb250ZW50czogZmlsZS5jb250ZW50c1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGNyZWF0ZUZpbGVzID0gZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgcmV0dXJuICRxLmFsbCgocmVzdWx0LmRhdGEuZmlsZXN8fFtdKS5tYXAoY3JlYXRlRmlsZSkpXHJcbiAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIHN3aXRjaFByb2plY3QgPSBmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICBpZiAocmVzdWx0LmRhdGEucHJvamVjdCkge1xyXG4gICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSBcIiMvZWRpdG9yL1wiKyByZXN1bHQuZGF0YS5wcm9qZWN0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiAkaHR0cC5nZXQoXCJyZWNpcGVzL1wiICsgbmFtZSArXCIuanNvblwiKVxyXG4gICAgICAgIC50aGVuKGNyZWF0ZUZpbGVzKVxyXG4gICAgICAgIC50aGVuKHN3aXRjaFByb2plY3QpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICB2YXIgcmVjaXBlRGF0YSA9IHJlc3VsdC5kYXRhO1xyXG5cclxuICAgICAgICAgIGlmIChyZXN1bHQuZGF0YS5pc29sYXRlZENvbnRleHQpIHtcclxuICAgICAgICAgICAgSW5kZXguaXNvbGF0ZWRDb250ZXh0ID0gcmVzdWx0LmRhdGEuaXNvbGF0ZWRDb250ZXh0ICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgIEZpbGVSZXBvc2l0b3J5LmNoYW5nZWQoKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjdXJyZW50UmVjaXBlLnN0ZXBzID0gcmVjaXBlRGF0YS5zdGVwcy5tYXAobG9hZFN0ZXApO1xyXG4gICAgICAgICAgY3VycmVudFJlY2lwZS5jdXJyZW50U3RlcCA9IDA7XHJcbiAgICAgICAgICBydW5SZWNpcGVTdGVwKCk7ICAgICBcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgc3RhcnQucmFpc2UgPSBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgIGhhbmRsZUV2ZW50KG5hbWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbG9hZFRyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgdmFyIGtleSA9IG9wdGlvbnMua2V5O1xyXG5cclxuICAgICAgdmFyIGxvYWRSZWNpcGVUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KFwicmVjaXBlcy9cIiArIG5hbWUgK1wiLmpzb25cIilcclxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgICAgICB2YXIgcmVjaXBlRGF0YSA9IHJlc3VsdC5kYXRhO1xyXG4gICAgICAgICAgICBpZiAoIXJlY2lwZURhdGEubGFuZykgcmV0dXJuIHt9O1xyXG5cclxuICAgICAgICAgICAgdmFyIGxhbmdJbmRleCA9IHJlY2lwZURhdGEubGFuZy5pbmRleE9mKGtleSk7XHJcbiAgICAgICAgICAgIGlmIChsYW5nSW5kZXggPT09IC0xKSByZXR1cm4ge31cclxuXHJcbiAgICAgICAgICAgIHZhciBkYXRhID0ge307XHJcbiAgICAgICAgICAgIHJlY2lwZURhdGEuc3RlcHMuZm9yRWFjaChmdW5jdGlvbihzdGVwLCBzdGVwSW5kZXgpIHtcclxuICAgICAgICAgICAgICBpZiAoc3RlcC50b29sdGlwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIHN0ZXAudG9vbHRpcCkge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgdHAgPSBzdGVwLnRvb2x0aXBba107XHJcbiAgICAgICAgICAgICAgICAgIHZhciBsb2NhbGVOYW1lID0gZ2V0TG9jYWxlTmFtZShzdGVwSW5kZXgsIGspO1xyXG4gICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0cCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhW2xvY2FsZU5hbWVdID0gdHBbbGFuZ0luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGFuZ0luZGV4PT09MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YVtsb2NhbGVOYW1lXSA9IHRwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgdmFyIGFjdGlvbnMgPSB7fTtcclxuICAgICAgcmVjaXBlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHJlY2lwZUlkKSB7XHJcbiAgICAgICAgYWN0aW9uc1tyZWNpcGVJZF0gPSBsb2FkUmVjaXBlVHJhbnNsYXRpb24ocmVjaXBlSWQpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHJldHVybiAkcS5hbGwoYWN0aW9ucylcclxuICAgICAgICAudGhlbihmdW5jdGlvbihyZWNpcGVUcmFuc2xhdGlvbkRhdGEpIHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlY2lwZTogcmVjaXBlVHJhbnNsYXRpb25EYXRhXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBnZXRCbGlua3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIGJsaW5rcztcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RhcnQ6IHN0YXJ0LFxyXG4gICAgICBzdGVwOiBydW5SZWNpcGVTdGVwLFxyXG4gICAgICBoYW5kbGVFdmVudDogaGFuZGxlRXZlbnQsXHJcbiAgICAgIGxvYWRUcmFuc2xhdGlvbnM6IGxvYWRUcmFuc2xhdGlvbnMsXHJcbiAgICAgIGdldEJsaW5rczogZ2V0QmxpbmtzXHJcbiAgICB9O1xyXG59XSk7XHJcbiIsInZhciBtdXNpY0pzID0gYW5ndWxhci5tb2R1bGUoXCJNdXNpY1Nob3dDYXNlQXBwXCIpO1xyXG5tdXNpY0pzLmZhY3RvcnkoXCJTeW5jXCIsIFsnJHEnLCBmdW5jdGlvbigkcSkge1xyXG4gIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgIHZhciBwcm9taXNlID0gJHEud2hlbigpO1xyXG4gICAgdGhpcy5zeW5jID0gZnVuY3Rpb24oZikge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF9hcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgIHZhciBfc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGRlZmVyID0gJHEuZGVmZXIoKTtcclxuXHJcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJldHVybiBmLmFwcGx5KF9zZWxmLCBfYXJncylcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICBkZWZlci5yZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICAgIGRlZmVyLnJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGVmZXIucHJvbWlzZTtcclxuICAgICAgfTtcclxuICAgIH07XHJcbiAgfTtcclxufV0pO1xyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5mYWN0b3J5KFwidHJhbnNsYXRpb25zTG9hZGVyXCIsIFsnJHEnLCAnVHlwZVNlcnZpY2UnLCAnZXNUcmFuc2xhdGlvbnMnLCAnZW5UcmFuc2xhdGlvbnMnLCAnUmVjaXBlJywgZnVuY3Rpb24oJHEsIFR5cGVTZXJ2aWNlLCBlc1RyYW5zbGF0aW9ucywgZW5UcmFuc2xhdGlvbnMsIFJlY2lwZSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgdmFyIGJhc2VUcmFuc2xhdGlvbiA9IHt9XHJcblxyXG4gICAgICBpZiAob3B0aW9ucy5rZXk9PT0nZXMnKSB7XHJcbiAgICAgICAgYmFzZVRyYW5zbGF0aW9uID0gZXNUcmFuc2xhdGlvbnM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLmtleT09PSdlbicpIHtcclxuICAgICAgICBiYXNlVHJhbnNsYXRpb24gPSBlblRyYW5zbGF0aW9ucztcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGFkZFRyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uKHRyKSB7XHJcbiAgICAgICAgZm9yICh2YXIgayBpbiB0cikge1xyXG4gICAgICAgICAgYmFzZVRyYW5zbGF0aW9uW2tdID0gdHJba107XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuICRxLmFsbCh7XHJcbiAgICAgICAgdHlwZVRyYW5zbGF0aW9uczogVHlwZVNlcnZpY2UubG9hZFRyYW5zbGF0aW9ucyhvcHRpb25zKSxcclxuICAgICAgICByZWNpcGVUcmFuc2xhdGlvbnM6IFJlY2lwZS5sb2FkVHJhbnNsYXRpb25zKG9wdGlvbnMpXHJcbiAgICAgIH0pXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICBhZGRUcmFuc2xhdGlvbnMocmVzdWx0LnR5cGVUcmFuc2xhdGlvbnMpO1xyXG4gICAgICAgICAgYWRkVHJhbnNsYXRpb25zKHJlc3VsdC5yZWNpcGVUcmFuc2xhdGlvbnMpO1xyXG5cclxuICAgICAgICAgIHJldHVybiBiYXNlVHJhbnNsYXRpb247XHJcbiAgICAgICAgfSlcclxuICAgIH07XHJcbn1dKTtcclxuIiwidmFyIG11c2ljU2hvd0Nhc2VBcHAgPSBhbmd1bGFyLm1vZHVsZShcIk11c2ljU2hvd0Nhc2VBcHBcIik7XHJcblxyXG52YXIgT2JqZWN0Q2FjaGUgPSBmdW5jdGlvbigpIHtcclxuICB2YXIgd20gPSBuZXcgV2Vha01hcCgpO1xyXG4gIHRoaXMuZ2V0ID0gZnVuY3Rpb24obXVzaWMsIG9iamVjdCkge1xyXG4gICAgdmFyIGFycmF5ID0gd20uZ2V0KG11c2ljKTtcclxuICAgIHZhciBzdHJvYmogPSBKU09OLnN0cmluZ2lmeShvYmplY3QpO1xyXG5cclxuICAgIGlmICghYXJyYXkpIHJldHVybiB1bmRlZmluZWQ7XHJcblxyXG4gICAgdmFyIGVsZW0gPSBhcnJheS5maWx0ZXIoZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4geC5vYmogPT09IHN0cm9iajtcclxuICAgIH0pWzBdO1xyXG5cclxuICAgIHJldHVybiBlbGVtICYmIGVsZW0udmFsdWU7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5zZXQgPSBmdW5jdGlvbihtdXNpYywgb2JqZWN0LCB2YWx1ZSkge1xyXG4gICAgdmFyIGFycmF5ID0gd20uZ2V0KG11c2ljKTtcclxuICAgIHZhciBzdHJvYmogPSBKU09OLnN0cmluZ2lmeShvYmplY3QpO1xyXG5cclxuICAgIGlmICghYXJyYXkpIHtcclxuICAgICAgYXJyYXkgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZWxlbSA9IGFycmF5LmZpbHRlcihmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiB4Lm9iaiA9PT0gc3Ryb2JqO1xyXG4gICAgfSlbMF07XHJcblxyXG4gICAgaWYgKGVsZW0pIHtcclxuICAgICAgZWxlbS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXJyYXkucHVzaCh7b2JqOiBzdHJvYmosIHZhbHVlOiB2YWx1ZX0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhcnJheS5sZW5ndGggPiA4KSBhcnJheSA9IGFycmF5LnNsaWNlKDEpO1xyXG5cclxuICAgIHdtLnNldChtdXNpYywgYXJyYXkpO1xyXG4gIH07XHJcbn07XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLnNlcnZpY2UoXCJUeXBlU2VydmljZVwiLCBbXCIkaHR0cFwiLCBcIiRxXCIsIGZ1bmN0aW9uKCRodHRwLCAkcSkge1xyXG4gIHZhciBtYWtlX211dGFibGUgPSBmdW5jdGlvbihmY24sIG9wdGlvbnMpIHtcclxuICAgIHZhciBjYWNoZURhdGEgPSBuZXcgT2JqZWN0Q2FjaGUoKTtcclxuXHJcbiAgICB2YXIgY2FjaGVXcmFwID0gZnVuY3Rpb24ob2JqZWN0LCBiYXNlTXVzaWMpIHtcclxuICAgICAgdmFyIG9yaWdpbmFsUHJ1bmUgPSBiYXNlTXVzaWMucHJ1bmU7XHJcbiAgICAgIGJhc2VNdXNpYy5wcnVuZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGNhY2hlRGF0YSA9IG5ldyBPYmplY3RDYWNoZSgpO1xyXG5cclxuICAgICAgICBpZiAob3JpZ2luYWxQcnVuZSkge1xyXG4gICAgICAgICAgcmV0dXJuIG9yaWdpbmFsUHJ1bmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24oY29uc3RydWN0b3IpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24obXVzaWMsIHBhcmFtcyl7XHJcbiAgICAgICAgICB2YXIga2V5ID0gYmFzZU11c2ljO1xyXG4gICAgICAgICAgaWYgKGtleS5nZXRPcmlnaW5hbCkga2V5ID0ga2V5LmdldE9yaWdpbmFsKCk7XHJcbiAgICAgICAgICBjYWNoZURhdGEuc2V0KGtleSwgb2JqZWN0LCBtdXNpYylcclxuXHJcbiAgICAgICAgICByZXR1cm4gY29uc3RydWN0b3IobXVzaWMsIHBhcmFtcyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgc3Vib2JqZWN0cywgY29tcG9uZW50cykge1xyXG4gICAgICB2YXIgY3VycmVudDtcclxuICAgICAgdmFyIGluc3RhbmNlcyA9IFtdO1xyXG5cclxuICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yZXVzYWJsZU5vZGUpIHtcclxuICAgICAgICBjdXJyZW50ID0gZnVuY3Rpb24obXVzaWMsIHBhcmFtcykge1xyXG4gICAgICAgICAgdmFyIHdyYXBwZWQgPSBzdWJvYmplY3RzWzBdO1xyXG4gICAgICAgICAgdmFyIGNvbnN0cnVjdG9yID0gZmNuKG9iamVjdCwgc3Vib2JqZWN0cy5tYXAoY2FjaGVXcmFwKG9iamVjdCwgbXVzaWMpKSwgY29tcG9uZW50cyk7IFxyXG4gICAgICAgICAgdmFyIGtleSA9IG11c2ljO1xyXG4gICAgICAgICAgaWYgKGtleS5nZXRPcmlnaW5hbCkga2V5ID0ga2V5LmdldE9yaWdpbmFsKCk7XHJcblxyXG4gICAgICAgICAgdmFyIG5ld0Jhc2UgPSBjYWNoZURhdGEuZ2V0KGtleSwgb2JqZWN0KTtcclxuICAgICAgICAgIGlmIChuZXdCYXNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB3cmFwcGVkKG5ld0Jhc2UpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdG9yKG11c2ljLCBwYXJhbXMpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjdXJyZW50ID0gZmNuKG9iamVjdCwgc3Vib2JqZWN0cywgY29tcG9uZW50cyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjdXJyZW50LnVwZGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50O1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgcmV0ID0gZnVuY3Rpb24obXVzaWMsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgcjtcclxuICAgICAgICB2YXIgd3JhcHBlZCA9IHt9O1xyXG4gICAgICAgIHZhciBsYXN0Q3VycmVudCA9IGN1cnJlbnQ7XHJcbiAgICAgICAgdmFyIHByb3h5ID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICAgICAgd3JhcHBlZFtuYW1lXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAobGFzdEN1cnJlbnQgIT0gY3VycmVudCkgdXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiByW25hbWVdLmFwcGx5KHIsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciB1cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIG5ld3IgPSBjdXJyZW50KG11c2ljLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgaWYgKG5ld3IgIT09IHIgJiYgciAmJiByLmRpc3Bvc2UpIHIuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICByID0gbmV3cjtcclxuXHJcbiAgICAgICAgICAgIGluc3RhbmNlcy5wdXNoKG5ld3IpO1xyXG5cclxuICAgICAgICAgICAgbGFzdEN1cnJlbnQgPSBjdXJyZW50O1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHIpIHByb3h5KGspO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHVwZGF0ZSgpO1xyXG5cclxuICAgICAgICByZXR1cm4gd3JhcHBlZDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBsYXN0T2JqRGF0YTtcclxuICAgICAgcmV0LnVwZGF0ZSA9IGZ1bmN0aW9uKG5ld29iamVjdCwgX2NvbXBvbmVudHMpIHtcclxuICAgICAgICBjb21wb25lbnRzID0gX2NvbXBvbmVudHNcclxuICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkobmV3b2JqZWN0KSA9PT0gbGFzdE9iakRhdGEpIHJldHVybiByZXQ7XHJcbiAgICAgICAgbGFzdE9iakRhdGEgPSBKU09OLnN0cmluZ2lmeShuZXdvYmplY3QpO1xyXG5cclxuICAgICAgICBpbnN0YW5jZXMuZm9yRWFjaChmdW5jdGlvbihpbnN0YW5jZSkge1xyXG4gICAgICAgICAgaWYoaW5zdGFuY2UuZGlzcG9zZSkgaW5zdGFuY2UuZGlzcG9zZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGluc3RhbmNlcyA9IFtdO1xyXG5cclxuICAgICAgICBjdXJyZW50ID0gZmNuKG5ld29iamVjdCwgc3Vib2JqZWN0cywgY29tcG9uZW50cyk7XHJcbiAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG5cclxuICB2YXIgcGx1Z2lucyA9IFtcImNvcmVcIl07XHJcbiAgdmFyIHR5cGVzID0gW107XHJcbiAgdmFyIHRyYW5zbGF0aW9uID0ge307XHJcbiAgdmFyIG0gPSBmdW5jdGlvbihwbHVnaW5OYW1lKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBsYW5nOiBmdW5jdGlvbihrZXksIHRyYW5zbGF0ZURhdGEpIHtcclxuICAgICAgICB0cmFuc2xhdGlvbltrZXldID10cmFuc2xhdGlvbltrZXldfHx7fTtcclxuICAgICAgICB0cmFuc2xhdGlvbltrZXldW3BsdWdpbk5hbWVdID0gdHJhbnNsYXRlRGF0YTtcclxuICAgICAgfSxcclxuICAgICAgdHlwZTogZnVuY3Rpb24odHlwZU5hbWUsIG9wdGlvbnMsIGNvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgdHlwZXMucHVzaCh7XHJcbiAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJzaXRlL3BsdWdpbi9cIiArIHBsdWdpbk5hbWUgKyBcIi9cIiArIG9wdGlvbnMudGVtcGxhdGUgKyBcIi5odG1sXCIsXHJcbiAgICAgICAgICBwYXJhbWV0ZXJzOiBvcHRpb25zLnBhcmFtZXRlcnMsXHJcbiAgICAgICAgICBjb25zdHJ1Y3RvcjogbWFrZV9tdXRhYmxlKGNvbnN0cnVjdG9yLCB7cmV1c2FibGVOb2RlOiBvcHRpb25zLnJldXNhYmxlTm9kZX0pLFxyXG4gICAgICAgICAgbmFtZTogdHlwZU5hbWUsXHJcbiAgICAgICAgICBjb21wb3NpdGlvbjogb3B0aW9ucy5jb21wb3NpdGlvbixcclxuICAgICAgICAgIGNvbXBvbmVudHM6IG9wdGlvbnMuY29tcG9uZW50cyxcclxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBvcHRpb25zLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgX2RlZmF1bHQ6IG9wdGlvbnMuX2RlZmF1bHQsXHJcbiAgICAgICAgICBzdWJvYmplY3RzOiBvcHRpb25zLnN1Ym9iamVjdHMsXHJcbiAgICAgICAgICBzdGFja0FwcGVuZDogb3B0aW9ucy5zdGFja0FwcGVuZCxcclxuICAgICAgICAgIG1vbml0b3I6IG9wdGlvbnMubW9uaXRvclxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgdmFyIGxvYWRQbHVnaW4gPSBmdW5jdGlvbihwbHVnaW5OYW1lKSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KFwic2l0ZS9wbHVnaW4vXCIgKyBwbHVnaW5OYW1lICsgXCIvaW5kZXguanNcIilcclxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgdmFyIHJ1bm5lckNvZGUgPSByZXN1bHQuZGF0YTtcclxuICAgICAgICB2YXIgbW9kdWxlID0ge2V4cG9ydDogZnVuY3Rpb24oKXt9fTtcclxuICAgICAgICBldmFsKHJ1bm5lckNvZGUpO1xyXG5cclxuICAgICAgICBtb2R1bGUuZXhwb3J0KG0ocGx1Z2luTmFtZSkpO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgcGx1Z2luc0xvYWRlZCA9ICRxLmFsbChwbHVnaW5zLm1hcChsb2FkUGx1Z2luKSk7XHJcblxyXG4gIHZhciBnZXRUeXBlcyA9IGZ1bmN0aW9uKGtleXdvcmQpIHtcclxuICAgICAgdmFyIGhhc0tleXdvcmQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGlmIChrZXl3b3JkKSB7XHJcbiAgICAgICAga2V5d29yZCA9IGtleXdvcmQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBoYXNLZXl3b3JkID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICAgICAgcmV0dXJuIHgubmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoa2V5d29yZCkgIT09IC0xO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBwbHVnaW5zTG9hZGVkLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVzLmZpbHRlcihoYXNLZXl3b3JkKTtcclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGdldFR5cGUgPSBmdW5jdGlvbih0eXBlTmFtZSwgY2FsbGJhY2spIHtcclxuICAgIHJldHVybiBwbHVnaW5zTG9hZGVkXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciByZXQgPSB0eXBlcy5maWx0ZXIoZnVuY3Rpb24odHlwZSkgeyByZXR1cm4gdHlwZS5uYW1lID09PSB0eXBlTmFtZTsgfSlbMF07IFxyXG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2socmV0KTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgbG9hZFRyYW5zbGF0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBwbHVnaW5zTG9hZGVkXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0cmFuc2xhdGlvbltvcHRpb25zLmtleV18fHt9O1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZ2V0VHlwZXM6IGdldFR5cGVzLFxyXG4gICAgZ2V0VHlwZTogZ2V0VHlwZSxcclxuICAgIGxvYWRUcmFuc2xhdGlvbnM6IGxvYWRUcmFuc2xhdGlvbnNcclxuICB9O1xyXG5cclxufV0pO1xyXG5cclxuIiwidmFyIG11c2ljU2hvd0Nhc2VBcHAgPSBhbmd1bGFyLm1vZHVsZShcIk11c2ljU2hvd0Nhc2VBcHBcIik7XHJcbm11c2ljU2hvd0Nhc2VBcHAuZmFjdG9yeShcIldlbGNvbWVNZXNzYWdlXCIsIFsnbG9jYWxmb3JhZ2UnLCBmdW5jdGlvbihsb2NhbGZvcmFnZSkge1xyXG4gICAgdmFyIHNraXAgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIGxvY2FsZm9yYWdlLmdldEl0ZW0oXCJ3ZWxjb21lX3NraXBcIilcclxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgIHJldHVybiAhIXJlc3VsdDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHNldFNraXAgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gbG9jYWxmb3JhZ2Uuc2V0SXRlbShcIndlbGNvbWVfc2tpcFwiLCB2YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGxvY2FsZm9yYWdlLnJlbW92ZUl0ZW0oXCJ3ZWxjb21lX3NraXBcIik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc2V0U2tpcDogc2V0U2tpcCxcclxuICAgICAgc2tpcDogc2tpcFxyXG4gICAgfTtcclxufV0pO1xyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5mYWN0b3J5KFwiX2xvY2FsZm9yYWdlXCIsIFsnJHEnLCAnbG9jYWxmb3JhZ2UnLCBmdW5jdGlvbigkcSwgbG9jYWxmb3JhZ2UpIHtcclxuICB2YXIgZ2V0SXRlbSA9IGxvY2FsZm9yYWdlLmdldEl0ZW0uYmluZChsb2NhbGZvcmFnZSk7XHJcblxyXG4gIHZhciByZWxlYXNlV2l0aEluZGV4ID0gZnVuY3Rpb24oaW5kZXgsIGJ5dGVzKSB7XHJcbiAgICBpZiAoaW5kZXgubGVuZ3RoID09PSAwKSByZXR1cm4gJHEud2hlbihpbmRleCk7XHJcbiAgICBpZiAoYnl0ZXMgPD0gMCkgcmV0dXJuICRxLndoZW4oaW5kZXgpO1xyXG5cclxuICAgIHZhciBuZXh0RW50cnkgPSBpbmRleC5zaGlmdCgpO1xyXG4gICAgcmV0dXJuIGxvY2FsZm9yYWdlLmdldEl0ZW0obmV4dEVudHJ5LmlkKVxyXG4gICAgICAudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBsb2NhbGZvcmFnZS5yZW1vdmVJdGVtKG5leHRFbnRyeS5pZClcclxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgcmV0dXJuIHJlbGVhc2VXaXRoSW5kZXgoaW5kZXgsIGJ5dGVzIC0gKHZhbHVlID8gdmFsdWUubGVuZ3RoIDogMCkpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciBjbGVhckl0ZW0gPSBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICByZXR1cm4ge2lkOiBkYXRhLmlkLCBuYW1lOiBkYXRhLm5hbWUsIHR5cGU6IGRhdGEudHlwZX07XHJcbiAgfTtcclxuXHJcbiAgdmFyIHJlbGVhc2UgPSBmdW5jdGlvbihieXRlcykge1xyXG4gICAgcmV0dXJuIGxvY2FsZm9yYWdlLmdldEl0ZW0oXCJyZWN5Y2xlXCIpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIHJlbGVhc2VXaXRoSW5kZXgoaW5kZXgsIGJ5dGVzKTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oZnVuY3Rpb24obmV3SW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gbG9jYWxmb3JhZ2Uuc2V0SXRlbShcInJlY3ljbGVcIiwgbmV3SW5kZXgubWFwKGNsZWFySXRlbSkpO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgc2V0SXRlbSA9IGZ1bmN0aW9uKGtleSwgb2JqZWN0LCBpc3JldHJ5KSB7XHJcbiAgICByZXR1cm4gbG9jYWxmb3JhZ2Uuc2V0SXRlbShrZXksIG9iamVjdClcclxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgIGlmICghaXNyZXRyeSkge1xyXG4gICAgICAgICAgcmV0dXJuIHJlbGVhc2Uob2JqZWN0Lmxlbmd0aClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNldEl0ZW0oa2V5LCBvYmplY3QsIHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRocm93IGVycjtcclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIHZhciByZW1vdmVJdGVtID0gbG9jYWxmb3JhZ2UucmVtb3ZlSXRlbS5iaW5kKGxvY2FsZm9yYWdlKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldEl0ZW06IGdldEl0ZW0sXHJcbiAgICBzZXRJdGVtOiBzZXRJdGVtLFxyXG4gICAgcmVtb3ZlSXRlbTogcmVtb3ZlSXRlbVxyXG4gIH07XHJcbn1dKTtcclxuIiwidmFyIG11c2ljU2hvd0Nhc2VBcHAgPSBhbmd1bGFyLm1vZHVsZShcIk11c2ljU2hvd0Nhc2VBcHBcIik7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLmZpbHRlcihcImluc3RydW1lbnRfbmFtZVwiLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gZnVuY3Rpb24oaW5zdHJ1bWVudElkLCBpbnN0cnVtZW50TWFwKSB7XHJcbiAgICByZXR1cm4gaW5zdHJ1bWVudE1hcFtpbnN0cnVtZW50SWRdICYmIGluc3RydW1lbnRNYXBbaW5zdHJ1bWVudElkXSA/IGluc3RydW1lbnRNYXBbaW5zdHJ1bWVudElkXS5uYW1lIDogaW5zdHJ1bWVudElkO1xyXG4gIH07XHJcbn0pO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5maWx0ZXIoXCJpbnN0cnVtZW50X3R5cGVcIiwgZnVuY3Rpb24oKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKGluc3RydW1lbnRJZCwgaW5zdHJ1bWVudE1hcCkge1xyXG4gICAgcmV0dXJuIGluc3RydW1lbnRNYXBbaW5zdHJ1bWVudElkXSAmJiBpbnN0cnVtZW50TWFwW2luc3RydW1lbnRJZF0gPyBpbnN0cnVtZW50TWFwW2luc3RydW1lbnRJZF0udHlwZSA6ICdpbnN0cnVtZW50JztcclxuICB9O1xyXG59KTtcclxuXHJcbm11c2ljU2hvd0Nhc2VBcHAuZmlsdGVyKFwiYmxvY2tfbmFtZVwiLCBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gZnVuY3Rpb24oYmxvY2ssIGluZGV4TWFwKSB7XHJcbiAgICByZXR1cm4gaW5kZXhNYXBbYmxvY2suaWRdICYmIGluZGV4TWFwW2Jsb2NrLmlkXS5pbmRleCA/IGluZGV4TWFwW2Jsb2NrLmlkXS5pbmRleC5uYW1lIDogYmxvY2suaWQ7XHJcbiAgfTtcclxufSk7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLmZpbHRlcihcImJsb2NrX2xlbmd0aFwiLCBbXCJQYXR0ZXJuXCIsIGZ1bmN0aW9uKFBhdHRlcm4pIHtcclxuICByZXR1cm4gZnVuY3Rpb24oYmxvY2ssIGluZGV4TWFwLCBtZWFzdXJlKSB7XHJcbiAgICBpZiAoIWJsb2NrLmlkKSByZXR1cm4gMTtcclxuICAgIGlmICghaW5kZXhNYXBbYmxvY2suaWRdKSByZXR1cm4gMTtcclxuICAgIGlmICghaW5kZXhNYXBbYmxvY2suaWRdLmNvbnRlbnRzKSByZXR1cm4gMTtcclxuXHJcbiAgICByZXR1cm4gUGF0dGVybi5jb21wdXRlTWVhc3VyZUNvdW50KGluZGV4TWFwW2Jsb2NrLmlkXS5jb250ZW50cywgbWVhc3VyZSk7XHJcbiAgfTtcclxufV0pO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5jb250cm9sbGVyKFwicmVjb3JkT3B0aW9uc0N0cmxcIiwgW1wiJHNjb3BlXCIsIFwiJHVpYk1vZGFsSW5zdGFuY2VcIiwgXCJSZWNpcGVcIiwgZnVuY3Rpb24oJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSwgUmVjaXBlKSB7XHJcbiAgJHNjb3BlLm51bUNoYW5uZWxzID0gMjtcclxuICAkc2NvcGUuZW5jb2RpbmcgPSBcIndhdlwiO1xyXG4gICRzY29wZS5yZWNpcGUgPSBSZWNpcGUuc3RhcnQ7XHJcblxyXG4gICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcclxuICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5yZWNpcGUucmFpc2UoXCJzb25nX3JlY19jb25maXJtXCIpO1xyXG5cclxuICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHtcclxuICAgICAgZW5jb2Rpbmc6ICRzY29wZS5lbmNvZGluZyxcclxuICAgICAgbnVtQ2hhbm5lbHM6ICRzY29wZS5udW1DaGFubmVsc1xyXG4gICAgfSk7XHJcbiAgfTtcclxufV0pO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5jb250cm9sbGVyKFwiRGFzaGJvYXJkQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgZnVuY3Rpb24oJHNjb3BlKSB7XHJcbiAgJHNjb3BlLiRlbWl0KCdzd2l0Y2hQcm9qZWN0JywgXCJkZWZhdWx0XCIpO1xyXG59XSk7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLmNvbnRyb2xsZXIoXCJQcm9qZWN0RGFzaGJvYXJkQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCIkcm91dGVQYXJhbXNcIiwgZnVuY3Rpb24oJHNjb3BlLCAkcm91dGVQYXJhbXMpIHtcclxuICAkc2NvcGUuJGVtaXQoJ3N3aXRjaFByb2plY3QnLCAkcm91dGVQYXJhbXMucHJvamVjdCk7XHJcbn1dKTtcclxuXHJcbm11c2ljU2hvd0Nhc2VBcHAuY29udHJvbGxlcihcIlNvbmdFZGl0b3JDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcIiR1aWJNb2RhbFwiLCBcIiRxXCIsIFwiJHRpbWVvdXRcIiwgXCIkcm91dGVQYXJhbXNcIiwgXCIkaHR0cFwiLCBcIk11c2ljQ29udGV4dFwiLCBcIkZpbGVSZXBvc2l0b3J5XCIsIFwiSW5zdHJ1bWVudFNldFwiLCBcIlBhdHRlcm5cIiwgXCJFeHBvcnRcIiwgXCJUSUNLU19QRVJfQkVBVFwiLCBcIlNPTkdfTUFYX1RSQUNLU1wiLCBcclxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJHVpYk1vZGFsLCAkcSwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgJGh0dHAsIE11c2ljQ29udGV4dCwgRmlsZVJlcG9zaXRvcnksIEluc3RydW1lbnRTZXQsIFBhdHRlcm4sIEV4cG9ydCwgVElDS1NfUEVSX0JFQVQsIFNPTkdfTUFYX1RSQUNLUykge1xyXG5cclxuICAkc2NvcGUuaW5kZXhNYXAgPSB7fTtcclxuICB2YXIgaWQgPSAkcm91dGVQYXJhbXMuaWQ7XHJcbiAgdmFyIGluc3RTZXQgPSBJbnN0cnVtZW50U2V0KCk7XHJcbiAgdmFyIHBsYXlpbmdTdGFydE9mZnNldCA9IDA7XHJcblxyXG4gICRzY29wZS4kZW1pdCgnc3dpdGNoUHJvamVjdCcsICRyb3V0ZVBhcmFtcy5wcm9qZWN0KTtcclxuXHJcbiAgdmFyIHB4VG9UaWNrcyA9IGZ1bmN0aW9uKHB4KSB7XHJcbiAgICB2YXIgYmVhdFdpZHRoID0gMTU0IC8gJHNjb3BlLmZpbGUubWVhc3VyZTtcclxuICAgIHZhciB6b29tTGV2ZWwgPSAxO1xyXG4gICAgcmV0dXJuIFRJQ0tTX1BFUl9CRUFUKnB4L3pvb21MZXZlbC9iZWF0V2lkdGg7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlZWsgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgaWYgKCRzY29wZS5jdXJyZW50UmVjKSByZXR1cm47XHJcblxyXG4gICAgcGxheWluZ1N0YXJ0T2Zmc2V0ID0gcHhUb1RpY2tzKGV2ZW50Lm9mZnNldFgpO1xyXG4gICAgJHNjb3BlLiRicm9hZGNhc3QoXCJyZXNldENsb2NrXCIsIHBsYXlpbmdTdGFydE9mZnNldCk7XHJcblxyXG4gICAgaWYgKCRzY29wZS5wbGF5aW5nKSB7XHJcbiAgICAgICRzY29wZS5wbGF5aW5nLnN0b3AoKTtcclxuICAgICAgJHNjb3BlLnBsYXlpbmcgPSBudWxsO1xyXG4gICAgICAkc2NvcGUucmVwbGF5KCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnBhdHRlcm5FZGl0ID0gZnVuY3Rpb24oYmxvY2spIHtcclxuICAgIGRvY3VtZW50LmxvY2F0aW9uID0gXCIjL2VkaXRvci9cIiArICRyb3V0ZVBhcmFtcy5wcm9qZWN0ICsgXCIvcGF0dGVybi9cIiArIGJsb2NrLmlkO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5leHBvcnRJdGVtID0gZnVuY3Rpb24oKSB7XHJcbiAgICBFeHBvcnQuZXhwb3J0RmlsZSgkc2NvcGUuZmlsZUluZGV4Lm5hbWUsICRzY29wZS5maWxlSW5kZXguaWQpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoJHNjb3BlLmZpbGVJbmRleC5idWlsdEluKSB7XHJcbiAgICAgICRzY29wZS5maWxlID0gbnVsbDtcclxuICAgICAgJHNjb3BlLmZpbGVJbmRleCA9IG51bGw7XHJcbiAgICAgIEZpbGVSZXBvc2l0b3J5LmRlc3Ryb3lGaWxlKGlkKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmVsb2FkRnJvbVJlcG8oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIEZpbGVSZXBvc2l0b3J5Lm1vdmVUb1JlY3ljbGVCaW4oaWQpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGRvY3VtZW50LmxvY2F0aW9uID0gXCIjL2VkaXRvci9cIiArICRyb3V0ZVBhcmFtcy5wcm9qZWN0O1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUucmVtb3ZlID0gZnVuY3Rpb24oYmxvY2spIHtcclxuICAgIGRlbGV0ZSBibG9jay5pZDtcclxuICAgIGNoZWNrUGF5bG9hZCgpO1xyXG4gICAgJHNjb3BlLmZpbGVDaGFuZ2VkKCk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmN1cnJlbnRSZWMgPSBudWxsO1xyXG5cclxuICAkc2NvcGUucmVjb3JkID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoJHNjb3BlLnBsYXlpbmcpIHtcclxuICAgICAgJHNjb3BlLnBsYXlpbmcuc3RvcCgpO1xyXG4gICAgICAkc2NvcGUucGxheWluZyA9IG51bGw7XHJcblxyXG4gICAgICAkc2NvcGUuJGJyb2FkY2FzdChcInBhdXNlQ2xvY2tcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG1vZGFsSW5zID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICB0ZW1wbGF0ZVVybDogXCJzaXRlL3RlbXBsYXRlcy9tb2RhbC9yZWNvcmRPcHRpb25zLmh0bWxcIixcclxuICAgICAgY29udHJvbGxlcjogXCJyZWNvcmRPcHRpb25zQ3RybFwiXHJcbiAgICB9KTtcclxuXHJcbiAgICBtb2RhbElucy5yZXN1bHQudGhlbihmdW5jdGlvbihlbmNvZGluZ09wdGlvbnMpIHtcclxuICAgICAgJHNjb3BlLmN1cnJlbnRSZWMgPSBNdXNpY0NvbnRleHQucmVjb3JkKHtcclxuICAgICAgICBlbmNvZGluZzogZW5jb2RpbmdPcHRpb25zLmVuY29kaW5nLCBcclxuICAgICAgICBudW1DaGFubmVsczogZW5jb2RpbmdPcHRpb25zLm51bUNoYW5uZWxzXHJcbiAgICAgIH0sIGZ1bmN0aW9uKGJsb2IpIHtcclxuICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgICAgYS5zdHlsZSA9IFwiZGlzcGxheTogbm9uZVwiO1xyXG5cclxuICAgICAgICB2YXIgdXJsICA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICAgICAgIGEuaHJlZiA9IHVybDtcclxuICAgICAgICBhLmRvd25sb2FkID0gJHNjb3BlLmZpbGVJbmRleC5uYW1lICsgXCIuXCIgKyBlbmNvZGluZ09wdGlvbnMuZW5jb2Rpbmc7XHJcbiAgICAgICAgYS5jbGljaygpO1xyXG4gICAgICAgIHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7XHJcblxyXG4gICAgICAgICRzY29wZS5yZWNpcGUucmFpc2UoJ3NvbmdfcmVjX3N0b3AnKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAkc2NvcGUucGxheSgpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnN0b3AgPSBmdW5jdGlvbigpIHtcclxuICAgIHBsYXlpbmdTdGFydE9mZnNldCA9IDA7XHJcblxyXG4gICAgJHNjb3BlLiRicm9hZGNhc3QoXCJzdG9wQ2xvY2tcIik7XHJcbiAgICAkc2NvcGUuJGJyb2FkY2FzdChcInJlc2V0Q2xvY2tcIiwgcGxheWluZ1N0YXJ0T2Zmc2V0KTtcclxuXHJcbiAgICBpZiAoJHNjb3BlLnBsYXlpbmcpICRzY29wZS5wbGF5aW5nLnN0b3AoKTtcclxuICAgICRzY29wZS5yZWNpcGUucmFpc2UoXCJzb25nX3BsYXlfc3RvcHBlZFwiKTtcclxuICAgICRzY29wZS5wbGF5aW5nID0gbnVsbDtcclxuICB9O1xyXG5cclxuICAkc2NvcGUucGxheWluZyA9IG51bGw7XHJcblxyXG4gICRzY29wZS4kb24oJ3BhdXNlZENsb2NrJywgZnVuY3Rpb24oZXZ0LCB0aWNrcykge1xyXG4gICAgcGxheWluZ1N0YXJ0T2Zmc2V0ID0gdGlja3M7ICAgIFxyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUucGxheSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCRzY29wZS5wbGF5aW5nKSB7XHJcbiAgICAgICRzY29wZS5wbGF5aW5nLnN0b3AoKTtcclxuICAgICAgJHNjb3BlLnBsYXlpbmcgPSBudWxsO1xyXG5cclxuICAgICAgJHNjb3BlLiRicm9hZGNhc3QoXCJwYXVzZUNsb2NrXCIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgJHNjb3BlLnJlcGxheSgpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5yZXBsYXkgPSBmdW5jdGlvbigpIHtcclxuICAgIE11c2ljQ29udGV4dC5yZXN1bWVBdWRpbygpO1xyXG5cclxuICAgICRxLmFsbChpbnN0U2V0LmFsbClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24oaW5zdHJ1bWVudHMpe1xyXG4gICAgICAgIHZhciBwYXR0ZXJucyA9IHt9O1xyXG5cclxuICAgICAgICB2YXIgY3JlYXRlUGF0dGVybiA9IGZ1bmN0aW9uKGlkLCBzb25nVHJhY2tJZHgpIHtcclxuICAgICAgICAgIGlmICghaWQpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgaWYgKHBhdHRlcm5zW2lkXSkgcmV0dXJuIHBhdHRlcm5zW2lkXTtcclxuXHJcbiAgICAgICAgICB2YXIgcGF0dGVybiA9ICRzY29wZS5pbmRleE1hcFtpZF0uY29udGVudHM7XHJcbiAgICAgICAgICB2YXIgY2hhbmdlZEJwbSA9IE9iamVjdC5jcmVhdGUocGF0dGVybik7XHJcbiAgICAgICAgICBjaGFuZ2VkQnBtLmJwbSA9ICRzY29wZS5maWxlLmJwbTtcclxuXHJcbiAgICAgICAgICBwYXR0ZXJuc1tpZF0gPSBQYXR0ZXJuLnBhdHRlcm5Db21wb3NlKGNoYW5nZWRCcG0sIGluc3RydW1lbnRzLCBzb25nVHJhY2tJZHgqU09OR19NQVhfVFJBQ0tTLCBmdW5jdGlvbigpIHt9KTtcclxuICAgICAgICAgIHJldHVybiBwYXR0ZXJuc1tpZF07XHJcbiAgICAgICAgfTsgICAgICAgIFxyXG5cclxuICAgICAgICB2YXIgc29uZyA9IG5ldyBNVVNJQy5Tb25nKFxyXG4gICAgICAgICAgJHNjb3BlLmZpbGUudHJhY2tzLm1hcChmdW5jdGlvbih0cmFjaywgc29uZ1RyYWNrSWR4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cmFjay5ibG9ja3MubWFwKGZ1bmN0aW9uKGJsb2NrKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBhdHRlcm4oYmxvY2suaWQsIHNvbmdUcmFja0lkeCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAsIHtcclxuICAgICAgICAgICAgbWVhc3VyZTogJHNjb3BlLmZpbGUubWVhc3VyZSxcclxuICAgICAgICAgICAgYnBtOiAkc2NvcGUuZmlsZS5icG0sXHJcbiAgICAgICAgICAgIHRpY2tzX3Blcl9iZWF0OiBUSUNLU19QRVJfQkVBVCxcclxuICAgICAgICAgICAgc3RhcnQ6IHBsYXlpbmdTdGFydE9mZnNldFxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRzY29wZS4kYnJvYWRjYXN0KFwic3RhcnRDbG9ja1wiLCBzb25nLnRpbWVUb1RpY2tzKCkpO1xyXG4gICAgICAgICRzY29wZS5wbGF5aW5nID0gc29uZy5wbGF5KHtcclxuICAgICAgICAgIG9uU3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KFwic3RvcENsb2NrXCIpO1xyXG4gICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdChcInJlc2V0Q2xvY2tcIiwgcGxheWluZ1N0YXJ0T2Zmc2V0KTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5yZWNpcGUucmFpc2UoXCJzb25nX3BsYXlfc3RvcHBlZFwiKTtcclxuICAgICAgICAgICAgJHNjb3BlLnBsYXlpbmcgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLmN1cnJlbnRSZWMpICRzY29wZS5jdXJyZW50UmVjLnN0b3AoKTtcclxuICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRSZWMgPSBudWxsO1xyXG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHt9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5pbmRleENoYW5nZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5maWxlSW5kZXgucmVmID0gRmlsZVJlcG9zaXRvcnkuZ2V0UmVmcyhcInNvbmdcIiwgJHNjb3BlLmZpbGUpO1xyXG4gICAgRmlsZVJlcG9zaXRvcnkudXBkYXRlSW5kZXgoaWQsICRzY29wZS5maWxlSW5kZXgpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5maWxlQ2hhbmdlZCA9IGZuLmRlYm91bmNlKGZ1bmN0aW9uKCkge1xyXG4gICAgRmlsZVJlcG9zaXRvcnkudXBkYXRlRmlsZShpZCwgJHNjb3BlLmZpbGUpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICRzY29wZS5pbmRleENoYW5nZWQoKTtcclxuICAgICAgfSk7XHJcbiAgfSwxMDApO1xyXG5cclxuICB2YXIgY2hlY2tQYXlsb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgbWF4YmxvY2tzID0gMDtcclxuICAgIHZhciBtYXhUcmFja0luZGV4ID0gMDtcclxuXHJcbiAgICBpZiAoISRzY29wZS5maWxlKSByZXR1cm47XHJcbiAgICBpZiAoISRzY29wZS5maWxlLnRyYWNrcykgcmV0dXJuO1xyXG5cclxuICAgICRzY29wZS5maWxlLnRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrLCB0cmFja0luZGV4KSB7XHJcbiAgICAgIGZvciAodmFyIGk9MDtpPHRyYWNrLmJsb2Nrcy5sZW5ndGg7aSsrKSB7XHJcbiAgICAgICAgaWYgKHRyYWNrLmJsb2Nrc1tpXS5pZCl7XHJcbiAgICAgICAgICB2YXIgbUNvdW50ID0gUGF0dGVybi5jb21wdXRlTWVhc3VyZUNvdW50KCRzY29wZS5pbmRleE1hcFt0cmFjay5ibG9ja3NbaV0uaWRdLmNvbnRlbnRzLCAkc2NvcGUuZmlsZS5tZWFzdXJlKTtcclxuICAgICAgICAgIGlmIChpK21Db3VudD5tYXhibG9ja3MpIG1heGJsb2Nrcz1pK21Db3VudDtcclxuICAgICAgICAgIGlmICh0cmFja0luZGV4ID4gbWF4VHJhY2tJbmRleCkgbWF4VHJhY2tJbmRleCA9IHRyYWNrSW5kZXg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoJHNjb3BlLmZpbGUudHJhY2tzLmxlbmd0aCA8IG1heFRyYWNrSW5kZXgrMiAmJiAkc2NvcGUuZmlsZS50cmFja3MubGVuZ3RoIDwgU09OR19NQVhfVFJBQ0tTKSB7XHJcbiAgICAgICRzY29wZS5maWxlLnRyYWNrcy5wdXNoKHtcclxuICAgICAgICBibG9ja3M6ICRzY29wZS5maWxlLnRyYWNrc1swXS5ibG9ja3MubWFwKGZ1bmN0aW9uKCkge3JldHVybiB7fTt9KVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICRzY29wZS5maWxlLnRyYWNrcyA9ICRzY29wZS5maWxlLnRyYWNrcy5zbGljZSgwLG1heFRyYWNrSW5kZXgrMik7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHRhcmdldCA9IG1heGJsb2NrcyArIDE7XHJcbiAgICAkc2NvcGUuZmlsZS50cmFja3MuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICBpZiAodGFyZ2V0ID4gdHJhY2suYmxvY2tzLmxlbmd0aCkge1xyXG4gICAgICAgIHZhciBwYXlsb2FkID0gdGFyZ2V0LXRyYWNrLmJsb2Nrcy5sZW5ndGg7XHJcbiAgICAgICAgZm9yICh2YXIgaT0wO2k8cGF5bG9hZDtpKyspIHtcclxuICAgICAgICAgIHRyYWNrLmJsb2Nrcy5wdXNoKHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdHJhY2suYmxvY2tzID0gdHJhY2suYmxvY2tzLnNsaWNlKDAsIHRhcmdldCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgJHNjb3BlLmZpbGVDaGFuZ2VkKCk7XHJcbiAgfTtcclxuICAkc2NvcGUuJHdhdGNoKFwiZmlsZS5tZWFzdXJlXCIsIGNoZWNrUGF5bG9hZCk7XHJcblxyXG4gICRzY29wZS5vbkRyb3BDb21wbGV0ZSA9IGZ1bmN0aW9uKCRkYXRhLCRldmVudCxibG9jayxzb25nVHJhY2tJZHgpIHtcclxuICAgIGlmICgkZGF0YS5mcm9tQmxvY2spIHtcclxuXHJcbiAgICAgIHZhciBzd2FwSWQgPSBibG9jay5pZDtcclxuICAgICAgYmxvY2suaWQgPSAkZGF0YS5mcm9tQmxvY2suaWQ7XHJcbiAgICAgICRkYXRhLmZyb21CbG9jay5pZCA9IHN3YXBJZDtcclxuXHJcbiAgICAgIGNoZWNrUGF5bG9hZCgpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoJGRhdGEudHlwZSAhPT0gJ3BhdHRlcm4nKSByZXR1cm47XHJcblxyXG4gICAgYmxvY2suaWQgPSAkZGF0YS5pZDtcclxuICAgIEZpbGVSZXBvc2l0b3J5LmdldEZpbGUoJGRhdGEuaWQpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGYpIHtcclxuICAgICAgICBmLmNvbnRlbnRzLnRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrLCBpZHgpIHtcclxuICAgICAgICAgIGlmICh0cmFjay5pbnN0cnVtZW50KSBpbnN0U2V0LmxvYWQodHJhY2suaW5zdHJ1bWVudCwgc29uZ1RyYWNrSWR4KlNPTkdfTUFYX1RSQUNLUyArIGlkeCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRzY29wZS5pbmRleE1hcFskZGF0YS5pZF0gPSBmO1xyXG4gICAgICAgIGNoZWNrUGF5bG9hZCgpO1xyXG4gICAgICAgICRzY29wZS5maWxlQ2hhbmdlZCgpO1xyXG5cclxuICAgICAgICAkc2NvcGUucmVjaXBlLnJhaXNlKCdzb25nX3BhdHRlcm5fZHJvcHBlZCcpO1xyXG4gICAgICB9KTtcclxuICAgIFxyXG4gIH07XHJcblxyXG4gIHZhciByZWxvYWRGcm9tUmVwbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGJsb2NrX2lkcyA9IHt9O1xyXG5cclxuICAgIEZpbGVSZXBvc2l0b3J5LmdldEZpbGUoaWQpLnRoZW4oZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgICBpZiAoZmlsZSkge1xyXG4gICAgICAgIGZpbGUuY29udGVudHMudHJhY2tzLmZvckVhY2goZnVuY3Rpb24odHJhY2ssIGlkeCkge1xyXG4gICAgICAgICAgdHJhY2suYmxvY2tzLmZvckVhY2goZnVuY3Rpb24oYmxvY2spe1xyXG4gICAgICAgICAgICBpZiAoYmxvY2sgJiYgYmxvY2suaWQpIHtcclxuICAgICAgICAgICAgICBpZiAoIWJsb2NrX2lkc1tibG9jay5pZF0pe1xyXG4gICAgICAgICAgICAgICAgYmxvY2tfaWRzW2Jsb2NrLmlkXSA9IEZpbGVSZXBvc2l0b3J5LmdldEZpbGUoYmxvY2suaWQpXHJcbiAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZmlsZTogZmlsZSxcclxuICAgICAgICAgICAgICAgICAgICAgIGlkeDogaWR4XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuICRxLmFsbChibG9ja19pZHMpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oaW5kZXhNYXApIHtcclxuICAgICAgICAgICRzY29wZS5pbmRleE1hcCA9IHt9O1xyXG5cclxuICAgICAgICAgIGZvciAodmFyIGJsb2NrSWQgaW4gaW5kZXhNYXApIHtcclxuICAgICAgICAgICAgdmFyIHBhdHRlcm4gPSBpbmRleE1hcFtibG9ja0lkXS5maWxlLmNvbnRlbnRzO1xyXG4gICAgICAgICAgICB2YXIgc29uZ1RyYWNrSWR4ID0gaW5kZXhNYXBbYmxvY2tJZF0uaWR4O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmluZGV4TWFwW2Jsb2NrSWRdID0gaW5kZXhNYXBbYmxvY2tJZF0uZmlsZTtcclxuICAgICAgICAgICAgcGF0dGVybi50cmFja3MuZm9yRWFjaChmdW5jdGlvbih0cmFjaywgaWR4KSB7XHJcbiAgICAgICAgICAgICAgaWYgKHRyYWNrLmluc3RydW1lbnQpIGluc3RTZXQubG9hZCh0cmFjay5pbnN0cnVtZW50LCBzb25nVHJhY2tJZHgqU09OR19NQVhfVFJBQ0tTICsgaWR4KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgb3V0cHV0RmlsZSA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUuZmlsZUluZGV4ID0gZmlsZS5pbmRleDtcclxuICAgICAgICAgICAgJHNjb3BlLmZpbGUgPSBmaWxlLmNvbnRlbnRzO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICByZWxvYWRGcm9tUmVwbygpO1xyXG5cclxuICB2YXIga2V5RG93bkhhbmRsZXIgPSBmdW5jdGlvbihldnQpIHtcclxuICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiKSByZXR1cm47XHJcbiAgICBcclxuICAgIGlmIChldnQua2V5Q29kZSA9PT0gOTAgJiYgZXZ0LmN0cmxLZXkpIHtcclxuICAgICAgRmlsZVJlcG9zaXRvcnkudW5kbyhpZCkudGhlbihyZWxvYWRGcm9tUmVwbyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV2dC5rZXlDb2RlID09PSA4OSAmJiBldnQuY3RybEtleSkge1xyXG4gICAgICBGaWxlUmVwb3NpdG9yeS5yZWRvKGlkKS50aGVuKHJlbG9hZEZyb21SZXBvKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAkKGRvY3VtZW50KS5iaW5kKFwia2V5ZG93blwiLCBrZXlEb3duSGFuZGxlcik7XHJcbiAgJHNjb3BlLiRvbihcIiRkZXN0cm95XCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgJChkb2N1bWVudCkudW5iaW5kKFwia2V5ZG93blwiLCBrZXlEb3duSGFuZGxlcik7XHJcbiAgICBpbnN0U2V0LmRpc3Bvc2UoKTtcclxuICB9KTsgIFxyXG59XSk7XHJcblxyXG5tdXNpY1Nob3dDYXNlQXBwLmNvbnRyb2xsZXIoXCJQYXR0ZXJuRWRpdG9yQ29udHJvbGxlclwiLCBbXCIkcVwiLCBcIiR0cmFuc2xhdGVcIiwgXCIkc2NvcGVcIiwgXCIkdGltZW91dFwiLCBcIiRyb3V0ZVBhcmFtc1wiLCBcIiRodHRwXCIsIFwiVElDS1NfUEVSX0JFQVRcIiwgXCJNdXNpY0NvbnRleHRcIiwgXCJGaWxlUmVwb3NpdG9yeVwiLCBcIlBhdHRlcm5cIiwgXCJJbnN0cnVtZW50U2V0XCIsICdFeHBvcnQnLCAnRXJyTWVzc2FnZScsXHJcbiAgZnVuY3Rpb24oJHEsICR0cmFuc2xhdGUsICRzY29wZSwgJHRpbWVvdXQsICRyb3V0ZVBhcmFtcywgJGh0dHAsIFRJQ0tTX1BFUl9CRUFULCBNdXNpY0NvbnRleHQsIEZpbGVSZXBvc2l0b3J5LCBQYXR0ZXJuLCBJbnN0cnVtZW50U2V0LCBFeHBvcnQsIEVyck1lc3NhZ2UpIHtcclxuICB2YXIgaWQgPSAkcm91dGVQYXJhbXMuaWQ7XHJcbiAgdmFyIHBsYXlpbmdTdGFydE9mZnNldCA9IDA7XHJcblxyXG4gICRzY29wZS5leHBvcnRJdGVtID0gZnVuY3Rpb24oKSB7XHJcbiAgICBFeHBvcnQuZXhwb3J0RmlsZSgkc2NvcGUuZmlsZUluZGV4Lm5hbWUsICRzY29wZS5maWxlSW5kZXguaWQpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS4kZW1pdCgnc3dpdGNoUHJvamVjdCcsICRyb3V0ZVBhcmFtcy5wcm9qZWN0KTsgXHJcblxyXG4gICRzY29wZS5pbnN0cnVtZW50RWRpdCA9IGZ1bmN0aW9uKHRyYWNrKSB7XHJcbiAgICBkb2N1bWVudC5sb2NhdGlvbiA9IFwiIy9lZGl0b3IvXCIgKyAkcm91dGVQYXJhbXMucHJvamVjdCArIFwiL2luc3RydW1lbnQvXCIgKyB0cmFjay5pbnN0cnVtZW50O1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5pbnN0cnVtZW50TWFwID0ge307XHJcbiAgJHNjb3BlLmJlYXRXaWR0aCA9IDEwO1xyXG4gICRzY29wZS56b29tTGV2ZWwgPSA4O1xyXG4gICRzY29wZS5zZWxlY3RlZFRyYWNrID0gMDtcclxuICAkc2NvcGUubXV0ZWRTdGF0ZSA9IFtdO1xyXG5cclxuICB2YXIgaW5zdFNldCA9IEluc3RydW1lbnRTZXQoKTtcclxuXHJcbiAgdmFyIHB4VG9UaWNrcyA9IGZ1bmN0aW9uKHB4KSB7XHJcbiAgICB2YXIgYmVhdFdpZHRoID0gMTA7XHJcbiAgICByZXR1cm4gVElDS1NfUEVSX0JFQVQqcHgvJHNjb3BlLnpvb21MZXZlbC9iZWF0V2lkdGg7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnNlZWsgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgcGxheWluZ1N0YXJ0T2Zmc2V0ID0gcHhUb1RpY2tzKGV2ZW50Lm9mZnNldFggKyAkc2NvcGUuZmlsZS5zY3JvbGxMZWZ0KTtcclxuICAgICRzY29wZS4kYnJvYWRjYXN0KFwicmVzZXRDbG9ja1wiLCBwbGF5aW5nU3RhcnRPZmZzZXQpO1xyXG5cclxuICAgIGlmICgkc2NvcGUucGxheWluZykge1xyXG4gICAgICAkc2NvcGUucGxheWluZy5zdG9wKCk7XHJcbiAgICAgICRzY29wZS5wbGF5aW5nID0gbnVsbDtcclxuICAgICAgJHNjb3BlLnJlcGxheSgpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS51cGRhdGVNdXRlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLm11dGVkU3RhdGUgPSBQYXR0ZXJuLmdldE11dGVkU3RhdGUoJHNjb3BlLmZpbGUpO1xyXG4gICAgJHNjb3BlLmZpbGVDaGFuZ2VkKCk7XHJcblxyXG4gICAgJHNjb3BlLmZpbGUudHJhY2tzLmZvckVhY2goZnVuY3Rpb24odHJhY2ssIGlkeCkge1xyXG4gICAgICBpbnN0U2V0Lm11dGUoaWR4LCAkc2NvcGUubXV0ZWRTdGF0ZVtpZHhdKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoJHNjb3BlLmZpbGVJbmRleC5idWlsdEluKSB7XHJcbiAgICAgICRzY29wZS5maWxlID0gbnVsbDtcclxuICAgICAgJHNjb3BlLmZpbGVJbmRleCA9IG51bGw7XHJcbiAgICAgIEZpbGVSZXBvc2l0b3J5LmRlc3Ryb3lGaWxlKGlkKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmVsb2FkRnJvbVJlcG8oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIEZpbGVSZXBvc2l0b3J5Lm1vdmVUb1JlY3ljbGVCaW4oaWQpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGRvY3VtZW50LmxvY2F0aW9uID0gXCIjL2VkaXRvci9cIiArICRyb3V0ZVBhcmFtcy5wcm9qZWN0O1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgaWYgKGVyci50eXBlICYmIGVyci50eXBlID09PSAnY2FudHJlbW92ZScpIHtcclxuICAgICAgICAgIEVyck1lc3NhZ2UoJ2NvbW1vbi5lcnJvcl90aXRsZScsICdjb21tb24uY2FudHJlbW92ZV9lcnJvcicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUucmVtb3ZlVHJhY2sgPSBmdW5jdGlvbih0cmFja0lkeCkge1xyXG4gICAgJHNjb3BlLmZpbGUudHJhY2tzID0gXHJcbiAgICAgICRzY29wZS5maWxlLnRyYWNrcy5zbGljZSgwLCB0cmFja0lkeClcclxuICAgICAgICAuY29uY2F0KCRzY29wZS5maWxlLnRyYWNrcy5zbGljZSh0cmFja0lkeCsxKSk7XHJcblxyXG4gICAgJHNjb3BlLmZpbGUuc2VsZWN0ZWRUcmFjayA9ICRzY29wZS5maWxlLnNlbGVjdGVkVHJhY2sgJSAkc2NvcGUuZmlsZS50cmFja3MubGVuZ3RoO1xyXG5cclxuICAgICRzY29wZS51cGRhdGVNdXRlZCgpO1xyXG4gICAgJHNjb3BlLmZpbGVDaGFuZ2VkKCk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmFkZFRyYWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkc2NvcGUuZmlsZS50cmFja3MucHVzaCh7XHJcbiAgICAgIGV2ZW50czogW10sXHJcbiAgICAgIHNjcm9sbDogMTAwMFxyXG4gICAgfSk7XHJcblxyXG4gICAgJHNjb3BlLmZpbGUuc2VsZWN0ZWRUcmFjayA9ICRzY29wZS5maWxlLnRyYWNrcy5sZW5ndGggLSAxO1xyXG4gICAgJHNjb3BlLnVwZGF0ZU11dGVkKCk7XHJcbiAgICAkc2NvcGUuZmlsZUNoYW5nZWQoKTtcclxuICB9O1xyXG5cclxuXHJcbiAgJHNjb3BlLnN0b3AgPSBmdW5jdGlvbigpIHtcclxuICAgIHBsYXlpbmdTdGFydE9mZnNldCA9IDA7XHJcblxyXG4gICAgJHNjb3BlLiRicm9hZGNhc3QoXCJzdG9wQ2xvY2tcIik7XHJcbiAgICAkc2NvcGUuJGJyb2FkY2FzdChcInJlc2V0Q2xvY2tcIiwgcGxheWluZ1N0YXJ0T2Zmc2V0KTtcclxuXHJcbiAgICBpZiAoJHNjb3BlLnBsYXlpbmcpICRzY29wZS5wbGF5aW5nLnN0b3AoKTtcclxuICAgICRzY29wZS5yZWNpcGUucmFpc2UoXCJzb25nX3BsYXlfc3RvcHBlZFwiKTtcclxuICAgICRzY29wZS5wbGF5aW5nID0gbnVsbDtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuJG9uKCdwYXVzZWRDbG9jaycsIGZ1bmN0aW9uKGV2dCwgdGlja3MpIHtcclxuICAgIHBsYXlpbmdTdGFydE9mZnNldCA9IHRpY2tzOyAgICBcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLnBsYXkgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmICgkc2NvcGUucGxheWluZykge1xyXG4gICAgICAkc2NvcGUucGxheWluZy5zdG9wKCk7XHJcbiAgICAgICRzY29wZS5wbGF5aW5nID0gbnVsbDtcclxuXHJcbiAgICAgICRzY29wZS4kYnJvYWRjYXN0KFwicGF1c2VDbG9ja1wiKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgICRzY29wZS5yZXBsYXkoKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUucmVwbGF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBNdXNpY0NvbnRleHQucmVzdW1lQXVkaW8oKTtcclxuXHJcbiAgICB2YXIgcGxheWluZ0xpbmUgPSAkKFwiLnBsYXlpbmctbGluZVwiKTtcclxuXHJcbiAgICAkcS5hbGwoaW5zdFNldC5hbGwpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGluc3RydW1lbnRzKSB7XHJcbiAgICAgICAgaWYgKCRzY29wZS5wbGF5aW5nKSAkc2NvcGUucGxheWluZy5zdG9wKCk7XHJcblxyXG4gICAgICAgIHZhciBvblN0b3AgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICRzY29wZS4kYnJvYWRjYXN0KFwic3RvcENsb2NrXCIpO1xyXG4gICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoXCJyZXNldENsb2NrXCIpO1xyXG4gICAgICAgICAgJHNjb3BlLnJlY2lwZS5yYWlzZShcInBhdHRlcm5fcGxheV9zdG9wcGVkXCIpO1xyXG5cclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUucGxheWluZyA9IG51bGw7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBwbGF5aW5nU3RhcnRPZmZzZXQgPSAwO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBwYXR0ZXJuID0gUGF0dGVybi5wYXR0ZXJuQ29tcG9zZSgkc2NvcGUuZmlsZSwgaW5zdHJ1bWVudHMsIDAsIG9uU3RvcCwge1xyXG4gICAgICAgICAgc3RhcnQ6IHBsYXlpbmdTdGFydE9mZnNldFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkc2NvcGUucGxheWluZyA9IHBhdHRlcm4ucGxheSgpO1xyXG5cclxuICAgICAgICB2YXIgdGltZVRvVGlja3MgPSBwYXR0ZXJuLnRpbWVUb1RpY2tzKCk7XHJcbiAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoXCJzdGFydENsb2NrXCIsIHRpbWVUb1RpY2tzKTtcclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnpvb21JbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHNjb3BlLnpvb21MZXZlbCA9ICRzY29wZS56b29tTGV2ZWwgKiAyO1xyXG4gICAgaWYgKCRzY29wZS56b29tTGV2ZWwgPiAzMikgJHNjb3BlLnpvb21MZXZlbCA9IDMyO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS56b29tT3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkc2NvcGUuem9vbUxldmVsID0gJHNjb3BlLnpvb21MZXZlbCAvIDI7XHJcbiAgICBpZiAoJHNjb3BlLnpvb21MZXZlbCA8IDEpICRzY29wZS56b29tTGV2ZWwgPSAxO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5pbmRleENoYW5nZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5maWxlSW5kZXgucmVmID0gRmlsZVJlcG9zaXRvcnkuZ2V0UmVmcyhcInBhdHRlcm5cIiwgJHNjb3BlLmZpbGUpO1xyXG4gICAgRmlsZVJlcG9zaXRvcnkudXBkYXRlSW5kZXgoaWQsICRzY29wZS5maWxlSW5kZXgpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5maWxlQ2hhbmdlZCA9IGZuLmRlYm91bmNlKGZ1bmN0aW9uKCkge1xyXG4gICAgRmlsZVJlcG9zaXRvcnkudXBkYXRlRmlsZShpZCwgJHNjb3BlLmZpbGUpXHJcbiAgICAgIC50aGVuKCRzY29wZS5pbmRleENoYW5nZWQpO1xyXG4gIH0sMTAwKTtcclxuXHJcbiAgJHNjb3BlLiRvbihcInRyYWNrQ2hhbmdlZFwiLCBmdW5jdGlvbih0cmFjaykge1xyXG4gICAgY29tcHV0ZU1lYXN1cmVDb3VudCgpO1xyXG4gICAgJHNjb3BlLmZpbGVDaGFuZ2VkKCk7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBiZWVwID0gZnVuY3Rpb24oaW5zdHJ1bWVudCwgbikge1xyXG4gICAgICBpZiAoIWluc3RydW1lbnQpIHJldHVybjtcclxuICAgICAgaWYgKCFpbnN0cnVtZW50Lm5vdGUpIHJldHVybjtcclxuXHJcbiAgICAgIGlmIChsYXN0UGxheWluZykgbGFzdFBsYXlpbmcuc3RvcCgpO1xyXG4gICAgICBsYXN0UGxheWluZyA9IGluc3RydW1lbnQubm90ZShuKS5wbGF5KCk7XHJcblxyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgaWYgKGxhc3RQbGF5aW5nKSBsYXN0UGxheWluZy5zdG9wKCk7XHJcbiAgICAgICAgbGFzdFBsYXlpbmcgPSBudWxsO1xyXG4gICAgICB9LDUwKTtcclxuICB9O1xyXG5cclxuICB2YXIgY29tcHV0ZU1lYXN1cmVDb3VudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCEkc2NvcGUuZmlsZSkgcmV0dXJuO1xyXG4gICAgaWYgKCEkc2NvcGUuZmlsZS50cmFja3NbMF0pIHJldHVybjtcclxuXHJcbiAgICAkc2NvcGUuZmlsZS5tZWFzdXJlQ291bnQgPSBQYXR0ZXJuLmNvbXB1dGVNZWFzdXJlQ291bnQoJHNjb3BlLmZpbGUsICRzY29wZS5maWxlLm1lYXN1cmUpO1xyXG4gIH07XHJcblxyXG4gIHZhciBsYXN0UGxheWluZztcclxuICB2YXIgdHJhY2tNdXRlZCA9IGZ1bmN0aW9uKHRyYWNrKSB7XHJcbiAgICByZXR1cm4gJHNjb3BlLm11dGVkU3RhdGVbJHNjb3BlLmZpbGUudHJhY2tzLmluZGV4T2YodHJhY2spXTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuJG9uKFwiZXZlbnRDaGFuZ2VkXCIsIGZ1bmN0aW9uKGV2dCwgZGF0YSkge1xyXG4gICAgY29tcHV0ZU1lYXN1cmVDb3VudCgpO1xyXG5cclxuICAgIGlmIChkYXRhLm9sZGV2dC5uICE9PSBkYXRhLmV2dC5uICYmICF0cmFja011dGVkKGRhdGEudHJhY2spKSBiZWVwKGluc3RydW1lbnQuZ2V0KGRhdGEudHJhY2spLCBkYXRhLmV2dC5uKTtcclxuXHJcbiAgICAkc2NvcGUuZmlsZUNoYW5nZWQoKTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLiRvbihcImV2ZW50U2VsZWN0ZWRcIiwgZnVuY3Rpb24oZXZ0LCBkYXRhKSB7XHJcbiAgICBpZiAoIXRyYWNrTXV0ZWQoZGF0YS50cmFjaykpIGJlZXAoaW5zdHJ1bWVudC5nZXQoZGF0YS50cmFjayksIGRhdGEuZXZ0Lm4pO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUuJHdhdGNoKFwiZmlsZS5tZWFzdXJlXCIsIGNvbXB1dGVNZWFzdXJlQ291bnQpO1xyXG5cclxuICB2YXIgaW5zdHJ1bWVudCA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG4gICRzY29wZS51cGRhdGVJbnN0cnVtZW50ID0gZnVuY3Rpb24odHJhY2tObykge1xyXG4gICAgaWYgKCEkc2NvcGUuZmlsZS50cmFja3NbdHJhY2tOb10pIHJldHVybjtcclxuICAgIGlmICghJHNjb3BlLmZpbGUudHJhY2tzW3RyYWNrTm9dLmluc3RydW1lbnQpIHJldHVybjtcclxuXHJcbiAgICByZXR1cm4gJHEuYWxsKHtcclxuICAgICAgbXVzaWNPYmplY3Q6IGluc3RTZXQubG9hZCgkc2NvcGUuZmlsZS50cmFja3NbdHJhY2tOb10uaW5zdHJ1bWVudCwgdHJhY2tObyksXHJcbiAgICAgIGluZGV4OiBGaWxlUmVwb3NpdG9yeS5nZXRJbmRleCgkc2NvcGUuZmlsZS50cmFja3NbdHJhY2tOb10uaW5zdHJ1bWVudClcclxuICAgIH0pLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgJHNjb3BlLmluc3RydW1lbnRNYXBbJHNjb3BlLmZpbGUudHJhY2tzW3RyYWNrTm9dLmluc3RydW1lbnRdID0gcmVzdWx0LmluZGV4O1xyXG4gICAgICAgIGlmIChyZXN1bHQubXVzaWNPYmplY3QpIGluc3RydW1lbnQuc2V0KCRzY29wZS5maWxlLnRyYWNrc1t0cmFja05vXSwgcmVzdWx0Lm11c2ljT2JqZWN0KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0Lm11c2ljT2JqZWN0O1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLm9uRHJvcENvbXBsZXRlID0gZnVuY3Rpb24oaW5zdHJ1bWVudCxldmVudCkge1xyXG4gICAgTXVzaWNDb250ZXh0LnJlc3VtZUF1ZGlvKCk7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICBpbnN0cnVtZW50LnR5cGUgIT09ICdpbnN0cnVtZW50JyAmJlxyXG4gICAgICBpbnN0cnVtZW50LnR5cGUgIT09ICd0ZW1wbydcclxuICAgICkgcmV0dXJuO1xyXG5cclxuICAgIHZhciB0cmFja05vID0gJHNjb3BlLmZpbGUuc2VsZWN0ZWRUcmFjaztcclxuXHJcbiAgICAkc2NvcGUuZmlsZS50cmFja3MgPSAkc2NvcGUuZmlsZS50cmFja3MgfHwgW107XHJcbiAgICAkc2NvcGUuZmlsZS50cmFja3NbdHJhY2tOb10gPSAkc2NvcGUuZmlsZS50cmFja3NbdHJhY2tOb10gfHwge307XHJcbiAgICAkc2NvcGUuZmlsZS50cmFja3NbdHJhY2tOb10uaW5zdHJ1bWVudCA9IGluc3RydW1lbnQuaWQ7XHJcblxyXG4gICAgRmlsZVJlcG9zaXRvcnkudXBkYXRlRmlsZShpZCwgJHNjb3BlLmZpbGUpO1xyXG4gICAgJHNjb3BlLnVwZGF0ZUluc3RydW1lbnQodHJhY2tObylcclxuICAgICAgLnRoZW4oZnVuY3Rpb24obXVzaWNPYmplY3QpIHtcclxuICAgICAgICAkc2NvcGUudXBkYXRlTXV0ZWQoKTtcclxuICAgICAgICBpZiAoISRzY29wZS5tdXRlZFN0YXRlW3RyYWNrTm9dKSBiZWVwKG11c2ljT2JqZWN0LCAzNik7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHZhciByZWxvYWRGcm9tUmVwbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgRmlsZVJlcG9zaXRvcnkuZ2V0RmlsZShpZCkudGhlbihmdW5jdGlvbihmaWxlKSB7XHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBvdXRwdXRGaWxlID0ge307XHJcbiAgICAgICAgJHNjb3BlLmZpbGVJbmRleCA9IGZpbGUuaW5kZXg7XHJcbiAgICAgICAgJHNjb3BlLmZpbGUgPSBmaWxlLmNvbnRlbnRzO1xyXG4gICAgICAgICRzY29wZS5tdXRlZFN0YXRlID0gUGF0dGVybi5nZXRNdXRlZFN0YXRlKCRzY29wZS5maWxlKTtcclxuICAgICAgICAkc2NvcGUudXBkYXRlTXV0ZWQoKTtcclxuXHJcbiAgICAgICAgaWYgKCEkc2NvcGUuZmlsZS50cmFja3MpICRzY29wZS5maWxlLnRyYWNrcz1be31dO1xyXG5cclxuICAgICAgICAkc2NvcGUuZmlsZS50cmFja3MuZm9yRWFjaChmdW5jdGlvbih0cmFjaywgaWR4KSB7XHJcbiAgICAgICAgICB0cmFjay5ldmVudHMgPSB0cmFjay5ldmVudHMgfHwgW107XHJcbiAgICAgICAgICAkc2NvcGUudXBkYXRlSW5zdHJ1bWVudChpZHgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJlbG9hZEZyb21SZXBvKCk7XHJcblxyXG4gIC8vIHVuZG8gJiByZWRvXHJcblxyXG4gIHZhciBrZXlEb3duSGFuZGxlciA9IGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIpIHJldHVybjtcclxuXHJcbiAgICBpZiAoZXZ0LmtleUNvZGUgPT09IDkwICYmIGV2dC5jdHJsS2V5KSB7XHJcbiAgICAgIEZpbGVSZXBvc2l0b3J5LnVuZG8oaWQpLnRoZW4ocmVsb2FkRnJvbVJlcG8pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChldnQua2V5Q29kZSA9PT0gODkgJiYgZXZ0LmN0cmxLZXkpIHtcclxuICAgICAgRmlsZVJlcG9zaXRvcnkucmVkbyhpZCkudGhlbihyZWxvYWRGcm9tUmVwbyk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIHBsYXlCdXR0b24gPSAkKFwiYnV0dG9uLnBsYXktYnV0dG9uXCIpO1xyXG5cclxuICBwbGF5QnV0dG9uLmJpbmQoXCJjbGlja1wiLCBNdXNpY0NvbnRleHQucmVzdW1lQXVkaW8pO1xyXG4gICQoZG9jdW1lbnQpLmJpbmQoXCJrZXlkb3duXCIsIGtleURvd25IYW5kbGVyKTtcclxuICAkc2NvcGUuJG9uKFwiJGRlc3Ryb3lcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICBwbGF5QnV0dG9uLnVuYmluZChcImNsaWNrXCIsIE11c2ljQ29udGV4dC5yZXN1bWVBdWRpbyk7XHJcbiAgICAkKGRvY3VtZW50KS51bmJpbmQoXCJrZXlkb3duXCIsIGtleURvd25IYW5kbGVyKTtcclxuXHJcbiAgICBpbnN0U2V0LmRpc3Bvc2UoKTtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLiRvbihcImVuYWJsZVRyYWNrXCIsIGZ1bmN0aW9uKGV2dCwgdHJhY2spIHtcclxuICAgICRzY29wZS5maWxlLnNlbGVjdGVkVHJhY2sgPSAkc2NvcGUuZmlsZS50cmFja3MuaW5kZXhPZih0cmFjayk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS4kb24oXCJwYXR0ZXJuU2VsZWN0RXZlbnRcIiwgZnVuY3Rpb24oZXZ0LCBldmVudCkge1xyXG4gICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICRzY29wZS4kYnJvYWRjYXN0KFwidHJhY2tTZWxlY3RFdmVudFwiLCBldmVudCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufV0pO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5jb250cm9sbGVyKFwiRWRpdG9yQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCIkcVwiLCBcIiR0aW1lb3V0XCIsIFwiJHJvdXRlUGFyYW1zXCIsIFwiJGh0dHBcIiwgXCJNdXNpY0NvbnRleHRcIiwgXCJGaWxlUmVwb3NpdG9yeVwiLCBcIk11c2ljT2JqZWN0RmFjdG9yeVwiLCBcIkV4cG9ydFwiLCBmdW5jdGlvbigkc2NvcGUsICRxLCAkdGltZW91dCwgJHJvdXRlUGFyYW1zLCAkaHR0cCwgTXVzaWNDb250ZXh0LCBGaWxlUmVwb3NpdG9yeSwgTXVzaWNPYmplY3RGYWN0b3J5LCBFeHBvcnQpIHtcclxuICB2YXIgaWQgPSAkcm91dGVQYXJhbXMuaWQ7XHJcbiAgJHNjb3BlLiRlbWl0KCdzd2l0Y2hQcm9qZWN0JywgJHJvdXRlUGFyYW1zLnByb2plY3QpO1xyXG5cclxuICAkc2NvcGUuZXhwb3J0SXRlbSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgRXhwb3J0LmV4cG9ydEZpbGUoJHNjb3BlLmZpbGVJbmRleC5uYW1lLCAkc2NvcGUuZmlsZUluZGV4LmlkKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgZGVzdHJveUFsbCgpO1xyXG5cclxuICAgIGlmICgkc2NvcGUuZmlsZUluZGV4LmJ1aWx0SW4pIHtcclxuICAgICAgJHNjb3BlLmZpbGUgPSBudWxsO1xyXG4gICAgICAkc2NvcGUuZmlsZUluZGV4ID0gbnVsbDtcclxuICAgICAgRmlsZVJlcG9zaXRvcnkuZGVzdHJveUZpbGUoaWQpXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZWxvYWRGcm9tUmVwbygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBGaWxlUmVwb3NpdG9yeS5tb3ZlVG9SZWN5Y2xlQmluKGlkKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSBcIiMvZWRpdG9yL1wiICsgJHJvdXRlUGFyYW1zLnByb2plY3Q7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICBpZiAoZXJyLnR5cGUgJiYgZXJyLnR5cGUgPT09ICdjYW50cmVtb3ZlJykge1xyXG4gICAgICAgICAgICBFcnJNZXNzYWdlKCdjb21tb24uZXJyb3JfdGl0bGUnLCAnY29tbW9uLmNhbnRyZW1vdmVfZXJyb3InKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgbGFzdE9iajtcclxuICB2YXIgbXVzaWNPYmplY3RGYWN0b3J5ID0gTXVzaWNPYmplY3RGYWN0b3J5KHttb25pdG9yOiB0cnVlfSk7XHJcblxyXG4gIHZhciBkZXN0cm95QWxsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAoJHNjb3BlLmluc3RydW1lbnRzfHxbXSkuZm9yRWFjaChmdW5jdGlvbihpbnN0cnVtZW50KSB7XHJcbiAgICAgIGlmIChpbnN0cnVtZW50LmRpc3Bvc2UpIGluc3RydW1lbnQuZGlzcG9zZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgKCRzY29wZS5wbGF5YWJsZXN8fFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHBsYXlhYmxlKSB7XHJcbiAgICAgICRzY29wZS5zdG9wUGxheShwbGF5YWJsZSk7XHJcbiAgICB9KTsgICAgXHJcblxyXG4gICAgcmV0dXJuIG11c2ljT2JqZWN0RmFjdG9yeS5kZXN0cm95QWxsKCk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGxhenlMb2FkSW5zdHJ1bWVudCA9IGZ1bmN0aW9uKGYpIHtcclxuICAgIHZhciBjYWxsU3RvcCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIHAuc3RvcCgpOyB9O1xyXG4gICAgdmFyIGNhbGxQbGF5ID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gcC5wbGF5KCk7IH07XHJcblxyXG4gICAgdmFyIGluc3RydW1lbnRQcm9taXNlO1xyXG4gICAgdmFyIGlubmVySW5zdHJ1bWVudDtcclxuXHJcbiAgICB2YXIgbm90ZSA9IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgaWYgKGlubmVySW5zdHJ1bWVudCkgcmV0dXJuIGlubmVySW5zdHJ1bWVudC5ub3RlKG4pO1xyXG4gICAgICB2YXIgaW5uZXJOb3RlO1xyXG5cclxuICAgICAgaWYgKCFpbnN0cnVtZW50UHJvbWlzZSkge1xyXG4gICAgICAgIGluc3RydW1lbnRQcm9taXNlID0gZigpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpbm5lck5vdGUgPSBpbnN0cnVtZW50UHJvbWlzZS50aGVuKGZ1bmN0aW9uKGluc3QpIHtcclxuICAgICAgICBpbm5lckluc3RydW1lbnQgPSBpbnN0O1xyXG4gICAgICAgIHJldHVybiBpbnN0Lm5vdGUobik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdmFyIHBsYXkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgcGxheWluZyA9IGlubmVyTm90ZS50aGVuKGNhbGxQbGF5KTtcclxuXHJcbiAgICAgICAgdmFyIHN0b3AgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJldHVybiBwbGF5aW5nLnRoZW4oY2FsbFN0b3ApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiB7c3RvcDogc3RvcH07XHJcbiAgICAgIH07XHJcblxyXG4gICAgICByZXR1cm4ge3BsYXk6IHBsYXl9O1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gTVVTSUMuaW5zdHJ1bWVudEV4dGVuZCh7XHJcbiAgICAgIG5vdGU6IG5vdGVcclxuICAgIH0pLnN0b3BEZWxheSgxMCk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGNyZWF0ZUluc3RydW1lbnRGcm9tRmlsZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG11c2ljT2JqZWN0RmFjdG9yeS5jcmVhdGUoJHNjb3BlLmZpbGUpO1xyXG4gIH07XHJcblxyXG4gIHZhciBmaWxlQ2hhbmdlZCA9IGZuLmRlYm91bmNlKGZ1bmN0aW9uKG5ld0ZpbGUsIG9sZEZpbGUpIHtcclxuICAgIGlmICghJHNjb3BlLmZpbGUpIHJldHVybjtcclxuICAgXHJcbiAgICAkcS53aGVuKG51bGwpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBkZXN0cm95QWxsKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBsYXp5TG9hZEluc3RydW1lbnQoY3JlYXRlSW5zdHJ1bWVudEZyb21GaWxlKTtcclxuICAgICAgfSkgICAgXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgaWYgKCFvYmopIHtcclxuICAgICAgICAgICAgJHNjb3BlLmluc3RydW1lbnRzID0gW107XHJcbiAgICAgICAgICAgICRzY29wZS5wbGF5YWJsZXMgPSBbXTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChvYmogIT09IGxhc3RPYmopIHtcclxuICAgICAgICAgICAgJHNjb3BlLmluc3RydW1lbnRzID0gW107XHJcbiAgICAgICAgICAgICRzY29wZS5wbGF5YWJsZXMgPSBbXTtcclxuICAgICAgICAgICAgaWYgKG9iai5ub3RlKSB7XHJcbiAgICAgICAgICAgICAgLy8gaW5zdHJ1bWVudFxyXG4gICAgICAgICAgICAgICRzY29wZS5pbnN0cnVtZW50cy5wdXNoKG9iaik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLnBsYXkpIHtcclxuICAgICAgICAgICAgICAkc2NvcGUucGxheWFibGVzLnB1c2gob2JqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChvbGRGaWxlKSB7XHJcbiAgICAgICAgICAgIEZpbGVSZXBvc2l0b3J5LnVwZGF0ZUZpbGUoaWQsICRzY29wZS5maWxlKTtcclxuICAgICAgICAgICAgJHNjb3BlLmZpbGVJbmRleC51cGRhdGVkID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGxhc3RPYmogPSBvYmo7XHJcbiAgICAgIH0pO1xyXG4gIH0sIDI1MCk7XHJcbiAgJHNjb3BlLiR3YXRjaCgnZmlsZScsIGZpbGVDaGFuZ2VkLCB0cnVlKTtcclxuXHJcbiAgJHNjb3BlLmluZGV4Q2hhbmdlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgRmlsZVJlcG9zaXRvcnkudXBkYXRlSW5kZXgoaWQsICRzY29wZS5maWxlSW5kZXgpO1xyXG4gIH07XHJcblxyXG4gIHZhciByZWxvYWRGcm9tUmVwbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgRmlsZVJlcG9zaXRvcnkuZ2V0RmlsZShpZCkudGhlbihmdW5jdGlvbihmaWxlKSB7XHJcbiAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBvdXRwdXRGaWxlID0ge307XHJcblxyXG4gICAgICAgICRzY29wZS5vdXRwdXRGaWxlID0gb3V0cHV0RmlsZTtcclxuICAgICAgICAkc2NvcGUuZmlsZSA9IGZpbGUuY29udGVudHM7XHJcbiAgICAgICAgJHNjb3BlLmZpbGVJbmRleCA9IGZpbGUuaW5kZXg7XHJcbiAgICAgICAgJHNjb3BlLm9ic2VydmVyID0ge307XHJcblxyXG4gICAgICAgICRzY29wZS5vYnNlcnZlci5ub3RpZnkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuaW5zdHJ1bWVudHMgPSBbXTtcclxuICAgICAgICAgICAgJHNjb3BlLnBsYXlhYmxlcyA9IFtdO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgcmVsb2FkRnJvbVJlcG8oKTtcclxuXHJcbiAgJHNjb3BlLiRvbihcInN0YWNrQ2hhbmdlZFwiLCBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5yZXNldFN0YWNrID0gdHJ1ZTtcclxuICAgIGZpbGVDaGFuZ2VkKCk7XHJcbiAgfSk7XHJcblxyXG4gICRzY29wZS4kb24oXCIkZGVzdHJveVwiLCBkZXN0cm95QWxsKTtcclxuXHJcbiAgJHNjb3BlLnN0YXJ0UGxheSA9IGZ1bmN0aW9uKHBsYXlhYmxlKSB7XHJcbiAgICBwbGF5YWJsZS5wbGF5aW5nID0gcGxheWFibGUucGxheSgpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zdG9wUGxheSA9IGZ1bmN0aW9uKHBsYXlhYmxlKSB7XHJcbiAgICBpZiAoIXBsYXlhYmxlLnBsYXlpbmcpIHJldHVybjtcclxuICAgIHBsYXlhYmxlLnBsYXlpbmcuc3RvcCgpO1xyXG4gICAgcGxheWFibGUucGxheWluZyA9IHVuZGVmaW5lZDtcclxuICB9O1xyXG5cclxufV0pO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5jb250cm9sbGVyKFwiTWFpbkNvbnRyb2xsZXJcIiwgXHJcbiAgW1wiJHFcIiwgXCIkc2NvcGVcIiwgXCIkdGltZW91dFwiLCBcIiR1aWJNb2RhbFwiLCBcIiR0cmFuc2xhdGVcIiwgXCJNdXNpY0NvbnRleHRcIiwgXCJGaWxlUmVwb3NpdG9yeVwiLCBcIlJlY2lwZVwiLCBcIldlbGNvbWVNZXNzYWdlXCIsIFwibG9jYWxmb3JhZ2VcIiwgXCJFeHBvcnRcIiwgXCJFcnJNZXNzYWdlXCIsXHJcbiAgZnVuY3Rpb24oJHEsICRzY29wZSwgJHRpbWVvdXQsICR1aWJNb2RhbCwgJHRyYW5zbGF0ZSwgTXVzaWNDb250ZXh0LCBGaWxlUmVwb3NpdG9yeSwgUmVjaXBlLCBXZWxjb21lTWVzc2FnZSwgbG9jYWxmb3JhZ2UsIEV4cG9ydCwgRXJyTWVzc2FnZSkge1xyXG4gIHZhciBtdXNpYztcclxuXHJcbiAgJHNjb3BlLiRvbihcInN3aXRjaFByb2plY3RcIiwgZnVuY3Rpb24oZXZ0LCBpZCkge1xyXG4gICAgc3dpdGNoUHJvamVjdChpZCk7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBjb25jYXQgPSBmdW5jdGlvbihhLCBiKSB7XHJcbiAgICByZXR1cm4gYS5jb25jYXQoYik7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHN3aXRjaFByb2plY3QgPSBmdW5jdGlvbihwcm9qZWN0SWQpIHtcclxuICAgIHZhciBwRmlsdGVyID0gW3Byb2plY3RJZF07XHJcblxyXG4gICAgcmV0dXJuIEZpbGVSZXBvc2l0b3J5LmdldEZpbGUocHJvamVjdElkKS50aGVuKGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgJHNjb3BlLnByb2plY3QgPSBmaWxlO1xyXG5cclxuICAgICAgcmV0dXJuIChmaWxlLmluZGV4LnJlZnx8W10pLmNvbmNhdChbcHJvamVjdElkXSk7XHJcbiAgICB9KS50aGVuKGZ1bmN0aW9uKGZpbHRlcikge1xyXG4gICAgICAkc2NvcGUucHJvamVjdEZpbHRlciA9IGZpbHRlci5jb25jYXQoWydjb3JlJ10pO1xyXG4gICAgICBpZiAoZmlsdGVyLmluZGV4T2YoJ2RlZmF1bHQnKSAhPT0gLTEpICRzY29wZS5wcm9qZWN0RmlsdGVyLnB1c2godW5kZWZpbmVkKTtcclxuICAgIH0pXHJcbiAgICAudGhlbih1cGRhdGVTZWFyY2gpXHJcbiAgICAuY2F0Y2goZnVuY3Rpb24oKSB7XHJcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uID0gXCIjXCI7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgdXBkYXRlU2VhcmNoID0gZm4uZGVib3VuY2UoZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoY3VycmVudE9ic2VydmVyKSBjdXJyZW50T2JzZXJ2ZXIuY2xvc2UoKTtcclxuICAgIGN1cnJlbnRPYnNlcnZlciA9IEZpbGVSZXBvc2l0b3J5LnNlYXJjaChudWxsLCB7XHJcbiAgICAgIHByb2plY3Q6ICRzY29wZS5wcm9qZWN0RmlsdGVyLCB0eXBlOiBbJ2luc3RydW1lbnQnLCAncGF0dGVybicsICdzb25nJywgJ2Z4J11cclxuICAgIH0pLm9ic2VydmUoZnVuY3Rpb24oZmlsZXMpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHNjb3BlLmZpbGVzVG90YWwgPSBmaWxlcy50b3RhbDtcclxuICAgICAgICAkc2NvcGUuZmlsZXMgPSBmaWxlcy5yZXN1bHRzO1xyXG4gICAgICB9KTsgXHJcbiAgICB9KTtcclxuICB9LDEwMCk7XHJcblxyXG4gIHZhciBjdXJyZW50T2JzZXJ2ZXI7XHJcbiAgJHNjb3BlLmZpbGVJbnB1dENsaWNrID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkdGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgJChcIi5jaG9vc2UtZmlsZS1pbXBvcnQtY29udGFpbmVyIGlucHV0W3R5cGU9ZmlsZV1cIikuY2xpY2soKTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5maWxlSW1wb3J0ID0gZnVuY3Rpb24oZmlsZXMpIHtcclxuICAgIHZhciByZWFkVGV4dEZpbGUgPSBmdW5jdGlvbihmaWxlKSB7XHJcbiAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICByZXNvbHZlKGUudGFyZ2V0LnJlc3VsdCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZmlsZVJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmaWxlUmVhZGVyLnJlYWRBc1RleHQoZmlsZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbmV4dExvY2F0aW9uO1xyXG4gICAgdmFyIGltcG9ydEZpbGUgPSBmdW5jdGlvbihmaWxlKSB7XHJcbiAgICAgIHJldHVybiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlYWRUZXh0RmlsZShmaWxlKVxyXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oanNvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gRXhwb3J0LmltcG9ydEZpbGUoanNvbilcclxuICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnR5cGUgPT09ICdwcm9qZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRMb2NhdGlvbiA9IFwiIy9lZGl0b3IvXCIrIGZpbGUuaWQ7XHJcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dExvY2F0aW9uID0gXCIjL2VkaXRvci9cIisgZmlsZS5wcm9qZWN0ICsgXCIvXCIrIGZpbGUudHlwZSArIFwiL1wiICtmaWxlLmlkO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHAgPSBudWxsO1xyXG4gICAgZm9yICh2YXIgaT0wOyBpPGZpbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChwKSB7XHJcbiAgICAgICAgcCA9IHAudGhlbihpbXBvcnRGaWxlKGZpbGVzW2ldKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcCA9IGltcG9ydEZpbGUoZmlsZXNbaV0pKHtmaXJzdDogdHJ1ZX0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHApIHtcclxuICAgICAgcC50aGVuKGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgaWYgKG5leHRMb2NhdGlvbikgZG9jdW1lbnQubG9jYXRpb24gPSBuZXh0TG9jYXRpb247XHJcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgIHZhciBtb2RhbElucyA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgIHRlbXBsYXRlVXJsOiBcInNpdGUvdGVtcGxhdGVzL21vZGFsL2Vycm9yLmh0bWxcIixcclxuICAgICAgICAgIGNvbnRyb2xsZXI6IFwiZXJyb3JNb2RhbEN0cmxcIixcclxuICAgICAgICAgIHdpbmRvd0NsYXNzOiAnZXJyb3InLFxyXG4gICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICB0ZXh0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gJHRyYW5zbGF0ZSgnY29tbW9uLmxvYWRlcl9lcnJvcicpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0aXRsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuICR0cmFuc2xhdGUoJ2NvbW1vbi5lcnJvcl90aXRsZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5jaGFuZ2VMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XHJcbiAgICBsb2NhbGZvcmFnZS5zZXRJdGVtKCdsYW5nJywgbGFuZ0tleSk7XHJcbiAgICAkdHJhbnNsYXRlLnVzZShsYW5nS2V5KTtcclxuICB9O1xyXG5cclxuICBsb2NhbGZvcmFnZS5nZXRJdGVtKFwibGFuZ1wiKVxyXG4gICAgLnRoZW4oZnVuY3Rpb24oY3VycmVudExhbmd1YWdlKSB7XHJcbiAgICAgIGlmIChjdXJyZW50TGFuZ3VhZ2UpICRzY29wZS5jaGFuZ2VMYW5ndWFnZShjdXJyZW50TGFuZ3VhZ2UpO1xyXG5cclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHNjb3BlLmxhbmdMb2FkZWQgPSB0cnVlO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAkc2NvcGUud2VsY29tZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gc2hvdyB3ZWxjb21lIG1vZGFsXHJcbiAgICB2YXIgbW9kYWxJbnMgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcInNpdGUvdGVtcGxhdGVzL21vZGFsL3dlbGNvbWUuaHRtbFwiLFxyXG4gICAgICBjb250cm9sbGVyOiBcIndlbGNvbWVNb2RhbEN0cmxcIixcclxuICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgIGRvbnRzaG93YWdhaW46IFtcIldlbGNvbWVNZXNzYWdlXCIsIGZ1bmN0aW9uKFdlbGNvbWVNZXNzYWdlKSB7XHJcbiAgICAgICAgICByZXR1cm4gV2VsY29tZU1lc3NhZ2Uuc2tpcCgpO1xyXG4gICAgICAgIH1dXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcbiAgICAgXHJcbiAgJHNjb3BlLm9wZW5SZWN5Y2xlQmluID0gZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBzaG93IHJlY3ljbGUgYmluIG1vZGFsXHJcbiAgICB2YXIgbW9kYWxJbnMgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcInNpdGUvdGVtcGxhdGVzL21vZGFsL3JlY3ljbGVCaW4uaHRtbFwiLFxyXG4gICAgICBjb250cm9sbGVyOiBcInJlY3ljbGVCaW5Nb2RhbEN0cmxcIlxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcblxyXG4gIFdlbGNvbWVNZXNzYWdlLnNraXAoKVxyXG4gICAgLnRoZW4oZnVuY3Rpb24oc2tpcCkge1xyXG4gICAgICBpZiAoIXNraXApICRzY29wZS53ZWxjb21lKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgJHNjb3BlLnJlY2lwZSA9IFJlY2lwZS5zdGFydDtcclxuXHJcbiAgJHNjb3BlLmFjdGl2YXRlID0gZnVuY3Rpb24oZXhhbXBsZSkge1xyXG4gICAgaWYgKGV4YW1wbGUudHlwZSA9PT0gXCJpbnN0cnVtZW50XCJ8fGV4YW1wbGUudHlwZSA9PT0gXCJzb25nXCJ8fGV4YW1wbGUudHlwZSA9PT0gXCJwYXR0ZXJuXCIpIHtcclxuICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSBcIiMvZWRpdG9yL1wiICsgJHNjb3BlLnByb2plY3QuaW5kZXguaWQgKyBcIi9cIiArZXhhbXBsZS50eXBlK1wiL1wiK2V4YW1wbGUuaWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoZXhhbXBsZS50eXBlID09PSBcInByb2plY3RcIikge1xyXG4gICAgICBkb2N1bWVudC5sb2NhdGlvbiA9IFwiIy9lZGl0b3IvXCIgKyBleGFtcGxlLmlkO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gICRzY29wZS5rZXl3b3JkVXBkYXRlZCA9IGZuLmRlYm91bmNlKGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGN1cnJlbnRPYnNlcnZlcikgY3VycmVudE9ic2VydmVyLmNsb3NlKCk7XHJcbiAgICBjdXJyZW50T2JzZXJ2ZXIgPSBGaWxlUmVwb3NpdG9yeS5zZWFyY2goJHNjb3BlLnNlYXJjaEtleXdvcmQsIHtcclxuICAgICAgcHJvamVjdDogJHNjb3BlLnByb2plY3RGaWx0ZXIsIHR5cGU6IFsnaW5zdHJ1bWVudCcsICdwYXR0ZXJuJywgJ3NvbmcnLCAnZngnLCAndGVtcG8nXVxyXG4gICAgfSkub2JzZXJ2ZShmdW5jdGlvbihmaWxlcykge1xyXG4gICAgICAkc2NvcGUuZmlsZXNUb3RhbCA9IGZpbGVzLnRvdGFsO1xyXG4gICAgICAkc2NvcGUuZmlsZXMgPSBmaWxlcy5yZXN1bHRzO1xyXG4gICAgfSk7XHJcbiAgfSwyMDApO1xyXG5cclxuICAkc2NvcGUucmVtb3ZlUHJvamVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgRmlsZVJlcG9zaXRvcnkubW92ZVRvUmVjeWNsZUJpbigkc2NvcGUucHJvamVjdC5pbmRleC5pZClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSBcIiNcIjtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgIGlmIChlcnIudHlwZSAmJiBlcnIudHlwZSA9PT0gJ2NhbnRyZW1vdmUnKSB7XHJcbiAgICAgICAgICBFcnJNZXNzYWdlKCdjb21tb24uZXJyb3JfdGl0bGUnLCAnY29tbW9uLmNhbnRyZW1vdmVfcHJvamVjdF9lcnJvcicpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZXhwb3J0UHJvamVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgRXhwb3J0LmV4cG9ydFByb2plY3QoJHNjb3BlLnByb2plY3QuaW5kZXgubmFtZSwgJHNjb3BlLnByb2plY3QuaW5kZXguaWQpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5wcm9qZWN0U2V0dGluZ3MgPSBmdW5jdGlvbigpIHtcclxuICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgdGVtcGxhdGVVcmw6IFwic2l0ZS90ZW1wbGF0ZXMvbW9kYWwvcHJvamVjdFNldHRpbmdzLmh0bWxcIixcclxuICAgICAgY29udHJvbGxlcjogXCJwcm9qZWN0U2V0dGluZ3NNb2RhbEN0cmxcIixcclxuICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgIHByb2plY3Q6IHtcclxuICAgICAgICAgIG5hbWU6ICRzY29wZS5wcm9qZWN0LmluZGV4Lm5hbWUsXHJcbiAgICAgICAgICByZWY6ICRzY29wZS5wcm9qZWN0LmluZGV4LnJlZlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYnV0dG9uVGV4dDogZnVuY3Rpb24oKSB7IHJldHVybiAnY29tbW9uLm9rJzsgfVxyXG4gICAgICB9XHJcbiAgICB9KS5yZXN1bHQudGhlbihmdW5jdGlvbihwcm9qZWN0KSB7XHJcbiAgICAgICRzY29wZS5wcm9qZWN0LmluZGV4Lm5hbWUgPSBwcm9qZWN0Lm5hbWU7XHJcbiAgICAgIEZpbGVSZXBvc2l0b3J5LnVwZGF0ZUluZGV4KCRzY29wZS5wcm9qZWN0LmluZGV4LmlkLCB7XHJcbiAgICAgICAgdHlwZTogJ3Byb2plY3QnLCBcclxuICAgICAgICBuYW1lOiBwcm9qZWN0Lm5hbWUsXHJcbiAgICAgICAgcmVmOiBwcm9qZWN0LnJlZlxyXG4gICAgICB9KVxyXG4gICAgICAudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICBzd2l0Y2hQcm9qZWN0KCRzY29wZS5wcm9qZWN0LmluZGV4LmlkKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUubmV3UHJvamVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gb3BlbiBcInByb2plY3Qgc2V0dGluZ3NcIiBtb2RhbFxyXG4gICAgJHRyYW5zbGF0ZSgncHJvamVjdC5uZXcnKS50aGVuKGZ1bmN0aW9uKHByb2plY3ROYW1lKSB7XHJcbiAgICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICB0ZW1wbGF0ZVVybDogXCJzaXRlL3RlbXBsYXRlcy9tb2RhbC9wcm9qZWN0U2V0dGluZ3MuaHRtbFwiLFxyXG4gICAgICAgIGNvbnRyb2xsZXI6IFwicHJvamVjdFNldHRpbmdzTW9kYWxDdHJsXCIsXHJcbiAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgcHJvamVjdDoge25hbWU6IHByb2plY3ROYW1lfSxcclxuICAgICAgICAgIGJ1dHRvblRleHQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gJ2NvbW1vbi5jcmVhdGUnOyB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KS5yZXN1bHQudGhlbihmdW5jdGlvbihwcm9qZWN0KSB7XHJcbiAgICAgICAgRmlsZVJlcG9zaXRvcnkuY3JlYXRlRmlsZSh7dHlwZTogJ3Byb2plY3QnLCBuYW1lOiBwcm9qZWN0Lm5hbWUsIHJlZjogcHJvamVjdC5yZWZ9KVxyXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb249XCIjL2VkaXRvci9cIiArIGlkO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLm9wZW5Qcm9qZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgIHRlbXBsYXRlVXJsOiBcInNpdGUvdGVtcGxhdGVzL21vZGFsL29wZW5Qcm9qZWN0Lmh0bWxcIixcclxuICAgICAgY29udHJvbGxlcjogXCJvcGVuUHJvamVjdE1vZGFsQ3RybFwiXHJcbiAgICB9KS5yZXN1bHQudGhlbihmdW5jdGlvbihpZCkge1xyXG4gICAgICB2YXIgbW9yZUltcG9ydGFudCA9IGZ1bmN0aW9uKGZpbGUxLCBmaWxlMikge1xyXG4gICAgICAgIGlmIChmaWxlMS50eXBlICE9PSBmaWxlMi50eXBlKSB7XHJcbiAgICAgICAgICBpZiAoZmlsZTEudHlwZT09PSdzb25nJykgcmV0dXJuIGZpbGUxO1xyXG4gICAgICAgICAgaWYgKGZpbGUyLnR5cGU9PT0nc29uZycpIHJldHVybiBmaWxlMjtcclxuXHJcbiAgICAgICAgICBpZiAoZmlsZTEudHlwZT09PSdwYXR0ZXJuJykgcmV0dXJuIGZpbGUxO1xyXG4gICAgICAgICAgaWYgKGZpbGUyLnR5cGU9PT0ncGF0dGVybicpIHJldHVybiBmaWxlMjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIChmaWxlMS5yZWZ8fFtdKS5sZW5ndGggPiAoZmlsZTIucmVmfHxbXSkubGVuZ3RoID8gZmlsZTEgOiBmaWxlMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmaWxlMjtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vIHN3aXRjaCB0byBtYWluIG9iamVjdFxyXG4gICAgICByZXR1cm4gRmlsZVJlcG9zaXRvcnkuZ2V0UHJvamVjdEZpbGVzKGlkKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGZpbGVzKSB7XHJcbiAgICAgICAgICBpZiAoZmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgYmV0dGVyID0gZmlsZXMucmVkdWNlKG1vcmVJbXBvcnRhbnQsIGZpbGVzWzBdKTtcclxuICAgICAgICAgICAgaWYgKGJldHRlciAmJiBiZXR0ZXIudHlwZSAhPT0gJ3Byb2plY3QnKSB7XHJcbiAgICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSBcIiMvZWRpdG9yL1wiICsgaWQgKyBcIi9cIiArIGJldHRlci50eXBlK1wiL1wiK2JldHRlci5pZDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBkb2N1bWVudC5sb2NhdGlvbiA9IFwiIy9lZGl0b3IvXCIgKyBpZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSBcIiMvZWRpdG9yL1wiICsgaWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUubmV3SW5zdHJ1bWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHRyYW5zbGF0ZShcImNvbW1vbi5uZXdfaW5zdHJ1bWVudFwiKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIEZpbGVSZXBvc2l0b3J5LmNyZWF0ZUZpbGUoe1xyXG4gICAgICAgICAgdHlwZTogXCJpbnN0cnVtZW50XCIsXHJcbiAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgcHJvamVjdDogJHNjb3BlLnByb2plY3QuaW5kZXguaWRcclxuICAgICAgICB9KTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICBkb2N1bWVudC5sb2NhdGlvbiA9IFwiIy9lZGl0b3IvXCIgKyAkc2NvcGUucHJvamVjdC5pbmRleC5pZCArIFwiL2luc3RydW1lbnQvXCIgKyBpZDtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUubmV3U29uZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHRyYW5zbGF0ZShcImNvbW1vbi5uZXdfc29uZ1wiKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIEZpbGVSZXBvc2l0b3J5LmNyZWF0ZUZpbGUoe1xyXG4gICAgICAgICAgdHlwZTogXCJzb25nXCIsIFxyXG4gICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgIHByb2plY3Q6ICRzY29wZS5wcm9qZWN0LmluZGV4LmlkXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgZG9jdW1lbnQubG9jYXRpb24gPSBcIiMvZWRpdG9yL1wiICsgJHNjb3BlLnByb2plY3QuaW5kZXguaWQgKyBcIi9zb25nL1wiK2lkO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUubmV3UGF0dGVybiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHRyYW5zbGF0ZShcImNvbW1vbi5uZXdfcGF0dGVyblwiKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIEZpbGVSZXBvc2l0b3J5LmNyZWF0ZUZpbGUoe1xyXG4gICAgICAgICAgdHlwZTogXCJwYXR0ZXJuXCIsXHJcbiAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgcHJvamVjdDogJHNjb3BlLnByb2plY3QuaW5kZXguaWRcclxuICAgICAgICB9KTtcclxuICAgICAgfSlcclxuICAgICAgLnRoZW4oZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICBkb2N1bWVudC5sb2NhdGlvbiA9IFwiIy9lZGl0b3IvXCIgKyAkc2NvcGUucHJvamVjdC5pbmRleC5pZCArIFwiL3BhdHRlcm4vXCIraWQ7XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG5cclxuICAkc2NvcGUuYWJvdXQgPSBmdW5jdGlvbigpIHtcclxuICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgdGVtcGxhdGVVcmw6IFwic2l0ZS90ZW1wbGF0ZXMvbW9kYWwvYWJvdXQuaHRtbFwiLFxyXG4gICAgICBjb250cm9sbGVyOiBcImluZm9Nb2RhbEN0cmxcIlxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmhlbHAgPSBmdW5jdGlvbigpIHtcclxuICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgdGVtcGxhdGVVcmw6IFwic2l0ZS90ZW1wbGF0ZXMvbW9kYWwvaGVscC5odG1sXCIsXHJcbiAgICAgIGNvbnRyb2xsZXI6IFwiaW5mb01vZGFsQ3RybFwiXHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUudG9kbyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICB0ZW1wbGF0ZVVybDogXCJ0b2RvTW9kYWwuaHRtbFwiLFxyXG4gICAgICBjb250cm9sbGVyOiBcInRvZG9Nb2RhbEN0cmxcIlxyXG4gICAgfSk7XHJcbiAgfTtcclxufV0pO1xyXG5cclxubXVzaWNTaG93Q2FzZUFwcC5jb250cm9sbGVyKFwidG9kb01vZGFsQ3RybFwiLCBbXCIkc2NvcGVcIiwgXCIkdWliTW9kYWxJbnN0YW5jZVwiLCBmdW5jdGlvbigkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgJHNjb3BlLmRpc21pc3MgPSBmdW5jdGlvbigpIHtcclxuICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICB9O1xyXG59XSk7XHJcblxyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5jb250cm9sbGVyKFwiZXJyb3JNb2RhbEN0cmxcIiwgW1wiJHNjb3BlXCIsIFwiJHVpYk1vZGFsSW5zdGFuY2VcIiwgXCJ0ZXh0XCIsIFwidGl0bGVcIiwgZnVuY3Rpb24oJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSwgdGV4dCwgdGl0bGUpIHtcclxuICAkc2NvcGUudGV4dCA9IHRleHQ7XHJcbiAgJHNjb3BlLnRpdGxlID0gdGl0bGU7XHJcbiAgJHNjb3BlLmRpc21pc3MgPSBmdW5jdGlvbigpIHtcclxuICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICB9O1xyXG59XSk7XHJcblxyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5jb250cm9sbGVyKFwiaW5mb01vZGFsQ3RybFwiLCBbXCIkc2NvcGVcIiwgXCIkdWliTW9kYWxJbnN0YW5jZVwiLCBmdW5jdGlvbigkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgJHNjb3BlLmRpc21pc3MgPSBmdW5jdGlvbigpIHtcclxuICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICB9O1xyXG59XSk7XHJcbiIsInZhciBtdXNpY1Nob3dDYXNlQXBwID0gYW5ndWxhci5tb2R1bGUoXCJNdXNpY1Nob3dDYXNlQXBwXCIpO1xyXG5tdXNpY1Nob3dDYXNlQXBwLmNvbnRyb2xsZXIoXCJtaWRpU2V0dGluZ3NNb2RhbEN0cmxcIiwgW1wiJHNjb3BlXCIsIFwiJHFcIiwgXCIkdGltZW91dFwiLCBcIiR1aWJNb2RhbEluc3RhbmNlXCIsIFwiTWlkaVwiLCBmdW5jdGlvbigkc2NvcGUsICRxLCAkdGltZW91dCwgJHVpYk1vZGFsSW5zdGFuY2UsIE1pZGkpIHtcclxuICBNaWRpLmdldElucHV0cygpLnRoZW4oZnVuY3Rpb24oaW5wdXRzKSB7XHJcbiAgICAkc2NvcGUuaW5wdXRzID0gaW5wdXRzO1xyXG4gIH0pO1xyXG5cclxuICBNaWRpLmdldENvbmZpZygpLnRoZW4oZnVuY3Rpb24oY29uZmlnKSB7XHJcbiAgICAkc2NvcGUuY29uZmlnID0gY29uZmlnO1xyXG4gIH0pO1xyXG5cclxuICAkc2NvcGUudXBkYXRlQ29uZmlnID0gZnVuY3Rpb24oKSB7XHJcbiAgICBNaWRpLnNldENvbmZpZygkc2NvcGUuY29uZmlnKTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUuZG9uZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICB9O1xyXG59XSk7XHJcbiIsInZhciBtdXNpY1Nob3dDYXNlQXBwID0gYW5ndWxhci5tb2R1bGUoXCJNdXNpY1Nob3dDYXNlQXBwXCIpO1xyXG5tdXNpY1Nob3dDYXNlQXBwLmNvbnRyb2xsZXIoXCJvcGVuUHJvamVjdE1vZGFsQ3RybFwiLCBbXCIkcVwiLCBcIiRzY29wZVwiLCBcIiR1aWJNb2RhbEluc3RhbmNlXCIsICdGaWxlUmVwb3NpdG9yeScsIGZ1bmN0aW9uKCRxLCAkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlLCBGaWxlUmVwb3NpdG9yeSkge1xyXG4gIHZhciBjdXJyZW50T2JzZXJ2ZXI7XHJcbiAgdmFyIGltbWVkaWF0ZVVwZGF0ZVNlYXJjaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGN1cnJlbnRPYnNlcnZlcikgY3VycmVudE9ic2VydmVyLmNsb3NlKCk7XHJcbiAgICBjdXJyZW50T2JzZXJ2ZXIgPSBGaWxlUmVwb3NpdG9yeS5zZWFyY2goJHNjb3BlLnNlYXJjaEtleXdvcmQsIHt0eXBlOiBbJ3Byb2plY3QnXX0pXHJcbiAgICAgIC5vYnNlcnZlKGZ1bmN0aW9uKGZpbGVzKSB7XHJcbiAgICAgICAgJHNjb3BlLmZpbGVzVG90YWwgPSBmaWxlcy50b3RhbDtcclxuICAgICAgICAkc2NvcGUuZmlsZXMgPSBmaWxlcy5yZXN1bHRzO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUudXBkYXRlU2VhcmNoID0gZm4uZGVib3VuY2UoaW1tZWRpYXRlVXBkYXRlU2VhcmNoLDI1MCk7XHJcbiAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5zZWxlY3QgPSBmdW5jdGlvbihwcm9qZWN0SWQpIHtcclxuICAgICRzY29wZS5zZWxlY3RlZCA9IHByb2plY3RJZDtcclxuICB9O1xyXG5cclxuICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uKHByb2plY3RJZCkge1xyXG4gICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UocHJvamVjdElkKTtcclxuICB9O1xyXG5cclxuICBpbW1lZGlhdGVVcGRhdGVTZWFyY2goKTtcclxufV0pO1xyXG4iLCJ2YXIgbXVzaWNTaG93Q2FzZUFwcCA9IGFuZ3VsYXIubW9kdWxlKFwiTXVzaWNTaG93Q2FzZUFwcFwiKTtcclxubXVzaWNTaG93Q2FzZUFwcC5jb250cm9sbGVyKFwicHJvamVjdFNldHRpbmdzTW9kYWxDdHJsXCIsIFtcIiRxXCIsIFwiJHNjb3BlXCIsIFwiJHVpYk1vZGFsSW5zdGFuY2VcIiwgXCJGaWxlUmVwb3NpdG9yeVwiLCBcInByb2plY3RcIiwgXCJidXR0b25UZXh0XCIsIGZ1bmN0aW9uKCRxLCAkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlLCBGaWxlUmVwb3NpdG9yeSwgcHJvamVjdCwgYnV0dG9uVGV4dCkge1xyXG4gIHZhciBjdXJyZW50T2JzZXJ2ZXI7XHJcbiAgdmFyIGltbWVkaWF0ZVVwZGF0ZVNlYXJjaCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGN1cnJlbnRPYnNlcnZlcikgY3VycmVudE9ic2VydmVyLmNsb3NlKCk7XHJcbiAgICBjdXJyZW50T2JzZXJ2ZXIgPSBGaWxlUmVwb3NpdG9yeS5zZWFyY2goJHNjb3BlLnNlYXJjaEtleXdvcmQsIHt0eXBlOiBbJ3Byb2plY3QnXX0pXHJcbiAgICAgIC5vYnNlcnZlKGZ1bmN0aW9uKGZpbGVzKSB7XHJcbiAgICAgICAgJHNjb3BlLmZpbGVzVG90YWwgPSBmaWxlcy50b3RhbDtcclxuICAgICAgICAkc2NvcGUuZmlsZXMgPSBmaWxlcy5yZXN1bHRzO1xyXG4gICAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUucHJvamVjdCA9IHByb2plY3Q7XHJcbiAgJHNjb3BlLmJ1dHRvblRleHQgPSBidXR0b25UZXh0O1xyXG5cclxuICB2YXIgZ2V0SW5kZXggPSBmdW5jdGlvbihpZCkge1xyXG4gICAgcmV0dXJuIEZpbGVSZXBvc2l0b3J5LmdldEZpbGUoaWQpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgICAgICByZXR1cm4gZmlsZS5pbmRleDtcclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLnJlZnMgPSBbXTtcclxuICAkcS5hbGwoKCRzY29wZS5wcm9qZWN0LnJlZnx8W10pLm1hcChnZXRJbmRleCkpXHJcbiAgICAudGhlbihmdW5jdGlvbihyZWZzKSB7XHJcbiAgICAgICRzY29wZS5yZWZzID0gcmVmc1xyXG4gICAgfSk7XHJcblxyXG4gICRzY29wZS51cGRhdGVTZWFyY2ggPSBmbi5kZWJvdW5jZShpbW1lZGlhdGVVcGRhdGVTZWFyY2gsMjUwKTtcclxuICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmRvbmUgPSBmdW5jdGlvbigpIHtcclxuICAgICRzY29wZS5wcm9qZWN0LnJlZiA9ICRzY29wZS5yZWZzLm1hcChnZXRJZCk7XHJcbiAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgkc2NvcGUucHJvamVjdCk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGdldElkID0gZnVuY3Rpb24oeCkgeyByZXR1cm4geC5pZDsgfTtcclxuICAkc2NvcGUucmVtb3ZlID0gZnVuY3Rpb24oZmlsZSkge1xyXG4gICAgJHNjb3BlLnJlZnMgPSAkc2NvcGUucmVmcy5maWx0ZXIoZnVuY3Rpb24oZikge1xyXG4gICAgICByZXR1cm4gZi5pZCAhPT0gZmlsZS5pZDtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gICRzY29wZS5hZGQgPSBmdW5jdGlvbihmaWxlKSB7XHJcbiAgICBpZiAoJHNjb3BlLnJlZnMubWFwKGdldElkKS5pbmRleE9mKGZpbGUuaWQpID09PSAtMSkge1xyXG4gICAgICAkc2NvcGUucmVmcy5wdXNoKGZpbGUpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGltbWVkaWF0ZVVwZGF0ZVNlYXJjaCgpO1xyXG59XSk7XHJcbiIsInZhciBtdXNpY1Nob3dDYXNlQXBwID0gYW5ndWxhci5tb2R1bGUoXCJNdXNpY1Nob3dDYXNlQXBwXCIpO1xyXG5tdXNpY1Nob3dDYXNlQXBwLmNvbnRyb2xsZXIoXCJyZWN5Y2xlQmluTW9kYWxDdHJsXCIsIFtcIiRzY29wZVwiLCBcIiR0aW1lb3V0XCIsIFwiJHVpYk1vZGFsSW5zdGFuY2VcIiwgXCJGaWxlUmVwb3NpdG9yeVwiLCBmdW5jdGlvbigkc2NvcGUsICR0aW1lb3V0LCAkdWliTW9kYWxJbnN0YW5jZSwgRmlsZVJlcG9zaXRvcnkpIHtcclxuICAkc2NvcGUuZGlzbWlzcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gIH07XHJcblxyXG4gIHZhciBpbW1lZGlhdGVVcGRhdGVTZWFyY2ggPSBmdW5jdGlvbigpIHtcclxuICAgIEZpbGVSZXBvc2l0b3J5LnNlYXJjaFJlY3ljbGVkKCRzY29wZS5zZWFyY2hLZXl3b3JkLCB7bGltaXQ6IDEwfSlcclxuICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0cykge1xyXG4gICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgJHNjb3BlLmZpbGVzID0gcmVzdWx0cy5yZXN1bHRzO1xyXG4gICAgICAgICAgJHNjb3BlLmZpbGVzVG90YWwgPSByZXN1bHRzLnRvdGFsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KVxyXG4gIH07XHJcblxyXG4gICRzY29wZS51cGRhdGVTZWFyY2ggPSBmbi5kZWJvdW5jZShpbW1lZGlhdGVVcGRhdGVTZWFyY2gsMjUwKTtcclxuXHJcbiAgJHNjb3BlLnJlc3RvcmVGcm9tUmVjeWNsZUJpbiA9IGZ1bmN0aW9uKGZpbGUpIHtcclxuICAgIEZpbGVSZXBvc2l0b3J5LnJlc3RvcmVGcm9tUmVjeWNsZUJpbihmaWxlLmlkKS50aGVuKGltbWVkaWF0ZVVwZGF0ZVNlYXJjaCk7XHJcbiAgfTtcclxuXHJcbiAgaW1tZWRpYXRlVXBkYXRlU2VhcmNoKCk7XHJcbn1dKTtcclxuXHJcbiIsInZhciBtdXNpY1Nob3dDYXNlQXBwID0gYW5ndWxhci5tb2R1bGUoXCJNdXNpY1Nob3dDYXNlQXBwXCIpO1xyXG5tdXNpY1Nob3dDYXNlQXBwLmNvbnRyb2xsZXIoXCJ3ZWxjb21lTW9kYWxDdHJsXCIsIFtcIiRxXCIsIFwiJHNjb3BlXCIsIFwiJHVpYk1vZGFsSW5zdGFuY2VcIiwgXCJSZWNpcGVcIiwgXCJXZWxjb21lTWVzc2FnZVwiLCBcImRvbnRzaG93YWdhaW5cIiwgZnVuY3Rpb24oJHEsICRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UsIFJlY2lwZSwgV2VsY29tZU1lc3NhZ2UsIGRvbnRzaG93YWdhaW4pIHtcclxuICAkc2NvcGUuZG9udHNob3dhZ2FpbiA9IGRvbnRzaG93YWdhaW47XHJcblxyXG4gIHZhciBza2lwVXBkYXRlZCA9ICRxLndoZW4obnVsbCk7XHJcbiAgJHNjb3BlLnVwZGF0ZVNraXAgPSBmdW5jdGlvbigpIHtcclxuICAgIHNraXBVcGRhdGVkID0gV2VsY29tZU1lc3NhZ2Uuc2V0U2tpcCgkc2NvcGUuZG9udHNob3dhZ2Fpbik7XHJcbiAgfTtcclxuXHJcbiAgJHNjb3BlLmRpc21pc3MgPSBmdW5jdGlvbigpIHtcclxuICAgIHNraXBVcGRhdGVkXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgfSk7XHJcblxyXG4gIH07XHJcblxyXG4gICRzY29wZS50dXRvcmlhbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgc2tpcFVwZGF0ZWRcclxuICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gICAgICAgIFJlY2lwZS5zdGFydCgnaW50cm8nKTtcclxuICAgICAgfSk7XHJcbiAgfTtcclxufV0pO1xyXG4iXX0=
