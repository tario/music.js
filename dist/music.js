!function(){var n=function(n){var t=[];this.add=function(n){t.push(n)},this.cast=function(i){for(var r=0;r<t.length;r++){var o=t[r],a=o(i);if(a)return a}throw"Can't convert "+i+" to "+n}},t=function(){var t={};this.register=function(i,r){var o;t[i]||(t[i]=new n(i)),o=t[i],o.add(r)},this.cast=function(n,i){var r=t[n];if(!r)throw"unkown type "+n;return r.cast(i)}};window.MUSIC=window.MUSIC||{},window.MUSIC.Types=new t}();
window.MUSIC=window.MUSIC||{},function(){MUSIC.SoundLib=MUSIC.SoundLib||{},MUSIC.Effects=MUSIC.Effects||{},MUSIC.playablePipeExtend=function(n){return n.during=function(n){var t=this;return MUSIC.playablePipeExtend({play:function(){var e=!1,i=t.play(),o={stop:function(){e||i.stop(),e=!0}};return setTimeout(o.stop,n),o},duration:function(){return n}})},n.stopDelay=function(n){var t=this;return MUSIC.playablePipeExtend({play:function(e){var i=t.play(e);return{stop:function(){setTimeout(i.stop.bind(i),n)}}}})},n.onError=function(n){var t=this;return MUSIC.playablePipeExtend({play:function(e){try{var i=t.play(e);return{stop:function(){try{i.stop()}catch(t){console.error(t),n(t)}}}}catch(o){throw console.error(o),n(o),o}}})},n.onStop=function(n){var t=this;return MUSIC.playablePipeExtend({play:function(e){var i=t.play(e);return{stop:function(){i.stop(),n(e)}}}})},n},MUSIC.Types.register("playable",function(n){if(n.play)return n}),MUSIC.Types.register("playable",function(n){if("function"==typeof n)return{play:n}}),MUSIC.EffectsPipeline=function(n,t){this._audio=n,this._audioDestination=t};var n=function(n){return n},t=function(n,t){return function(e){return t(n(e))}};MUSIC.EffectsPipeline.prototype={_wrapFcn:n,wrap:function(e){var i=new MUSIC.DummyNode(this);return this._wrapFcn!==n&&(e=t(e,this._wrapFcn)),i._wrapFcn=function(n){var t=e(n);return t._wrapFcn=i._wrapFcn,t},i},sfxBase:function(){var n=[],t=function(n){n.dispose()},e=function(t){if(!t.dispose)return t;var e=function(n){return n!=t},i=t.dispose;return n.push(t),t.dispose=function(){n=n.filter(e),i.call(t)},t},i=function(){n.forEach(t)},o=this.wrap(e),r=this;return o.getOriginal=function(){return r.getOriginal?r.getOriginal():r},o.prune=i,o},constant:function(n){return this._wrapFcn(new MUSIC.SoundLib.Constant(this._audio,this._audioDestination,n))},oscillator:function(n){return this._wrapFcn(new MUSIC.SoundLib.Oscillator(this._audio,this._audioDestination,n))},soundfont:function(n){return this._wrapFcn(new MUSIC.SoundfontInstrument(n,this._audio,this._audioDestination))},sound:function(n){var t=this._audio,e=this._audioDestination,i=new XMLHttpRequest;i.open("GET",n,!0),i.responseType="arraybuffer";var o;return i.onerror=function(n){console.error(n)},i.onload=function(n){t.audio.decodeAudioData(i.response,function(n){o=n})},i.send(),MUSIC.playablePipeExtend({play:function(){var n=t.audio.createBufferSource();return n.buffer=o,n.connect(e._destination),n.start(t.audio.currentTime),{stop:function(){n.stop(),n.disconnect(e._destination)}}}})},formulaGenerator:function(n){return this._wrapFcn(new MUSIC.SoundLib.FormulaGenerator(this._audio,this._audioDestination,n))},signal_and:function(n){return this.gain(n||1)},signal_nand:function(n){return this.signal_not().signal_and(n||1)},signal_or:function(n){return this.signal_not().signal_nor(n||0)},signal_nor:function(n){var t=function(n){return n.apply?{apply:function(t,e,i){return n.apply(t,e,i,function(n,t){return t(n.signal_not())})}}:n},e=this.signal_and(1),i=function(n){e.update(t(n))};i(n);var o=e.signal_not();return o.update=i,o},signal_not:function(){return this.signal_scale({top:0,base:2})},signal_scale:function(n){var t=this.gain(1),e=this.constant(0),i=t.update.bind(t),o=t.dispose.bind(t),r=e.update.bind(e),a=e.dispose.bind(e),u=function(){o(),a()},s=function(n){var t,e;t=(n.top-n.base)/2,e=n.base+t,i(t),r(e)};return s(n),t.update=s,t.dispose=u,t},T:function(){return this._wrapFcn(new MUSIC.T(arguments,this._audio,this._audioDestination))},noise:function(){return this._wrapFcn(new MUSIC.SoundLib.Noise(this._audio,this._audioDestination))},pink_noise:function(){return this._wrapFcn(new MUSIC.SoundLib.PinkNoise(this._audio,this._audioDestination))},red_noise:function(){return this._wrapFcn(new MUSIC.SoundLib.RedNoise(this._audio,this._audioDestination))}},MUSIC.DummyNode=function(n){MUSIC.EffectsPipeline.apply(this,[n._audio,n._audioDestination])},MUSIC.DummyNode.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.T=function(n,t,e){var i=T("WebAudioAPI:recv",t.audio),o=i.context,r=o.createGain(1);i.recv(r),setTimeout(function(){r.connect(e._destination)});for(var a=[],u=0;u<n.length;u++)a.push(n[u]);a.push(i);var s=T.apply(null,a),c=T("WebAudioAPI:send",s,t.audio).send(e._destination);this.output=function(){return r};var f=!1;this.disconnect=function(){f||(f=!0,r.disconnect(e._destination),c.removeAll(),i.cancel(),c.cancel(),s.unlisten())},this.dispose=this.disconnect,this._destination=r,this.next=function(){return e},MUSIC.EffectsPipeline.bind(this)(t,this)},MUSIC.T.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.Effects.register=function(n,t){MUSIC.EffectsPipeline.prototype[n]=function(n){return this._wrapFcn(t(this._audio,this._audioDestination,n))}};var e=new(window.AudioContext||window.webkitAudioContext);MUSIC.Context=function(n){var t=e,i=this,o=t.createGain();n=n||{},o.gain.value=1,n.nooutput||o.connect(t.destination),i.audio=t,i._destination=o,this.resume=function(){"running"!==e.state&&e.resume()},this.record=function(n,t){var e=new WebAudioRecorder(o,{workerDir:"src/lib/recorder/worker/",encoding:n.encoding,numChannels:n.numChannels});return e.onComplete=function(n,e){t(e)},e.startRecording(),{stop:function(){e.finishRecording()}}},this.audio=t,MUSIC.EffectsPipeline.bind(this)(i,this)},MUSIC.Context.prototype=new MUSIC.EffectsPipeline,MUSIC.SoundLib.FormulaGenerator=function(n,t,e){this.play=function(i){var o=new MUSIC.Effects.Formula(n,t,function(n,t){return e(t)});return{stop:function(){o.disconnect(t._destination)}}},MUSIC.playablePipeExtend(this)},MUSIC.SoundLib.PinkNoise=function(n,t){this.play=function(e){var i,o,r,a,u,s,c;i=o=r=a=u=s=c=0;var f=new MUSIC.Effects.Formula(n,t,function(){var n=2*Math.random()-1;i=.99886*i+.0555179*n,o=.99332*o+.0750759*n,r=.969*r+.153852*n,a=.8665*a+.3104856*n,u=.55*u+.5329522*n,s=-.7616*s-.016898*n;var t=i+o+r+a+u+s+c+.5362*n;return c=.115926*n,.11*t});return{stop:function(){f.disconnect(t._destination)}}},this.setValue=function(){},MUSIC.playablePipeExtend(this)},MUSIC.SoundLib.RedNoise=function(n,t){this.play=function(e){var i=0,o=new MUSIC.Effects.Formula(n,t,function(){var n=2*Math.random()-1,t=(i+.02*n)/1.02;return i=t,3.5*t});return{stop:function(){o.disconnect(t._destination)}}},this.setValue=function(){},MUSIC.playablePipeExtend(this)},MUSIC.SoundLib.Noise=function(n,t){for(var e=n.audio,i=2*e.sampleRate,o=e.createBuffer(1,i,e.sampleRate),r=o.getChannelData(0),a=0;a<i;a++)r[a]=2*Math.random()-1;this.play=function(n){var i=e.createBufferSource();return i.buffer=o,i.loop=!0,i.start(0),i.connect(t._destination),{stop:function(){i.stop(),i.disconnect(t._destination)}}},this.setValue=function(){},MUSIC.playablePipeExtend(this)},MUSIC.SoundLib.Wave=function(n,t){var e=new MUSIC.Context({nooutput:!0}),i=e.sound(n),o=Math.floor(t*e.audio.sampleRate/1e3),r=[];setTimeout(function(){var n=e.record();i.play(),setTimeout(function(){n.stop(),n.getBuffer(function(n){for(var t=n[0],e=0;e<o;e++)r.push(t[e])})},t+100)},500),this.f=function(n){if(n<0)return 0;var t=r[Math.floor(n*o)];return t}},MUSIC.AudioDestinationWrapper=function(n,t){this._destination=t,MUSIC.EffectsPipeline.bind(this)(n,this)},MUSIC.AudioDestinationWrapper.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.modulator=function(n){var t=function(n,t){return t(n)};return{apply:function(e,i,o,r){var a,u;return a=new MUSIC.AudioDestinationWrapper(o,i).sfxBase(),a.audioParamModulation=i,u=(r||t)(a,n),{dispose:function(){a.prune()}}}}},function(){for(var n=128,t=new Float32Array(n),e=0;e<n;e++)t[e]=1;var i;MUSIC.SoundLib.Constant=function(n,e,o){var r,a,u=n._audio.audio;u.createConstantSource?(r=u.createConstantSource(),this._destination=r,r.offset.value=o.offset||0,r.connect(e._destination),r.start()):(r=u.createGain(),a=u.createBufferSource(),r.gain.value=o.offset||0,i||(i=u.createBuffer(1,t.length,n._audio.audio.sampleRate),i.getChannelData(0).set(t)),a.loop=!0,a.buffer=i,a.connect(r),r.connect(e._destination),a.start());var s=function(){};this.setParam=function(t,e){"offset"!==t||u.createConstantSource||(t="gain"),e.apply(n.audio.currentTime,r[t])},this.setParamTarget=function(t,e,i){"offset"!==t||u.createConstantSource||(t="gain");var o=r[t];o.cancelScheduledValues(0),o.setTargetAtTime(e,n.audio.currentTime,i)},this.dispose=function(){u.createConstantSource?r.stop():(a.stop(),a.disconnect(r)),r.disconnect(e._destination),this.dispose=function(){}},this.update=function(n){u.createConstantSource?r.offset.value=n:r.gain.value=n},this.freq=function(n){var t={};return t.setFreq=s,t.reset=s,t.play=function(){return{stop:s}},MUSIC.playablePipeExtend(t),t}}}(),MUSIC.SoundLib.Oscillator=function(n,t,e){e=e||{};var i,o=(e.effects,e.detune),r=e.frequency,a=e.time_constant;i=t._destination,(!isFinite(a)||isNaN(a)||a<=0)&&(a=.01);var u;u=n.audio.createOscillator(),u.connect(i);var s;if(r&&(u.frequency.value=r),o&&(o.apply?s=o.apply(n.audio.currentTime,u.detune,n):u.detune.value=o),"custom"===e.type){var c=new Float32Array(e.terms.sin||[]),f=new Float32Array(e.terms.cos||[]),p=n.audio.createPeriodicWave(c,f);u.setPeriodicWave(p)}else u.type=e.type;if(this.currentTime=function(){return n.audio.currentTime},this.schedule_freq=function(n,t){var e;e=a||.1;var i=function(){},o=function(){return u.frequency.setTargetAtTime(n,t,e),{stop:i}};return{play:o}},this.freq=function(t){var o=e.fixed_frequency?e.fixed_frequency:t;o&&(u.frequency.value=o);var r={};return r.setFreq=function(t,e){r.setFreqOnTime(t,e,n.audio.currentTime)},r.cancelScheduledValues=function(){u.frequency.cancelScheduledValues(0)},r.setFreqOnTime=function(n,t,i){if(!e.fixed_frequency){var o;o=t&&t.tc?t.tc:a||.1,u.frequency.setTargetAtTime(n,i,o)}},r.reset=function(){},r.play=function(n){var t;return t=function(){u&&u.disconnect(i),u=null},u.start(0),{stop:function(){s&&s.dispose&&s.dispose(),u&&u.stop(0),t()}}},MUSIC.playablePipeExtend(r),r},e.f)this.play=function(i){var o,r=e.wtPosition||0,a=e.f,u=0,s=e.frequency;o=s.at?s.at.bind(s):function(n){return s};var c,f=0,p=0;if(r.at)var d=new MUSIC.Effects.Formula(n,t,function(n,t){return f=t-p,u+=f*o(t),u%=1,c=u+r.at(t),c%=1,c<0&&c++,p=t,a(c)});else var d=new MUSIC.Effects.Formula(n,t,function(n,t){return f=t-p,u+=f*o(t),u%=1,c=u+r,c%=1,c<0&&c++,p=t,a(c)});return{stop:function(){d.disconnect(t._destination)}}};else if(e.wave){var d=Object.create(e);d.f=e.wave.f,MUSIC.SoundLib.Oscillator.bind(this)(n,t,d)}},MUSIC.Loop=function(n,t){var e=n.duration();return{play:function(){var i,o=window.performance.now(),r=0;i=n.play();var a=function(){var a=window.performance.now();a-o>r*e&&(setTimeout(function(){i=n.play()},(r+1)*e-a),r++,r==t-1&&clearInterval(u))},u=setInterval(a,e);return{stop:function(){clearInterval(u),i&&i.stop()}}}}},MUSIC.Silence=function(n){return{play:function(){return{stop:function(){}}},duration:function(){return n}}}}();
MUSIC.Effects=MUSIC.Effects||{};var effectsObject={};MUSIC.Effects.forEach=function(e){for(var t in effectsObject)e(t,effectsObject[t])},MUSIC.Effects.WebAudioNodeWrapper=function(e,t,n,i){this._destination=t,setTimeout(function(){t.connect(n._destination)}),this.next=function(){return n};var o=!1;this.disconnect=function(){o||(i&&i(),o=!0,t.disconnect(n._destination))},this.dispose=this.disconnect,this.output=function(){return t},this.currentTime=function(){return e.audio.currentTime},this.setParam=function(n,i){i.apply(e.audio.currentTime,t[n])},this.setParamTarget=function(n,i,o){var a=t[n];a.cancelScheduledValues(0),a.setTargetAtTime(i,e.audio.currentTime,o)},this.record=function(){var e=new Recorder(t,{workerPath:"lib/recorder/recorderWorker.js"});return e.record(),e},MUSIC.EffectsPipeline.bind(this)(e,this)},MUSIC.Effects.WebAudioNodeWrapper.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.Effects.Formula=function(e,t,n){var i=e.audio.createScriptProcessor(1024,1,1),o=0,a=e.audio.sampleRate;i.onaudioprocess=function(e){for(var t=e.inputBuffer,i=e.outputBuffer,r=0;r<i.numberOfChannels;r++)for(var u=t.getChannelData(r),s=i.getChannelData(r),c=0;c<t.length;c++)s[c]=n(u[c],(t.length*o+c)/a);o++},setTimeout(function(){i.connect(t._destination)}),this._destination=i,MUSIC.EffectsPipeline.bind(this)(e,this),this.next=function(){return t};var r=!1;this.disconnect=function(){r||(r=!0,setTimeout(function(){i.disconnect(t._destination)}))},this.dispose=this.disconnect,this.update=function(e){n=e,this.fcn=n},this.fcn=n,this.output=function(){return i},this.isFormula=!0},MUSIC.Effects.Formula.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.Effects.register("formula",function(e,t,n){return new MUSIC.Effects.Formula(e,t,n)}),MUSIC.Effects.BiQuad=function(e,t,n){var i=e.audio.createBiquadFilter(),o=nodispose,a=nodispose,r=nodispose,u=nodispose,s=n.type;this.update=function(t){i.type=s;var n=function(t,n){if(t){if(t.apply)return t.apply(e.audio.currentTime,n,e);n.value=t}return nodispose};o.dispose(),a.dispose(),r.dispose(),u.dispose(),o=n(t.gain,i.gain),a=n(t.Q,i.Q),r=n(t.frequency,i.frequency),u=n(t.detune,i.detune)},this.update(n),MUSIC.Effects.WebAudioNodeWrapper.bind(this)(e,i,t,function(){o.dispose(),a.dispose(),r.dispose(),u.dispose()})},MUSIC.Effects.BiQuad.prototype=Object.create(MUSIC.Effects.WebAudioNodeWrapper.prototype),MUSIC.Effects.register("biquad",MUSIC.Effects.BiQuad),["lowpass","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass"].forEach(function(e){MUSIC.Effects.register(e,function(t,n,i){return new MUSIC.Effects.BiQuad(t,n,{type:e,frequency:i.frequency,Q:i.Q,detune:i.detune})})});var canMutate=function(e,t){return e.update=function(n){return t(n),e},e},nodispose={dispose:function(){}};MUSIC.Effects.register("gain",function(e,t,n){var i=e.audio.createGain(),o=nodispose;return canMutate(new MUSIC.Effects.WebAudioNodeWrapper(e,i,t,function(){o.dispose()}),function(t){o.dispose(),t.apply?(i.gain.value=0,o=t.apply(e.audio.currentTime,i.gain,e)):(o=nodispose,i.gain.value=t)}).update(n)}),MUSIC.Effects.register("delay",function(e,t,n){var i=e.audio.createDelay(60),o=nodispose;return canMutate(new MUSIC.Effects.WebAudioNodeWrapper(e,i,t,function(){o.dispose()}),function(t){o.dispose(),t.apply?o=t.apply(e.audio.currentTime,i.delayTime,e):(o=nodispose,i.delayTime.value=t)}).update(n)});var Echo=function(e,t,n){this.update=function(e){i.delayTime.value=e.delay||.02,r.gain.value=0===e.gain?0:e.gain||.2,i.delayTime.value<.01&&(i.delayTime.value=.01),i.delayTime.value>1&&(i.delayTime.value=1),r.gain.value>.99&&(r.gain.value=.99),r.gain.value<0&&(r.gain.value=0)};var i=e.audio.createDelay(60),o=e.audio.createGain(),a=e.audio.createGain();o.gain.value=1,a.gain.value=1;var r=e.audio.createGain();this.update(n),setTimeout(function(){o.connect(a),o.connect(i),i.connect(r),a.connect(t._destination),a.connect(i),r.connect(a)}),this._destination=o,this.next=function(){return t};var u=!1;this.disconnect=function(){u||(u=!0,o.disconnect(a),o.disconnect(i),i.disconnect(r),a.disconnect(t._destination),a.disconnect(i),r.disconnect(a))},this.dispose=this.disconnect,this.output=function(){return audioNode},this.setParam=function(t,n){n.apply(e.audio.currentTime,audioNode[t])},MUSIC.EffectsPipeline.bind(this)(e,this)};Echo.prototype=Object.create(MUSIC.EffectsPipeline.prototype);var WaveShaper=function(e,t,n){n=n||{};var i=n.samples||8192,o=n.f||function(e){return e},a=function(){for(var e=new Float32Array(i),t=0;t<i;t++)e[t]=o(2*t/i-1);return e};this.next=function(){return t};var r=e.audio.createWaveShaper();r.curve=a(),r.oversample="4x",setTimeout(function(){r.connect(t._destination)}),this._destination=r;var u=!1;this.disconnect=function(){u||(u=!0,r.disconnect(t._destination))},MUSIC.EffectsPipeline.bind(this)(e,this)};WaveShaper.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.Effects.register("echo",function(e,t,n){return new Echo(e,t,n)}),MUSIC.Effects.register("wave_shaper",function(e,t,n){return new WaveShaper(e,t,n)}),MUSIC.Curve=function(e){this.during=during(e)},MUSIC.Curve.concat=function(e,t,n,i,o){var a=t+i;o||(o=Math.floor(100*a)+1);for(var r=function(i){return i<t?e.at(i):n.at(i-t)},u=new Float32Array(o+1),s=0;s<o+1;s++)u[s]=r(a*(s/o));return{apply:function(e,t){t.cancelScheduledValues(0),t.setValueCurveAtTime(u,e,a)},at:r}};var during=function(e,t){return function(n){t||(t=Math.floor(100*n)+1);for(var i=new Float32Array(t+1),o=0;o<t+1;o++)i[o]=e(o/t);return{apply:function(e,t){t.cancelScheduledValues(0),t.setValueCurveAtTime(i,e,n)},at:function(t){return e(t/n)}}}};MUSIC.Curve.Formula=function(e,t){this.during=during(e,t)},MUSIC.Curve.Ramp=function(e,t,n){MUSIC.Curve.Formula.bind(this)(function(n){return e+(t-e)*n},n)},MUSIC.Curve.Periodic=function(e,t){var n,i=0,o=0,a=1/t;t.at?this.at=function(a){return n=a-o,i+=n*t.at(a),i%=1,o=a,e(i)}:this.at=function(t){return i=t%a/a,i<0&&i++,e(i)}},MUSIC.Effects.register("ADSR",function(e,t,n){n=n||{};var i=n.samples||100,o=n.attackTime,a=n.decayTime,r=n.sustainLevel,u=n.releaseTime;void 0===o&&(o=.1),void 0===a&&(a=.1),void 0===r&&(r=.8),void 0===u&&(u=.1);var s=n.node,c=new MUSIC.Curve.Ramp(0,1,i).during(o),f=new MUSIC.Curve.Ramp(1,r,i).during(a),d=MUSIC.Curve.concat(c,o,f,a),p=t.gain(r);return p.setParam("gain",d),s(p).onStop(function(){p.dispose()}).stopDelay(1e3*u).onStop(function(){var e=p._destination.gain.value,t=new MUSIC.Curve.Ramp(e,0,i).during(u);p.setParam("gain",t)})}),MUSIC.Effects.register("stopCurve",function(e,t,n){n=n||{};var i=n.samples||100,o=n.duration||.4,a=n.node,r=new MUSIC.Curve.Ramp(1,0,i).during(o),u=t.gain(1);return a(u).onStop(function(){u.dispose()}).stopDelay(1e3*o).onStop(function(){u.setParam("gain",r)})});
function _typeof(n){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}!function(){var n=function(n){return 16.35*Math.pow(2,n/12)},t={C:0,D:2,E:4,F:5,G:7,A:9,B:11},e=function i(n){var t=function(n,t){return{stop:function(){setTimeout(n.stop.bind(n),t)}}},e=function(n,e){return{play:function(r){var o=n.play(r);return t(o,e)}}};return n.stopDelay=function(t){return i({note:function(r,o){return e(n.note(r,o),t)}})},n.perNoteWrap=function(t){return i({note:function(e,r){return t(n.note(e,r))}})},n.mapNote=function(t){return i({note:function(e,r){return n.note(t(e),r)}})},n.eventPreprocessor||(n.eventPreprocessor=function(n){return n}),n.note||(n.note=function(n,t){return this.schedule_note(n,t,0)}),n};MUSIC.noteToNoteNum=function(n){var e;if(e=t[n.charAt(0)],void 0!==e)return"#"===n.charAt(1)&&e++,"b"===n.charAt(1)&&e--,""!==n.charAt(2)&&(e+=12*parseInt(n.charAt(2))),e},MUSIC.PolyphonyInstrument=function(n,t){var r=[],o=[],u=[],i=function(n){for(var t=0;t<n;t++)if(!o[t])return t;return u[0]||0};this.note=function(e,c){var s=t(),f=i(s),a=r[f];return a||(a=n(),r[f]=a),u.push(f),u.length>s&&u.shift(),o[f]=!0,a.note(e,c).onStop(function(){o[f]=!1})},e(this),this.eventPreprocessor=function(t,e){var o=r[0];return o||(o=n(),r[0]=o),(o.eventPreprocessor||function(n){return n})(t,e)}},MUSIC.MonoNoteInstrument=function(n){var t,r,o=0;this.note=function(e,u){return t||(t=n.note(e,u)),MUSIC.playablePipeExtend({play:function(n){return r||(r=t.play(n)),t.setValue(e,u),o++,{stop:function(){o--,t.reset&&0===o&&t.reset()}}}})},this.currentTime=function(){return n.currentTime()},this.schedule_note=function(e,o,u){return t||(t=n.note(e,o)),MUSIC.playablePipeExtend({play:function(n){return r||(r=t.play(n)),t.setValueOnTime(e,o,u),{stop:function(){t.cancelScheduledValues()}}}})},this.dispose=function(){r&&r.stop(),n.dispose&&n.dispose()},e(this)},MUSIC.Instrument=function(t){t.schedule_freq&&(this.currentTime=function(){return t.currentTime()},this.schedule_note=function(e,r,o,u){if(void 0!==e){var i=n(e);return MUSIC.playablePipeExtend({play:function(n){var e=t.schedule_freq(i,o),r=e.play(n);return{stop:function(){r.stop()}}}})}}),this.note=function(e){if(void 0!==e){var r=n(e);return MUSIC.playablePipeExtend({play:function(e){var o=t.freq(r),u=o.play(e);return o.setFreq&&(this.setValue=function(t,e){o.setFreq(n(t),e)},this.reset=o.reset.bind(o)),o.cancelScheduledValues&&(this.cancelScheduledValues=o.cancelScheduledValues.bind(o)),o.setFreqOnTime&&(this.setValueOnTime=function(t,e,r){o.setFreqOnTime(n(t),e,r)},this.reset=o.reset.bind(o)),{stop:function(){u.stop()}}}})}},e(this)},MUSIC.instrumentExtend=e,MUSIC.Instrument.frequency=n,MUSIC.MultiInstrument=function(n){if(Array.isArray(n))return MUSIC.MultiInstrument.bind(this)(function(){return n});var t=function(n){return n.play()},r=function(n){return n.stop()},o=function(n){this.play=function(){var e=n.map(t);return{stop:function(){e.forEach(r)}}}};this.note=function(t,e){return MUSIC.playablePipeExtend(new o(n().map(function(n){return n.note(t,e)})))},this.dispose=function(){n().forEach(function(n){n.dispose&&n.dispose()})},n().every(function(n){return n.schedule_note})&&(this.currentTime=function(){var t=n().filter(function(n){return n.currentTime})[0];return t?t.currentTime():0},this.schedule_note=function(t,e,r,u){return MUSIC.playablePipeExtend(new o(n().map(function(n){return n.schedule_note(t,e,r,u)})))}),e(this),this.eventPreprocessor=function(t,e){var r=n();if(!r.length)return t;var o=r.map(function(n){return n.eventPreprocessor?n.eventPreprocessor(t,e):t});if(1===o.length)return o[0];for(var u=0,i=0,c=0,s={},f=0;f<o.length;f++){var a=o[f];if(u+=a[0],i+=a[1],c+=a[2],a[3])for(var p in a[3])s[p]=a[3][p]}return[Math.floor(u/o.length),i/o.length,c/o.length,s]}};var r=["C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B"],o=function(n){var t=r[n%12],e=Math.floor(n/12+1);return t+e};MUSIC.PatchInstrument=function(n){var t,r=[];for(var o in n){var u=MUSIC.Types.cast("playable",n[o]);t=MUSIC.noteToNoteNum(o),r[t]=u}this.note=function(n){var t=r[n];return t?MUSIC.playablePipeExtend({play:t.play}):t},e(this)},MUSIC.SoundfontInstrument=function(n,t,r){function u(n){for(var t=window.atob(n),e=t.length,r=new Uint8Array(e),o=0;o<e;o++){var u=t.charCodeAt(o);r[o]=u}return r.buffer}var i=[];t=t.audio;for(var c=0;c<72;c++)!function(){var e=c,r=(new XMLHttpRequest,o(c)),s=n[r],f=s.split(",")[1];t.decodeAudioData(u(f),function(n){i[e]=n},function(n){console.error("error "+n+" loading "+e)})}();this.note=function(n){t.createBufferSource();return MUSIC.playablePipeExtend({play:function(){var e=t.createBufferSource();return e.buffer=i[n],e.connect(r._destination),e.start(0),{stop:function(){e.stop(0),e.disconnect(r._destination)}}}})},e(this)},MUSIC.Types.register("instrument",function(n){if(n.note)return n}),MUSIC.Types.register("instrument",function(n){if(n.freq)return new MUSIC.Instrument(n)}),MUSIC.Types.register("instrument",function(n){if(n.play)return{note:function(){return n}}});var u={play:function(){return{stop:function(){}}}};MUSIC.Types.register("instrument",function(n){if("function"==typeof n)return{note:function(t){return n(t)||u}}}),MUSIC.Types.register("instrument",function(n){if(n instanceof Array)return new MUSIC.MultiInstrument(n)}),MUSIC.Types.register("instrument",function(n){if("object"===_typeof(n)&&n.constructor===Object)return new MUSIC.PatchInstrument(n)}),MUSIC.StopEvent=function(){return function(n){return MUSIC.playablePipeExtend({play:function(){var t={onplay:function(){},onstop:function(){}},e=n.play(t);return t.onplay(),{stop:function(){t.onstop(),e.stop()}}}})}}}();
MUSIC.Effects=MUSIC.Effects||{};var LemonadePlayable=function(t,e,n,a){this._destination=e,this._music=t,this._ops=a,this._output=n};LemonadePlayable.prototype.play=function(){for(var t=this._destination,e=this._ops,n=e.length,a=[],o=[],i=0;i<n;i++)a[i]=0,o[i]=0,e[i].wave=MUSIC.Types.cast("function",e[i].wave);var s=0,u=this._output,l=new MUSIC.Effects.Formula(this._music,t,function(t,i){for(var l=i-s,p=0;p<n;p++){s=i,o[p]=o[p]+l*e[p].frequency.apply(null,a);var r=o[p]%1;r<0&&r++,a[p]=e[p].wave(r)}return u.apply(null,a)});return{stop:function(){l.disconnect(t._destination)}}},MUSIC.playablePipeExtend(LemonadePlayable.prototype),MUSIC.Effects.register("lemonade",function(t,e,n){return new LemonadePlayable(t,e._audioDestination,n.output,n.ops)});
!function(){MUSIC.Math=MUSIC.Math||{},MUSIC.Math.bpmToSecondTick=function(n,t){return 6e4/t/n.ticks_per_beat};var n=function(n){return n=n.map(function(n){var t=r(n.f),i=e(n.f);return{init:t(n.init),end:t(n.end),f:i}}),function(t){var e=n.find(function(n){return t>=n.init&&(!n.end||t<=n.end)});return e?e.f(t):0}},t=function(n){return n=n.map(function(n){return{init:n.init,end:n.end,f:r(n.f)}}),function(t){var e=n.find(function(n){return t>=n.init&&(!n.end||t<=n.end)});return e?e.f(t):0}},e=function a(n){if(2==n.length){var t=n[1],e=n[0];return function(n){return(n-e)/t}}if(3==n.length){var e=n[2],t=n[1],r=n[0];return 0===e?a([r,t]):function(n){return 2*(r-n)/(-t-Math.sqrt(t*t-4*e*(r-n)))}}},r=function(n){if(2==n.length){var t=n[1],e=n[0];return function(n){return t*n+e}}if(3==n.length){var e=n[2],t=n[1],r=n[0];return function(n){return e*n*n+t*n+r}}},i=function(n,t){var e=t[0],r=t[1];if(1==n.length){var i=-n[0]*e+r;return[i,n[0]]}if(2==n.length){var i=r-e*n[0]-e*e*n[1]/2;return[i,n[0],n[1]/2]}};MUSIC.Math.integrateBpmEvents=function(n){var t=function(t){var e=t.l;return n.bpm_events.forEach(function(n){if(n!==t&&n.s>=t.s&&n.s<t.s+e){var r=n.s-t.s;r<e&&(e=r)}}),{s:t.s,l:e,n:Math.max(t.n,1)}};n.bpm_events=n.bpm_events.map(t);for(var e=n.bpm_events[0].s,a=[{init:0,end:e,f:[MUSIC.Math.bpmToSecondTick(n,n.bpm)]}],u=0;u<n.bpm_events.length;u++){var s=n.bpm_events[u],f=n.bpm_events[u+1],p=MUSIC.Math.bpmToSecondTick(n,0==u?n.bpm:n.bpm_events[u-1].n),c=MUSIC.Math.bpmToSecondTick(n,s.n),v=(c-p)/s.l,m=p-v*s.s;0===s.l?a.push({init:s.s,end:f&&f.s,f:[c]}):(a.push({init:s.s,end:s.s+s.l,f:[m,v]}),a.push({init:s.s+s.l,end:f&&f.s,f:[c]}))}for(var o=[],b=[0,0],u=0;u<a.length;u++){var _=a[u],h=i(_.f,b);o.push({init:_.init,end:_.end,f:i(_.f,b)}),b=[_.end,r(h)(_.end)]}return o},MUSIC.Math.ticksToTime=function(n){if(n.start){var e=MUSIC.Math.ticksToTime({bpm:n.bpm,ticks_per_beat:n.ticks_per_beat,bpm_events:n.bpm_events}),r=e(n.start);return function(n){return e(n)-r}}var i=n.bpm,a=n.ticks_per_beat;if(n.bpm_events&&n.bpm_events.length){var u=MUSIC.Math.integrateBpmEvents(n);return t(u)}var s=6e4/i/a;return function(n){return n*s}},MUSIC.Math.timeToTicks=function(t){if(t.start){var e=MUSIC.Math.timeToTicks({bpm:t.bpm,ticks_per_beat:t.ticks_per_beat,bpm_events:t.bpm_events}),r=MUSIC.Math.ticksToTime({bpm:t.bpm,ticks_per_beat:t.ticks_per_beat,bpm_events:t.bpm_events}),i=r(t.start);return function(n){return e(n+i)}}var a=t.bpm,u=t.ticks_per_beat;if(t.bpm_events&&t.bpm_events.length){var s=MUSIC.Math.integrateBpmEvents(t);return n(s)}var f=u*a/6e4;return function(n){return n*f}}}();
!function(){MUSIC.NoteSequence=function(t,e){var n,i=e&&e.songCtx;t||(n=MUSIC.Utils.Clock(window.performance.now.bind(window.performance),setInterval,clearInterval,500),t=MUSIC.Utils.FunctionSeq(n,setTimeout,clearTimeout),t.push({t:0,f:function(){i.referenceInstrument&&(i.sequenceStartTime=i.referenceInstrument.currentTime())},externalSchedule:!0})),this._time=e&&e.time,this._funseq=t,this._totalduration=0,this._noteid=0,this._contextList=[]},MUSIC.NoteSequence.Playable=function(t,e,n,i){this._noteseq=t,this._instrument=e,this._duration=n,this._contextList=i||[]},MUSIC.NoteSequence.Playable.prototype.loop=function(t){return MUSIC.Loop(this,t)},MUSIC.NoteSequence.Playable.prototype.duration=function(){return this._duration},MUSIC.NoteSequence.Playable.prototype.play=function(t){var e=MUSIC.NoteSequence.context(this._instrument,this._contextList);return this._runningFunSeq=this._noteseq._funseq.start(e),new MUSIC.NoteSequence.Playing(this._runningFunSeq,e)},MUSIC.NoteSequence.Playing=function(t,e){this._runningFunSeq=t,this._context=e},MUSIC.NoteSequence.Playing.prototype.stop=function(){this._context.playing&&this._context.playing.stop(),this._context.stop(),this._runningFunSeq.stop()},MUSIC.NoteSequence.prototype.paddingTo=function(t){this._totalduration=this._time(t)},MUSIC.NoteSequence.prototype.padding=function(t){this._totalduration=this._totalduration+t},MUSIC.NoteSequence.prototype.pushCallback=function(t){var e=this._time(t[0]);if(!(e<0)){var n=t[1];this._funseq.push({t:e,f:n})}},MUSIC.NoteSequence.prototype.push=function(t,e){var n=t[0],i=this._time(t[1]),o=this._time(t[1]+t[2])-i;if(i<0){if(i+o<0)return;o+=i,i=0}var s=t[3];this._noteid++;var u=this._noteid;e&&this._contextList.indexOf(e)===-1&&this._contextList.push(e),e&&e.instrument&&e.instrument.schedule_note?(e.instrument.currentTime&&(e.songCtx.referenceInstrument=e.instrument),this._funseq.push({t:i,f:function(t){var r=e.instrument.schedule_note(n,s,e.sequenceStartTime()+i/1e3,o/1e3);e.setPlaying(u,r)},externalSchedule:!0})):(console.warn("UNSUPPORTED WEBAUDIO SCHEDULE FOR note n="+n+" at "+i+" (fallback to setTimeout)"),this._funseq.push({t:i,f:function(t){var i=e||t;if(i.instrument.note){var o=i.instrument.note(n,s);i.setPlaying(u,o)}}}),this._funseq.push({t:i+o,f:function(t){var n=e||t;n.unsetPlaying(u)}})),i+o>this._totalduration&&(this._totalduration=i+o)},MUSIC.NoteSequence.prototype.makePlayable=function(t){return new MUSIC.NoteSequence.Playable(this,t,this._totalduration,this._contextList)},MUSIC.NoteSequence.context=function(t,e,n){var i={},o=function(t,e){i[t]=e.play()},s=function(t){var e=i[t];e&&(e.stop(),delete i[t])},u=function(){if(e)for(var t=0;t<e.length;t++)e[t].stop();for(var n in i)i[n].stop();i={}},r=function(){return n.sequenceStartTime||(n.sequenceStartTime=this.instrument.currentTime()),n.sequenceStartTime};return{sequenceStartTime:r,setPlaying:o,unsetPlaying:s,instrument:t,stop:u,songCtx:n}}}();
!function(){var e=function(e){e.stop()};MUSIC.MultiPlayable=function(e){this._playableArray=e,MUSIC.playablePipeExtend(this)},MUSIC.MultiPlayable.prototype.play=function(n){var t=function(e){return e.play(n)},a=this._playableArray.map(t);return{stop:function(){a.forEach(e)}}};var n=function(e,n){return e>n?e:n},t=function(e){return e&&e.duration?e.duration():0};MUSIC.MultiPlayable.prototype.duration=function(){return this._playableArray.map(t).reduce(n,0)},MUSIC.ChangeTimeWrapper=function(e,n){this._noteseq=e,this._extensionTime=n},MUSIC.ChangeTimeWrapper.prototype.push=function(e){this._noteseq.push([e[0],e[1]*this._extensionTime,e[2]*this._extensionTime])},MUSIC.Pattern=function(e,n){var t=[];return n=n||{},n.pulseTime=n.pulseTime||50,t=e.map(function(e){var t=e[0],a=MUSIC.Types.cast("instrument",e[1]),r=new MUSIC.NoteSequence;return MUSIC.SequenceParser.parse(t,new MUSIC.ChangeTimeWrapper(r,n.pulseTime)),r.makePlayable(a)}),new MUSIC.MultiPlayable(t)}}();
!function(){MUSIC.SequenceParser={};var e={Cb:-1,C:0,"C#":1,Db:1,D:2,"D#":3,Eb:3,E:4,"E#":5,Fb:4,F:5,"F#":6,Gb:6,G:7,"G#":8,Ab:8,A:9,"A#":10,Bb:10,B:11,"B#":12},n=function(e){return"CDEFGAB".indexOf(e)!==-1},r=function(e){for(var r=[],a="",i=0;i<e.length;i++)n(e[i])&&(""!==a&&r.push(a),a="")," "!==e[i]&&"."!==e[i]||(""!==a&&r.push(a),a=""),a+=e[i];return""!==a&&r.push(a),r},a=new RegExp("\\|","g");MUSIC.SequenceParser.parse=function(n,i){var s;if(""!==n){n=n.replace(a,"");for(var u=r(n),t=0,c=0;c<u.length;c++){var f=u[c],h=f.length,l=f.indexOf("=");l!=-1&&(f=f.slice(0,l));var p=f.slice(-1),v=parseInt(p);isNaN(v)?v=0:f=f.slice(0,f.length-1);var s=e[f];void 0!==s&&i.push([s+12*v,t,h]),t+=h}}}}();
!function(){var t=function(t,n,e){this._context={playing:[],onStop:e&&e.onStop},this._patternContexts=n,this._funseqHandler=t.start(this._context)};t.prototype.stop=function(){this._patternContexts&&this._patternContexts.length&&this._patternContexts.forEach(function(t){t.stop()}),this._context.playing.forEach(function(t){t.stop()}),this._funseqHandler.stop(),this._context.onStop&&this._context.onStop()};var n={play:function(){return{stop:function(){}}}},e=function(t){return function(e){return"string"==typeof e?t[e]:e||n}},r={stop:function(){}},o=function(t){return!!t.schedule},i=function(t){return!t.schedule};MUSIC.Song=function(t,n,s){var a,u=this;if(2===arguments.length)return MUSIC.Song.bind(this)(t,{},n);a=n,s=s||{};var c,p=s.pattern||e(a),f=(s.measure||500)*s.ticks_per_beat;if(!c){var h=MUSIC.Utils.Clock(window.performance.now.bind(window.performance),setInterval,clearInterval,500);c=MUSIC.Utils.FunctionSeq(h,setTimeout,clearTimeout)}var l=t[0].length;this._funseq=c;for(var _=function(t,n){return t.s-n.s},S=[],m=0;m<l;m++)for(var v=0;v<t.length;v++){var C=p(t[v][m]);if(C.bpm_events){var g=C.bpm_events.map(function(t){return{n:t.n,s:t.s+m*f,l:t.l}});S=S.concat(g)}}S=S.sort(_);var x=MUSIC.Math.ticksToTime({bpm:s.bpm,ticks_per_beat:s.ticks_per_beat,bpm_events:S,start:s.start||0});this.timeToTicks=function(){return MUSIC.Math.timeToTicks({bpm:s.bpm,ticks_per_beat:s.ticks_per_beat,bpm_events:S,start:s.start||0})};var b=function(t){return function(n){return x(t+n)}};this._duration=x(l*f),this.songCtx={},c.push({t:0,f:function(){u.songCtx.referenceInstrument&&(u.songCtx.sequenceStartTime=u.songCtx.referenceInstrument.currentTime())},externalSchedule:!0});for(var m=0;m<l;m++)!function(){for(var n=[],e=0;e<t.length;e++)n.push(t[e][m]);var s=n.map(p),a=s.filter(o),h=s.filter(i);if(h.length>0){var l=new MUSIC.MultiPlayable(h),_=r,S=l.duration();c.push({t:m*f,f:function(t){_=l.play(),t.playing.push(_)}}),c.push({t:m*f+S,f:function(t){_.stop(),t.playing=t.playing.filter(function(t){return t!=_})}})}a.forEach(function(t){var n=t.schedule(new MUSIC.NoteSequence(c,{time:b(m*f)}),u.songCtx);u._patternContexts=(u._patternContexts||[]).concat(n)})}();c.push({t:b(0)(l*f),f:function(t){t.onStop&&t.onStop()}})},MUSIC.Song.prototype.duration=function(){return this._duration},MUSIC.Song.prototype.play=function(n){return new t(this._funseq,this._patternContexts,n)}}();
!function(){MUSIC.Utils=MUSIC.Utils||{},MUSIC.Utils.Scale=function(t){var n,r;n={},r=[0,2,5,7,9];for(var e=0;e<r.length;e++)n[(t+r[e])%12]=!0;return{add:function(t,r){for(var e=t;r>0;)e+=n[e%12]?2:1,r--;return e}}},MUSIC.Utils.Clock=function(t,n,r,e){var u=function(u){var i=t();u(0);var o=n(function(){var n=t();u(n-i)},e);return{stop:function(){r(o)}}};return{start:u}},MUSIC.Utils.FunctionSeq=function(t,n,r){var e=[],u=function(t){return function(n){return t!=n}},i=function(i){var o=e.slice(0).sort(function(t,n){var r=t.t-n.t;return 0===r?e.indexOf(t)-e.indexOf(n):r}),c=[],f=o.length,a=t.start(function(t){for(var r,e,l=function(n){return n.t-t<1e3&&n.t-t>=0},s=[],v=function(){if(s.length){var r=s;s=[];for(var e=0;e<r.length;e++)r[e].externalSchedule&&r[e].f(i,r[e].t-t);var o=n(function(){c=c.filter(u(o));for(var t=0;t<r.length;t++)r[t].externalSchedule||(r[t].f(i,0),f--,0===f&&a.stop())},r[0].t-t);c.push(o)}},h=function(n){r&&r.t-t!==n.t-t&&v(),s.push(n),r=n};;){if(!(o.length>0))break;if(e=o[0],!l(e))break;h(e),o.shift()}v()});return{stop:function(){for(var t=0;t<c.length;t++)r(c[t]);a.stop()}}},o=e.push.bind(e);return{start:i,push:o}},MUSIC.Utils.FunctionSeq.preciseTimeout=function(t,n){var r;clock=MUSIC.Utils.Clock(window.performance.now.bind(window.performance),setInterval,clearInterval,500),r=MUSIC.Utils.FunctionSeq(clock,setTimeout,clearTimeout);var e;r.push({f:function(){e&&e.stop(),t()},t:n}),e=r.start()},MUSIC.Utils.DelayedFunctionSeq=function(t,n){var r=function(n){return t.start(n)},e=function(r){return t.push({f:r.f,t:r.t+n,externalSchedule:r.externalSchedule})};return{start:r,push:e}}}();
!function(){MUSIC=MUSIC||{},MUSIC.Types.register("function",function(n){if("function"==typeof n.at)return n.at.bind(n)}),MUSIC.Types.register("function",function(n){if("function"==typeof n)return n}),MUSIC.Types.register("wave",function(n){if("function"==typeof n)return new MUSIC.Wave.FunctionWave(n)}),MUSIC.Types.register("wave",function(n){if("function"==typeof n.at)return n});var n=2*Math.PI;MUSIC.Wave={};var t=function(n){return function(){var t=this;return{at:function(e){t.at(n(e))}}}},e={reverse:t(function(n){return n-1}),scale:function(n){var t=this;return new MUSIC.Wave.FunctionWave(function(e){return t.at(e*n)})},translate:function(n){var t=this;return new MUSIC.Wave.FunctionWave(function(e){return t.at(e+n)})},table:function(n){return new MUSIC.Wave.Table(this,n)},combine:function(n,t){var e=this;t=t||.5;var r=1-t;return n=MUSIC.Types.cast("wave",n),new MUSIC.Wave.FunctionWave(function(u){return n.at(u)*t+e.at(u)*r})}},r=function(n){n.length;return function(t){var e=Math.floor(t*n.length);return n[e]}};MUSIC.Wave.Table=function(n,t){t=t||{};for(var e=t.samples||100,u=t.interpolation||r,a=[],i=0;i<e;i++)a[i]=n.at(i/e);this.at=u(a)},MUSIC.Wave.Table.prototype=e,MUSIC.Wave.FunctionWave=function(n){this.at=n},MUSIC.Wave.FunctionWave.prototype=e,MUSIC.Wave.sine=function(){return new MUSIC.Wave.FunctionWave(function(t){return Math.sin(n*t)})},MUSIC.Wave.square=function(n){n=n||{};var t=n.dutyCycle||.5,e=n.dutyLevel||1,r=n.offLevel||-1;return new MUSIC.Wave.FunctionWave(function(n){return n<t?e:r})},MUSIC.Wave.triangle=function(){return new MUSIC.Wave.FunctionWave(function(n){var t=n-.25;return t<0&&t++,t<.5?1-4*t:-1+4*(t-.5)})},MUSIC.Wave.sawtooth=function(){return new MUSIC.Wave.FunctionWave(function(n){return 2*n-1})}}();
MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},MUSIC.Formats.CachedSerializer=function(i){var r,e,a;return{serialize:function(n,s){var t;return a&&e&&(t=JSON.stringify(s),a===n&&e===t)?r:(a=n,e=t||JSON.stringify(s),r=i.serialize(n,s))},deserialize:i.deserialize.bind(i)}};
MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},function(){MUSIC.Formats.HuffmanSerializerWrapper=function(r){var e=[[",",100],["[]",20],["0123456789",10],["abcdef.-{}",4],["t+-*/()<>=? ",1]],n=function(r,e){for(var n="",t=0;t<e;t++)n+=r;return n},t=function(r,e){return r.concat(e)},a=e.map(function(r){return n(r[0],r[1])}).reduce(t);a+="!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";var i=Huffman.treeFromText(a),u=function(e,n){var t=r.serialize(e,n);return i.encode(t)},o=function(e,n){var t=i.decode(n);return r.deserialize(e,t)};return{serialize:u,deserialize:o}}}();
MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},MUSIC.Formats.JSONSerializer={},MUSIC.Formats.JSONSerializer.serialize=function(r,S){return JSON.stringify(S)},MUSIC.Formats.JSONSerializer.deserialize=function(r,S){return JSON.parse(S)};
function _typeof(r){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r})(r)}MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},MUSIC.Formats.MultiSerializer={},function(){var r=[],e=function n(r,e){if(_typeof(r)!==_typeof(e))return!1;if(Array.isArray(r)&&!Array.isArray(e))return!1;if(Array.isArray(e)&&!Array.isArray(r))return!1;if(Array.isArray(r)){if(r.length!==e.length)return!1;for(var t=0;t<r.length;t++)if(!n(r[t],e[t]))return!1;return!0}return"object"===_typeof(r)?Object.keys(r).every(function(t){return n(r[t],e[t])}):r===e};MUSIC.Formats.MultiSerializer.match=e,MUSIC.Formats.MultiSerializer.wrapSerializer=function(r){return{serialize:function(e,t){try{var i=r.serialize(e,t),n=r.deserialize(e,i);return MUSIC.Formats.MultiSerializer.match(t,n)?i:null}catch(a){return null}},deserialize:r.deserialize}};var t=function(r,e){return r.length<e.length?r:e},i=function(r){return!!r};MUSIC.Formats.MultiSerializer.selector=function(r){if(r=r.filter(i),r.length)return r.filter(i).reduce(t);throw new Error("serialization not found")},MUSIC.Formats.MultiSerializer.serialize=function(e,t){return MUSIC.Formats.MultiSerializer.selector(r.map(function(r){var i=r.serializer.serialize(e,t);return i?r.base.concat(i):i}))},MUSIC.Formats.MultiSerializer.deserialize=function(e,t){for(var i=0;i<r.length;i++)if(t[0]===r[i].base)return r[i].serializer.deserialize(e,t.slice(1));throw new Error("Unsupported format")},MUSIC.Formats.MultiSerializer.setSerializers=function(e){r=e.map(function(r){return{serializer:MUSIC.Formats.MultiSerializer.wrapSerializer(r.serializer),base:r.base}})}}();
MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},MUSIC.Formats.PackedJSONSerializer={},function(){var n=function(n){var r=function(r){for(var e=[],a=0;a<n.length;a++){var t=n[a];Array.isArray(t)?e.push(t[1].pack(r[t[0]],r)):null!==r[t]&&void 0!==r[t]&&e.push(r[t])}return e},e=function(r){for(var e={},a=0;a<r.length;a++){var t=n[a];Array.isArray(t)?e[t[0]]=t[1].unpack(r[a],e):null!==r[a]&&void 0!==r[a]&&(e[t]=r[a])}return e};return{pack:r,unpack:e}},r=function(n){var r=function(r){return r.map(n.pack)},e=function(r){return r.map(n.unpack)};return{pack:r,unpack:e}},e=function(n,r){return n.concat(r)},a=function(n,r){var a=function(r){var a=n.pack(r);return a.reduce(e,[])},t=function(e){for(var a=[],t=0;t<e.length;t+=r)a.push(e.slice(t,t+r));return n.unpack(a)};return{pack:a,unpack:t}},t=n(["measure","measureCount","bpm","selectedTrack","scrollLeft",["tracks",a(r(n(["scroll",["events",a(r(n(["n","s","l"])),3)],"instrument"])),3)]]),i=function(n){var r=function(r){var e=[],a=function(n){return n.id?(e.indexOf(n.id)===-1&&e.push(n.id),{id:e.indexOf(n.id)+1}):{id:0}},t=function(n){return{blocks:n.blocks.map(a)}},i={patterns:e,measure:r.measure,bpm:r.bpm,tracks:r.tracks.map(t)};return n.pack(i)},e=function(r){var e=n.unpack(r);return e.tracks.forEach(function(n){n.blocks.forEach(function(n){0===n.id?delete n.id:n.id=e.patterns[n.id-1]})}),{measure:e.measure,bpm:e.bpm,tracks:e.tracks}};return{pack:r,unpack:e}},u=function(n){var r=function(r){var e=n.indexOf(r);return e===-1?r:e},e=function(r){return isNaN(r)?r:n[r]};return{pack:r,unpack:e}},c=function(n,r){var e=function(e,a){var t=r[a[n]];return t?t.pack(e):e},a=function(e,a){var t=r[a[n]];return t?t.unpack(e):e};return{pack:e,unpack:a}},s={pack:function(n){return void 0===n?3:null===n?4:n?1:0},unpack:function(n){if(3!==n)return 4===n?null:1===n}},o=function(n){var r=function(r){return void 0===r?0:null===r?1:n?n.pack(r):r},e=function(r){if(0!==r)return 1===r?null:n?n.unpack(r):r};return{pack:r,unpack:e}},p=i(n(["patterns","measure","bpm",["tracks",a(r(n([["blocks",a(r(n(["id"])),1)]])),1)]])),l={pack:function(n){return S.pack(n)},unpack:function(n){return S.unpack(n)}},f=n([["array",r(l)]]),k=n(["attackTime","decayTime","sustainLevel","releaseTime",["reset_on_cut",s]]),m=n([["oscillatorType",u(["sine","square","sawtooth","triangle","custom"])],["fixed_frequency",s],["frequency",o()],["waveform",o()],["serie",o(n(["sin","cos"]))],["terms",o(n(["sin","cos"]))],["modulation",o(n([["detune",l]]))],"time_constant"]),d=n(["frequency","detune","Q",["modulation",n([["frequency",l],["detune",l],["Q",l]])]]),h=n([]),v=n([["subobjects",a(r(l),2)]]),g=["script","null","oscillator","notesplit","rise","adsr","envelope","transpose","scale","gain","echo","lowpass","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","reverb","noise","pink_noise","red_noise","arpeggiator","stack","multi_instrument","monophoner","polyphoner"],y=n([["force_note_cut",s]]),b=n(["maxChannels"]),S=n([["type",u(g)],["data",c("type",{script:n(["code"]),"null":h,oscillator:m,notesplit:n(["delay"]),rise:n(["time","target"]),adsr:k,envelope:k,transpose:n(["amount"]),scale:n(["base","top"]),gain:n(["gain"]),echo:n(["gain","delay"]),lowpass:d,highpass:d,bandpass:d,lowshelf:d,highshelf:d,peaking:d,notch:d,allpass:d,reverb:n(["room","damp","mix"]),noise:h,pink_noise:h,red_noise:h,arpeggiator:n(["scale","interval","duration","gap"]),stack:f,multi_instrument:v,monophoner:y,polyphoner:b})]]),_={pattern:t,song:p,instrument:S};MUSIC.Formats.PackedJSONSerializer.serialize=function(n,r){if(_[n]){var e=JSON.stringify(_[n].pack(r));return e=e.slice(1,e.length-1)}return JSON.stringify(r)},MUSIC.Formats.PackedJSONSerializer.deserialize=function(n,r){return _[n]?_[n].unpack(JSON.parse("["+r+"]")):JSON.parse(r)}}();
MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},MUSIC.Formats.PackedJSONSerializerB={},function(){var n=function(n){var e=function(e){for(var a=[],t=0;t<n.length;t++){var r=n[t];Array.isArray(r)?a.push(r[1].pack(e[r[0]],e)):null!==e[r]&&void 0!==e[r]&&a.push(e[r])}return a},a=function(e){for(var a={},t=0;t<e.length;t++){var r=n[t];Array.isArray(r)?a[r[0]]=r[1].unpack(e[t],a):null!==e[t]&&void 0!==e[t]&&(a[r]=e[t])}return a};return{pack:e,unpack:a}},e=function(n){var e=function(e){return e.map(n.pack)},a=function(e){return e.map(n.unpack)};return{pack:e,unpack:a}},a=function(n,e){return n.concat(e)},t=function(n,e){var t=function(e){var t=n.pack(e);return t.reduce(a,[])},r=function(a){for(var t=[],r=0;r<a.length;r+=e)t.push(a.slice(r,r+e));return n.unpack(t)};return{pack:t,unpack:r}},r={pack:function(n){return void 0===n?3:null===n?4:n?1:0},unpack:function(n){if(3!==n)return 4===n?null:1===n}},i={pack:function(n){var e=n.n;for(var a in n)"n"!==a&&"s"!==a&&"l"!==a&&(e===n.n&&(e={n:n.n}),e[a]=n[a]);return[e,n.s,n.l]},unpack:function(n){var e=n[0];if("number"==typeof e)return{n:n[0],s:n[1],l:n[2]};var a={};for(var t in e)a[t]=e[t];return a.s=n[1],a.l=n[2],a}},o=n(["measure","measureCount","bpm","selectedTrack","scrollLeft",["tracks",e(n([["muted",r],["solo",r],"scroll",["events",t(e(i),3)],"instrument"]))]]),s=function(n){var e=function(e){var a=[],t=function(n){return n.id?(a.indexOf(n.id)===-1&&a.push(n.id),{id:a.indexOf(n.id)+1}):{id:0}},r=function(n){return{blocks:n.blocks.map(t)}},i={patterns:a,measure:e.measure,bpm:e.bpm,tracks:e.tracks.map(r)};return n.pack(i)},a=function(e){var a=n.unpack(e);return a.tracks.forEach(function(n){n.blocks.forEach(function(n){0===n.id?delete n.id:n.id=a.patterns[n.id-1]})}),{measure:a.measure,bpm:a.bpm,tracks:a.tracks}};return{pack:e,unpack:a}},c=function(n){var e=function(e){var a=n.indexOf(e);return a===-1?e:a},a=function(e){return isNaN(e)?e:n[e]};return{pack:e,unpack:a}},u=function(n,e){var a=function(a,t){var r=e[t[n]];return r?r.pack(a):a},t=function(a,t){var r=e[t[n]];return r?r.unpack(a):a};return{pack:a,unpack:t}},l=function(n){var e=function(e){return void 0===e?0:null===e?1:n?n.pack(e):e},a=function(e){if(0!==e)return 1===e?null:n?n.unpack(e):e};return{pack:e,unpack:a}},p=s(n(["patterns","measure","bpm",["tracks",t(e(n([["blocks",t(e(n(["id"])),1)]])),1)]])),d={pack:function(n){return C.pack(n)},unpack:function(n){return C.unpack(n)}},f=n([["array",e(d)]]),_=n(["attackTime","decayTime","sustainLevel","releaseTime",["reset_on_cut",r]]),m=n([["oscillatorType",c(["sine","square","sawtooth","triangle","custom"])],["fixed_frequency",r],["frequency",l()],["waveform",l()],["serie",l(n(["sin","cos"]))],["terms",l(n(["sin","cos"]))],["modulation",l(n([["detune",d],["pulse_width",l(d)]]))],"time_constant","pulse_width"]),k=n(["frequency","detune","Q",["modulation",n([["frequency",d],["detune",d],["Q",d]])]]),g=n([]),h=n([["subobjects",t(e(d),2)]]),v=["script","null","oscillator","notesplit","rise","adsr","envelope","transpose","scale","gain","echo","lowpass","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","reverb","noise","pink_noise","red_noise","arpeggiator","stack","multi_instrument","monophoner","polyphoner","note_padding","note_condition","signal_monitor","signal_constant","note_delay","sample_rate_reduction","bit_crushing","signal_scale","signal_not","signal_or","signal_and","signal_nor","signal_nand","delay","note_frequency_generator","note_time_shift","wave_shaper"],y=n([["force_note_cut",r]]),b=n(["maxChannels"]),S=n(["time"]),w=function(n){return[n,d]},O=function(e){return l(n(e.map(w)))},C=n([["type",c(v)],["data",u("type",{script:n(["code"]),"null":g,oscillator:m,notesplit:n(["delay"]),rise:n(["time","target"]),adsr:_,envelope:_,transpose:n(["amount"]),scale:n(["base","top"]),gain:n(["gain",["modulation",O(["gain"])]]),echo:n(["gain","delay"]),lowpass:k,highpass:k,bandpass:k,lowshelf:k,highshelf:k,peaking:k,notch:k,allpass:k,reverb:n(["room","damp","mix"]),noise:g,pink_noise:g,red_noise:g,arpeggiator:n(["scale","interval","duration","gap"]),stack:f,multi_instrument:h,monophoner:y,polyphoner:b,note_padding:S,note_condition:n(["note_on","note_off","enter_time_constant","leave_time_constant"]),signal_monitor:g,signal_constant:n(["offset"]),note_delay:n(["delay"]),delay:n(["delay",["modulation",O(["delay"])]]),sample_rate_reduction:n(["factor"]),bit_crushing:n(["bits"]),signal_scale:n(["base","top"]),signal_not:g,signal_or:n(["second_signal",["modulation",O(["second_signal"])]]),signal_and:n(["second_signal",["modulation",O(["second_signal"])]]),signal_nor:n(["second_signal",["modulation",O(["second_signal"])]]),signal_nand:n(["second_signal",["modulation",O(["second_signal"])]]),note_frequency_generator:n(["time_constant"]),note_time_shift:n(["time"]),wave_shaper:n(["samples","f"])})]]),N={pattern:o,song:p,instrument:C};MUSIC.Formats.PackedJSONSerializerB.serialize=function(n,e){if(N[n]){var a=JSON.stringify(N[n].pack(e));return a=a.slice(1,a.length-1)}return JSON.stringify(e)},MUSIC.Formats.PackedJSONSerializerB.deserialize=function(n,e){return N[n]?N[n].unpack(JSON.parse("["+e+"]")):JSON.parse(e)}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
