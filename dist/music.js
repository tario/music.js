var Huffman;Huffman={treeFromText:function(e){var t;return t=new Huffman.TreeBuilder(e),t.build()}},Huffman.CoreHelpers={isArray:function(e){return!(!e||e.constructor!==Array)},lpad:function(e,t){for(t=t||8;e.length<t;)e="0"+e;return e}},Huffman.Tree=function(e){return this.root=e,this.root=this.root||new Huffman.Tree.Node,this},Huffman.Tree.prototype.encode=function(e){return this.bitStringToString(this.encodeBitString(e))},Huffman.Tree.prototype.decode=function(e){var t,r,n,o,f,i,u,a;for(o=this.stringToBitString(e),i="",a=this.root,r=o.split(""),t=0,n=r.length;t<n;t++)u=r[t],f="0"===u?"left":"right",a=a[f],a.isLeaf()&&(i+=a.value,a=this.root);return i},Huffman.Tree.prototype.encodeBitString=function(e){var t,r,n,o,f;for(f="",r=e.split(""),t=0,n=r.length;t<n;t++)o=r[t],f+=this.bitValue(o);return f},Huffman.Tree.prototype.bitStringToString=function(e){var t,r,n,o,f;for(f=8-e.length%8,o=0;0<=f?o<f:o>f;0<=f?o+=1:o-=1)e+="0";return n=function(){for(t=[],r=e.length,o=0;0<=r?o<r:o>r;o+=8)t.push(String.fromCharCode(parseInt(e.substr(o,8),2)));return t}(),n.join("")+f.toString()},Huffman.Tree.prototype.stringToBitString=function(e){var t,r,n,o,f,i,u;return u=e.split(""),i=parseInt(u.pop()),u=function(){for(t=[],n=u,r=0,o=n.length;r<o;r++)f=n[r],t.push(Huffman.CoreHelpers.lpad(f.charCodeAt(0).toString(2)));return t}(),u=u.join(""),u.substr(0,u.length-i)},Huffman.Tree.prototype.bitValue=function(e){var t;return"undefined"!=typeof(t=this.leafCache)&&null!==t||this.generateLeafCache(),this.leafCache[e]},Huffman.Tree.prototype.generateLeafCache=function(e,t){return this.leafCache="undefined"!=typeof this.leafCache&&null!==this.leafCache?this.leafCache:{},e=e||this.root,t=t||"",e.isLeaf()?this.leafCache[e.value]=t:(this.generateLeafCache(e.left,t+"0"),this.generateLeafCache(e.right,t+"1"))},Huffman.Tree.prototype.encodeTree=function(){return this.root.encode()},Huffman.Tree.decodeTree=function(e){return new Huffman.Tree(Huffman.Tree.parseNode(e))},Huffman.Tree.parseNode=function(e){var t;return t=new Huffman.Tree.Node,Huffman.CoreHelpers.isArray(e)?(t.left=Huffman.Tree.parseNode(e[0]),t.right=Huffman.Tree.parseNode(e[1])):t.value=e,t},Huffman.Tree.Node=function(){return this.left=this.right=this.value=null,this},Huffman.Tree.Node.prototype.isLeaf=function(){return this.left===this.right&&null===this.right},Huffman.Tree.Node.prototype.encode=function(){return this.value?this.value:[this.left.encode(),this.right.encode()]};var __hasProp=Object.prototype.hasOwnProperty;Huffman.TreeBuilder=function(e){return this.text=e,this},Huffman.TreeBuilder.prototype.build=function(){var e,t;return t=this.buildFrequencyTable(),e=this.combineTable(t),Huffman.Tree.decodeTree(this.compressCombinedTable(e))},Huffman.TreeBuilder.prototype.buildFrequencyTable=function(){var e,t,r,n,o,f,i,u;for(u={},t=this.text.split(""),e=0,r=t.length;e<r;e++)o=t[e],u[o]="undefined"!=typeof u[o]&&null!==u[o]?u[o]:0,u[o]+=1;i=[],n=u;for(o in n)__hasProp.call(n,o)&&(f=n[o],i.push([f,o]));return i.sort(this.frequencySorter),i},Huffman.TreeBuilder.prototype.frequencySorter=function(e,t){return e[0]>t[0]?1:e[0]<t[0]?-1:0},Huffman.TreeBuilder.prototype.combineTable=function(e){for(var t,r;e.length>1;)t=e.shift(),r=e.shift(),e.push([t[0]+r[0],[t,r]]),e.sort(this.frequencySorter);return e[0]},Huffman.TreeBuilder.prototype.compressCombinedTable=function(e){var t;return t=e[1],Huffman.CoreHelpers.isArray(t)?[this.compressCombinedTable(t[0]),this.compressCombinedTable(t[1])]:t};
!function(t){var e="recorderWorker.js",n=function(t,n){var o=n||{},a=o.bufferLen||4096;this.context=t.context,this.node=(this.context.createScriptProcessor||this.context.createJavaScriptNode).call(this.context,a,2,2);var c=new Worker(o.workerPath||e);c.postMessage({command:"init",config:{sampleRate:this.context.sampleRate}});var r,i=!1;this.node.onaudioprocess=function(t){i&&c.postMessage({command:"record",buffer:[t.inputBuffer.getChannelData(0),t.inputBuffer.getChannelData(1)]})},this.configure=function(t){for(var e in t)t.hasOwnProperty(e)&&(o[e]=t[e])},this.record=function(){i=!0},this.stop=function(){i=!1},this.clear=function(){c.postMessage({command:"clear"})},this.getBuffer=function(t){r=t||o.callback,c.postMessage({command:"getBuffer"})},this.exportWAV=function(t,e){if(r=t||o.callback,e=e||o.type||"audio/wav",!r)throw new Error("Callback not set");c.postMessage({command:"exportWAV",type:e})},c.onmessage=function(t){var e=t.data;r(e)},t.connect(this.node),this.node.connect(this.context.destination)};n.forceDownload=function(e,n){var o=(t.URL||t.webkitURL).createObjectURL(e),a=t.document.createElement("a");a.href=o,a.download=n||"output.wav";var c=document.createEvent("Event");c.initEvent("click",!0,!0),a.dispatchEvent(c)},t.Recorder=n}(window);
!function(t){"use strict";var e=function(){return g.apply(null,arguments)},i=Array.prototype.slice,s=0,n=1,r=2,a=3,o=[8e3,11025,12e3,16e3,22050,24e3,32e3,44100,48e3],h=[32,64,128,256],u="14.11.25",l=null,c={},f={},p="undefined"!=typeof window?"browser":"undefined"!=typeof module&&module.exports?"node":"unknown",d="browser"===p&&/(iPhone|iPad|iPod|Android)/i.test(navigator.userAgent),v=!1,m=120,g=function(){var e,s,n=i.call(arguments),r=n[0];switch(typeof r){case"string":c[r]?e=new c[r](n.slice(1)):f[r]?e=f[r](n.slice(1)):(s=/^(.+?)(?:\.(ar|kr))?$/.exec(r),s&&(r=s[1],c[r]?e=new c[r](n.slice(1)):f[r]&&(e=f[r](n.slice(1))),e&&s[2]&&e[s[2]]()));break;case"number":e=new O(n);break;case"boolean":e=new D(n);break;case"function":e=new M(n);break;case"object":if(null!==r){if(r instanceof T)return r;if(r.context instanceof T)return r.context;w(r)?e=new j(n):y(r)&&(e=new L(n))}}e===t&&(e=new R(n.slice(1)),console.warn('T("'+r+'") is not defined.'));var a=e._;return a.originkey=r,a.meta=b(e),a.emit("init"),e},b=function(t){for(var e,i,s=t._.meta,n=t;null!==n&&n.constructor!==Object;){e=Object.getOwnPropertyNames(n);for(var r=0,a=e.length;r<a;++r)s[e[r]]||(/^(constructor$|process$|_)/.test(e[r])?s[e[r]]="ignore":(i=Object.getOwnPropertyDescriptor(n,e[r]),"function"==typeof i.value?s[e[r]]="function":(i.get||i.set)&&(s[e[r]]="property")));n=Object.getPrototypeOf(n)}return s};Object.defineProperties(e,{version:{value:u},envtype:{value:p},envmobile:{value:d},env:{get:function(){return l.impl.env}},samplerate:{get:function(){return l.samplerate}},channels:{get:function(){return l.channels}},cellsize:{get:function(){return l.cellsize}},currentTime:{get:function(){return l.currentTime}},isPlaying:{get:function(){return l.status===n}},isRecording:{get:function(){return l.status===a}},amp:{set:function(t){"number"==typeof t&&(l.amp=t)},get:function(){return l.amp}},bpm:{set:function(t){"number"==typeof t&&5<=t&&t<=300&&(m=t)},get:function(){return m}}}),e.bind=function(t,i){return l.bind(t,i),e},e.setup=function(t){return l.setup(t),e},e.play=function(){return l.play(),e},e.pause=function(){return l.pause(),e},e.reset=function(){return l.reset(),l.events.emit("reset"),e},e.on=e.addListener=function(t,i){return l.on(t,i),e},e.once=function(t,i){return l.once(t,i),e},e.off=e.removeListener=function(t,i){return l.off(t,i),e},e.removeAllListeners=function(t){return l.removeAllListeners(t),e},e.listeners=function(t){return l.listeners(t)},e.rec=function(){return l.rec.apply(l,arguments)},e.timevalue=function(){var t=function(t){var e,i=m;return(e=/^bpm(\d+(?:\.\d+)?)/i.exec(t))&&(i=Math.max(5,Math.min(300,+(e[1]||0)))),i};return function(i){var s,n,r;if(s=/^(\d+(?:\.\d+)?)Hz$/i.exec(i))return 0===+s[1]?0:1e3/+s[1];if(s=/L(\d+)?(\.*)$/i.exec(i))return n=60/t(i)*(4/(s[1]||4))*1e3,n*=2-1/Math.pow(2,(s[2]||"").length);if(s=/^(\d+(?:\.\d+)?|\.(?:\d+))(min|sec|m)s?$/i.exec(i))switch(s[2]){case"min":return 60*+(s[1]||0)*1e3;case"sec":return 1e3*+(s[1]||0);case"m":return+(s[1]||0)}return(s=/^(?:([0-5]?[0-9]):)?(?:([0-5]?[0-9]):)(?:([0-5]?[0-9]))(?:\.([0-9]{1,3}))?$/.exec(i))?(r=3600*(s[1]||0)+60*(s[2]||0)+(s[3]||0),r=1e3*r+(0|((s[4]||"")+"00").substr(0,3))):(s=/(\d+)\.(\d+)\.(\d+)$/i.exec(i))?(r=480*(4*s[1]+ +s[2])+ +s[3],60/t(i)*(r/480)*1e3):(s=/(\d+)ticks$/i.exec(i))?60/t(i)*(s[1]/480)*1e3:(s=/^(\d+)samples(?:\/(\d+)Hz)?$/i.exec(i))?1e3*s[1]/(s[2]||e.samplerate):0}}();var _=e.fn={SignalArray:Float32Array,currentTimeIncr:0,emptycell:null,FINISHED_STATE:s,PLAYING_STATE:n,UNSCHEDULED_STATE:r,SCHEDULED_STATE:a},y=_.isArray=Array.isArray,w=_.isDictionary=function(t){return"object"==typeof t&&t.constructor===Object};_.nop=function(){return this},_.isSignalArray=function(t){return t instanceof _.SignalArray||!(!Array.isArray(t)||!t.__klass||2!==t.__klass.type)},_.extend=function(t,e){function i(){this.constructor=t}e=e||T;for(var s in e)e.hasOwnProperty(s)&&(t[s]=e[s]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},_.constructorof=function(t,e){for(var i=t&&t.prototype;i;){if(i===e.prototype)return!0;i=Object.getPrototypeOf(i)}return!1},_.register=function(t,e){_.constructorof(e,T)?c[t]=e:f[t]=e},_.alias=function(t,e){c[e]?c[t]=c[e]:f[e]&&(f[t]=f[e])},_.getClass=function(t){return c[t]},_.pointer=function(t,e,i){return e=t.byteOffset+e*t.constructor.BYTES_PER_ELEMENT,"number"==typeof i?new t.constructor(t.buffer,e,i):new t.constructor(t.buffer,e)},_.nextTick=function(t){return l.nextTick(t),e},_.fixAR=function(t){t._.ar=!0,t._.aronly=!0},_.fixKR=function(t){t._.ar=!1,t._.kronly=!0},_.changeWithValue=function(){var t=this._,e=t.value*t.mul+t.add;isNaN(e)&&(e=0);for(var i=this.cells[0],s=0,n=i.length;s<n;++s)i[s]=e},_.changeWithValue.unremovable=!0,_.clone=function(t){var e=new t.constructor([]);return e._.ar=t._.ar,e._.mul=t._.mul,e._.add=t._.add,e._.bypassed=t._.bypassed,e},_.timer=function(){var t=function(t){return function(){l.timers.indexOf(t)===-1&&(l.timers.push(t),l.events.emit("addObject"),t._.emit("start"),_.buddies_start(t))}},e=function(t){return function(){var e=l.timers.indexOf(t);e!==-1&&(l.timers.splice(e,1),t._.emit("stop"),l.events.emit("removeObject"),_.buddies_stop(t))}};return function(i){var s=t(i),n=e(i);return i.nodeType=T.TIMER,i.start=function(){return l.nextTick(s),i},i.stop=function(){return l.nextTick(n),i},i}}(),_.listener=function(){var t=function(t){return function(){l.listeners.indexOf(t)===-1&&(l.listeners.push(t),l.events.emit("addObject"),t._.emit("listen"),_.buddies_start(t))}},e=function(t){return function(){var e=l.listeners.indexOf(t);e!==-1&&(l.listeners.splice(e,1),t._.emit("unlisten"),l.events.emit("removeObject"),_.buddies_stop(t))}};return function(i){var s=t(i),n=e(i);return i.nodeType=T.LISTENER,i.listen=function(t){return arguments.length&&i.append.apply(i,arguments),i.nodes.length&&l.nextTick(s),i},i.unlisten=function(){return arguments.length&&i.remove.apply(i,arguments),i.nodes.length||l.nextTick(n),i},i}}(),_.make_onended=function(t,e){return function(){if(t.playbackState=s,"number"==typeof e)for(var i=t.cells[0],n=t.cells[1],r=t.cells[2],a=0,o=n.length;a<o;++a)i[0]=n[a]=r[a]=e;t._.emit("ended")}},_.inputSignalAR=function(t){var e,i,s,r,a,o,h=t.cells[0],u=t.cells[1],l=t.cells[2],c=t.nodes,f=c.length,p=h.length,d=t.tickID;if(2===t.numChannels){if(s=!0,0!==f){for(e=0;e<f;++e)if(c[e].playbackState===n){c[e].process(d),u.set(c[e].cells[1]),l.set(c[e].cells[2]),s=!1,++e;break}for(;e<f;++e)if(c[e].playbackState===n)for(c[e].process(d),a=c[e].cells[1],o=c[e].cells[2],i=p;i;)i-=8,u[i]+=a[i],l[i]+=o[i],u[i+1]+=a[i+1],l[i+1]+=o[i+1],u[i+2]+=a[i+2],l[i+2]+=o[i+2],u[i+3]+=a[i+3],l[i+3]+=o[i+3],u[i+4]+=a[i+4],l[i+4]+=o[i+4],u[i+5]+=a[i+5],l[i+5]+=o[i+5],u[i+6]+=a[i+6],l[i+6]+=o[i+6],u[i+7]+=a[i+7],l[i+7]+=o[i+7]}s&&(u.set(_.emptycell),l.set(_.emptycell))}else{if(s=!0,0!==f){for(e=0;e<f;++e)if(c[e].playbackState===n){c[e].process(d),h.set(c[e].cells[0]),s=!1,++e;break}for(;e<f;++e)if(c[e].playbackState===n)for(r=c[e].process(d).cells[0],i=p;i;)i-=8,h[i]+=r[i],h[i+1]+=r[i+1],h[i+2]+=r[i+2],h[i+3]+=r[i+3],h[i+4]+=r[i+4],h[i+5]+=r[i+5],h[i+6]+=r[i+6],h[i+7]+=r[i+7]}s&&h.set(_.emptycell)}},_.inputSignalKR=function(t){var e,i=t.nodes,s=i.length,r=t.tickID,a=0;for(e=0;e<s;++e)i[e].playbackState===n&&(a+=i[e].process(r).cells[0][0]);return a},_.outputSignalAR=function(t){var e,i=t.cells[0],s=t.cells[1],n=t.cells[2],r=t._.mul,a=t._.add;if(2===t.numChannels)for(e=i.length;e;)e-=8,s[e]=s[e]*r+a,n[e]=n[e]*r+a,s[e+1]=s[e+1]*r+a,n[e+1]=n[e+1]*r+a,s[e+2]=s[e+2]*r+a,n[e+2]=n[e+2]*r+a,s[e+3]=s[e+3]*r+a,n[e+3]=n[e+3]*r+a,s[e+4]=s[e+4]*r+a,n[e+4]=n[e+4]*r+a,s[e+5]=s[e+5]*r+a,n[e+5]=n[e+5]*r+a,s[e+6]=s[e+6]*r+a,n[e+6]=n[e+6]*r+a,s[e+7]=s[e+7]*r+a,n[e+7]=n[e+7]*r+a,i[e]=.5*(s[e]+n[e]),i[e+1]=.5*(s[e+1]+n[e+1]),i[e+2]=.5*(s[e+2]+n[e+2]),i[e+3]=.5*(s[e+3]+n[e+3]),i[e+4]=.5*(s[e+4]+n[e+4]),i[e+5]=.5*(s[e+5]+n[e+5]),i[e+6]=.5*(s[e+6]+n[e+6]),i[e+7]=.5*(s[e+7]+n[e+7]);else if(1!==r||0!==a)for(e=i.length;e;)e-=8,i[e]=i[e]*r+a,i[e+1]=i[e+1]*r+a,i[e+2]=i[e+2]*r+a,i[e+3]=i[e+3]*r+a,i[e+4]=i[e+4]*r+a,i[e+5]=i[e+5]*r+a,i[e+6]=i[e+6]*r+a,i[e+7]=i[e+7]*r+a},_.outputSignalKR=function(t){var e,i=t.cells[0],s=t.cells[1],n=t.cells[2],r=t._.mul,a=t._.add,o=i[0]*r+a;if(2===t.numChannels)for(e=i.length;e;)e-=8,i[e]=i[e+1]=i[e+2]=i[e+3]=i[e+4]=i[e+5]=i[e+6]=i[e+7]=s[e]=s[e+1]=s[e+2]=s[e+3]=s[e+4]=s[e+5]=s[e+6]=s[e+7]=n[e]=n[e+1]=n[e+2]=n[e+3]=n[e+4]=n[e+5]=n[e+6]=n[e+7]=o;else for(e=i.length;e;)e-=8,i[e]=i[e+1]=i[e+2]=i[e+3]=i[e+4]=i[e+5]=i[e+6]=i[e+7]=o},_.buddies_start=function(t){var e,i,s,n=t._.buddies;for(i=0,s=n.length;i<s;++i)switch(e=n[i],e.nodeType){case T.DSP:e.play();break;case T.TIMER:e.start();break;case T.LISTENER:e.listen()}},_.buddies_stop=function(t){var e,i,s,n=t._.buddies;for(i=0,s=n.length;i<s;++i)switch(e=n[i],e.nodeType){case T.DSP:e.pause();break;case T.TIMER:e.stop();break;case T.LISTENER:e.unlisten()}},_.fix_iOS6_1_problem=function(t){l.fix_iOS6_1_problem(t)};var x,k=e.modules={},A=k.EventEmitter=function(){function t(t){this.context=t,this.events={}}var e=t.prototype;return e.emit=function(t){var e=this.events[t];if(!e)return!1;var s;if("function"==typeof e){switch(arguments.length){case 1:e.call(this.context);break;case 2:e.call(this.context,arguments[1]);break;case 3:e.call(this.context,arguments[1],arguments[2]);break;default:s=i.call(arguments,1),e.apply(this.context,s)}return!0}if(y(e)){s=i.call(arguments,1);for(var n=e.slice(),r=0,a=n.length;r<a;++r)n[r]instanceof T?n[r].bang.apply(n[r],s):n[r].apply(this.context,s);return!0}return e instanceof T&&(s=i.call(arguments,1),void e.bang.apply(e,s))},e.on=function(t,e){if("function"!=typeof e&&!(e instanceof T))throw new Error("addListener takes instances of Function or timbre.Object");var i=this.events;return i[t]?y(i[t])?i[t].push(e):i[t]=[i[t],e]:i[t]=e,this},e.once=function(t,e){var i,s=this;if("function"==typeof e)i=function(){s.off(t,i),e.apply(s.context,arguments)};else{if(!(e instanceof T))throw new Error("once takes instances of Function or timbre.Object");i=function(){s.off(t,i),e.bang.apply(e,arguments)}}return i.listener=e,s.on(t,i),this},e.off=function(t,e){if("function"!=typeof e&&!(e instanceof T))throw new Error("removeListener takes instances of Function or timbre.Object");var i=this.events;if(!i[t])return this;var s=i[t];if(y(s)){for(var n=-1,r=0,a=s.length;r<a;++r)if(s[r]===e||s[r].listener&&s[r].listener===e){n=r;break}if(n<0)return this;s.splice(n,1),0===s.length&&(i[t]=null)}else(s===e||s.listener&&s.listener===e)&&(i[t]=null);return this},e.removeAllListeners=function(t){var e=this.events,i=!1,s=e[t];if(y(s))for(var n=s.length;n--;){var r=s[n];r.unremovable?i=!0:this.off(t,r)}else s&&(s.unremovable?i=!0:this.off(t,s));return i||(e[t]=null),this},e.listeners=function(t){var e,i=this.events;if(!i[t])return[];if(i=i[t],!y(i))return i.unremovable?[]:[i];i=i.slice(),e=[];for(var s=0,n=i.length;s<n;++s)i[s].unremovable||e.push(i[s]);return e},t}(),S=k.Deferred=function(){function t(t){this.context=t||this,this._state="pending",this._doneList=[],this._failList=[],this._promise=new e(this)}function e(t){this.context=t.context,this.then=t.then,this.done=function(){return t.done.apply(t,arguments),this},this.fail=function(){return t.fail.apply(t,arguments),this},this.pipe=function(){return t.pipe.apply(t,arguments)},this.always=function(){return t.always.apply(t,arguments),this},this.promise=function(){return this},this.isResolved=function(){return t.isResolved()},this.isRejected=function(){return t.isRejected()}}var s=t.prototype,n=function(t,e,i,s){if("pending"===this._state){this._state=t;for(var n=0,r=e.length;n<r;++n)e[n].apply(i,s);this._doneList=this._failList=null}},r=function(t){return t&&"function"==typeof t.promise};return s.resolve=function(){var t=i.call(arguments,0);return n.call(this,"resolved",this._doneList,this.context||this,t),this},s.resolveWith=function(t){var e=i.call(arguments,1);return n.call(this,"resolved",this._doneList,t,e),this},s.reject=function(){var t=i.call(arguments,0);return n.call(this,"rejected",this._failList,this.context||this,t),this},s.rejectWith=function(t){var e=i.call(arguments,1);return n.call(this,"rejected",this._failList,t,e),this},s.promise=function(){return this._promise},s.done=function(){for(var t=i.call(arguments),e="resolved"===this._state,s="pending"===this._state,n=this._doneList,r=0,a=t.length;r<a;++r)"function"==typeof t[r]&&(e?t[r]():s&&n.push(t[r]));return this},s.fail=function(){for(var t=i.call(arguments),e="rejected"===this._state,s="pending"===this._state,n=this._failList,r=0,a=t.length;r<a;++r)"function"==typeof t[r]&&(e?t[r]():s&&n.push(t[r]));return this},s.always=function(){return this.done.apply(this,arguments),this.fail.apply(this,arguments),this},s.then=function(t,e){return this.done(t).fail(e)},s.pipe=function(e,s){var n=this,a=new t(this.context);return this.done(function(){var t=e.apply(n.context,arguments);r(t)?t.then(function(){var e=i.call(arguments);a.resolveWith.apply(a,[t].concat(e))}):a.resolveWith(n,t)}),this.fail(function(){if("function"==typeof s){var t=s.apply(n.context,arguments);r(t)&&t.fail(function(){var e=i.call(arguments);a.rejectWith.apply(a,[t].concat(e))})}else a.reject.apply(a,arguments)}),a.promise()},s.isResolved=function(){return"resolved"===this._state},s.isRejected=function(){return"rejected"===this._state},s.state=function(){return this._state},t.when=function(e){var s=0,n=i.call(arguments),a=n.length,o=a;1!==a||r(e)||(o=0);var h=1===o?e:new t,u=function(t,e){return function(s){e[t]=arguments.length>1?i.call(arguments):s,--o||h.resolve.apply(h,e)}};if(a>1)for(var l=new Array(a),c=function(){h.reject()};s<a;++s)n[s]&&r(n[s])?n[s].promise().done(u(s,l)).fail(c):(l[s]=n[s],--o);return o||h.resolve.apply(h,n),h.promise()},t}(),T=e.Object=function(){function s(t,i){this._={};var r=this._.events=new A(this);if(this._.emit=function(){return r.emit.apply(r,arguments)},w(i[0])){var a=i.shift(),o=a["in"];this.once("init",function(){this.set(a),o&&(y(o)?this.append.apply(this,o):o instanceof s&&this.append(o))})}switch(this.tickID=-1,this.nodes=i.map(e),this.cells=[],this.numChannels=t,t){case 0:this.L=this.R=new I(null),this.cells[0]=this.cells[1]=this.cells[2]=this.L.cell;break;case 1:this.L=this.R=new I(this),this.cells[0]=this.cells[1]=this.cells[2]=this.L.cell;break;case 2:this.L=new I(this),this.R=new I(this),this.cells[0]=new _.SignalArray(l.cellsize),this.cells[1]=this.L.cell,this.cells[2]=this.R.cell}this.playbackState=n,this.nodeType=s.DSP,this._.ar=!0,this._.mul=1,this._.add=0,this._.dac=null,this._.bypassed=!1,this._.meta={},this._.samplerate=l.samplerate,this._.cellsize=l.cellsize,this._.buddies=[]}s.DSP=1,s.TIMER=2,s.LISTENER=3;var r=s.prototype;return Object.defineProperties(r,{isAr:{get:function(){return this._.ar}},isKr:{get:function(){return!this._.ar}},isBypassed:{get:function(){return this._.bypassed}},isEnded:{get:function(){return!(1&this.playbackState)}},mul:{set:function(t){"number"==typeof t&&(this._.mul=t,this._.emit("setMul",t))},get:function(){return this._.mul}},add:{set:function(t){"number"==typeof t&&(this._.add=t,this._.emit("setAdd",t))},get:function(){return this._.add}},buddies:{set:function(t){y(t)||(t=[t]),this._.buddies=t.filter(function(t){return t instanceof s})},get:function(){return this._.buddies}}}),r.toString=function(){return this.constructor.name},r.valueOf=function(){return l.tickID!==this.tickID&&this.process(l.tickID),this.cells[0][0]},r.append=function(){if(arguments.length>0){var t=i.call(arguments).map(e);this.nodes=this.nodes.concat(t),this._.emit("append",t)}return this},r.appendTo=function(t){return t.append(this),this},r.remove=function(){if(arguments.length>0){for(var t,e=this.nodes,i=[],s=0,n=arguments.length;s<n;++s)(t=e.indexOf(arguments[s]))!==-1&&(i.push(e[t]),e.splice(t,1));i.length>0&&this._.emit("remove",i)}return this},r.removeFrom=function(t){return t.remove(this),this},r.removeAll=function(){var t=this.nodes.slice();return this.nodes=[],t.length>0&&this._.emit("remove",t),this},r.removeAtIndex=function(t){var e=this.nodes[t];return e&&(this.nodes.splice(t,1),this._.emit("remove",[e])),this},r.postMessage=function(t){return this._.emit("message",t),this},r.to=function(t){if(t instanceof s)t.append(this);else{var e=i.call(arguments);w(e[1])?e.splice(2,0,this):e.splice(1,0,this),t=g.apply(null,e)}return t},r.splice=function(t,e,i){var n;return e?e instanceof s&&(n=e.nodes.indexOf(i),n!==-1&&e.nodes.splice(n,1),t instanceof s?(t.nodes.push(this),e.nodes.push(t)):e.nodes.push(this)):this._.dac&&(t instanceof s?i instanceof s?i._.dac&&(i._.dac._.node=t,t._.dac=i._.dac,i._.dac=null,t.nodes.push(this)):this._.dac&&(this._.dac._.node=t,t._.dac=this._.dac,this._.dac=null,t.nodes.push(this)):i instanceof s&&i._.dac&&(i._.dac._.node=this,this._.dac=i._.dac,i._.dac=null)),this},r.on=r.addListener=function(t,e){return this._.events.on(t,e),this},r.once=function(t,e){return this._.events.once(t,e),this},r.off=r.removeListener=function(t,e){return this._.events.off(t,e),this},r.removeAllListeners=function(t){return this._.events.removeAllListeners(t),this},r.listeners=function(t){return this._.events.listeners(t)},r.set=function(t,e){var i,s,n=this._.meta;switch(typeof t){case"string":switch(n[t]){case"property":this[t]=e;break;case"function":this[t](e);break;default:for(i=this;null!==i;)s=Object.getOwnPropertyDescriptor(i,t),s&&("function"==typeof s.value?(n[t]="function",this[t](e)):(s.get||s.set)&&(n[t]="property",this[t]=e)),i=Object.getPrototypeOf(i)}break;case"object":for(i in t)this.set(i,t[i])}return this},r.get=function(t){if("property"===this._.meta[t])return this[t]},r.bang=function(){return this._.emit.apply(this,["bang"].concat(i.call(arguments))),this},r.process=_.nop,r.bypass=function(){return this._.bypassed=0===arguments.length||!!arguments[0],this},r.play=function(){var t=this._.dac;return null===t&&(t=this._.dac=new P(this)),t.play()&&this._.emit.apply(this,["play"].concat(i.call(arguments))),_.buddies_start(this),this},r.pause=function(){var t=this._.dac;return t&&t.playbackState===n&&(t.pause(),this._.dac=null,this._.emit("pause")),_.buddies_stop(this),this},r.start=r.stop=r.listen=r.unlisten=function(){return this},r.ar=function(){return 0===arguments.length||arguments[0]?this._.kronly||(this._.ar=!0,this._.emit("ar",!0)):this.kr(!0),this},r.kr=function(){return 0===arguments.length||arguments[0]?this._.aronly||(this._.ar=!1,this._.emit("ar",!1)):this.ar(!0),this},"browser"===p?r.plot=function(e){var i=this._,s=e.target;if(!s)return this;var n,r=e.width||s.width||320,a=e.height||s.height||240,o=(e.x||0)+.5,h=e.y||0,u=s.getContext("2d");n=e.foreground!==t?e.foreground:i.plotForeground||"rgb(  0, 128, 255)";var l;l=e.background!==t?e.background:i.plotBackground||"rgb(255, 255, 255)";var c,f,p,d,v,m=e.lineWidth||i.plotLineWidth||1,g=!!i.plotCyclic,b=i.plotData||this.cells[0],_=e.range||i.plotRange||[-1.2,1.2],y=_[0],w=a/(_[1]-y),x=r/b.length,k=b.length;if(u.save(),u.rect(o,h,r,a),null!==l&&(u.fillStyle=l,u.fillRect(o,h,r,a)),i.plotBefore&&i.plotBefore.call(this,u,o,h,r,a),i.plotBarStyle)for(u.fillStyle=n,c=0,v=0;v<k;++v)p=(b[v]-y)*w,f=a-p,u.fillRect(c+o,f+h,x,p),c+=x;else{for(u.strokeStyle=n,u.lineWidth=m,u.beginPath(),c=0,d=a-(b[0]-y)*w,u.moveTo(c+o,d+h),v=1;v<k;++v)c+=x,f=a-(b[v]-y)*w,u.lineTo(c+o,f+h);g?u.lineTo(c+x+o,d+h):u.lineTo(c+x+o,f+h),u.stroke()}i.plotAfter&&i.plotAfter.call(this,u,o,h,r,a);var A=e.border||i.plotBorder;return A&&(u.strokeStyle="string"==typeof A?A:"#000",u.lineWidth=1,u.strokeRect(o,h,r,a)),u.restore(),this}:r.plot=_.nop,s}(),I=e.ChannelObject=function(){function t(t){e.Object.call(this,-1,[]),_.fixAR(this),this._.parent=t,this.cell=new _.SignalArray(l.cellsize),this.L=this.R=this,this.cells[0]=this.cells[1]=this.cells[2]=this.cell,this.numChannels=1}return _.extend(t),t.prototype.process=function(t){return this.tickID!==t&&(this.tickID=t,this._.parent&&this._.parent.process(t)),this},t}(),R=function(){function t(t){T.call(this,2,t)}return _.extend(t),t.prototype.process=function(t){var e=this._;return this.tickID!==t&&(this.tickID=t,e.ar?(_.inputSignalAR(this),_.outputSignalAR(this)):(this.cells[0][0]=_.inputSignalKR(this),_.outputSignalKR(this))),this},_.register("+",t),t}(),O=function(){function t(t){if(T.call(this,1,[]),_.fixKR(this),this.value=t[0],w(t[1])){var e=t[1];this.once("init",function(){this.set(e)})}this.on("setAdd",_.changeWithValue),this.on("setMul",_.changeWithValue)}_.extend(t);var e=t.prototype;return Object.defineProperties(e,{value:{set:function(t){"number"==typeof t&&(this._.value=isNaN(t)?0:t,_.changeWithValue.call(this))},get:function(){return this._.value}}}),t}(),D=function(){function t(t){if(T.call(this,1,[]),_.fixKR(this),this.value=t[0],w(t[1])){var e=t[1];this.once("init",function(){this.set(e)})}this.on("setAdd",_.changeWithValue),this.on("setMul",_.changeWithValue)}_.extend(t);var e=t.prototype;return Object.defineProperties(e,{value:{set:function(t){this._.value=t?1:0,_.changeWithValue.call(this)},get:function(){return!!this._.value}}}),t}(),M=function(){function t(t){if(T.call(this,1,[]),_.fixKR(this),this.func=t[0],this._.value=0,w(t[1])){var e=t[1];this.once("init",function(){this.set(e)})}this.on("setAdd",_.changeWithValue),this.on("setMul",_.changeWithValue)}_.extend(t);var e=t.prototype;return Object.defineProperties(e,{func:{set:function(t){"function"==typeof t&&(this._.func=t)},get:function(){return this._.func}},args:{set:function(t){y(t)?this._.args=t:this._.args=[t]},get:function(){return this._.args}}}),e.bang=function(){var t=this._,e=i.call(arguments).concat(t.args),s=t.func.apply(this,e);return"number"==typeof s&&(t.value=s,_.changeWithValue.call(this)),this._.emit("bang"),this},t}(),L=function(){function t(t){T.call(this,1,[]);var e,i;for(e=0,i=t[0].length;e<i;++e)this.append(t[0][e]);if(w(t[1])){var s=t[1];this.once("init",function(){this.set(s)})}}_.extend(t);var e=t.prototype;return Object.defineProperties(e,{}),e.bang=function(){var t,e,s=["bang"].concat(i.call(arguments)),n=this.nodes;for(t=0,e=n.length;t<e;++t)n[t].bang.apply(n[t],s);return this},e.postMessage=function(t){var e,i,s=this.nodes;for(e=0,i=s.length;e<i;++e)s[e].postMessage(t);return this},e.process=function(t){var e=this._;return this.tickID!==t&&(this.tickID=t,e.ar?(_.inputSignalAR(this),_.outputSignalAR(this)):(this.cells[0][0]=_.inputSignalKR(this),_.outputSignalKR(this))),this},t}(),j=function(){function t(t){if(T.call(this,1,[]),_.fixKR(this),w(t[1])){var e=t[1];this.once("init",function(){this.set(e)})}}_.extend(t);var e=t.prototype;return Object.defineProperties(e,{}),t}(),P=function(){function t(t){T.call(this,2,[]),this.playbackState=s;var n=this._;n.node=t,n.onplay=e(this),n.onpause=i(this)}_.extend(t);var e=function(t){return function(){l.inlets.indexOf(t)===-1&&(l.inlets.push(t),l.events.emit("addObject"),t.playbackState=n,t._.emit("play"))}},i=function(t){return function(){var e=l.inlets.indexOf(t);e!==-1&&(l.inlets.splice(e,1),t.playbackState=s,t._.emit("pause"),l.events.emit("removeObject"))}},r=t.prototype;return r.play=function(){return l.nextTick(this._.onplay),l.inlets.indexOf(this)===-1},r.pause=function(){l.nextTick(this._.onpause)},r.process=function(t){var e=this._.node;1&e.playbackState?(e.process(t),this.cells[1].set(e.cells[1]),this.cells[2].set(e.cells[2])):(this.cells[1].set(_.emptycell),this.cells[2].set(_.emptycell))},t}(),F=function(){function t(){this.context=this,this.tickID=0,this.impl=null,this.amp=.8,this.status=s,this.samplerate=44100,this.channels=2,this.cellsize=64,this.streammsec=20,this.streamsize=0,this.currentTime=0,this.nextTicks=[],this.inlets=[],this.timers=[],this.listeners=[],this.deferred=null,this.recStart=0,this.recBuffers=null,this.delayProcess=e(this),this.events=null,_.currentTimeIncr=1e3*this.cellsize/this.samplerate,_.emptycell=new _.SignalArray(this.cellsize),this.reset(!0)}var e=function(t){return function(){t.recStart=Date.now(),t.process()}},r=t.prototype;r.bind=function(t,e){if("function"==typeof t){var i=new t(this,e);this.impl=i,this.impl.defaultSamplerate&&(this.samplerate=this.impl.defaultSamplerate)}return this},r.setup=function(t){return"object"==typeof t&&(o.indexOf(t.samplerate)!==-1&&(t.samplerate<=this.impl.maxSamplerate?this.samplerate=t.samplerate:this.samplerate=this.impl.maxSamplerate),h.indexOf(t.cellsize)!==-1&&(this.cellsize=t.cellsize),"undefined"!=typeof Float64Array&&"undefined"!=typeof t.f64&&(v=!!t.f64,v?_.SignalArray=Float64Array:_.SignalArray=Float32Array)),_.currentTimeIncr=1e3*this.cellsize/this.samplerate,_.emptycell=new _.SignalArray(this.cellsize),this},r.getAdjustSamples=function(t){var e,i;return t=t||this.samplerate,e=this.streammsec/1e3*t,i=Math.ceil(Math.log(e)*Math.LOG2E),i=i<8?8:i>14?14:i,1<<i},r.play=function(){return this.status===s&&(this.status=n,this.streamsize=this.getAdjustSamples(),this.strmL=new _.SignalArray(this.streamsize),this.strmR=new _.SignalArray(this.streamsize),this.impl.play(),this.events.emit("play")),this},r.pause=function(){return this.status===n&&(this.status=s,this.impl.pause(),this.events.emit("pause")),this},r.reset=function(t){return t&&(this.events=new A(this).on("addObject",function(){this.status===s&&this.play()}).on("removeObject",function(){this.status===n&&this.inlets.length+this.timers.length+this.listeners.length===0&&this.pause()})),this.currentTime=0,this.nextTicks=[],this.inlets=[],this.timers=[],this.listeners=[],this},r.process=function(){var t,e,i,s,n,r,o,h,u=this.tickID,l=this.strmL,c=this.strmR,f=this.amp,p=this.streamsize,d=0,v=this.cellsize,m=this.streamsize/this.cellsize,g=this.timers,b=this.inlets,y=this.listeners,w=_.currentTimeIncr;for(s=0;s<p;++s)l[s]=c[s]=0;for(;m--;){for(++u,n=0,r=g.length;n<r;++n)1&g[n].playbackState&&g[n].process(u);for(n=0,r=b.length;n<r;++n)if(t=b[n],t.process(u),1&t.playbackState)for(e=t.cells[1],i=t.cells[2],o=0,s=d;o<v;++o,++s)l[s]+=e[o],c[s]+=i[o];for(d+=v,n=0,r=y.length;n<r;++n)1&y[n].playbackState&&y[n].process(u);for(this.currentTime+=w,h=this.nextTicks.splice(0),n=0,r=h.length;n<r;++n)h[n]()}for(s=0;s<p;++s)t=l[s]*f,t<-1?t=-1:t>1&&(t=1),l[s]=t,t=c[s]*f,t<-1?t=-1:t>1&&(t=1),c[s]=t;this.tickID=u;var x=this.currentTime;if(this.status===a){if(2===this.recCh)this.recBuffers.push(new _.SignalArray(l)),this.recBuffers.push(new _.SignalArray(c));else{var k=new _.SignalArray(l.length);for(s=0,p=k.length;s<p;++s)k[s]=.5*(l[s]+c[s]);this.recBuffers.push(k)}if(x>=this.maxDuration)this.deferred.sub.reject();else if(x>=this.recDuration)this.deferred.sub.resolve();else{var A=Date.now();A-this.recStart>20?setTimeout(this.delayProcess,10):this.process()}}},r.nextTick=function(t){this.status===s?t():this.nextTicks.push(t)},r.rec=function(){_.fix_iOS6_1_problem(!0);var t=new S(this);if(this.deferred)return console.warn("rec deferred is exists??"),t.reject().promise();if(this.status!==s)return console.log("status is not none",this.status),t.reject().promise();var e=0,n=arguments,r=w(n[e])?n[e++]:{},o=n[e];if("function"!=typeof o)return console.warn("no function"),t.reject().promise();this.deferred=t,this.status=a,this.reset();var h=new g("+"),l=new S(this),c={done:function(){l.resolve.apply(l,i.call(arguments))},send:function(){h.append.apply(h,arguments)}},f=this;return l.then(u,function(){_.fix_iOS6_1_problem(!1),u.call(f,!0)}),this.deferred.sub=l,this.savedSamplerate=this.samplerate,this.samplerate=r.samplerate||this.samplerate,this.recDuration=r.recDuration||1/0,this.maxDuration=r.maxDuration||6e5,this.recCh=r.ch||1,2!==this.recCh&&(this.recCh=1),this.recBuffers=[],this.streamsize=this.getAdjustSamples(),this.strmL=new _.SignalArray(this.streamsize),this.strmR=new _.SignalArray(this.streamsize),this.inlets.push(h),o(c),setTimeout(this.delayProcess,10),t.promise()};var u=function(){this.status=s,this.reset();var t,e=this.recBuffers,i=this.samplerate,n=this.streamsize;this.samplerate=this.savedSamplerate,t=this.recDuration!==1/0?this.recDuration*i*.001|0:(e.length>>this.recCh-1)*n;var r,a,o=t/n|0,h=0,u=0,l=t;if(2===this.recCh){var c=new _.SignalArray(t),f=new _.SignalArray(t),p=new _.SignalArray(t);for(a=0;a<o;++a)if(c.set(e[h++],u),f.set(e[h++],u),u+=n,l-=n,l>0&&l<n){c.set(e[h++].subarray(0,l),u),f.set(e[h++].subarray(0,l),u);break}for(a=0,o=t;a<o;++a)p[a]=.5*(c[a]+f[a]);r={samplerate:i,channels:2,buffer:[p,c,f]}}else{var d=new _.SignalArray(t);for(a=0;a<o;++a)if(d.set(e[h++],u),u+=n,l-=n,l>0&&l<n){d.set(e[h++].subarray(0,l),u);break}r={samplerate:i,channels:1,buffer:[d]}}var v=[].concat.apply([r],arguments);this.deferred.resolve.apply(this.deferred,v),this.deferred=null};return r.on=function(t,e){this.events.on(t,e)},r.once=function(t,e){this.events.once(t,e)},r.off=function(t,e){this.events.off(t,e)},r.removeAllListeners=function(t){this.events.removeListeners(t)},r.listeners=function(t){return this.events.listeners(t)},r.fix_iOS6_1_problem=function(t){this.impl.fix_iOS6_1_problem&&this.impl.fix_iOS6_1_problem(t)},t}(),q=null;"undefined"!=typeof window&&(x=window.AudioContext||window.webkitAudioContext),q="undefined"!=typeof x?function(t){var e,i,s=new x;_._audioContext=s,this.maxSamplerate=s.sampleRate,this.defaultSamplerate=s.sampleRate,this.env="webkit";var n=navigator.userAgent;if(n.match(/linux/i)?t.streammsec*=8:n.match(/win(dows)?\s*(nt 5\.1|xp)/i)&&(t.streammsec*=4),this.play=function(){var n,r,a,o=t.getAdjustSamples(s.sampleRate),h=t.streamsize;t.samplerate===s.sampleRate?n=function(e){var i=e.outputBuffer;t.process(),i.getChannelData(0).set(t.strmL),i.getChannelData(1).set(t.strmR)}:2*t.samplerate===s.sampleRate?n=function(e){var i,s,n=t.strmL,r=t.strmR,a=e.outputBuffer,o=a.getChannelData(0),h=a.getChannelData(1),u=a.length;for(t.process(),i=s=0;i<u;i+=2,++s)o[i]=o[i+1]=n[s],h[i]=h[i+1]=r[s]}:(r=h,a=t.samplerate/s.sampleRate,n=function(e){var i,s=t.strmL,n=t.strmR,o=e.outputBuffer,u=o.getChannelData(0),l=o.getChannelData(1),c=o.length;for(i=0;i<c;++i)r>=h&&(t.process(),r-=h),u[i]=s[0|r],l[i]=n[0|r],r+=a}),e=s.createBufferSource(),i=s.createScriptProcessor(o,2,t.channels),i.onaudioprocess=n,e.noteOn&&e.noteOn(0),e.connect(i),i.connect(s.destination)},this.pause=function(){e.disconnect(),i.disconnect()},d){var r=0,a=s.createBufferSource();this.fix_iOS6_1_problem=function(t){r+=t?1:-1,1===r?(a.noteOn(0),a.connect(s.destination)):0===r&&a.disconnect()}}}:function(t){this.maxSamplerate=48e3,this.defaultSamplerate=44100,this.env="nop",this.play=function(){},this.pause=function(){}},l=(new F).bind(q);var B=e;"node"===p||"undefined"!=typeof module&&module.exports?module.exports=global.timbre=B:"browser"===p&&(B.noConflict=function(){var t=window.timbre,e=window.T;return function(i){return window.T===B&&(window.T=e),i&&window.timbre===B&&(window.timbre=t),B}}(),window.timbre=window.T=B),function(){function t(t){try{return e.plugins&&e.mimeTypes&&e.mimeTypes.length?e.plugins["Shockwave Flash"].description.match(/([0-9]+)/)[t]:new ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable("$version").match(/([0-9]+)/)[t]}catch(i){return-1}}if("nop"===l.impl.env&&"browser"===p&&!d){var e=navigator;if(!(t(0)<10)){var i,s="TimbreFlashPlayerDiv",n=function(){var t=document.getElementsByTagName("script");if(t&&t.length)for(var e,i=0,s=t.length;i<s;++i)if(e=/^(.*\/)timbre(?:\.dev)?\.js$/i.exec(t[i].src))return e[1]+"timbre.swf"}();window.timbrejs_flashfallback_init=function(){function t(t){var e=0;this.maxSamplerate=44100,this.defaultSamplerate=44100,this.env="flash",this.play=function(){var s,r=new Array(t.streamsize*t.channels),a=t.streammsec,o=0,h=t.streamsize/t.samplerate*1e3,u=Date.now();s=function(){if(!(o>Date.now()-u)){var e=t.strmL,s=t.strmR,n=r.length,a=e.length;for(t.process();a--;)r[--n]=32768*s[a]|0,r[--n]=32768*e[a]|0;i.writeAudio(r.join(" ")),o+=h}},i.setup?(i.setup(t.channels,t.samplerate),e=setInterval(s,a)):console.warn("Cannot find "+n)},this.pause=function(){0!==e&&(i.cancel(),clearInterval(e),e=0)}}l.bind(t),delete window.timbrejs_flashfallback_init};var r,a,o=n,h=o+"?"+ +new Date,u="TimbreFlashPlayer",c=document.createElement("div");
c.id=s,c.style.display="inline",c.width=c.height=1,e.plugins&&e.mimeTypes&&e.mimeTypes.length?(r=document.createElement("object"),r.id=u,r.classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",r.width=r.height=1,r.setAttribute("data",h),r.setAttribute("type","application/x-shockwave-flash"),a=document.createElement("param"),a.setAttribute("name","allowScriptAccess"),a.setAttribute("value","always"),r.appendChild(a),c.appendChild(r)):c.innerHTML='<object id="'+u+'" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="1" height="1"><param name="movie" value="'+h+'" /><param name="bgcolor" value="#FFFFFF" /><param name="quality" value="high" /><param name="allowScriptAccess" value="always" /></object>',window.addEventListener("load",function(){document.body.appendChild(c),i=document[u]})}}}()}(),function(t){"use strict";function e(t){this.samplerate=t,this.frequency=340,this.Q=1,this.gain=0,this.x1L=this.x2L=this.y1L=this.y2L=0,this.x1R=this.x2R=this.y1R=this.y2R=0,this.b0=this.b1=this.b2=this.a1=this.a2=0,this.setType("lpf")}var i=e.prototype;i.process=function(t,e){var i,s,n,r,a,o,h=this.x1L,u=this.x2L,l=this.y1L,c=this.y2L,f=this.x1R,p=this.x2R,d=this.y1R,v=this.y2R,m=this.b0,g=this.b1,b=this.b2,_=this.a1,y=this.a2;for(a=0,o=t.length;a<o;++a)i=t[a],n=m*i+g*h+b*u-_*l-y*c,u=h,h=i,c=l,l=n,s=e[a],r=m*s+g*f+b*p-_*d-y*v,p=f,f=s,v=d,d=r,t[a]=n,e[a]=r;this.x1L=h,this.x2L=u,this.y1L=l,this.y2L=c,this.x1R=f,this.x2R=p,this.y1R=d,this.y2R=v},i.setType=function(t){var e;(e=s[t])&&(this.type=t,e.call(this,this.frequency,this.Q,this.gain))},i.setParams=function(t,e,i){this.frequency=t,this.Q=e,this.gain=i;var n=s[this.type];return n&&n.call(this,t,e,i),this};var s={lowpass:function(t,e){if(t/=.5*this.samplerate,t>=1)this.b0=1,this.b1=this.b2=this.a1=this.a2=0;else if(t<=0)this.b0=this.b1=this.b2=this.a1=this.a2=0;else{e=e<0?0:e;var i=Math.pow(10,.05*e),s=Math.sqrt(.5*(4-Math.sqrt(16-16/(i*i)))),n=Math.PI*t,r=.5*s*Math.sin(n),a=.5*(1-r)/(1+r),o=(.5+a)*Math.cos(n),h=.25*(.5+a-o);this.b0=2*h,this.b1=4*h,this.b2=this.b0,this.a1=2*-o,this.a2=2*a}},highpass:function(t,e){if(t/=.5*this.samplerate,t>=1)this.b0=this.b1=this.b2=this.a1=this.a2=0;else if(t<=0)this.b0=1,this.b1=this.b2=this.a1=this.a2=0;else{e=e<0?0:e;var i=Math.pow(10,.05*e),s=Math.sqrt((4-Math.sqrt(16-16/(i*i)))/2),n=Math.PI*t,r=.5*s*Math.sin(n),a=.5*(1-r)/(1+r),o=(.5+a)*Math.cos(n),h=.25*(.5+a+o);this.b0=2*h,this.b1=-4*h,this.b2=this.b0,this.a1=2*-o,this.a2=2*a}},bandpass:function(t,e){if(t/=.5*this.samplerate,t>0&&t<1)if(e>0){var i=Math.PI*t,s=Math.sin(i)/(2*e),n=Math.cos(i),r=1/(1+s);this.b0=s*r,this.b1=0,this.b2=-s*r,this.a1=-2*n*r,this.a2=(1-s)*r}else this.b0=this.b1=this.b2=this.a1=this.a2=0;else this.b0=this.b1=this.b2=this.a1=this.a2=0},lowshelf:function(t,e,i){t/=.5*this.samplerate;var s=Math.pow(10,i/40);if(t>=1)this.b0=s*s,this.b1=this.b2=this.a1=this.a2=0;else if(t<=0)this.b0=1,this.b1=this.b2=this.a1=this.a2=0;else{var n=Math.PI*t,r=1,a=.5*Math.sin(n)*Math.sqrt((s+1/s)*(1/r-1)+2),o=Math.cos(n),h=2*Math.sqrt(s)*a,u=s+1,l=s-1,c=1/(u+l*o+h);this.b0=s*(u-l*o+h)*c,this.b1=2*s*(l-u*o)*c,this.b2=s*(u-l*o-h)*c,this.a1=-2*(l+u*o)*c,this.a2=(u+l*o-h)*c}},highshelf:function(t,e,i){t/=.5*this.samplerate;var s=Math.pow(10,i/40);if(t>=1)this.b0=1,this.b1=this.b2=this.a1=this.a2=0;else if(t<=0)this.b0=s*s,this.b1=this.b2=this.a1=this.a2=0;else{var n=Math.PI*t,r=1,a=.5*Math.sin(n)*Math.sqrt((s+1/s)*(1/r-1)+2),o=Math.cos(n),h=2*Math.sqrt(s)*a,u=s+1,l=s-1,c=1/(u-l*o+h);this.b0=s*(u+l*o+h)*c,this.b1=-2*s*(l+u*o)*c,this.b2=s*(u+l*o-h)*c,this.a1=2*(l-u*o)*c,this.a2=(u-l*o-h)*c}},peaking:function(t,e,i){if(t/=.5*this.samplerate,t>0&&t<1){var s=Math.pow(10,i/40);if(e>0){var n=Math.PI*t,r=Math.sin(n)/(2*e),a=Math.cos(n),o=1/(1+r/s);this.b0=(1+r*s)*o,this.b1=-2*a*o,this.b2=(1-r*s)*o,this.a1=this.b1,this.a2=(1-r/s)*o}else this.b0=s*s,this.b1=this.b2=this.a1=this.a2=0}else this.b0=1,this.b1=this.b2=this.a1=this.a2=0},notch:function(t,e){if(t/=.5*this.samplerate,t>0&&t<1)if(e>0){var i=Math.PI*t,s=Math.sin(i)/(2*e),n=Math.cos(i),r=1/(1+s);this.b0=r,this.b1=-2*n*r,this.b2=r,this.a1=this.b1,this.a2=(1-s)*r}else this.b0=this.b1=this.b2=this.a1=this.a2=0;else this.b0=1,this.b1=this.b2=this.a1=this.a2=0},allpass:function(t,e){if(t/=.5*this.samplerate,t>0&&t<1)if(e>0){var i=Math.PI*t,s=Math.sin(i)/(2*e),n=Math.cos(i),r=1/(1+s);this.b0=(1-s)*r,this.b1=-2*n*r,this.b2=(1+s)*r,this.a1=this.b1,this.a2=this.b0}else this.b0=-1,this.b1=this.b2=this.a1=this.a2=0;else this.b0=1,this.b1=this.b2=this.a1=this.a2=0}};s.lpf=s.lowpass,s.hpf=s.highpass,s.bpf=s.bandpass,s.bef=s.notch,s.brf=s.notch,s.apf=s.allpass,t.modules.Biquad=e}(timbre),function(t){"use strict";function e(e){this.samplerate=e;var i=Math.round(Math.log(.1*e)*Math.LOG2E);this.buffersize=1<<i,this.bufferL=new t.fn.SignalArray(this.buffersize+1),this.bufferR=new t.fn.SignalArray(this.buffersize+1),this.wave=null,this._wave=null,this.writeIndex=this.buffersize>>1,this.readIndex=0,this.delayTime=20,this.rate=4,this.depth=20,this.feedback=.2,this.wet=.5,this.phase=0,this.phaseIncr=0,this.phaseStep=4,this.setWaveType("sin"),this.setDelayTime(this.delayTime),this.setRate(this.rate)}var i=e.prototype,s=[];s[0]=function(){for(var t=new Float32Array(512),e=0;e<512;++e)t[e]=Math.sin(2*Math.PI*(e/512));return t}(),s[1]=function(){for(var t,e=new Float32Array(512),i=0;i<512;++i)t=i/512-.25,e[i]=1-4*Math.abs(Math.round(t)-t);return e}(),i.setWaveType=function(t){"sin"===t?(this.wave=t,this._wave=s[0]):"tri"===t&&(this.wave=t,this._wave=s[1])},i.setDelayTime=function(t){this.delayTime=t;for(var e=this.writeIndex-(t*this.samplerate*.001|0);e<0;)e+=this.buffersize;this.readIndex=e},i.setRate=function(t){this.rate=t,this.phaseIncr=512*this.rate/this.samplerate*this.phaseStep},i.process=function(t,e){var i,s,n,r,a,o=this.bufferL,h=this.bufferR,u=this.buffersize,l=u-1,c=this._wave,f=this.phase,p=this.phaseIncr,d=this.writeIndex,v=this.readIndex,m=this.depth,g=this.feedback,b=this.wet,_=1-b,y=t.length,w=this.phaseStep;for(r=0;r<y;){for(n=c[0|f]*m,f+=p;f>512;)f-=512;for(a=0;a<w;++a,++r)s=v+u+n&l,i=.5*(o[s]+o[s+1]),o[d]=t[r]-i*g,t[r]=t[r]*_+i*b,i=.5*(h[s]+h[s+1]),h[d]=e[r]-i*g,e[r]=e[r]*_+i*b,d=d+1&l,v=v+1&l}this.phase=f,this.writeIndex=d,this.readIndex=v},t.modules.Chorus=e}(timbre),function(t){"use strict";function e(e,s){this.samplerate=e,this.channels=s,this.lastPreDelayFrames=0,this.preDelayReadIndex=0,this.preDelayWriteIndex=n,this.ratio=-1,this.slope=-1,this.linearThreshold=-1,this.dbThreshold=-1,this.dbKnee=-1,this.kneeThreshold=-1,this.kneeThresholdDb=-1,this.ykneeThresholdDb=-1,this.K=-1,this.attackTime=.003,this.releaseTime=.25,this.preDelayTime=.006,this.dbPostGain=0,this.effectBlend=1,this.releaseZone1=.09,this.releaseZone2=.16,this.releaseZone3=.42,this.releaseZone4=.98,this.detectorAverage=0,this.compressorGain=1,this.meteringGain=1,this.delayBufferL=new t.fn.SignalArray(i),2===s?this.delayBufferR=new t.fn.SignalArray(i):this.delayBufferR=this.delayBufferL,this.preDelayTime=6,this.preDelayReadIndex=0,this.preDelayWriteIndex=n,this.maxAttackCompressionDiffDb=-1,this.meteringReleaseK=1-Math.exp(-1/(.325*this.samplerate)),this.setAttackTime(this.attackTime),this.setReleaseTime(this.releaseTime),this.setPreDelayTime(this.preDelayTime),this.setParams(-24,30,12)}var i=1024,s=i-1,n=256,r=5,a=e.prototype;a.clone=function(){var t=new e(this.samplerate,this.channels);return t.setAttackTime(this.attackTime),t.setReleaseTime(this.releaseTime),t.setPreDelayTime(this.preDelayTime),t.setParams(this.dbThreshold,this.dbKnee,this.ratio),t},a.setAttackTime=function(t){this.attackTime=Math.max(.001,t),this._attackFrames=this.attackTime*this.samplerate},a.setReleaseTime=function(t){this.releaseTime=Math.max(.001,t);var e=this.releaseTime*this.samplerate,i=.0025;this._satReleaseFrames=i*this.samplerate;var s=e*this.releaseZone1,n=e*this.releaseZone2,r=e*this.releaseZone3,a=e*this.releaseZone4;this._kA=.9999999999999998*s+1.8432219684323923e-16*n-1.9373394351676423e-16*r+8.824516011816245e-18*a,this._kB=-1.5788320352845888*s+2.3305837032074286*n-.9141194204840429*r+.1623677525612032*a,this._kC=.5334142869106424*s-1.272736789213631*n+.9258856042207512*r-.18656310191776226*a,this._kD=.08783463138207234*s-.1694162967925622*n+.08588057951595272*r-.00429891410546283*a,this._kE=-.042416883008123074*s+.1115693827987602*n-.09764676325265872*r+.028494263462021576*a},a.setPreDelayTime=function(t){this.preDelayTime=t;var e=t*this.samplerate;if(e>i-1&&(e=i-1),this.lastPreDelayFrames!==e){this.lastPreDelayFrames=e;for(var s=0,n=this.delayBufferL.length;s<n;++s)this.delayBufferL[s]=this.delayBufferR[s]=0;this.preDelayReadIndex=0,this.preDelayWriteIndex=e}},a.setParams=function(t,e,i){this._k=this.updateStaticCurveParameters(t,e,i);var s=this.saturate(1,this._k),n=1/s;n=Math.pow(n,.6),this._masterLinearGain=Math.pow(10,.05*this.dbPostGain)*n},a.kneeCurve=function(t,e){return t<this.linearThreshold?t:this.linearThreshold+(1-Math.exp(-e*(t-this.linearThreshold)))/e},a.saturate=function(t,e){var i;if(t<this.kneeThreshold)i=this.kneeCurve(t,e);else{var s=t?20*Math.log(t)*Math.LOG10E:-1e3,n=this.ykneeThresholdDb+this.slope*(s-this.kneeThresholdDb);i=Math.pow(10,.05*n)}return i},a.slopeAt=function(t,e){if(t<this.linearThreshold)return 1;var i=1.001*t,s=t?20*Math.log(t)*Math.LOG10E:-1e3,n=i?20*Math.log(i)*Math.LOG10E:-1e3,r=this.kneeCurve(t,e),a=this.kneeCurve(i,e),o=r?20*Math.log(r)*Math.LOG10E:-1e3,h=a?20*Math.log(a)*Math.LOG10E:-1e3;return(h-o)/(n-s)},a.kAtSlope=function(t){for(var e=this.dbThreshold+this.dbKnee,i=Math.pow(10,.05*e),s=.1,n=1e4,r=5,a=0;a<15;++a){var o=this.slopeAt(i,r);o<t?n=r:s=r,r=Math.sqrt(s*n)}return r},a.updateStaticCurveParameters=function(t,e,i){this.dbThreshold=t,this.linearThreshold=Math.pow(10,.05*t),this.dbKnee=e,this.ratio=i,this.slope=1/this.ratio,this.kneeThresholdDb=t+e,this.kneeThreshold=Math.pow(10,.05*this.kneeThresholdDb);var s=this.kAtSlope(1/this.ratio),n=this.kneeCurve(this.kneeThreshold,s);return this.ykneeThresholdDb=n?20*Math.log(n)*Math.LOG10E:-1e3,this._k=s,this._k},a.process=function(t,e){for(var i=1-this.effectBlend,n=this.effectBlend,a=this._k,o=this._masterLinearGain,h=this._satReleaseFrames,u=this._kA,l=this._kB,c=this._kC,f=this._kD,p=this._kE,d=64,v=t.length/d,m=0,g=this.detectorAverage,b=this.compressorGain,_=this.maxAttackCompressionDiffDb,y=1/this._attackFrames,w=this.preDelayReadIndex,x=this.preDelayWriteIndex,k=this.detectorAverage,A=this.delayBufferL,S=this.delayBufferR,T=this.meteringGain,I=this.meteringReleaseK,R=0;R<v;++R){var O,D=Math.asin(g)/(.5*Math.PI),M=D>b,L=b/D,j=L?20*Math.log(L)*Math.LOG10E:-1e3;if((j===1/0||isNaN(j))&&(j=-1),M){_=-1,L=j,L=L<-12?0:L>0?3:.25*(L+12);var P=L*L,F=P*L,q=P*P,B=u+l*L+c*P+f*F+p*q,E=r/B;O=Math.pow(10,.05*E)}else{(_===-1||_<j)&&(_=j);var C=Math.max(.5,_);L=.25/C,O=1-Math.pow(L,y)}for(var N=d;N--;){var z=0,G=.5*(t[m]+e[m]);A[x]=t[m],S[x]=e[m],G<0&&(G*=-1),z<G&&(z=G);var W=z;W<0&&(W*=-1);var V=this.saturate(W,a),K=W<=1e-4?1:V/W,$=K?-20*Math.log(K)*Math.LOG10E:1e3;$<2&&($=2);var Y=$/h,H=Math.pow(10,.05*Y)-1,Q=K>k,Z=Q?H:1;k+=(K-k)*Z,k>1&&(k=1),O<1?b+=(D-b)*O:(b*=O,b>1&&(b=1));var U=Math.sin(.5*Math.PI*b),X=i+n*o*U,J=20*Math.log(U)*Math.LOG10E;J<T?T=J:T+=(J-T)*I,t[m]=A[w]*X,e[m]=S[w]*X,m++,w=w+1&s,x=x+1&s}k<1e-6&&(k=1e-6),b<1e-6&&(b=1e-6)}this.preDelayReadIndex=w,this.preDelayWriteIndex=x,this.detectorAverage=k,this.compressorGain=b,this.maxAttackCompressionDiffDb=_,this.meteringGain=T},a.reset=function(){this.detectorAverage=0,this.compressorGain=1,this.meteringGain=1;for(var t=0,e=this.delayBufferL.length;t<e;++t)this.delayBufferL[t]=this.delayBufferR[t]=0;this.preDelayReadIndex=0,this.preDelayWriteIndex=n,this.maxAttackCompressionDiffDb=-1},t.modules.Compressor=e}(timbre),function(t){"use strict";function e(){}e.prototype.decode=function(t,i,s){if("string"==typeof t){if(/\.wav$/.test(t))return e.wav_decode(t,i,s);if(e.ogg_decode&&/\.ogg$/.test(t))return e.ogg_decode(t,i,s);if(e.mp3_decode&&/\.mp3$/.test(t))return e.mp3_decode(t,i,s)}else if("object"==typeof t){if("wav"===t.type)return e.wav_decode(t.data,i,s);if(e.ogg_decode&&"ogg"===t.type)return e.ogg_decode(t.data,i,s);if(e.mp3_decode&&"mp3"===t.type)return e.mp3_decode(t.data,i,s)}return e.webkit_decode?"object"==typeof t?e.webkit_decode(t.data||t,i,s):e.webkit_decode(t,i,s):e.moz_decode?e.moz_decode(t,i,s):void i(!1)},t.modules.Decoder=e,"browser"===t.envtype?e.getBinaryWithPath=function(e,i){t.fn.fix_iOS6_1_problem(!0);var s=new XMLHttpRequest;s.open("GET",e),s.responseType="arraybuffer",s.onreadystatechange=function(){4===s.readyState&&(s.response?i(new Uint8Array(s.response)):void 0!==s.responseBody&&i(new Uint8Array(VBArray(s.responseBody).toArray())),t.fn.fix_iOS6_1_problem(!1))},s.send()}:e.getBinaryWithPath=function(t,e){e("no support")};var i=function(t){for(var e,i,s,n,r,a=new Int32Array(t.length/3),o=0,h=t.length,u=0;o<h;)e=t[o++],i=t[o++],s=t[o++],n=e+(i<<8)+(s<<16),r=8388608&n?n-16777216:n,a[u++]=r;return a};e.wav_decode=function(){var t=function(t,e,s){if("RIFF"!==String.fromCharCode(t[0],t[1],t[2],t[3]))return e(!1);var n=t[4]+(t[5]<<8)+(t[6]<<16)+(t[7]<<24);if(n+8!==t.length)return e(!1);if("WAVE"!==String.fromCharCode(t[8],t[9],t[10],t[11]))return e(!1);if("fmt "!==String.fromCharCode(t[12],t[13],t[14],t[15]))return e(!1);for(var r=t[22]+(t[23]<<8),a=t[24]+(t[25]<<8)+(t[26]<<16)+(t[27]<<24),o=t[34]+(t[35]<<8),h=36;h<t.length&&"data"!==String.fromCharCode(t[h],t[h+1],t[h+2],t[h+3]);)h+=1;if(h>=t.length)return e(!1);h+=4;var u=t[h]+(t[h+1]<<8)+(t[h+2]<<16)+(t[h+3]<<24),l=(u/r>>1)/a;if(h+=4,u>t.length-h)return e(!1);var c,f,p;c=new Float32Array(l*a|0),2===r&&(f=new Float32Array(c.length),p=new Float32Array(c.length)),e({samplerate:a,channels:r,buffer:[c,f,p],duration:l}),8===o?t=new Int8Array(t.buffer,h):16===o?t=new Int16Array(t.buffer,h):32===o?t=new Int32Array(t.buffer,h):24===o&&(t=i(new Uint8Array(t.buffer,h)));var d,v,m,g=1/((1<<o-1)-1);if(2===r)for(h=v=0,d=c.length;h<d;++h)m=f[h]=t[v++]*g,m+=p[h]=t[v++]*g,c[h]=.5*m;else for(h=0,d=c.length;h<d;++h)c[h]=t[h]*g;s()};return function(i,s,n){"string"==typeof i?e.getBinaryWithPath(i,function(e){t(e,s,n)}):t(i,s,n)}}(),e.webkit_decode=function(){if("undefined"!=typeof t.fn._audioContext){var i=t.fn._audioContext,s=function(t,e,s){var n,r,a,o,h;if("string"==typeof t)return s(!1);var u;try{u=i.createBuffer(t.buffer,!1)}catch(l){return e(!1)}n=i.sampleRate,r=u.numberOfChannels,2===r?(a=u.getChannelData(0),o=u.getChannelData(1)):a=o=u.getChannelData(0),h=a.length/n;for(var c=new Float32Array(a),f=0,p=c.length;f<p;++f)c[f]=.5*(c[f]+o[f]);e({samplerate:n,channels:r,buffer:[c,a,o],duration:h}),s()};return function(t,i,n){if(t instanceof File){var r=new FileReader;r.onload=function(t){s(new Uint8Array(t.target.result),i,n)},r.readAsArrayBuffer(t)}else"string"==typeof t?e.getBinaryWithPath(t,function(t){s(t,i,n)}):s(t,i,n)}}}(),e.moz_decode=function(){if("function"==typeof Audio&&"function"==typeof(new Audio).mozSetup)return function(t,e,i){var s,n,r,a,o,h,u=0,l=new Audio(t);l.volume=0,l.addEventListener("loadedmetadata",function(){s=l.mozSampleRate,n=l.mozChannels,h=l.duration,r=new Float32Array(l.duration*s|0),2===n&&(a=new Float32Array(l.duration*s|0),o=new Float32Array(l.duration*s|0)),2===n?l.addEventListener("MozAudioAvailable",function(t){for(var e,i=t.frameBuffer,s=0,n=i.length;s<n;s+=2)e=a[u]=i[s],e+=o[u]=i[s+1],r[u]=.5*e,u+=1},!1):l.addEventListener("MozAudioAvailable",function(t){for(var e=t.frameBuffer,i=0,s=e.length;i<s;++i)r[i]=e[i],u+=1},!1),l.play(),setTimeout(function(){e({samplerate:s,channels:n,buffer:[r,a,o],duration:h})},1e3)},!1),l.addEventListener("ended",function(){i()},!1),l.load()}}()}(timbre),function(t){"use strict";function e(t){this.samplerate=t||44100,this.value=s,this.status=f,this.curve="linear",this.step=1,this.releaseNode=null,this.loopNode=null,this.emit=null,this._envValue=new i(t),this._table=[],this._initValue=s,this._curveValue=0,this._defaultCurveType=r,this._index=0,this._counter=0}function i(t){this.samplerate=t,this.value=s,this.step=1,this._curveType=r,this._curveValue=0,this._grow=0,this._a2=0,this._b1=0,this._y1=0,this._y2=0}var s=e.ZERO=1e-6,n=e.CurveTypeSet=0,r=e.CurveTypeLin=1,a=e.CurveTypeExp=2,o=e.CurveTypeSin=3,h=e.CurveTypeWel=4,u=e.CurveTypeCurve=5,l=e.CurveTypeSqr=6,c=e.CurveTypeCub=7,f=e.StatusWait=0,p=e.StatusGate=1,d=e.StatusSustain=2,v=e.StatusRelease=3,m=e.StatusEnd=4,g={set:n,lin:r,linear:r,exp:a,exponential:a,sin:o,sine:o,wel:h,welch:h,sqr:l,squared:l,cub:c,cubed:c};e.CurveTypeDict=g;var b=e.prototype;b.clone=function(){var t=new e(this.samplerate);return t._table=this._table,t._initValue=this._initValue,t.setCurve(this.curve),null!==this.releaseNode&&t.setReleaseNode(this.releaseNode+1),null!==this.loopNode&&t.setLoopNode(this.loopNode+1),t.setStep(this.step),t.reset(),t},b.setTable=function(t){this._initValue=t[0],this._table=t.slice(1),this.value=this._envValue.value=this._initValue,this._index=0,this._counter=0,this.status=f},b.setCurve=function(t){"number"==typeof t?(this._defaultCurveType=u,this._curveValue=t,this.curve=t):(this._defaultCurveType=g[t]||null,this.curve=t)},b.setReleaseNode=function(t){"number"==typeof t&&t>0&&(this.releaseNode=t-1)},b.setLoopNode=function(t){"number"==typeof t&&t>0&&(this.loopNode=t-1)},b.setStep=function(t){this.step=this._envValue.step=t},b.reset=function(){this.value=this._envValue.value=this._initValue,this._index=0,this._counter=0,this.status=f},b.release=function(){null!==this.releaseNode&&this._index<=this.releaseNode&&(this._counter=0,this._index=this.releaseNode,this.status=v)},b.getInfo=function(t){var e,i,s=this._table,n=0,r=1/0,a=1/0,o=!1;for(e=0,i=s.length;e<i;++e){this.loopNode===e&&(r=n),this.releaseNode===e&&(n<t?n+=t:n=t,a=n);var h=s[e];Array.isArray(h)&&(n+=h[1])}return r!==1/0&&a===1/0&&(n+=t,o=!0),{totalDuration:n,loopBeginTime:r,releaseBeginTime:a,isEndlessLoop:o}},b.calcStatus=function(){var t,e,i,s,a=this.status,o=this._table,h=this._index,l=this._counter,c=this._curveValue,g=this._defaultCurveType,b=this.loopNode,_=this.releaseNode,y=this._envValue,w=null;switch(a){case f:case m:break;case p:case v:for(;l<=0;)if(h>=o.length){if(a===p&&null!==b){h=b;continue}a=m,l=1/0,s=n,w="ended"}else if(a!==p||h!==_)t=o[h++],e=t[0],s=null===t[2]?g:t[2],s===u&&(c=t[3],Math.abs(c)<.001&&(s=r)),i=t[1],l=y.setNext(e,i,s,c);else{if(null!==b&&b<_){h=b;continue}a=d,l=1/0,s=n,w="sustained"}}return this.status=a,this.emit=w,this._index=h,this._counter=l,a},b.next=function(){return 1&this.calcStatus()&&(this.value=this._envValue.next()||s),this._counter-=1,this.value},b.process=function(t){var e,i=this._envValue,n=t.length;if(1&this.calcStatus())for(e=0;e<n;++e)t[e]=i.next()||s;else{var r=this.value||s;for(e=0;e<n;++e)t[e]=r}this.value=t[n-1],this._counter-=t.length},i.prototype.setNext=function(t,e,i,s){var f,p,d,v,m,g,b,y=this.step,w=this.value,x=.001*e*this.samplerate/y|0;switch(x<1&&(x=1,i=n),i){case n:this.value=t;break;case r:f=(t-w)/x;break;case a:f=0!==w?Math.pow(t/w,1/x):0;break;case o:p=Math.PI/x,v=.5*(t+w),m=2*Math.cos(p),g=.5*(t-w),b=g*Math.sin(.5*Math.PI-p),w=v-g;break;case h:p=.5*Math.PI/x,m=2*Math.cos(p),t>=w?(v=w,g=0,b=-Math.sin(p)*(t-w)):(v=t,g=w-t,b=Math.cos(p)*(w-t)),w=v+g;break;case u:d=(t-w)/(1-Math.exp(s)),v=w+d,m=d,f=Math.exp(s/x);break;case l:g=Math.sqrt(w),b=Math.sqrt(t),f=(b-g)/x;break;case c:g=Math.pow(w,.33333333),b=Math.pow(t,.33333333),f=(b-g)/x}return this.next=_[i],this._grow=f,this._a2=v,this._b1=m,this._y1=g,this._y2=b,x};var _=[];_[n]=function(){return this.value},_[r]=function(){return this.value+=this._grow,this.value},_[a]=function(){return this.value*=this._grow,this.value},_[o]=function(){var t=this._b1*this._y1-this._y2;return this.value=this._a2-t,this._y2=this._y1,this._y1=t,this.value},_[h]=function(){var t=this._b1*this._y1-this._y2;return this.value=this._a2+t,this._y2=this._y1,this._y1=t,this.value},_[u]=function(){return this._b1*=this._grow,this.value=this._a2-this._b1,this.value},_[l]=function(){return this._y1+=this._grow,this.value=this._y1*this._y1,this.value},_[c]=function(){return this._y1+=this._grow,this.value=this._y1*this._y1*this._y1,this.value},i.prototype.next=_[n],t.modules.Envelope=e,t.modules.EnvelopeValue=i}(timbre),function(t){"use strict";function e(e){e="number"==typeof e?e:512,e=1<<Math.ceil(Math.log(e)*Math.LOG2E),this.length=e,this.buffer=new t.fn.SignalArray(e),this.real=new t.fn.SignalArray(e),this.imag=new t.fn.SignalArray(e),this._real=new t.fn.SignalArray(e),this._imag=new t.fn.SignalArray(e),this.mag=new t.fn.SignalArray(e>>1),this.minDecibels=-30,this.maxDecibels=-100;var i=s.get(e);this._bitrev=i.bitrev,this._sintable=i.sintable,this._costable=i.costable}var i=e.prototype;i.setWindow=function(e){if("string"==typeof e){var i=/([A-Za-z]+)(?:\(([01]\.?\d*)\))?/.exec(e);if(null!==i){var s=i[1].toLowerCase(),r=void 0!==i[2]?+i[2]:.25,a=n[s];if(a){this._window||(this._window=new t.fn.SignalArray(this.length));var o=this._window,h=0,u=this.length;for(r=r<0?0:r>1?1:r;h<u;++h)o[h]=a(h,u,r);this.windowName=e}}}},i.forward=function(t){var e,i,s,n,r,a,o,h,u,l,c,f=this.buffer,p=this.real,d=this.imag,v=this._window,m=this._bitrev,g=this._sintable,b=this._costable,_=f.length;if(v)for(e=0;e<_;++e)f[e]=t[e]*v[e];else f.set(t);for(e=0;e<_;++e)p[e]=f[m[e]],d[e]=0;for(s=1;s<_;s=n)for(r=0,n=s+s,a=_/n,i=0;i<s;i++){for(o=b[r],h=g[r],e=i;e<_;e+=n)u=e+s,l=h*d[u]+o*p[u],c=o*d[u]-h*p[u],p[u]=p[e]-l,p[e]+=l,d[u]=d[e]-c,d[e]+=c;r+=a}var y,w,x=this.mag;for(e=0;e<_;++e)y=p[e],w=d[e],x[e]=Math.sqrt(y*y+w*w);return{real:p,imag:d}},i.inverse=function(t,e){var i,s,n,r,a,o,h,u,l,c,f,p=this.buffer,d=this._real,v=this._imag,m=this._bitrev,g=this._sintable,b=this._costable,_=p.length;for(i=0;i<_;++i)s=m[i],d[i]=+t[s],v[i]=-e[s];for(n=1;n<_;n=r)for(a=0,r=n+n,o=_/r,s=0;s<n;s++){for(h=b[a],u=g[a],i=s;i<_;i+=r)l=i+n,c=u*v[l]+h*d[l],f=h*v[l]-u*d[l],d[l]=d[i]-c,d[i]+=c,v[l]=v[i]-f,v[i]+=f;a+=o}for(i=0;i<_;++i)p[i]=d[i]/_;return p},i.getFrequencyData=function(t){var e,i=this.minDecibels,s=Math.min(this.mag.length,t.length);if(s){var n,r=this.mag,a=0;for(e=0;e<s;++e)n=r[e],t[e]=n?20*Math.log(n)*Math.LOG10E:i,a<t[e]&&(a=t[e])}return t};var s={get:function(e){return s[e]||function(){var i,n,r=function(){var t,i,s,n,r;for(t=new Int16Array(e),r=e>>1,i=s=0;t[i]=s,!(++i>=e);){for(n=r;n<=s;)s-=n,n>>=1;s+=n}return t}(),a=Math.floor(Math.log(e)/Math.LN2),o=new t.fn.SignalArray((1<<a)-1),h=new t.fn.SignalArray((1<<a)-1),u=2*Math.PI;for(i=0,n=o.length;i<n;++i)o[i]=Math.sin(u*(i/e)),h[i]=Math.cos(u*(i/e));return s[e]={bitrev:r,sintable:o,costable:h},s[e]}()}},n=function(){var t=Math.PI,e=2*Math.PI,i=Math.abs,s=Math.pow,n=Math.cos,r=Math.sin,a=function(e){return r(t*e)/(t*e)},o=Math.E;return{rectangular:function(){return 1},hann:function(t,i){return.5*(1-n(e*t/(i-1)))},hamming:function(t,i){return.54-.46*n(e*t/(i-1))},tukery:function(e,i,s){return e<s*(i-1)/2?.5*(1+n(t*(2*e/(s*(i-1))-1))):(i-1)*(1-s/2)<e?.5*(1+n(t*(2*e/(s*(i-1))-2/s+1))):1},cosine:function(e,i){return r(t*e/(i-1))},lanczos:function(t,e){return a(2*t/(e-1)-1)},triangular:function(t,e){return 2/(e+1)*((e+1)/2-i(t-(e-1)/2))},bartlett:function(t,e){return 2/(e-1)*((e-1)/2-i(t-(e-1)/2))},gaussian:function(t,e,i){return s(o,-.5*s((t-(e-1)/2)/(i*(e-1)/2),2))},bartlettHann:function(t,s){return.62-.48*i(t/(s-1)-.5)-.38*n(e*t/(s-1))},blackman:function(i,s,r){var a=(1-r)/2,o=.5,h=r/2;return a-o*n(e*i/(s-1))+h*n(4*t*i/(s-1))}}}();t.modules.FFT=e}(timbre),function(t){"use strict";function e(t){this.samplerate=t||44100,this.wave=null,this.step=1,this.frequency=0,this.value=0,this.phase=0,this.feedback=!1,this._x=0,this._lastouts=0,this._coeff=r/this.samplerate,this._radtoinc=r/(2*Math.PI)}function i(t,e,i,s){var n,r,a,o,h,u=l[e];if(void 0!==u){switch("function"==typeof u&&(u=u()),i){case"@1":for(r=512;r<1024;++r)u[r]=0;break;case"@2":for(r=512;r<1024;++r)u[r]=Math.abs(u[r]);break;case"@3":for(r=256;r<512;++r)u[r]=0;for(r=512;r<768;++r)u[r]=Math.abs(u[r]);for(r=768;r<1024;++r)u[r]=0;break;case"@4":for(n=new Float32Array(1024),r=0;r<512;++r)n[r]=u[r<<1];u=n;break;case"@5":for(n=new Float32Array(1024),r=0;r<512;++r)n[r]=Math.abs(u[r<<1]);u=n}if(void 0!==s&&50!==s){for(s*=.01,s=s<0?0:s>1?1:s,n=new Float32Array(1024),a=1024*s|0,r=0;r<a;++r)n[r]=u[r/a*512|0];for(h=1024-a,o=0;r<1024;++r,++o)n[r]=u[o/h*512+512|0];u=n}if("+"===t)for(r=0;r<1024;++r)u[r]=.5*u[r]+.5;else if("-"===t)for(r=0;r<1024;++r)u[r]*=-1;return u}}function s(t){var e=new Float32Array(1024),i=t.length>>1;if([2,4,8,16,32,64,128,256,512,1024].indexOf(i)!==-1)for(var s=0,n=0;s<i;++s){var r=parseInt(t.substr(2*s,2),16);r=128&r?(r-256)/128:r/127;for(var a=0,o=1024/i;a<o;++a)e[n++]=r}return e}function n(t){var e=new Float32Array(1024);if(8===t.length){var i,s,n=parseInt(t,16),r=new Float32Array(8);for(r[0]=1,i=0;i<7;++i)r[i+1]=.0625*(15&n),n>>=4;for(i=0;i<8;++i){var a=0,o=(i+1)/1024;for(s=0;s<1024;++s)e[s]+=Math.sin(2*Math.PI*a)*r[i],a+=o}var h,u=0;for(i=0;i<1024;++i)u<(h=Math.abs(e[i]))&&(u=h);if(u>0)for(i=0;i<1024;++i)e[i]/=u}return e}var r=1024,a=r-1,o=e.prototype;o.setWave=function(e){var i,s,n=this.wave;if(this.wave||(this.wave=new Float32Array(r+1)),"function"==typeof e)for(i=0;i<r;++i)n[i]=e(i/r);else if(t.fn.isSignalArray(e))if(e.length===n.length)n.set(e);else for(s=e.length/r,i=0;i<r;++i)n[i]=e[i*s|0];else"string"==typeof e&&void 0!==(s=h(e))&&this.wave.set(s);this.wave[r]=this.wave[0]},o.clone=function(){var t=new e(this.samplerate);return t.wave=this.wave,t.step=this.step,t.frequency=this.frequency,t.value=this.value,t.phase=this.phase,t.feedback=this.feedback,t},o.reset=function(){this._x=0},o.next=function(){var t=this._x,e=t+this.phase*this._radtoinc|0;return this.value=this.wave[e&a],t+=this.frequency*this._coeff*this.step,t>r&&(t-=r),this._x=t,this.value},o.process=function(t){var e,i,s,n,o,h,u=this.wave,l=this._radtoinc,c=this._x,f=this.frequency*this._coeff,p=this.step;if(this.feedback){var d=this._lastouts;for(l*=this.phase,h=0;h<p;++h)e=c+d*l,i=0|e,s=e-i,i&=a,n=u[i],o=u[i+1],t[h]=d=n+s*(o-n),c+=f;this._lastouts=d}else{var v=this.phase*l;for(h=0;h<p;++h)e=c+v,i=0|e,s=e-i,i&=a,n=u[i],o=u[i+1],t[h]=n+s*(o-n),c+=f}c>r&&(c-=r),this._x=c,this.value=t[t.length-1]},o.processWithFreqArray=function(t,e){var i,s,n,o,h,u,l=this.wave,c=this._radtoinc,f=this._x,p=this._coeff,d=this.step;if(this.feedback){var v=this._lastouts;for(c*=this.phase,u=0;u<d;++u)i=f+v*c,s=0|i,n=i-s,s&=a,o=l[s],h=l[s+1],t[u]=v=o+n*(h-o),f+=e[u]*p;this._lastouts=v}else{var m=this.phase*this._radtoinc;for(u=0;u<d;++u)i=f+m,s=0|i,n=i-s,s&=a,o=l[s],h=l[s+1],t[u]=o+n*(h-o),f+=e[u]*p}f>r&&(f-=r),this._x=f,this.value=t[t.length-1]},o.processWithPhaseArray=function(t,e){var i,s,n,o,h,u,l=this.wave,c=this._radtoinc,f=this._x,p=this.frequency*this._coeff,d=this.step;if(this.feedback){var v=this._lastouts;for(c*=this.phase,u=0;u<d;++u)i=f+v*c,s=0|i,n=i-s,s&=a,o=l[s],h=l[s+1],t[u]=v=o+n*(h-o),f+=p;this._lastouts=v}else for(u=0;u<d;++u)i=f+e[u]*c,s=0|i,n=i-s,s&=a,o=l[s],h=l[s+1],t[u]=o+n*(h-o),f+=p;f>r&&(f-=r),this._x=f,this.value=t[t.length-1]},o.processWithFreqAndPhaseArray=function(t,e,i){var s,n,o,h,u,l,c=this.wave,f=this._radtoinc,p=this._x,d=this._coeff,v=this.step;if(this.feedback){var m=this._lastouts;for(f*=this.phase,l=0;l<v;++l)s=p+m*f,n=0|s,o=s-n,n&=a,h=c[n],u=c[n+1],t[l]=m=h+o*(u-h),p+=e[l]*d;this._lastouts=m}else for(l=0;l<v;++l)s=p+i[l]*r,n=0|s,o=s-n,n&=a,h=c[n],u=c[n+1],t[l]=h+o*(u-h),p+=e[l]*d;p>r&&(p-=r),this._x=p,this.value=t[t.length-1]};var h=function(t){var e=l[t];if(void 0!==e)return"function"==typeof e&&(e=e()),e;var r;if(r=/^([\-+]?)(\w+)(?:\((@[0-7])?:?(\d+)?\))?$/.exec(t),null!==r){var a=r[1],o=r[2],h=r[3],u=r[4];if(e=i(a,o,h,u),void 0!==e)return l[t]=e,e}return r=/^wavb\(((?:[0-9a-fA-F][0-9a-fA-F])+)\)$/.exec(t),null!==r?s(r[1]):(r=/^wavc\(([0-9a-fA-F]{8})\)$/.exec(t),null!==r?n(r[1]):void 0)};e.getWavetable=h;var u=function(e,i){var s,n,r=new Float32Array(1024);if("function"==typeof i)for(n=0;n<1024;++n)r[n]=i(n/1024);else if(t.fn.isSignalArray(i))if(i.length===r.length)r.set(i);else for(s=i.length/1024,n=0;n<1024;++n)r[n]=i[n*s|0];l[e]=r};e.setWavetable=u;var l={sin:function(){for(var t=new Float32Array(1024),e=0;e<1024;++e)t[e]=Math.sin(2*Math.PI*(e/1024));return t},cos:function(){for(var t=new Float32Array(1024),e=0;e<1024;++e)t[e]=Math.cos(2*Math.PI*(e/1024));return t},pulse:function(){for(var t=new Float32Array(1024),e=0;e<1024;++e)t[e]=e<512?1:-1;return t},tri:function(){for(var t,e=new Float32Array(1024),i=0;i<1024;++i)t=i/1024-.25,e[i]=1-4*Math.abs(Math.round(t)-t);return e},saw:function(){for(var t,e=new Float32Array(1024),i=0;i<1024;++i)t=i/1024,e[i]=2*(t-Math.round(t));return e},fami:function(){for(var t=[0,.125,.25,.375,.5,.625,.75,.875,.875,.75,.625,.5,.375,.25,.125,0,-.125,-.25,-.375,-.5,-.625,-.75,-.875,-1,-1,-.875,-.75,-.625,-.5,-.375,-.25,-.125],e=new Float32Array(1024),i=0;i<1024;++i)e[i]=t[i/1024*t.length|0];return e},konami:function(){for(var t=[-.625,-.875,-.125,.75,.5,.125,.5,.75,.25,-.125,.5,.875,.625,0,.25,.375,-.125,-.75,0,.625,.125,-.5,-.375,-.125,-.75,-1,-.625,0,-.375,-.875,-.625,-.25],e=new Float32Array(1024),i=0;i<1024;++i)e[i]=t[i/1024*t.length|0];return e}};t.modules.Oscillator=e}(timbre),function(t){"use strict";function e(e,a){this.samplerate=e;var o,h,u=e/44100;for(h=2*n.length,this.comb=new Array(h),this.combout=new Array(h),o=0;o<h;++o)this.comb[o]=new i(n[o%n.length]*u),this.combout[o]=new t.fn.SignalArray(a);for(h=2*r.length,this.allpass=new Array(h),o=0;o<h;++o)this.allpass[o]=new s(r[o%r.length]*u);this.outputs=[new t.fn.SignalArray(a),new t.fn.SignalArray(a)],this.damp=0,this.wet=.33,this.setRoomSize(.5),this.setDamp(.5)}function i(e){this.buffer=new t.fn.SignalArray(0|e),this.buffersize=this.buffer.length,this.bufidx=0,this.feedback=0,this.filterstore=0,this.damp=0}function s(e){this.buffer=new t.fn.SignalArray(0|e),this.buffersize=this.buffer.length,this.bufidx=0}var n=[1116,1188,1277,1356,1422,1491,1557,1617],r=[225,556,441,341],a=e.prototype;a.setRoomSize=function(t){var e=this.comb,i=.28*t+.7;this.roomsize=t,e[0].feedback=e[1].feedback=e[2].feedback=e[3].feedback=e[4].feedback=e[5].feedback=e[6].feedback=e[7].feedback=e[8].feedback=e[9].feedback=e[10].feedback=e[11].feedback=e[12].feedback=e[13].feedback=e[14].feedback=e[15].feedback=i},a.setDamp=function(t){var e=this.comb,i=.4*t;this.damp=t,e[0].damp=e[1].damp=e[2].damp=e[3].damp=e[4].damp=e[5].damp=e[6].damp=e[7].damp=e[8].damp=e[9].damp=e[10].damp=e[11].damp=e[12].damp=e[13].damp=e[14].damp=e[15].damp=i},a.process=function(t,e){var i,s=this.comb,n=this.combout,r=this.allpass,a=this.outputs[0],o=this.outputs[1],h=this.wet,u=1-h,l=t.length;for(s[0].process(t,n[0]),s[1].process(t,n[1]),s[2].process(t,n[2]),s[3].process(t,n[3]),s[4].process(t,n[4]),s[5].process(t,n[5]),s[6].process(t,n[6]),s[7].process(t,n[7]),s[8].process(e,n[8]),s[9].process(e,n[9]),s[10].process(e,n[10]),s[11].process(e,n[11]),s[12].process(e,n[12]),s[13].process(e,n[13]),s[14].process(e,n[14]),s[15].process(e,n[15]),i=0;i<l;++i)a[i]=n[0][i]+n[1][i]+n[2][i]+n[3][i]+n[4][i]+n[5][i]+n[6][i]+n[7][i],o[i]=n[8][i]+n[9][i]+n[10][i]+n[11][i]+n[12][i]+n[13][i]+n[14][i]+n[15][i];for(r[0].process(a,a),r[1].process(a,a),r[2].process(a,a),r[3].process(a,a),r[4].process(o,o),r[5].process(o,o),r[6].process(o,o),r[7].process(o,o),i=0;i<l;++i)t[i]=a[i]*h+t[i]*u,e[i]=o[i]*h+e[i]*u},i.prototype.process=function(t,e){var i,s,n,r=this.buffer,a=this.buffersize,o=this.bufidx,h=this.filterstore,u=this.feedback,l=this.damp,c=1-l,f=t.length;for(n=0;n<f;++n)i=.015*t[n],s=r[o],h=s*c+h*l,r[o]=i+h*u,++o>=a&&(o=0),e[n]=s;this.bufidx=o,this.filterstore=h},s.prototype.process=function(t,e){var i,s,n,r,a=this.buffer,o=this.buffersize,h=this.bufidx,u=t.length;for(r=0;r<u;++r)i=t[r],n=a[h],s=-i+n,a[h]=i+.5*n,++h>=o&&(h=0),e[r]=s;this.bufidx=h},t.modules.Reverb=e}(timbre),function(t){"use strict";function e(t){return new i(t)}function i(t){if(this.fragments=[],t){var e=t.samplerate||44100,i=t.buffer[0].length/e;this.fragments.push(new s(t,0,i))}}function s(t,e,i,s,n,r,o){t||(t=a),this.buffer=t.buffer[0],
this.samplerate=t.samplerate||44100,this.start=e,this._duration=i,this.reverse=s||!1,this.pitch=n||100,this.stretch=r||!1,this.pan=o||50}function n(t,e){this.tape=t,this.fragments=t.fragments,this.samplerate=e||44100,this.isEnded=!1,this.buffer=null,this.bufferIndex=0,this.bufferIndexIncr=0,this.bufferBeginIndex=0,this.bufferEndIndex=0,this.fragment=null,this.fragmentIndex=0,this.panL=.5,this.panR=.5}var r=new Float32Array(60),a={buffer:r,samplerate:1};e.silence=function(t){return new e(a).slice(0,1).fill(t)},e.join=function(t){for(var e=new i,s=0;s<t.length;s++)t[s]instanceof i&&e.add_fragments(t[s].fragments);return e},e.Tape=i,i.prototype.add_fragment=function(t){return this.fragments.push(t),this},i.prototype.add_fragments=function(t){for(var e=0;e<t.length;e++)this.fragments.push(t[e]);return this},i.prototype.duration=function(){for(var t=0,e=0;e<this.fragments.length;e++)t+=this.fragments[e].duration();return t},i.prototype.slice=function(t,e){var s=this.duration();t+e>s&&(e=s-t);for(var n=new i,r=t,a=e,o=0;o<this.fragments.length;o++){var h=this.fragments[o],u=h.create(r,a),l=u[0];if(r=u[1],a=u[2],l&&n.add_fragment(l),0===a)break}return n},i.prototype.cut=i.prototype.slice,i.prototype.concat=function(t){var e=new i;return e.add_fragments(this.fragments),e.add_fragments(t.fragments),e},i.prototype.loop=function(t){var e,s=[];for(e=0;e<this.fragments.length;e++)s.push(this.fragments[e].clone());var n=new i;for(e=0;e<t;e++)n.add_fragments(s);return n},i.prototype.times=i.prototype.loop,i.prototype.split=function(t){for(var e=this.duration()/t,i=[],s=0;s<t;s++)i.push(this.slice(s*e,e));return i},i.prototype.fill=function(t){var e=this.duration();if(0===e)throw"EmptyFragment";var i=t/e|0,s=t%e;return this.loop(i).plus(this.slice(0,s))},i.prototype.replace=function(t,s,n){var r=new i,a=t+s;r=r.plus(this.slice(0,t));var o=r.duration();o<t&&(r=r.plus(e.silence(t-o))),r=r.plus(n);var h=this.duration();return h>a&&(r=r.plus(this.slice(a,h-a))),r},i.prototype.reverse=function(){for(var t=new i,e=this.fragments.length;e--;){var s=this.fragments[e].clone();s.reverse=!s.isReversed(),t.add_fragment(s)}return t},i.prototype.pitch=function(t,e){var s=new i;e=e||!1;for(var n=0;n<this.fragments.length;n++){var r=this.fragments[n].clone();r.pitch*=.01*t,r.stretch=e,s.add_fragment(r)}return s},i.prototype.stretch=function(t){var e=1/(.01*t)*100;return this.pitch(e,!0)},i.prototype.pan=function(t){var e=new i;t>100?t=100:t<0&&(t=0);for(var s=0;s<this.fragments.length;s++){var n=this.fragments[s].clone();n.pan=t,e.add_fragment(n)}return e},i.prototype.silence=function(){return e.silence(this.duration())},i.prototype.join=function(t){for(var e=new i,s=0;s<t.length;s++)t[s]instanceof i&&e.add_fragments(t[s].fragments);return e},i.prototype.getBuffer=function(){var t=44100;this.fragments.length>0&&(t=this.fragments[0].samplerate);var e=new n(this,t),i=this.duration()*t|0;return{samplerate:t,buffer:e.fetch(i)}},s.prototype.duration=function(){return this._duration*(100/this.pitch)},s.prototype.original_duration=function(){return this._duration},s.prototype.isReversed=function(){return this.reverse},s.prototype.isStretched=function(){return this.stretched},s.prototype.create=function(t,e){var i=this.duration();if(t>=i)return[null,t-i,e];var s,n=t+e>=i;n?(s=i-t,e-=s):(s=e,e=0);var r=this.clone();return r.start=this.start+t*this.pitch*.01,r._duration=s*this.pitch*.01,r.reverse=!1,[r,0,e]},s.prototype.clone=function(){var t=new s;return t.buffer=this.buffer,t.samplerate=this.samplerate,t.start=this.start,t._duration=this._duration,t.reverse=this.reverse,t.pitch=this.pitch,t.stretch=this.stretch,t.pan=this.pan,t},e.Fragment=s,e.TapeStream=n,n.prototype.reset=function(){return this.isEnded=!1,this.buffer=null,this.bufferIndex=0,this.bufferIndexIncr=0,this.bufferBeginIndex=0,this.bufferEndIndex=0,this.fragment=null,this.fragmentIndex=0,this.panL=.5,this.panR=.5,this.isLooped=!1,this},n.prototype.fetch=function(e){var i=new t.fn.SignalArray(e),s=new t.fn.SignalArray(e),n=this.fragments;if(0===n.length)return[i,s];for(var a,o=100*this.samplerate,h=this.buffer,u=this.bufferIndex,l=this.bufferIndexIncr,c=this.bufferBeginIndex,f=this.bufferEndIndex,p=this.fragment,d=this.fragmentIndex,v=this.panL,m=this.panR,g=0;g<e;g++){for(;!h||u<c||u>=f;)if(!p||d<n.length)p=n[d++],h=p.buffer,l=p.samplerate/o*p.pitch,c=p.start*p.samplerate,f=c+p.original_duration()*p.samplerate,a=.01*p.pan,v=1-a,m=a,p.reverse?(l*=-1,u=f+l):u=c;else{if(!this.isLooped){this.isEnded=!0,h=r,l=0,u=0;break}h=null,u=0,l=0,c=0,f=0,p=null,d=0}i[g]=h[0|u]*v,s[g]=h[0|u]*m,u+=l}return this.buffer=h,this.bufferIndex=u,this.bufferIndexIncr=l,this.bufferBeginIndex=c,this.bufferEndIndex=f,this.fragment=p,this.fragmentIndex=d,this.panL=v,this.panR=m,[i,s]},t.modules.Scissor=e}(timbre),function(t){"use strict";function e(e){this.samplerate=e;var i=Math.ceil(Math.log(1.5*e)*Math.LOG2E);this.buffersize=1<<i,this.buffermask=this.buffersize-1,this.writeBufferL=new t.fn.SignalArray(this.buffersize),this.writeBufferR=new t.fn.SignalArray(this.buffersize),this.readBufferL=this.writeBufferL,this.readBufferR=this.writeBufferR,this.delaytime=null,this.feedback=null,this.cross=null,this.mix=null,this.prevL=0,this.prevR=0,this.readIndex=0,this.writeIndex=0,this.setParams(125,.25,!1,.45)}var i=e.prototype;i.setParams=function(t,e,i,s){if(this.delaytime!==t){this.delaytime=t;var n=.001*t*this.samplerate|0;n>this.buffermask&&(n=this.buffermask),this.writeIndex=this.readIndex+n&this.buffermask}this.feedback!==e&&(this.feedback=e),this.cross!==i&&(this.cross=i,i?(this.readBufferL=this.writeBufferR,this.readBufferR=this.writeBufferL):(this.readBufferL=this.writeBufferL,this.readBufferR=this.writeBufferR)),this.mix!==s&&(this.mix=s)},i.process=function(t,e){var i,s,n=this.readBufferL,r=this.readBufferR,a=this.writeBufferL,o=this.writeBufferR,h=this.readIndex,u=this.writeIndex,l=this.buffermask,c=this.feedback,f=this.mix,p=1-f,d=this.prevL,v=this.prevR,m=t.length;for(s=0;s<m;++s)i=n[h],a[u]=t[s]-i*c,t[s]=d=.5*(t[s]*p+i*f+d),i=r[h],o[u]=e[s]-i*c,e[s]=v=.5*(e[s]*p+i*f+v),h+=1,u=u+1&l;this.readIndex=h&this.buffermask,this.writeIndex=u,this.prevL=d,this.prevR=v},t.modules.StereoDelay=e}(timbre),function(t){"use strict";var e=t.fn,i=t.modules;e.register("audio",function(t){var i=e.getClass("buffer"),r=new i(t);return r.playbackState=e.FINISHED_STATE,r._.isLoaded=!1,Object.defineProperties(r,{isLoaded:{get:function(){return this._.isLoaded}}}),r.load=s,r.loadthis=n,r});var s=function(s){var n=this,r=this._,a=new i.Deferred(this),o=arguments,h=1;a.done(function(){n._.emit("done")}),"function"==typeof o[h]&&(a.done(o[h++]),"function"==typeof o[h]&&a.fail(o[h++])),r.loadedTime=0;var u=function(i,s){var r=n._;i?(n.playbackState=e.PLAYING_STATE,r.samplerate=i.samplerate,r.channels=i.channels,r.bufferMix=null,r.buffer=i.buffer,r.phase=0,r.phaseIncr=i.samplerate/t.samplerate,r.duration=1e3*i.duration,r.currentTime=0,r.isReversed&&(r.phaseIncr*=-1,r.phase=i.buffer[0].length+r.phaseIncr),n._.emit("loadedmetadata")):a.reject(s)},l=function(){n._.isLoaded=!0,n._.plotFlush=!0,n._.emit("loadeddata"),a.resolveWith(n)};return(new i.Decoder).decode(s,u,l),a.promise()},n=function(){return s.apply(this,arguments),this}}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this);var s=this._;s.biquad=new n(s.samplerate),s.freq=t(340),s.band=t(1),s.gain=t(0),s.plotBefore=a,s.plotRange=[-18,18],s.plotFlush=!0}var i=t.fn,s=t.modules.FFT,n=t.modules.Biquad,r=20;i.extend(e);var a=function(t,e,i,s,n){t.lineWidth=1,t.strokeStyle="rgb(192, 192, 192)";for(var a=.5*this._.samplerate,o=1;o<=10;++o)for(var h=1;h<=4;h++){var u=o*Math.pow(10,h);if(!(u<=r||a<=u)){t.beginPath();var l=Math.log(u/r)/Math.log(a/r);l=(l*s+e|0)+.5,t.moveTo(l,i),t.lineTo(l,i+n),t.stroke()}}var c=n/6;for(o=1;o<6;o++){t.beginPath();var f=(i+o*c|0)+.5;t.moveTo(e,f),t.lineTo(e+s,f),t.stroke()}},o=e.prototype;Object.defineProperties(o,{type:{set:function(t){var e=this._;t!==e.biquad.type&&(e.biquad.setType(t),e.plotFlush=!0)},get:function(){return this._.biquad.type}},freq:{set:function(e){this._.freq=t(e)},get:function(){return this._.freq}},cutoff:{set:function(e){this._.freq=t(e)},get:function(){return this._.freq}},res:{set:function(e){this._.band=t(e)},get:function(){return this._.band}},Q:{set:function(e){this._.band=t(e)},get:function(){return this._.band}},band:{set:function(e){this._.band=t(e)},get:function(){return this._.band}},gain:{set:function(e){this._.gain=t(e)},get:function(){return this._.gain}}}),o.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t,i.inputSignalAR(this);var s=e.freq.process(t).cells[0][0],n=e.band.process(t).cells[0][0],r=e.gain.process(t).cells[0][0];e.prevFreq===s&&e.prevband===n&&e.prevGain===r||(e.prevFreq=s,e.prevband=n,e.prevGain=r,e.biquad.setParams(s,n,r),e.plotFlush=!0),e.bypassed||e.biquad.process(this.cells[1],this.cells[2]),i.outputSignalAR(this)}return this};var h=new s(2048),u=t.Object.prototype.plot;o.plot=function(t){if(this._.plotFlush){var e=new n(this._.samplerate);e.setType(this.type),e.setParams(this.freq.valueOf(),this.band.valueOf(),this.gain.valueOf());var i=new Float32Array(h.length);i[0]=1,e.process(i,i),h.forward(i);var s,a,o,l,c,f,p,d,v=512,m=new Float32Array(v),g=.5*this._.samplerate,b=new Float32Array(v);for(h.getFrequencyData(b),s=0;s<v;++s)o=Math.pow(g/r,s/v)*r,a=o/(g/b.length),l=0|a,c=a-l,0===l?p=f=d=b[l]:(f=b[l-1],p=b[l],d=(1-c)*f+c*p),m[s]=d;this._.plotData=m,this._.plotFlush=null}return u.call(this,t)},i.register("biquad",e),i.register("lowpass",function(t){return new e(t).set("type","lowpass")}),i.register("highpass",function(t){return new e(t).set("type","highpass")}),i.register("bandpass",function(t){return new e(t).set("type","bandpass")}),i.register("lowshelf",function(t){return new e(t).set("type","lowshelf")}),i.register("highshelf",function(t){return new e(t).set("type","highshelf")}),i.register("peaking",function(t){return new e(t).set("type","peaking")}),i.register("notch",function(t){return new e(t).set("type","notch")}),i.register("allpass",function(t){return new e(t).set("type","allpass")}),i.alias("lpf","lowpass"),i.alias("hpf","highpass"),i.alias("bpf","bandpass"),i.alias("bef","notch"),i.alias("brf","notch"),i.alias("apf","allpass")}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e),i.fixAR(this);var s=this._;s.pitch=t(1),s.samplerate=44100,s.channels=0,s.bufferMix=null,s.buffer=[],s.isLooped=!1,s.isReversed=!1,s.duration=0,s.currentTime=0,s.currentTimeObj=null,s.phase=0,s.phaseIncr=0,s.onended=i.make_onended(this,0),s.onlooped=r(this)}var i=t.fn,s=t.modules.Scissor.Tape,n=function(t){return i.isSignalArray(t)||t instanceof Float32Array};i.extend(e);var r=function(t){return function(){var e=t._;e.phase>=e.buffer[0].length?e.phase=0:e.phase<0&&(e.phase=e.buffer[0].length+e.phaseIncr),t._.emit("looped")}},a=e.prototype,o=function(e){var i=this._;if("object"==typeof e){var r,a,o=[];n(e)?(o[0]=e,a=1):"object"==typeof e&&(e instanceof t.Object?e=e.buffer:e instanceof s&&(e=e.getBuffer()),Array.isArray(e.buffer)?n(e.buffer[0])&&(n(e.buffer[1])&&n(e.buffer[2])?(a=2,o=e.buffer):(a=1,o=[e.buffer[0]])):n(e.buffer)&&(a=1,o=[e.buffer]),"number"==typeof e.samplerate&&(r=e.samplerate)),o.length&&(r>0&&(i.samplerate=e.samplerate),i.bufferMix=null,i.buffer=o,i.phase=0,i.phaseIncr=i.samplerate/t.samplerate,i.duration=1e3*i.buffer[0].length/i.samplerate,i.currentTime=0,i.plotFlush=!0,this.reverse(i.isReversed))}};Object.defineProperties(a,{buffer:{set:o,get:function(){var t=this._;return{samplerate:t.samplerate,channels:t.channels,buffer:t.buffer}}},pitch:{set:function(e){this._.pitch=t(e)},get:function(){return this._.pitch}},isLooped:{get:function(){return this._.isLooped}},isReversed:{get:function(){return this._.isReversed}},samplerate:{get:function(){return this._.samplerate}},duration:{get:function(){return this._.duration}},currentTime:{set:function(e){if("number"==typeof e){var i=this._;0<=e&&e<=i.duration&&(i.phase=e/1e3*i.samplerate,i.currentTime=e)}else e instanceof t.Object?this._.currentTimeObj=e:null===e&&(this._.currentTimeObj=null)},get:function(){return this._.currentTimeObj?this._.currentTimeObj:this._.currentTime}}}),a.clone=function(){var t=this._,e=i.clone(this);return t.buffer.length&&o.call(e,{buffer:t.buffer,samplerate:t.samplerate,channels:t.channels}),e.loop(t.isLooped),e.reverse(t.isReversed),e},a.slice=function(e,s){var n=this._,r=t(n.originkey),a=n.isReversed;if(n.buffer.length){if(e="number"==typeof e?.001*e*n.samplerate|0:0,s="number"==typeof s?.001*s*n.samplerate|0:n.buffer[0].length,e>s){var h=e;e=s,s=h,a=!a}2===n.channels?o.call(r,{buffer:[i.pointer(n.buffer[0],e,s-e),i.pointer(n.buffer[1],e,s-e),i.pointer(n.buffer[2],e,s-e)],samplerate:n.samplerate}):o.call(r,{buffer:i.pointer(n.buffer[0],e,s-e),samplerate:n.samplerate}),r.playbackState=i.PLAYING_STATE}return r.loop(n.isLooped),r.reverse(n.isReversed),r},a.reverse=function(t){var e=this._;return e.isReversed=!!t,e.isReversed?(e.phaseIncr>0&&(e.phaseIncr*=-1),0===e.phase&&e.buffer.length&&(e.phase=e.buffer[0].length+e.phaseIncr)):e.phaseIncr<0&&(e.phaseIncr*=-1),this},a.loop=function(t){return this._.isLooped=!!t,this},a.bang=function(t){return this.playbackState=t===!1?i.FINISHED_STATE:i.PLAYING_STATE,this._.phase=0,this._.emit("bang"),this},a.process=function(t){var e=this._;if(!e.buffer.length)return this;if(this.tickID!==t){this.tickID=t;var s,n,r,a=this.cells[1],o=this.cells[2],h=e.phase,u=e.cellsize;if(2===e.channels?(n=e.buffer[1],r=e.buffer[2]):n=r=e.buffer[0],e.currentTimeObj){var l,c=e.currentTimeObj.process(t).cells[0],f=.001*e.samplerate;for(s=0;s<u;++s)l=c[s],h=l*f,a[s]=n[0|h]||0,o[s]=r[0|h]||0;e.phase=h,e.currentTime=l}else{var p=e.pitch.process(t).cells[0][0],d=e.phaseIncr*p;for(s=0;s<u;++s)a[s]=n[0|h]||0,o[s]=r[0|h]||0,h+=d;h>=n.length?e.isLooped?i.nextTick(e.onlooped):i.nextTick(e.onended):h<0&&(e.isLooped?i.nextTick(e.onlooped):i.nextTick(e.onended)),e.phase=h,e.currentTime+=i.currentTimeIncr}i.outputSignalAR(this)}return this};var h=t.Object.prototype.plot;a.plot=function(t){var e,i,s=this._;if(s.plotFlush){2===s.channels?(e=s.buffer[1],i=s.buffer[2]):e=i=s.buffer[0];for(var n=new Float32Array(2048),r=0,a=e.length/2048,o=0;o<2048;o++)n[o]=.5*(e[0|r]+i[0|r]),r+=a;s.plotData=n,s.plotFlush=null}return h.call(this,t)},i.register("buffer",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this);var n=new s(this._.samplerate);n.setDelayTime(20),n.setRate(4),n.depth=20,n.feedback=.2,n.mix=.33,this._.chorus=n}var i=t.fn,s=t.modules.Chorus;i.extend(e);var n=e.prototype;Object.defineProperties(n,{type:{set:function(t){this._.chorus.setDelayTime(t)},get:function(){return this._.chorus.wave}},delay:{set:function(t){.5<=t&&t<=80&&this._.chorus.setDelayTime(t)},get:function(){return this._.chorus.delayTime}},rate:{set:function(t){"number"==typeof t&&t>0&&this._.chorus.setRate(t)},get:function(){return this._.chorus.rate}},depth:{set:function(t){"number"==typeof t&&0<=t&&t<=100&&(t*=this._.samplerate/44100,this._.chorus.depth=t)},get:function(){return this._.chorus.depth}},fb:{set:function(t){"number"==typeof t&&-1<=t&&t<=1&&(this._.chorus.feedback=.99996*t)},get:function(){return this._.chorus.feedback}},mix:{set:function(e){this._.mix=t(e)},get:function(){return this._.mix}}}),n.process=function(t){var e=this._;return this.tickID!==t&&(this.tickID=t,i.inputSignalAR(this),e.bypassed||e.chorus.process(this.cells[1],this.cells[2]),i.outputSignalAR(this)),this},i.register("chorus",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e);var i=this._;i.min=-.8,i.max=.8}var i=t.fn;i.extend(e);var s=e.prototype;Object.defineProperties(s,{minmax:{set:function(t){var e=this._;"number"==typeof t&&(e.min=-Math.abs(t),e.max=-e.min)},get:function(){return this._.max}},min:{set:function(t){var e=this._;"number"==typeof t&&(e.max<t?e.max=t:e.min=t)},get:function(){return this._.min}},max:{set:function(t){var e=this._;"number"==typeof t&&(t<e.min?e.min=t:e.max=t)},get:function(){return this._.max}}}),s.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s,n,r=this.cells[1],a=this.cells[2],o=r.length,h=e.min,u=e.max;if(e.ar){for(i.inputSignalAR(this),s=0;s<o;++s)n=r[s],n<h?n=h:n>u&&(n=u),r[s]=n,n=a[s],n<h?n=h:n>u&&(n=u),a[s]=n;i.outputSignalAR(this)}else n=i.inputSignalKR(this),n<h?n=h:n>u&&(n=u),this.cells[0][0]=n,i.outputSignalKR(this)}return this},i.register("clip",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this);var s=this._;s.prevThresh=-24,s.prevKnee=30,s.prevRatio=12,s.thresh=t(s.prevThresh),s.knee=t(s.prevKnee),s.ratio=t(s.prevRatio),s.postGain=6,s.reduction=0,s.attack=3,s.release=25,s.comp=new n(s.samplerate),s.comp.dbPostGain=s.postGain,s.comp.setAttackTime(.001*s.attack),s.comp.setReleaseTime(.001*s.release),s.comp.setPreDelayTime(6),s.comp.setParams(s.prevThresh,s.prevKnee,s.prevRatio)}var i=t.fn,s=t.timevalue,n=t.modules.Compressor;i.extend(e);var r=e.prototype;Object.defineProperties(r,{thresh:{set:function(e){this._.thresh=t(e)},get:function(){return this._.thresh}},thre:{set:function(e){this._.thresh=t(e)},get:function(){return this._.thre}},knee:{set:function(e){this._.kne=t(e)},get:function(){return this._.knee}},ratio:{set:function(e){this._.ratio=t(e)},get:function(){return this._.ratio}},gain:{set:function(t){"number"==typeof t&&(this._.comp.dbPostGain=t)},get:function(){return this._.comp.dbPostGain}},attack:{set:function(t){"string"==typeof t&&(t=s(t)),"number"==typeof t&&(t=t<0?0:1e3<t?1e3:t,this._.attack=t,this._.comp.setAttackTime(.001*t))},get:function(){return this._.attack}},release:{set:function(t){"string"==typeof t&&(t=s(t)),"number"==typeof t&&(t=t<0?0:1e3<t?1e3:t,this._.release=t,this._.comp.setReleaseTime(.001*t))},get:function(){return this._.release}},reduction:{get:function(){return this._.reduction}}}),r.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t,i.inputSignalAR(this);var s=e.thresh.process(t).cells[0][0],n=e.knee.process(t).cells[0][0],r=e.ratio.process(t).cells[0][0];e.prevThresh===s&&e.prevKnee===n&&e.prevRatio===r||(e.prevThresh=s,e.prevKnee=n,e.prevRatio=r,e.comp.setParams(s,n,r)),e.bypassed||(e.comp.process(this.cells[1],this.cells[2]),e.reduction=e.comp.meteringGain),i.outputSignalAR(this)}return this},i.register("comp",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this);var s=this._;s.time=t(100),s.fb=t(.2),s.cross=t(!1),s.mix=.33,s.delay=new n(s.samplerate)}var i=t.fn,s=t.timevalue,n=t.modules.StereoDelay;i.extend(e);var r=e.prototype;Object.defineProperties(r,{time:{set:function(e){"string"==typeof e&&(e=s(e)),this._.time=t(e)},get:function(){return this._.time}},fb:{set:function(e){this._.fb=t(e)},get:function(){return this._.fb}},cross:{set:function(e){this._.cross=t(e)},get:function(){return this._.cross}},mix:{set:function(t){"number"==typeof t&&(t=t>1?1:t<0?0:t,this._.mix=t)},get:function(){return this._.mix}}}),r.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s=e.time.process(t).cells[0][0],n=e.fb.process(t).cells[0][0],r=0!==e.cross.process(t).cells[0][0],a=e.mix;e.prevTime===s&&e.prevFb===n&&e.prevCross===r&&e.prevMix===a||(e.prevTime=s,e.prevFb=n,e.prevCross=r,e.prevMix=a,e.delay.setParams(s,n,r,a)),i.inputSignalAR(this),e.bypassed||e.delay.process(this.cells[1],this.cells[2]),i.outputSignalAR(this)}return this},i.register("delay",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this);var s=this._;s.pre=t(60),s.post=t(-18),s.x1L=s.x2L=s.y1L=s.y2L=0,s.x1R=s.x2R=s.y1R=s.y2R=0,s.b0=s.b1=s.b2=s.a1=s.a2=0,s.cutoff=0,s.Q=1,s.preScale=0,s.postScale=0}var i=t.fn;i.extend(e);var s=e.prototype;Object.defineProperties(s,{cutoff:{set:function(t){"number"==typeof t&&t>0&&(this._.cutoff=t)},get:function(){return this._.cutoff}},pre:{set:function(e){this._.pre=t(e)},get:function(){return this._.pre}},post:{set:function(e){this._.post=t(e)},get:function(){return this._.post}}}),s.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t,i.inputSignalAR(this);var s=-e.pre.process(t).cells[0][0],r=-e.post.process(t).cells[0][0];if(e.prevPreGain===s&&e.prevPostGain===r||(e.prevPreGain=s,e.prevPostGain=r,e.preScale=Math.pow(10,.05*-s),e.postScale=Math.pow(10,.05*-r)),!e.bypassed){var a,o,h,u,l,c=this.cells[1],f=this.cells[2],p=e.preScale,d=e.postScale;if(e.cutoff){e.prevCutoff!==e.cutoff&&(e.prevCutoff=e.cutoff,n(e));var v=e.x1L,m=e.x2L,g=e.y1L,b=e.y2L,_=e.x1R,y=e.x2R,w=e.y1R,x=e.y2R,k=e.b0,A=e.b1,S=e.b2,T=e.a1,I=e.a2;for(a=0,o=c.length;a<o;++a)u=c[a]*p,l=k*u+A*v+S*m-T*g-I*b,h=l*d,h<-1?h=-1:h>1&&(h=1),c[a]=h,m=v,v=u,b=g,g=l,u=f[a]*p,l=k*u+A*_+S*y-T*w-I*x,h=l*d,h<-1?h=-1:h>1&&(h=1),f[a]=h,y=_,_=u,x=w,w=l;e.x1L=v,e.x2L=m,e.y1L=g,e.y2L=b,e.x1R=_,e.x2R=y,e.y1R=w,e.y2R=x}else for(a=0,o=c.length;a<o;++a)h=c[a]*p*d,h<-1?h=-1:h>1&&(h=1),c[a]=h,h=f[a]*p*d,h<-1?h=-1:h>1&&(h=1),f[a]=h}i.outputSignalAR(this)}return this};var n=function(t){var e=2*Math.PI*t.cutoff/t.samplerate,i=Math.cos(e),s=Math.sin(e),n=s/(2*t.Q),r=1/(1+n);t.b0=.5*(1-i)*r,t.b1=1-i*r,t.b2=.5*(1-i)*r,t.a1=-2*i*r,t.a2=1-n*r};i.register("dist",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),this._.ar=!1}var i=t.fn;i.extend(e);var s=e.prototype;s.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s,n,r,a,o,h,u=this.nodes,l=this.cells[0],c=this.cells[1],f=this.cells[2],p=u.length,d=l.length;if(e.ar){if(u.length>0)for(u[0].process(t),a=u[0].cells[1],o=u[0].cells[2],c.set(a),f.set(o),s=1;s<p;++s)for(u[s].process(t),a=u[s].cells[1],o=u[s].cells[2],n=0;n<d;++n)h=a[n],c[n]=0===h?0:c[n]/h,h=o[n],f[n]=0===h?0:f[n]/h;else for(n=0;n<d;++n)c[n]=f[s]=0;i.outputSignalAR(this)}else{if(u.length>0)for(r=u[0].process(t).cells[0][0],s=1;s<p;++s)h=u[s].process(t).cells[0][0],r=0===h?0:r/h;else r=0;l[0]=r,i.outputSignalKR(this)}}return this},i.register("/",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e);var i=this._;i.env=new r(i.samplerate),i.env.setStep(i.cellsize),i.tmp=new s.SignalArray(i.cellsize),i.ar=!1,i.plotFlush=!0,i.onended=h(this),this.on("ar",o)}function i(t,e,i,s,n,r){var a=i;return"number"==typeof t[s]?a=t[s]:"number"==typeof t[n]?a=t[n]:r&&("string"==typeof t[s]?a=r(t[s]):"string"==typeof t[n]&&(a=r(t[n]))),a<e&&(a=e),a}var s=t.fn,n=t.timevalue,r=t.modules.Envelope,a=s.isDictionary;s.extend(e);var o=function(t){this._.env.setStep(t?1:this._.cellsize)},h=function(t){return function(){t._.emit("ended")}},u=e.prototype;Object.defineProperties(u,{table:{set:function(t){Array.isArray(t)&&(l.call(this,t),this._.plotFlush=!0)},get:function(){return this._.env.table}},curve:{set:function(t){this._.env.setCurve(t)},get:function(){return this._.env.curve}},releaseNode:{set:function(t){this._.env.setReleaseNode(t),this._.plotFlush=!0},get:function(){return this._.env.releaseNode+1}},loopNode:{set:function(t){this._.env.setLoopNode(t),this._.plotFlush=!0},get:function(){return this._.env.loopNode+1}}}),u.clone=function(){var t=s.clone(this);return t._.env=this._.env.clone(),t},u.reset=function(){return this._.env.reset(),this},u.release=function(){var t=this._;return t.env.release(),t.emit("released"),this},u.bang=function(){var t=this._;return t.env.reset(),t.env.status=r.StatusGate,t.emit("bang"),this},u.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var i,n=this.cells[1],r=this.cells[2],a=e.cellsize;if(this.nodes.length)s.inputSignalAR(this);else for(i=0;i<a;++i)n[i]=r[i]=1;var o,h=null;if(e.ar){var u=e.tmp;for(e.env.process(u),i=0;i<a;++i)n[i]*=u[i],r[i]*=u[i];h=e.env.emit}else{for(o=e.env.next(),i=0;i<a;++i)n[i]*=o,r[i]*=o;h=e.env.emit}s.outputSignalAR(this),h&&("ended"===h?s.nextTick(e.onended):this._.emit(h,e.value))}return this};var l=function(t){for(var e,i,s,a,o=this._.env,h=[t[0]||f],u=1,l=t.length;u<l;++u)e=t[u][0]||f,i=t[u][1],s=t[u][2],"number"!=typeof i&&(i="string"==typeof i?n(i):10),i<10&&(i=10),"number"==typeof s?(a=s,s=r.CurveTypeCurve):(s=r.CurveTypeDict[s]||null,a=0),h.push([e,i,s,a]);o.setTable(h)},c=t.Object.prototype.plot;u.plot=function(t){if(this._.plotFlush){var e,i,s=this._.env.clone(),n=s.getInfo(1e3),a=n.totalDuration,o=n.loopBeginTime,h=n.releaseBeginTime,u=new Float32Array(256),l=0,f=a/u.length,p=!1,d=.001*a*this._.samplerate|0;for(d/=u.length,s.setStep(d),s.status=r.StatusGate,e=0,i=u.length;e<i;++e)u[e]=s.next(),l+=f,!p&&l>=h&&(s.release(),p=!0);this._.plotData=u,this._.plotBefore=function(t,e,i,s,n){var r,u;o!==1/0&&h!==1/0&&(r=e+s*(o/a),u=e+s*(h/a),u-=r,t.fillStyle="rgba(224, 224, 224, 0.8)",t.fillRect(r,0,u,n)),h!==1/0&&(r=e+s*(h/a),u=s-r,t.fillStyle="rgba(212, 212, 212, 0.8)",t.fillRect(r,0,u,n))};var v=1/0,m=-(1/0);for(e=0;e<i;++e)u[e]<v?v=u[e]:u[e]>m&&(m=u[e]);m<1&&(m=1),this._.plotRange=[v,m],this._.plotData=u,this._.plotFlush=null}return c.call(this,t)},s.register("env",e);var f=r.ZERO;s.register("perc",function(t){a(t[0])||t.unshift({});var s=t[0],r=i(s,10,10,"a","attackTime",n),o=i(s,10,1e3,"r","releaseTime",n),h=i(s,f,1,"lv","level");return s.table=[f,[h,r],[f,o]],new e(t)}),s.register("adsr",function(t){a(t[0])||t.unshift({});var s=t[0],r=i(s,10,10,"a","attackTime",n),o=i(s,10,300,"d","decayTime",n),h=i(s,f,.5,"s","sustainLevel"),u=i(s,10,1e3,"r","decayTime",n),l=i(s,f,1,"lv","level");return s.table=[f,[l,r],[h,o],[f,u]],s.releaseNode=3,new e(t)}),s.register("adshr",function(t){a(t[0])||t.unshift({});var s=t[0],r=i(s,10,10,"a","attackTime",n),o=i(s,10,300,"d","decayTime",n),h=i(s,f,.5,"s","sustainLevel"),u=i(s,10,500,"h","holdTime",n),l=i(s,10,1e3,"r","decayTime",n),c=i(s,f,1,"lv","level");return s.table=[f,[c,r],[h,o],[h,u],[f,l]],new e(t)}),s.register("asr",function(t){a(t[0])||t.unshift({});var s=t[0],r=i(s,10,10,"a","attackTime",n),o=i(s,f,.5,"s","sustainLevel"),h=i(s,10,1e3,"r","releaseTime",n);return s.table=[f,[o,r],[f,h]],s.releaseNode=2,new e(t)}),s.register("dadsr",function(t){a(t[0])||t.unshift({});var s=t[0],r=i(s,10,100,"dl","delayTime",n),o=i(s,10,10,"a","attackTime",n),h=i(s,10,300,"d","decayTime",n),u=i(s,f,.5,"s","sustainLevel"),l=i(s,10,1e3,"r","relaseTime",n),c=i(s,f,1,"lv","level");return s.table=[f,[f,r],[c,o],[u,h],[f,l]],s.releaseNode=4,new e(t)}),s.register("ahdsfr",function(t){a(t[0])||t.unshift({});var s=t[0],r=i(s,10,10,"a","attackTime",n),o=i(s,10,10,"h","holdTime",n),h=i(s,10,300,"d","decayTime",n),u=i(s,f,.5,"s","sustainLevel"),l=i(s,10,5e3,"f","fadeTime",n),c=i(s,10,1e3,"r","relaseTime",n),p=i(s,f,1,"lv","level");return s.table=[f,[p,r],[p,o],[u,h],[f,l],[f,c]],s.releaseNode=5,new e(t)}),s.register("linen",function(t){a(t[0])||t.unshift({});var s=t[0],r=i(s,10,10,"a","attackTime",n),o=i(s,10,1e3,"s","sustainTime",n),h=i(s,10,1e3,"r","releaseTime",n),u=i(s,f,1,"lv","level");return s.table=[f,[u,r],[u,o],[f,h]],new e(t)}),s.register("env.tri",function(t){a(t[0])||t.unshift({});var s=t[0],r=i(s,20,1e3,"dur","duration",n),o=i(s,f,1,"lv","level");return r*=.5,s.table=[f,[o,r],[f,r]],new e(t)}),s.register("env.cutoff",function(t){a(t[0])||t.unshift({});var s=t[0],r=i(s,10,100,"r","relaseTime",n),o=i(s,f,1,"lv","level");return s.table=[o,[f,r]],new e(t)})}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this);var s=this._;s.biquads=new Array(7),s.plotBefore=o,s.plotRange=[-18,18],s.plotFlush=!0}var i=t.fn,s=t.modules.FFT,n=t.modules.Biquad,r=20,a={hpf:0,lf:1,lmf:2,mf:3,hmf:4,hf:5,lpf:6};i.extend(e);var o=function(t,e,i,s,n){t.lineWidth=1,t.strokeStyle="rgb(192, 192, 192)";for(var a=.5*this._.samplerate,o=1;o<=10;++o)for(var h=1;h<=4;h++){var u=o*Math.pow(10,h);if(!(u<=r||a<=u)){t.beginPath();var l=Math.log(u/r)/Math.log(a/r);l=(l*s+e|0)+.5,t.moveTo(l,i),t.lineTo(l,i+n),t.stroke()}}var c=n/6;for(o=1;o<6;o++){t.beginPath();var f=(i+o*c|0)+.5;t.moveTo(e,f),t.lineTo(e+s,f),t.stroke()}},h=e.prototype;Object.defineProperties(h,{params:{set:function(t){if("object"==typeof t)for(var e=Object.keys(t),i=0,s=e.length;i<s;++i){var n=t[e[i]];Array.isArray(n)?this.setParams(e[i],n[0],n[1],n[2]):this.setParams(e[i])}}}}),h.setParams=function(t,e,i,s){var r=this._;if("string"==typeof t&&(t=a[t]),0<=t&&t<r.biquads.length){if(t|=0,"number"==typeof e&&"number"==typeof i){"number"!=typeof s&&(s=0);var o=r.biquads[t];if(!o)switch(o=r.biquads[t]=new n(r.samplerate),t){case 0:o.setType("highpass");break;case r.biquads.length-1:o.setType("lowpass");break;default:o.setType("peaking")}o.setParams(e,i,s)}else r.biquads[t]=void 0;r.plotFlush=!0}return this},h.getParams=function(t){var e=this._,i=e.biquads[0|t];if(i)return{freq:i.frequency,Q:i.Q,gain:i.gain}},h.process=function(t){var e=this._;if(this.tickID!==t){if(this.tickID=t,i.inputSignalAR(this),!e.bypassed)for(var s=this.cells[1],n=this.cells[2],r=e.biquads,a=0,o=r.length;a<o;++a)r[a]&&r[a].process(s,n);i.outputSignalAR(this)}return this};var u=new s(2048),l=t.Object.prototype.plot;h.plot=function(t){if(this._.plotFlush){var e=this._,i=new Float32Array(u.length);i[0]=1;for(var s=0,a=e.biquads.length;s<a;++s){var o=this.getParams(s);if(o){var h=new n(e.samplerate);0===s?h.setType("highpass"):s===a-1?h.setType("lowpass"):h.setType("peaking"),h.setParams(o.freq,o.Q,o.gain),h.process(i,i)}}u.forward(i);var c,f,p,d,v,m,g,b=512,_=new Float32Array(b),y=.5*e.samplerate,w=new Float32Array(b);for(u.getFrequencyData(w),s=0;s<b;++s)f=Math.pow(y/r,s/b)*r,c=f/(y/w.length),p=0|c,d=c-p,0===p?m=v=g=w[p]:(v=w[p-1],m=w[p],g=(1-d)*v+d*m),_[s]=g;this._.plotData=_,this._.plotFlush=null}return l.call(this,t)},i.register("eq",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.listener(this),i.fixAR(this),this.real=new t.ChannelObject(this),this.imag=new t.ChannelObject(this),this.cells[3]=this.real.cell,this.cells[4]=this.imag.cell;var n=this._;n.fft=new s(2*n.cellsize),n.fftCell=new i.SignalArray(n.fft.length),n.prevCell=new i.SignalArray(n.cellsize),n.freqs=new i.SignalArray(n.fft.length>>1),n.plotFlush=!0,n.plotRange=[0,32],n.plotBarStyle=!0}var i=t.fn,s=t.modules.FFT;i.extend(e);var n=e.prototype;Object.defineProperties(n,{window:{set:function(t){this._.fft.setWindow(t)},get:function(){return this._.fft.windowName}},spectrum:{get:function(){return this._.fft.getFrequencyData(this._.freqs)}}}),n.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t,i.inputSignalAR(this),i.outputSignalAR(this);var s=this.cells[0],n=e.cellsize;e.fftCell.set(e.prevCell),e.fftCell.set(s,n),e.fft.forward(e.fftCell),e.prevCell.set(s),e.plotFlush=!0,this.cells[3].set(e.fft.real.subarray(0,n)),this.cells[4].set(e.fft.imag.subarray(0,n))}return this};var r=t.Object.prototype.plot;n.plot=function(t){return this._.plotFlush&&(this._.plotData=this.spectrum,this._.plotFlush=null),r.call(this,t)},i.register("fft",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e),i.fixAR(this);var s=this._;s.freq=t(440),s.reg=32768,s.shortFlag=!1,s.phase=0,s.lastValue=0}var i=t.fn;i.extend(e);var s=e.prototype;Object.defineProperties(s,{shortFlag:{set:function(t){this._.shortFlag=!!t},get:function(){return this._.shortFlag}},freq:{set:function(e){this._.freq=t(e)},get:function(){return this._.freq}}}),s.process=function(t){var e=this._,i=this.cells[0];if(this.tickID!==t){this.tickID=t;var s,n,r=e.lastValue,a=e.phase,o=e.freq.process(t).cells[0][0]/e.samplerate,h=e.reg,u=e.mul,l=e.add;if(e.shortFlag)for(s=0,n=i.length;s<n;++s)a>=1&&(h>>=1,h|=(1&(h^h>>6))<<15,r=(1&h)-.5,a-=1),i[s]=r*u+l,a+=o;else for(s=0,n=i.length;s<n;++s)a>=1&&(h>>=1,h|=(1&(h^h>>1))<<15,r=(1&h)-.5,a-=1),i[s]=r*u+l,a+=o;e.reg=h,e.phase=a,e.lastValue=r}return this},i.register("fnoise",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this),this._.selected=0,this._.outputs=[]}var i=t.fn,s=function(){function e(e){t.Object.call(this,2,[]),i.fixAR(this),this._.parent=e}return i.extend(e),e.prototype.process=function(t){return this.tickID!==t&&(this.tickID=t,this._.parent.process(t)),this},e}();i.extend(e);var n=e.prototype;Object.defineProperties(n,{
selected:{set:function(t){var e=this._;if("number"==typeof t){e.selected=t;for(var s=e.outputs,n=0,r=s.length;n<r;++n)s[n]&&(s[n].cells[0].set(i.emptycell),s[n].cells[1].set(i.emptycell),s[n].cells[2].set(i.emptycell))}},get:function(){return this._.selected}}}),n.at=function(t){var e=this._,i=e.outputs[t];return i||(e.outputs[t]=i=new s(this)),i},n.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t,i.inputSignalAR(this),i.outputSignalAR(this);var s=e.outputs[e.selected];s&&(s.cells[0].set(this.cells[0]),s.cells[1].set(this.cells[1]),s.cells[2].set(this.cells[2]))}return this},i.register("gate",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e),i.fixAR(this);var n=this._;n.fft=new s(2*n.cellsize),n.fftCell=new i.SignalArray(this._.fft.length),n.realBuffer=new i.SignalArray(this._.fft.length),n.imagBuffer=new i.SignalArray(this._.fft.length)}var i=t.fn,s=t.modules.FFT;i.extend(e);var n=e.prototype;Object.defineProperties(n,{real:{set:function(e){this._.real=t(e)},get:function(){return this._.real}},imag:{set:function(e){this._.imag=t(e)},get:function(){return this._.imag}}}),n.process=function(t){var e=this._;if(this.tickID!==t&&(this.tickID=t,e.real&&e.imag)){var s=this.cells[0],n=e.realBuffer,r=e.imagBuffer,a=e.real.process(t).cells[0],o=e.imag.process(t).cells[0];n.set(a),r.set(o),s.set(e.fft.inverse(n,r).subarray(0,e.cellsize)),i.outputSignalAR(this)}return this},i.register("ifft",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e),i.timer(this),i.fixKR(this);var s=this._;s.interval=t(1e3),s.count=0,s.delay=0,s.timeout=1/0,s.currentTime=0,s.delaySamples=0,s.countSamples=0,s.onended=i.make_onended(this),this.on("start",n)}var i=t.fn,s=t.timevalue;i.extend(e);var n=function(){var t=this._;this.playbackState=i.PLAYING_STATE,t.delaySamples=t.samplerate*(.001*t.delay)|0,t.countSamples=t.count=t.currentTime=0};Object.defineProperty(n,"unremovable",{value:!0,writable:!1});var r=e.prototype;Object.defineProperties(r,{interval:{set:function(e){"string"==typeof e&&(e=s(e),e<=0&&(e=0)),this._.interval=t(e)},get:function(){return this._.interval}},delay:{set:function(t){"string"==typeof t&&(t=s(t)),"number"==typeof t&&t>=0&&(this._.delay=t,this._.delaySamples=this._.samplerate*(.001*t)|0)},get:function(){return this._.delay}},count:{set:function(t){"number"==typeof t&&(this._.count=t)},get:function(){return this._.count}},timeout:{set:function(t){"string"==typeof t&&(t=s(t)),"number"==typeof t&&t>=0&&(this._.timeout=t)},get:function(){return this._.timeout}},currentTime:{get:function(){return this._.currentTime}}}),r.bang=function(){var t=this._;return this.playbackState=i.PLAYING_STATE,t.delaySamples=t.samplerate*(.001*t.delay)|0,t.countSamples=t.count=t.currentTime=0,t.emit("bang"),this},r.process=function(t){var e=this.cells[0],s=this._;if(this.tickID!==t){this.tickID=t,s.delaySamples>0&&(s.delaySamples-=e.length);var n=s.interval.process(t).cells[0][0];if(s.delaySamples<=0&&(s.countSamples-=e.length,s.countSamples<=0)){s.countSamples+=s.samplerate*n*.001|0;for(var r=this.nodes,a=s.count,o=a*s.mul+s.add,h=0,u=e.length;h<u;++h)e[h]=o;for(var l=0,c=r.length;l<c;++l)r[l].bang(a);s.count+=1}s.currentTime+=i.currentTimeIncr,s.currentTime>=s.timeout&&i.nextTick(s.onended)}return this},i.register("interval",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e),i.fixAR(this);var s=this._,n=Math.ceil(Math.log(s.samplerate)*Math.LOG2E);s.buffersize=1<<n,s.buffermask=s.buffersize-1,s.buffer=new i.SignalArray(s.buffersize),s.time=0,s.readIndex=0,s.writeIndex=0}var i=t.fn,s=t.timevalue;i.extend(e);var n=e.prototype;Object.defineProperties(n,{time:{set:function(t){if("string"==typeof t&&(t=s(t)),"number"==typeof t&&t>0){var e=this._;e.time=t;var i=.001*t*e.samplerate|0;i>e.buffermask&&(i=e.buffermask),e.writeIndex=e.readIndex+i&e.buffermask}},get:function(){return this._.time}}}),n.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t,i.inputSignalAR(this);var s,n=this.cells[0],r=e.buffer,a=e.buffermask,o=e.readIndex,h=e.writeIndex,u=n.length;for(s=0;s<u;++s)r[h]=n[s],n[s]=r[o],o+=1,h=h+1&a;e.readIndex=o&a,e.writeIndex=h,i.outputSignalAR(this)}return this},i.register("lag",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e);var i=this._;i.input=0,i.value=0,i.prev=null,i.ar=!1,i.map=s}var i=t.fn;i.extend(e);var s=function(t){return t},n=e.prototype;Object.defineProperties(n,{input:{set:function(t){"number"==typeof t&&(this._.input=t)},get:function(){return this._.input}},map:{set:function(t){"function"==typeof t&&(this._.map=t)},get:function(){return this._.map}}}),n.bang=function(){return this._.prev=null,this._.emit("bang"),this},n.at=function(t){return this._.map?this._.map(t):0},n.process=function(t){var e=this.cells[0],s=this._;if(this.tickID!==t){this.tickID=t;var n,r=this.nodes.length,a=e.length;if(s.ar&&r){i.inputSignalAR(this);var o=s.map;if(o)for(n=0;n<a;++n)e[n]=o(e[n]);s.value=e[a-1],i.outputSignalAR(this)}else{var h=r?i.inputSignalKR(this):s.input;s.map&&s.prev!==h&&(s.prev=h,s.value=s.map(h));var u=s.value*s.mul+s.add;for(n=0;n<a;++n)e[n]=u}}return this},i.register("map",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e)}var i=t.fn;i.extend(e);var s=e.prototype;s.process=function(t){var e=this.cells[0],s=this._;if(this.tickID!==t){this.tickID=t;var n,r,a,o,h=this.nodes,u=h.length,l=e.length;if(s.ar){if(h.length>0)for(a=h[0].process(t).cells[0],e.set(a),n=1;n<u;++n)for(a=h[n].process(t).cells[0],r=0;r<l;++r)o=a[r],e[r]<o&&(e[r]=o);else for(r=0;r<l;++r)e[r]=0;i.outputSignalAR(this)}else{if(h.length>0)for(a=h[0].process(t).cells[0][0],n=1;n<u;++n)o=h[n].process(t).cells[0][0],a<o&&(a=o);else a=0;e[0]=a,i.outputSignalKR(this)}}return this},i.register("max",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this);var n=this._;n.src=n.func=null,n.bufferL=new i.SignalArray(s),n.bufferR=new i.SignalArray(s),n.readIndex=0,n.writeIndex=0,n.totalRead=0,n.totalWrite=0}if("browser"===t.envtype){var i=t.fn,s=4096,n=s-1;i.extend(e);var r=e.prototype;r.listen=function(e){var i=a[t.env];i&&(i.set.call(this,e),i.listen.call(this))},r.unlisten=function(){var e=a[t.env];e&&e.unlisten.call(this),this.cells[0].set(i.emptycell),this.cells[1].set(i.emptycell),this.cells[2].set(i.emptycell);for(var s=this._,n=s.bufferL,r=s.bufferR,o=0,h=n.length;o<h;++o)n[o]=r[o]=0},r.process=function(t){var e=this._;if(null===e.src)return this;if(this.tickID!==t){this.tickID=t;var s=e.cellsize;if(e.totalWrite>e.totalRead+s){var r=e.readIndex,a=r+s;this.cells[1].set(e.bufferL.subarray(r,a)),this.cells[2].set(e.bufferR.subarray(r,a)),e.readIndex=a&n,e.totalRead+=s}i.outputSignalAR(this)}return this};var a={};a.webkit={set:function(t){var e=this._;if(t instanceof HTMLMediaElement){var s=i._audioContext;e.src=s.createMediaElementSource(t)}},listen:function(){var t=this._,e=i._audioContext;t.gain=e.createGain(),t.gain.gain.value=0,t.node=e.createScriptProcessorNode(1024,2,2),t.node.onaudioprocess=o(this),t.src.connect(t.node),t.node.connect(t.gain),t.gain.connect(e.destination)},unlisten:function(){var t=this._;t.src&&t.src.disconnect(),t.gain&&t.gain.disconnect(),t.node&&t.node.disconnect()}};var o=function(t){return function(e){var i=t._,s=e.inputBuffer,r=s.length,a=i.writeIndex;i.bufferL.set(s.getChannelData(0),a),i.bufferR.set(s.getChannelData(1),a),i.writeIndex=a+r&n,i.totalWrite+=r}};a.moz={set:function(t){var e=this._;t instanceof HTMLAudioElement&&(e.src=t,e.istep=e.samplerate/t.mozSampleRate)},listen:function(){var t=this._,e=t.bufferL,i=t.bufferR,s=0,r=0;2===t.src.mozChannels?(t.x=0,t.func=function(a){var o,h,u=t.writeIndex,l=t.totalWrite,c=a.frameBuffer,f=t.istep,p=c.length;for(o=t.x,h=0;h<p;h+=2){for(o+=f;o>0;)e[u]=.5*(c[h]+s),i[u]=.5*(c[h+1]+r),u=u+1&n,++l,o-=1;s=c[h],r=c[h+1]}t.x=o,t.writeIndex=u,t.totalWrite=l}):(t.x=0,t.func=function(r){var a,o,h=t.writeIndex,u=t.totalWrite,l=r.frameBuffer,c=t.istep,f=l.length;for(a=t.x,o=0;o<f;++o){for(a+=c;a>=0;)e[h]=i[h]=.5*(l[o]+s),h=h+1&n,++u,a-=1;s=l[o]}t.x=a,t.writeIndex=h,t.totalWrite=u}),t.src.addEventListener("MozAudioAvailable",t.func)},unlisten:function(){var t=this._;t.func&&(t.src.removeEventListener("MozAudioAvailable",t.func),t.func=null)}},i.register("mediastream",e)}}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e);var i=this._;i.midi=0,i.value=0,i.prev=null,i.a4=440,i.ar=!1}var i=t.fn;i.extend(e);var s=e.prototype;Object.defineProperties(s,{midi:{set:function(t){"number"==typeof t&&(this._.midi=t)},get:function(){return this._.midi}},a4:{set:function(t){"number"==typeof t&&(this._.a4=t,this._.prev=null)},get:function(){return this._.a4}}}),s.bang=function(){return this._.prev=null,this._.emit("bang"),this},s.at=function(t){var e=this._;return e.a4*Math.pow(2,(t-69)/12)},s.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s,n=this.cells[0],r=this.nodes.length,a=n.length;if(e.ar&&r){i.inputSignalAR(this);var o=e.a4;for(s=0;s<a;++s)n[s]=o*Math.pow(2,(n[s]-69)/12);e.value=n[a-1],i.outputSignalAR(this)}else{var h=r?i.inputSignalKR(this):e.midi;e.prev!==h&&(e.prev=h,e.value=e.a4*Math.pow(2,(h-69)/12)),n[0]=e.value,i.outputSignalKR(this)}}return this},i.register("midicps",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e);var i=this._;i.midi=0,i.value=0,i.prev=null,i.range=12,i.ar=!1}var i=t.fn;i.extend(e);var s=e.prototype;Object.defineProperties(s,{midi:{set:function(t){"number"==typeof t&&(this._.midi=t)},get:function(){return this._.midi}},range:{set:function(t){"number"==typeof t&&t>0&&(this._.range=t)},get:function(){return this._.range}}}),s.bang=function(){return this._.prev=null,this._.emit("bang"),this},s.at=function(t){var e=this._;return Math.pow(2,t/e.range)},s.process=function(t){var e=this.cells[0],s=this._;if(this.tickID!==t){this.tickID=t;var n,r=this.nodes.length,a=e.length;if(s.ar&&r){i.inputSignalAR(this);var o=s.range;for(n=0;n<a;++n)e[n]=Math.pow(2,e[n]/o);s.value=e[a-1],i.outputSignalAR(this)}else{var h=this.nodes.length?i.inputSignalKR(this):s.midi;s.prev!==h&&(s.prev=h,s.value=Math.pow(2,h/s.range));var u=s.value*s.mul+s.add;for(n=0;n<a;++n)e[n]=u}}return this},i.register("midiratio",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e)}var i=t.fn;i.extend(e);var s=e.prototype;s.process=function(t){var e=this.cells[0],s=this._;if(this.tickID!==t){this.tickID=t;var n,r,a,o,h=this.nodes,u=h.length,l=e.length;if(s.ar){if(h.length>0)for(a=h[0].process(t).cells[0],e.set(a),n=1;n<u;++n)for(a=h[n].process(t).cells[0],r=0;r<l;++r)o=a[r],e[r]>o&&(e[r]=o);else for(r=0;r<l;++r)e[r]=0;i.outputSignalAR(this)}else{if(h.length>0)for(a=h[0].process(t).cells[0][0],n=1;n<u;++n)o=h[n].process(t).cells[0][0],a>o&&(a=o);else a=0;e[0]=a,i.outputSignalKR(this)}}return this},i.register("min",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,0,e),i.timer(this),i.fixKR(this);var n=this._;n.tracks=[],n.onended=i.make_onended(this),n.currentTime=0,this.on("start",s)}var i=t.fn;i.extend(e);var s=function(){var t=this,e=this._,s=e.mml;"string"==typeof s&&(s=[s]),e.tracks=s.map(function(e,i){return new r(t,i,e)}),e.currentTime=0,this.playbackState=i.PLAYING_STATE};Object.defineProperty(s,"unremoved",{value:!0,writable:!1});var n=e.prototype;Object.defineProperties(n,{mml:{set:function(t){var e=this._;("string"==typeof t||Array.isArray(t))&&(e.mml=t)},get:function(){return this._.mml}},currentTime:{get:function(){return this._.currentTime}}}),n.on=n.addListener=function(t,e){return"mml"===t&&(t="data",console.warn("A 'mml' event listener was deprecated in ~v13.03.01. use 'data' event listener.")),this._.events.on(t,e),this},n.once=function(t,e){return"mml"===t&&(t="data",console.warn("A 'mml' event listener was deprecated in ~v13.03.01. use 'data' event listener.")),this._.events.once(t,e),this},n.off=n.removeListener=function(t,e){return"mml"===t&&(t="data",console.warn("A 'mml' event listener was deprecated in ~v13.03.01. use 'data' event listener.")),this._.events.off(t,e),this},n.removeAllListeners=function(t){return"mml"===t&&(console.warn("A 'mml' event listener was deprecated in ~v13.03.01. use 'data' event listener."),t="data"),this._.events.removeAllListeners(t),this},n.listeners=function(t){return"mml"===t&&(console.warn("A 'mml' event listener was deprecated in ~v13.03.01. use 'data' event listener."),t="data"),this._.events.listeners(t)},n.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s,n,r=e.tracks;for(s=0,n=r.length;s<n;++s)r[s].process();for(;s--;)r[s].ended&&r.splice(s,1);0===r.length&&i.nextTick(e.onended),e.currentTime+=i.currentTimeIncr}return this},i.register("mml",e);var r=function(){function t(t,e,i){var s=this._={};s.sequencer=t,s.trackNum=e,s.commands=l(i),s.status={t:120,l:4,o:4,v:12,q:6,dot:0,tie:!1},s.index=0,s.queue=[],s.currentTime=0,s.queueTime=0,s.segnoIndex=-1,s.loopStack=[],s.prevNote=0,s.remain=1/0,this.ended=!1,u(this)}var e=0,s=1,n=2,r=3;t.prototype.process=function(){var t=this._,l=t.sequencer,c=t.trackNum,f=t.queue,p=!1;if(f.length)for(;f[0][0]<=t.currentTime;){var d=t.queue.shift();switch(d[1]){case s:a(l,c,d[2],d[3]),t.remain=d[4],u(this);break;case n:o(l,c,d[2],d[3]);break;case r:h(l,d[2]);break;case e:p=!0}if(0===f.length)break}t.remain-=i.currentTimeIncr,p&&(this.ended=!0),t.currentTime+=i.currentTimeIncr};var a=function(t,e,i,s){var n,r,a,o=t.nodes;for(r=0,a=o.length;r<a;++r)n=o[r],n.noteOn?n.noteOn(i,s):n.bang();t._.emit("data","noteOn",{trackNum:e,noteNum:i,velocity:s})},o=function(t,e,i,s){var n,r,a,o=t.nodes;for(r=0,a=o.length;r<a;++r)n=o[r],n.noteOff?n.noteOff(i,s):n.release&&n.release();t._.emit("data","noteOff",{trackNum:e,noteNum:i,velocity:s})},h=function(t,e){t._.emit("data","command",{command:e})},u=function(t){var i,a,o,h,u,l,c,f,p,d,v,m,g,b=t._,_=(b.sequencer,b.commands),y=b.queue,w=b.index,x=b.status,k=b.queueTime,A=b.loopStack;p=[];t:for(;;){if(_.length<=w){if(!(b.segnoIndex>=0))break;w=b.segnoIndex}switch(i=_[w++],i.name){case"@":y.push([k,r,i.val]);break;case"n":if(a=x.t||120,null!==i.len?(h=i.len,u=i.dot||0):(h=x.l,u=i.dot||x.dot),c=60/a*(4/h)*1e3,c*=2-1/Math.pow(2,u),l=x.v<<3,x.tie){for(m=y.length;m--;)if(y[m][2]){y.splice(m,1);break}o=b.prevNote}else o=b.prevNote=i.val+12*(x.o+1),y.push([k,s,o,l,c]);if(h>0){if(f=x.q/8,f<1)for(d=k+c*f,y.push([d,n,o,l]),m=0,g=p.length;m<g;++m)y.push([d,n,p[m],l]);if(p=[],k+=c,!x.tie)break t}else p.push(o);x.tie=!1;break;case"r":a=x.t||120,null!==i.len?(h=i.len,u=i.dot||0):(h=x.l,u=i.dot||x.dot),h>0&&(c=60/a*(4/h)*1e3,c*=2-1/Math.pow(2,u),k+=c);break;case"l":x.l=i.val,x.dot=i.dot;break;case"o":x.o=i.val;break;case"<":x.o<9&&(x.o+=1);break;case">":x.o>0&&(x.o-=1);break;case"v":x.v=i.val;break;case"(":x.v<15&&(x.v+=1);break;case")":x.v>0&&(x.v-=1);break;case"q":x.q=i.val;break;case"&":x.tie=!0;break;case"$":b.segnoIndex=w;break;case"[":A.push([w,null,null]);break;case"|":v=A[A.length-1],v&&1===v[1]&&(A.pop(),w=v[2]);break;case"]":v=A[A.length-1],v&&(null===v[1]&&(v[1]=i.count,v[2]=w),v[1]-=1,0===v[1]?A.pop():w=v[0]);break;case"t":x.t=null===i.val?120:i.val;break;case"EOF":y.push([k,e])}}b.index=w,b.queueTime=k},l=function(t){var e,i,s,n,r,a,o,h,u=new Array(t.length),l=[];for(r=0,a=c.length;r<a;++r)for(e=c[r],i=e.re;s=i.exec(t);){if(!u[s.index]){for(o=0,h=s[0].length;o<h;++o)u[s.index+o]=!0;n=e.func?e.func(s):{name:s[0]},n&&(n.index=s.index,n.origin=s[0],l.push(n))}for(;i.lastIndex<t.length&&u[i.lastIndex];)++i.lastIndex}return l.sort(function(t,e){return t.index-e.index}),l.push({name:"EOF"}),l},c=[{re:/@(\d*)/g,func:function(t){return{name:"@",val:t[1]||null}}},{re:/([cdefgab])([\-+]?)(\d*)(\.*)/g,func:function(t){return{name:"n",val:{c:0,d:2,e:4,f:5,g:7,a:9,b:11}[t[1]]+({"-":-1,"+":1}[t[2]]||0),len:""===t[3]?null:Math.min(0|t[3],64),dot:t[4].length}}},{re:/r(\d*)(\.*)/g,func:function(t){return{name:"r",len:""===t[1]?null:Math.max(1,Math.min(0|t[1],64)),dot:t[2].length}}},{re:/&/g},{re:/l(\d*)(\.*)/g,func:function(t){return{name:"l",val:""===t[1]?4:Math.min(0|t[1],64),dot:t[2].length}}},{re:/o([0-9])/g,func:function(t){return{name:"o",val:""===t[1]?4:0|t[1]}}},{re:/[<>]/g},{re:/v(\d*)/g,func:function(t){return{name:"v",val:""===t[1]?12:Math.min(0|t[1],15)}}},{re:/[()]/g},{re:/q([0-8])/g,func:function(t){return{name:"q",val:""===t[1]?6:Math.min(0|t[1],8)}}},{re:/\[/g},{re:/\|/g},{re:/\](\d*)/g,func:function(t){return{name:"]",count:0|t[1]||2}}},{re:/t(\d*)/g,func:function(t){return{name:"t",val:""===t[1]?null:Math.max(5,Math.min(0|t[1],300))}}},{re:/\$/g}];return t}()}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e)}var i=t.fn;i.extend(e),e.prototype.process=function(t){var e=this._;return this.tickID!==t&&(this.tickID=t,e.ar?(i.inputSignalAR(this),i.outputSignalAR(this)):(this.cells[0][0]=i.inputSignalKR(this),i.outputSignalKR(this))),this},i.register("mono",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e)}var i=t.fn;i.extend(e);var s=e.prototype;s.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s,n,r,a,o,h=this.nodes,u=this.cells[0],l=this.cells[1],c=this.cells[2],f=h.length,p=u.length;if(e.ar){if(h.length>0)for(h[0].process(t),a=h[0].cells[1],o=h[0].cells[2],l.set(a),c.set(o),s=1;s<f;++s)for(h[s].process(t),a=h[s].cells[1],o=h[s].cells[2],n=0;n<p;++n)l[n]*=a[n],c[n]*=o[n];else for(n=0;n<p;++n)l[n]=c[n]=0;i.outputSignalAR(this)}else{if(h.length>0)for(r=h[0].process(t).cells[0][0],s=1;s<f;++s)r*=h[s].process(t).cells[0][0];else r=0;u[0]=r,i.outputSignalKR(this)}}return this},i.register("*",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e);var i=this._;i.defaultValue=0,i.index=0,i.dict={},i.ar=!1}var i=t.fn;i.extend(e);var s=e.prototype;Object.defineProperties(s,{dict:{set:function(t){if("object"==typeof t)this._.dict=t;else if("function"==typeof t){for(var e={},i=0;i<128;++i)e[i]=t(i);this._.dict=e}},get:function(){return this._.dict}},defaultValue:{set:function(t){"number"==typeof t&&(this._.defaultValue=t)},get:function(){return this._.defaultValue}},index:{set:function(t){"number"==typeof t&&(this._.index=t)},get:function(){return this._.index}}}),s.at=function(t){var e=this._;return(e.dict[0|t]||e.defaultValue)*e.mul+e.add},s.clear=function(){return this._.dict={},this},s.process=function(t){var e=this.cells[0],s=this._;if(this.tickID!==t){this.tickID=t;var n,r,a,o=this.nodes.length,h=s.dict,u=s.defaultValue,l=s.mul,c=s.add,f=e.length;if(s.ar&&o){for(i.inputSignalAR(this),a=0;a<f;++a)n=e[a],n=n<0?n-.5|0:n+.5|0,e[a]=(h[n]||u)*l+c;i.outputSignalAR(this)}else for(n=this.nodes.length?i.inputSignalKR(this):s.index,n=n<0?n-.5|0:n+.5|0,r=(h[n]||u)*l+c,a=0;a<f;++a)e[a]=r}return this},i.register("ndict",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e)}var i=t.fn;i.extend(e);var s=e.prototype;s.process=function(t){var e=this.cells[0],i=this._;if(this.tickID!==t){this.tickID=t;var s,n,r,a=i.mul,o=i.add;if(i.ar)for(s=0,n=e.length;s<n;++s)e[s]=(2*Math.random()-1)*a+o;else for(r=(2*Math.random()+1)*a+o,s=0,n=e.length;s<n;++s)e[s]=r}return this},i.register("noise",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e);var s=this._;s.freq=t(440),s.phase=t(0),s.osc=new n(s.samplerate),s.tmp=new i.SignalArray(s.cellsize),s.osc.step=s.cellsize,this.once("init",r)}var i=t.fn,s=t.timevalue,n=t.modules.Oscillator;i.extend(e);var r=function(){var t=this._;this.wave||(this.wave="sin"),t.plotData=t.osc.wave,t.plotLineWidth=2,t.plotCyclic=!0,t.plotBefore=o},a=e.prototype;Object.defineProperties(a,{wave:{set:function(t){this._.osc.setWave(t)},get:function(){return this._.osc.wave}},freq:{set:function(e){"string"==typeof e&&(e=s(e),e=e<=0?0:1e3/e),this._.freq=t(e)},get:function(){return this._.freq}},phase:{set:function(e){this._.phase=t(e),this._.osc.feedback=!1},get:function(){return this._.phase}},fb:{set:function(e){this._.phase=t(e),this._.osc.feedback=!0},get:function(){return this._.phase}}}),a.clone=function(){var t=i.clone(this);return t._.osc=this._.osc.clone(),t._.freq=this._.freq,t._.phase=this._.phase,t},a.bang=function(){return this._.osc.reset(),this._.emit("bang"),this},a.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s,n=this.cells[1],r=this.cells[2],a=e.cellsize;if(this.nodes.length)i.inputSignalAR(this);else for(s=0;s<a;++s)n[s]=r[s]=1;var o=e.osc,h=e.freq.process(t).cells[0],u=e.phase.process(t).cells[0];if(o.frequency=h[0],o.phase=u[0],e.ar){var l=e.tmp;for(e.freq.isAr?e.phase.isAr?o.processWithFreqAndPhaseArray(l,h,u):o.processWithFreqArray(l,h):e.phase.isAr?o.processWithPhaseArray(l,u):o.process(l),s=0;s<a;++s)n[s]*=l[s],r[s]*=l[s]}else{var c=o.next();for(s=0;s<a;++s)n[s]*=c,r[s]*=c}i.outputSignalAR(this)}return this};var o;"browser"===t.envtype&&(o=function(t,e,i,s,n){var r=(n>>1)+.5;t.strokeStyle="#ccc",t.lineWidth=1,t.beginPath(),t.moveTo(e,r+i),t.lineTo(e+s,r+i),t.stroke()}),i.register("osc",e),i.register("sin",function(t){return new e(t).set("wave","sin")}),i.register("cos",function(t){return new e(t).set("wave","cos")}),i.register("pulse",function(t){return new e(t).set("wave","pulse")}),i.register("tri",function(t){return new e(t).set("wave","tri")}),i.register("saw",function(t){return new e(t).set("wave","saw")}),i.register("fami",function(t){return new e(t).set("wave","fami")}),i.register("konami",function(t){return new e(t).set("wave","konami")}),i.register("+sin",function(t){return new e(t).set("wave","+sin").kr()}),i.register("+pulse",function(t){return new e(t).set("wave","+pulse").kr()}),i.register("+tri",function(t){return new e(t).set("wave","+tri").kr()}),i.register("+saw",function(t){return new e(t).set("wave","+saw").kr()}),i.alias("square","pulse")}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this);var s=this._;s.pos=t(0),s.panL=.5,s.panR=.5}var i=t.fn;i.extend(e);var s=e.prototype;Object.defineProperties(s,{pos:{set:function(e){this._.pos=t(e)},get:function(){return this._.pos}}}),s.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s=e.pos.process(t).cells[0][0];if(e.prevPos!==s){e.panL=1-s,e.panR=e.prevPos=s}var n,r,a,o=this.nodes,h=this.cells[1],u=this.cells[2],l=o.length,c=h.length;if(l){for(a=o[0].process(t).cells[0],r=0;r<c;++r)h[r]=u[r]=a[r];for(n=1;n<l;++n)for(a=o[n].process(t).cells[0],r=0;r<c;++r)h[r]=u[r]+=a[r];var f=e.panL,p=e.panR;for(r=0;r<c;++r)h[r]=h[r]*f,u[r]=u[r]*p}else h.set(i.emptycell),u.set(i.emptycell);i.outputSignalAR(this)}return this},i.register("pan",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e);var i=this._;i.value=0,i.env=new r(i.samplerate),i.env.step=i.cellsize,i.curve="lin",i.counter=0,i.ar=!1,i.onended=a(this),this.on("ar",o)}var i=t.fn,s=t.timevalue,n=t.modules.Envelope,r=t.modules.EnvelopeValue;i.extend(e);var a=function(t,e){return function(){if("number"==typeof e)for(var i=t.cells[0],s=t.cells[1],n=t.cells[2],r=t._.env.value,a=0,o=s.length;a<o;++a)i[0]=s[a]=n[a]=r;t._.emit("ended")}},o=function(t){this._.env.step=t?1:this._.cellsize},h=e.prototype;Object.defineProperties(h,{value:{set:function(t){"number"==typeof t&&(this._.env.value=t)},get:function(){return this._.env.value}}}),h.to=function(t,e,i){var r=this._,a=r.env;if("string"==typeof e?e=s(e):"undefined"==typeof e&&(e=0),"undefined"==typeof i)r.counter=a.setNext(t,e,n.CurveTypeLin),r.curve="lin";else{var o=n.CurveTypeDict[i];"undefined"==typeof o?r.counter=a.setNext(t,e,n.CurveTypeCurve,i):r.counter=a.setNext(t,e,o),r.curve=i}return r.plotFlush=!0,this},h.setAt=function(t,e){var i=this._;return this.to(i.env.value,e,"set"),i.atValue=t,this},h.linTo=function(t,e){return this.to(t,e,"lin")},h.expTo=function(t,e){return this.to(t,e,"exp")},h.sinTo=function(t,e){return this.to(t,e,"sin")},h.welTo=function(t,e){return this.to(t,e,"wel")},h.sqrTo=function(t,e){return this.to(t,e,"sqr")},h.cubTo=function(t,e){return this.to(t,e,"cub")},h.cancel=function(){var t=this._;return t.counter=t.env.setNext(t.env.value,0,n.CurveTypeSet),this},h.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s,r,a=this.cells[1],o=this.cells[2],h=e.cellsize,u=e.env,l=e.counter;if(this.nodes.length)i.inputSignalAR(this);else for(s=0;s<h;++s)a[s]=o[s]=1;if(l<=0&&("set"===e.curve?u.setNext(e.atValue,0,n.CurveTypeSet):u.setNext(u.value,0,n.CurveTypeSet),i.nextTick(e.onended),e.counter=1/0),e.ar){for(s=0;s<h;++s)r=u.next(),a[s]*=r,o[s]*=r;e.counter-=e.cellsize}else{for(r=u.next(),s=0;s<h;++s)a[s]*=r,o[s]*=r;e.counter-=1}i.outputSignalAR(this),e.value=r}return this};var u=t.Object.prototype.plot;h.plot=function(t){var e=this._;if(e.plotFlush){var i,s,a,o=new r(128),h=new Float32Array(128);if("set"===e.curve)for(s=100,a=h.length;s<a;++s)h[s]=1;else for(i=n.CurveTypeDict[e.curve],"undefined"==typeof i?o.setNext(1,1e3,n.CurveTypeCurve,e.curve):o.setNext(1,1e3,i),s=0,a=h.length;s<a;++s)h[s]=o.next();e.plotData=h,e.plotRange=[0,1],e.plotFlush=null}return u.call(this,t)},i.register("param",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this);var s=this._;s.freq=t("sin",{freq:1,add:1e3,mul:250}).kr(),s.Q=t(1),s.allpass=[],this.steps=2}var i=t.fn,s=t.modules.Biquad;i.extend(e);var n=e.prototype;Object.defineProperties(n,{freq:{set:function(t){this._.freq=t},get:function(){return this._.freq}},Q:{set:function(e){this._.Q=t(e)},get:function(){return this._.Q}},steps:{set:function(t){if("number"==typeof t){if(t|=0,2===t||4===t||8===t||12===t){var e=this._.allpass;if(e.length<t)for(var i=e.length;i<t;++i)e[i]=new s(this._.samplerate),e[i].setType("allpass")}this._.steps=t}},get:function(){return this._.steps}}}),n.process=function(t){var e=this._;if(this.tickID!==t){if(this.tickID=t,i.inputSignalAR(this),!e.bypassed){var s,n=this.cells[1],r=this.cells[2],a=e.freq.process(t).cells[0][0],o=e.Q.process(t).cells[0][0],h=e.steps;for(s=0;s<h;s+=2)e.allpass[s].setParams(a,o,0),e.allpass[s].process(n,r),e.allpass[s+1].setParams(a,o,0),e.allpass[s+1].process(n,r)}i.outputSignalAR(this)}return this},i.register("phaser",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e),s.fixAR(this);for(var i=new Uint8Array(5),n=0;n<5;++n)i[n]=(Math.random()*(1<<30)|0)%25;this._.whites=i,this._.key=0}var i=31,s=t.fn;s.extend(e);var n=e.prototype;n.process=function(t){var e=this.cells[0],s=this._;if(this.tickID!==t){this.tickID=t;var n,r,a,o,h,u,l=s.key,c=s.whites,f=s.mul,p=s.add;for(n=0,r=e.length;n<r;++n){for(o=l++,l>i&&(l=0),u=o^l,a=h=0;a<5;++a)u&1<<a&&(c[a]=(Math.random()*(1<<30)|0)%25),h+=c[a];e[n]=(.01666666*h-1)*f+p}s.key=l}return this},s.register("pink",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e),this._.freq=440,this._.buffer=null,this._.index=0}var i=t.fn;i.extend(e);var s=e.prototype;Object.defineProperties(s,{freq:{set:function(t){"number"==typeof t&&(t<0&&(t=0),this._.freq=t)},get:function(){return this._.freq}}}),s.bang=function(){for(var t=this._,e=t.freq,s=t.samplerate/e+.5|0,n=t.buffer=new i.SignalArray(s),r=0;r<s;++r)n[r]=2*Math.random()-1;return t.index=0,t.emit("bang"),this},s.process=function(t){var e=this.cells[0],i=this._;if(this.tickID!==t){this.tickID=t;var s=i.buffer;if(s){var n,r,a,o=s.length,h=i.index,u=i.mul,l=i.add,c=e.length;for(a=0;a<c;++a)n=h,r=s[h++],h>=o&&(h=0),r=.5*(r+s[h]),s[n]=r,e[a]=r*u+l;i.index=h}}return this},i.register("pluck",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e),i.listener(this),i.fixAR(this);var s=this._;s.timeout=5e3,s.status=n,s.writeIndex=0,s.writeIndexIncr=1,s.currentTime=0,s.currentTimeIncr=1e3/s.samplerate,s.onended=a(this)}var i=t.fn,s=t.timevalue,n=0,r=1;i.extend(e);var a=function(t){return function(){var e=t._,s=new i.SignalArray(e.buffer.subarray(0,0|e.writeIndex));e.status=n,e.writeIndex=0,e.currentTime=0,e.emit("ended",{buffer:s,samplerate:e.samplerate})}},o=e.prototype;Object.defineProperties(o,{timeout:{set:function(t){"string"==typeof t&&(t=s(t)),"number"==typeof t&&t>0&&(this._.timeout=t)},get:function(){return this._.timeout}},samplerate:{set:function(t){"number"==typeof t&&0<t&&t<=this._.samplerate&&(this._.samplerate=t)},get:function(){return this._.samplerate}},currentTime:{get:function(){return this._.currentTime}}}),o.start=function(){var e,s=this._;return s.status===n&&(e=.01*s.timeout*s.samplerate|0,(!s.buffer||s.buffer.length<e)&&(s.buffer=new i.SignalArray(e)),s.writeIndex=0,s.writeIndexIncr=s.samplerate/t.samplerate,s.currentTime=0,s.status=r,s.emit("start"),this.listen()),this},o.stop=function(){var t=this._;return t.status===r&&(t.status=n,t.emit("stop"),i.nextTick(t.onended),this.unlisten()),this},o.bang=function(){return this._.status===n?this.srart():this._.status===r&&this.stop(),this._.emit("bang"),this},o.process=function(t){var e=this._,s=this.cells[0];if(this.tickID!==t){if(this.tickID=t,i.inputSignalAR(this),e.status===r){var n,a=s.length,o=e.buffer,h=e.timeout,u=e.writeIndex,l=e.writeIndexIncr,c=e.currentTime,f=e.currentTimeIncr;for(n=0;n<a;++n)o[0|u]=s[n],u+=l,c+=f,h<=c&&i.nextTick(e.onended);e.writeIndex=u,e.currentTime=c}i.outputSignalAR(this)}return this},i.register("record",e),i.alias("rec","record")}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this),this._.reverb=new s(this._.samplerate,this._.cellsize)}var i=t.fn,s=t.modules.Reverb;i.extend(e);var n=e.prototype;Object.defineProperties(n,{room:{set:function(t){"number"==typeof t&&(t=t>1?1:t<0?0:t,this._.reverb.setRoomSize(t))},get:function(){return this._.reverb.roomsize}},damp:{set:function(t){"number"==typeof t&&(t=t>1?1:t<0?0:t,this._.reverb.setDamp(t))},get:function(){return this._.reverb.damp}},mix:{set:function(t){"number"==typeof t&&(t=t>1?1:t<0?0:t,this._.reverb.wet=t)},get:function(){return this._.reverb.wet}}}),n.process=function(t){var e=this._;return this.tickID!==t&&(this.tickID=t,i.inputSignalAR(this),e.bypassed||e.reverb.process(this.cells[1],this.cells[2]),i.outputSignalAR(this)),this},i.register("reverb",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,0,e),i.timer(this),i.fixKR(this);var s=this._;s.queue=[],s.currentTime=0,s.maxRemain=1e3}var i=t.fn,s=t.timevalue;i.extend(e);var n=e.prototype;Object.defineProperties(n,{queue:{get:function(){return this._.queue}},remain:{get:function(){return this._.queue.length}},maxRemain:{set:function(t){"number"==typeof t&&t>0&&(this._.maxRemain=t)},get:function(){return this._.maxRemain}},isEmpty:{get:function(){return 0===this._.queue.length}},currentTime:{get:function(){return this._.currentTime}}}),n.sched=function(t,e,i){return"string"==typeof t&&(t=s(t)),"number"==typeof t&&this.schedAbs(this._.currentTime+t,e,i),this},n.schedAbs=function(e,i,n){if("string"==typeof e&&(e=s(e)),"number"==typeof e){var r=this._,a=r.queue;if(a.length>=r.maxRemain)return this;for(var o=a.length;o--&&!(a[o][0]<e););a.splice(o+1,0,[e,t(i),n])}return this},n.advance=function(t){return"string"==typeof t&&(t=s(t)),"number"==typeof t&&(this._.currentTime+=t),this},n.clear=function(){return this._.queue.splice(0),this},n.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s=null,n=e.queue;if(n.length)for(;n[0][0]<e.currentTime;){var r=e.queue.shift();if(r[1].bang(r[2]),s="sched",0===n.length){s="empty";break}}e.currentTime+=i.currentTimeIncr,s&&e.emit(s)}return this},i.register("schedule",e),i.alias("sched","schedule")}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.listener(this),i.fixAR(this);var s=this._;s.samples=0,s.writeIndex=0,s.plotFlush=!0,this.once("init",n)}var i=t.fn,s=t.timevalue;i.extend(e);var n=function(){this._.buffer||(this.size=1024),this._.interval||(this.interval=1e3)},r=e.prototype;Object.defineProperties(r,{size:{set:function(t){var e=this._;if(!e.buffer&&"number"==typeof t){var s=t<64?64:t>2048?2048:t;e.buffer=new i.SignalArray(s),e.reservedinterval&&(this.interval=e.reservedinterval,e.reservedinterval=null)}},get:function(){return this._.buffer.length}},interval:{
set:function(t){var e=this._;"string"==typeof t&&(t=s(t)),"number"==typeof t&&t>0&&(e.buffer?(e.interval=t,e.samplesIncr=.001*t*e.samplerate/e.buffer.length,e.samplesIncr<1&&(e.samplesIncr=1)):e.reservedinterval=t)},get:function(){return this._.interval}},buffer:{get:function(){return this._.buffer}}}),r.bang=function(){for(var t=this._,e=t.buffer,i=0,s=e.length;i<s;++i)e[i]=0;return t.samples=0,t.writeIndex=0,this._.emit("bang"),this},r.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t,i.inputSignalAR(this),i.outputSignalAR(this);var s,n=this.cells[0],r=e.cellsize,a=e.samples,o=e.samplesIncr,h=e.buffer,u=e.writeIndex,l=!1,c=h.length;for(s=0;s<r;++s)a<=0&&(h[u++]=n[s],u>=c&&(u=0),l=e.plotFlush=!0,a+=o),--a;e.samples=a,e.writeIndex=u,l&&this._.emit("data")}return this};var a=t.Object.prototype.plot;r.plot=function(t){var e=this._;if(e.plotFlush){for(var i=e.buffer,s=i.length-1,n=new Float32Array(i.length),r=e.writeIndex,o=0,h=i.length;o<h;o++)n[o]=i[++r&s];e.plotData=n,e.plotFlush=null}return a.call(this,t)},i.register("scope",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),n.fixAR(this);var i=this._;i.numberOfInputs=0,i.numberOfOutputs=0,i.bufferSize=0,i.bufferMask=0,i.duration=0,i.inputBufferL=null,i.inputBufferR=null,i.outputBufferL=null,i.outputBufferR=null,i.onaudioprocess=null,i.index=0,this.once("init",r)}function i(t,e){this.samplerate=t._.samplerate,this.length=t._.bufferSize,this.duration=t._.duration,this.numberOfChannels=e.length,this.getChannelData=function(t){return e[t]}}function s(e){var s=e._;this.node=e,this.playbackTime=t.currentTime,2===s.numberOfInputs?this.inputBuffer=new i(e,[s.inputBufferL,s.inputBufferR]):this.inputBuffer=new i(e,[s.inputBufferL]),2===s.numberOfOutputs?this.outputBuffer=new i(e,[s.outputBufferL,s.outputBufferR]):this.outputBuffer=new i(e,[s.outputBufferL])}var n=t.fn;n.extend(e);var r=function(){var t=this._;0===t.numberOfInputs&&(this.numberOfInputs=1),0===t.numberOfOutputs&&(this.numberOfOutputs=1),0===t.bufferSize&&(this.bufferSize=1024)},a=e.prototype;Object.defineProperties(a,{numberOfInputs:{set:function(t){var e=this._;0===e.numberOfInputs&&(e.numberOfInputs=2===t?2:1)},get:function(){return this._.numberOfInputs}},numberOfOutputs:{set:function(t){var e=this._;0===e.numberOfOutputs&&(e.numberOfOutputs=2===t?2:1)},get:function(){return this._.numberOfOutputs}},bufferSize:{set:function(t){var e=this._;0===e.bufferSize&&[256,512,1024,2048,4096,8192,16384].indexOf(t)!==-1&&(e.bufferSize=t,e.bufferMask=t-1,e.duration=t/e.samplerate,e.inputBufferL=new n.SignalArray(t),e.inputBufferR=new n.SignalArray(t),e.outputBufferL=new n.SignalArray(t),e.outputBufferR=new n.SignalArray(t))},get:function(){return this._.bufferSize}},onaudioprocess:{set:function(t){"function"==typeof t&&(this._.onaudioprocess=t)},get:function(){return this._.onaudioprocess}}}),a.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var i,r=e.cellsize,a=e.bufferMask,o=e.index,h=o+r,u=this.cells[1],l=this.cells[2];if(n.inputSignalAR(this),2===e.numberOfInputs)e.inputBufferL.set(u,o),e.inputBufferR.set(l,o);else{i=e.inputBufferL;for(var c=0;c<r;c++)i[o+c]=.5*(u[c]+l[c])}u.set(e.outputBufferL.subarray(o,h)),l.set(e.outputBufferR.subarray(o,h)),e.index=h&a,0===e.index&&e.onaudioprocess&&(e.onaudioprocess(new s(this)),1===e.numberOfOutputs&&e.outputBufferR.set(e.outputBufferL)),n.outputSignalAR(this)}return this},n.register("script",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),this._.selected=0,this._.background=!1}var i=t.fn;i.extend(e);var s=e.prototype;Object.defineProperties(s,{selected:{set:function(t){"number"==typeof t&&(this._.selected=t,this.cells[1].set(i.emptycell),this.cells[2].set(i.emptycell))},get:function(){return this._.selected}},background:{set:function(t){this._.background=!!t},get:function(){return this._.background}}}),s.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s,n=this.nodes,r=n.length;if(e.background)for(s=0;s<r;++s)n[s].process(t);var a=n[e.selected];a&&(e.background||a.process(t),this.cells[1].set(a.cells[1]),this.cells[2].set(a.cells[2])),i.outputSignalAR(this)}return this},i.register("selector",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.listener(this),i.fixAR(this);var s=this._;s.status=r,s.samples=0,s.samplesIncr=0,s.writeIndex=0,s.plotFlush=!0,s.plotRange=[0,32],s.plotBarStyle=!0,this.once("init",o)}var i=t.fn,s=t.timevalue,n=t.modules.FFT,r=0,a=1;i.extend(e);var o=function(){var t=this._;t.fft||(this.size=512),t.interval||(this.interval=500)},h=e.prototype;Object.defineProperties(h,{size:{set:function(t){var e=this._;if(!e.fft&&"number"==typeof t){var s=t<256?256:t>2048?2048:t;e.fft=new n(s),e.buffer=new i.SignalArray(e.fft.length),e.freqs=new i.SignalArray(e.fft.length>>1),e.reservedwindow&&(e.fft.setWindow(e.reservedwindow),e.reservedwindow=null),e.reservedinterval&&(this.interval=e.reservedinterval,e.reservedinterval=null)}},get:function(){return this._.buffer.length}},window:{set:function(t){this._.fft.setWindow(t)},get:function(){return this._.fft.windowName}},interval:{set:function(t){var e=this._;"string"==typeof t&&(t=s(t)),"number"==typeof t&&t>0&&(e.buffer?(e.interval=t,e.samplesIncr=.001*t*e.samplerate,e.samplesIncr<e.buffer.length&&(e.samplesIncr=e.buffer.length,e.interval=1e3*e.samplesIncr/e.samplerate)):e.reservedinterval=t)},get:function(){return this._.interval}},spectrum:{get:function(){return this._.fft.getFrequencyData(this._.freqs)}},real:{get:function(){return this._.fft.real}},imag:{get:function(){return this._.fft.imag}}}),h.bang=function(){return this._.samples=0,this._.writeIndex=0,this._.emit("bang"),this},h.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t,i.inputSignalAR(this),i.outputSignalAR(this);var s,n,o=this.cells[0],h=o.length,u=e.status,l=e.samples,c=e.samplesIncr,f=e.writeIndex,p=e.buffer,d=p.length;for(s=0;s<h;++s)l<=0&&u===r&&(u=a,f=0,l+=c),u===a&&(p[f++]=o[s],d<=f&&(e.fft.forward(p),n=e.plotFlush=!0,u=r)),--l;e.samples=l,e.status=u,e.writeIndex=f,n&&this._.emit("data")}return this};var u=t.Object.prototype.plot;h.plot=function(t){return this._.plotFlush&&(this._.plotData=this.spectrum,this._.plotFlush=null),u.call(this,t)},i.register("spectrum",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),this._.ar=!1}var i=t.fn;i.extend(e);var s=e.prototype;s.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s,n,r,a,o,h=this.nodes,u=this.cells[0],l=this.cells[1],c=this.cells[2],f=h.length,p=u.length;if(e.ar){if(h.length>0)for(h[0].process(t),a=h[0].cells[1],o=h[0].cells[2],l.set(a),c.set(o),s=1;s<f;++s)for(h[s].process(t),a=h[s].cells[1],o=h[s].cells[2],n=0;n<p;++n)l[n]-=a[n],c[n]-=o[n];else for(n=0;n<p;++n)l[n]=c[s]=0;i.outputSignalAR(this)}else{if(h.length>0)for(r=h[0].process(t).cells[0][0],s=1;s<f;++s)r-=h[s].process(t).cells[0][0];else r=0;u[0]=r,i.outputSignalKR(this)}}return this},i.register("-",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this);var s=this._;this.playbackState=i.FINISHED_STATE,s.poly=4,s.genList=[],s.genDict={},s.synthdef=null,s.remGen=r(this),s.onended=i.make_onended(this)}var i=t.fn;i.extend(e);var s=e.prototype;Object.defineProperties(s,{def:{set:function(t){"function"==typeof t&&(this._.synthdef=t)},get:function(){return this._.synthdef}},poly:{set:function(t){"number"==typeof t&&0<t&&t<=64&&(this._.poly=t)},get:function(){return this._.poly}}});var n=function(t,e){return function(){t._.remGen(e.gen)}},r=function(t){return function(e){var i=t._,s=i.genList.indexOf(e);s!==-1&&i.genList.splice(s,1),"undefined"!=typeof e.noteNum&&(i.genDict[e.noteNum]=null)}},a=function(e,s,r,a){r|=0,r<=0?this.noteOff(this,e):r>127&&(r=127);var o=this._,h=o.genList,u=o.genDict,l=u[e];l&&o.remGen(l);var c={freq:s,noteNum:e,velocity:r,mul:.0078125*r};if(a)for(var f in a)c[f]=a[f];c.doneAction=n(this,c),l=o.synthdef.call(this,c),l instanceof t.Object&&(l.noteNum=e,h.push(l),u[e]=c.gen=l,this.playbackState=i.PLAYING_STATE,h.length>o.poly&&o.remGen(h[0]))},o=function(){for(var t=new Float32Array(128),e=0;e<128;++e)t[e]=440*Math.pow(2,1*(e-69)/12);return t}(),h=function(t){return t>0?Math.log(1*t/440)*Math.LOG2E*12+69:0};s.noteOn=function(t,e,i){var s=o[t]||440*Math.pow(2,(t-69)/12);return a.call(this,t+.5|0,s,e,i),this},s.noteOff=function(t){var e=this._.genDict[t];return e&&e.release&&e.release(),this},s.noteOnWithFreq=function(t,e,i){var s=h(t);return a.call(this,s+.5|0,t,e,i),this},s.noteOffWithFreq=function(t){var e=h(t);return this.noteOff(e+.5|0)},s.allNoteOff=function(){for(var t=this._.genList,e=0,i=t.length;e<i;++e)t[e].release&&t[e].release()},s.allSoundOff=function(){for(var t=this._,e=t.genList,i=t.genDict;e.length;)delete i[e.shift().noteNum]},s.synth=function(e){var s,r=this._,a=r.genList,o={};if(e)for(var h in e)o[h]=e[h];return o.doneAction=n(this,o),s=r.synthdef.call(this,o),s instanceof t.Object&&(a.push(s),o.gen=s,this.playbackState=i.PLAYING_STATE,a.length>r.poly&&r.remGen(a[0])),this},s.process=function(t){var e=this.cells[0],s=this._;if(this.tickID!==t){if(this.tickID=t,this.playbackState===i.PLAYING_STATE){var n,r,a,o,h,u,l=s.genList,c=this.cells[1],f=this.cells[2],p=e.length;if(l.length)for(n=l[0],n.process(t),c.set(n.cells[1]),f.set(n.cells[2]),r=1,a=l.length;r<a;++r)for(n=l[r],n.process(t),h=n.cells[1],u=n.cells[2],o=0;o<p;++o)c[o]+=h[o],f[o]+=u[o];else i.nextTick(s.onended)}i.outputSignalAR(this)}return this},i.register("SynthDef",e);var u={set:function(e){i.isDictionary(e)?"string"==typeof e.type&&(this._.env=e):e instanceof t.Object&&(this._.env=e)},get:function(){return this._.env}};i.register("OscGen",function(){var i={set:function(e){e instanceof t.Object&&(this._.osc=e)},get:function(){return this._.osc}},s={set:function(t){"string"==typeof t&&(this._.wave=t)},get:function(){return this._.wave}},n=function(e){var i,s,n,r,a=this._;return s=a.osc||null,n=a.env||{},r=n.type||"perc",s instanceof t.Object&&"function"==typeof s.clone&&(s=s.clone()),s||(s=t("osc",{wave:a.wave})),s.freq=e.freq,s.mul=s.mul*e.velocity/128,i=s,n instanceof t.Object?"function"==typeof n.clone&&(i=n.clone().append(i)):i=t(r,n,i),i.on("ended",e.doneAction).bang(),i};return function(t){var r=new e(t);return r._.wave="sin",Object.defineProperties(r,{env:u,osc:i,wave:s}),r.def=n,r}}()),i.register("PluckGen",function(){var i=function(e){var i,s,n,r=this._;return s=r.env||{},n=s.type||"perc",i=t("pluck",{freq:e.freq,mul:e.velocity/128}).bang(),s instanceof t.Object?"function"==typeof s.clone&&(i=s.clone().append(i)):i=t(n,s,i),i.on("ended",e.doneAction).bang(),i};return function(t){var s=new e(t);return Object.defineProperties(s,{env:u}),s.def=i,s}}())}(timbre),function(t){"use strict";function e(e){t.Object.call(this,2,e),i.fixAR(this);var s=this._;s.isLooped=!1,s.onended=i.make_onended(this,0)}var i=t.fn,s=t.modules.Scissor,n=s.Tape,r=s.TapeStream,a=i.isSignalArray;i.extend(e);var o=e.prototype;Object.defineProperties(o,{tape:{set:function(e){e instanceof n?(this.playbackState=i.PLAYING_STATE,this._.tape=e,this._.tapeStream=new r(e,this._.samplerate),this._.tapeStream.isLooped=this._.isLooped):(e instanceof t.Object&&e.buffer&&(e=e.buffer),"object"==typeof e&&Array.isArray(e.buffer)&&a(e.buffer[0])&&(this.playbackState=i.PLAYING_STATE,this._.tape=new s(e),this._.tapeStream=new r(this._.tape,this._.samplerate),this._.tapeStream.isLooped=this._.isLooped))},get:function(){return this._.tape}},isLooped:{get:function(){return this._.isLooped}},buffer:{get:function(){if(this._.tape)return this._.tape.getBuffer()}}}),o.loop=function(t){return this._.isLooped=!!t,this._.tapeStream&&(this._.tapeStream.isLooped=this._.isLooped),this},o.bang=function(){return this.playbackState=i.PLAYING_STATE,this._.tapeStream&&this._.tapeStream.reset(),this._.emit("bang"),this},o.getBuffer=function(){if(this._.tape)return this._.tape.getBuffer()},o.process=function(t){var e=this._;if(this.tickID!==t){this.tickID=t;var s=e.tapeStream;if(s){var n=this.cells[1],r=this.cells[2],a=s.fetch(n.length);n.set(a[0]),r.set(a[1]),this.playbackState===i.PLAYING_STATE&&s.isEnded&&i.nextTick(e.onended)}i.outputSignalAR(this)}return this},i.register("tape",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e),i.timer(this);var s=this._;this.playbackState=i.FINISHED_STATE,s.task=[],s.i=0,s.j=0,s.imax=0,s.jmax=0,s.wait=0,s.count=0,s.args={},s.doNum=1,s.initFunc=i.nop,s.onended=a(this),this.on("start",r)}var i=t.fn,s=t.timevalue,n=t(function(){}).constructor;i.extend(e);var r=function(){var t,e=this._;this.playbackState=i.PLAYING_STATE,e.task=this.nodes.map(function(t){return t instanceof n&&t.func}).filter(function(t){return!!t}),e.i=e.j=0,e.imax=e.doNum,e.jmax=e.task.length,t=e.initFunc(),i.isDictionary(t)||(t={param:t}),e.args=t},a=function(t){return function(){t.playbackState=i.FINISHED_STATE;var e=t._,s=t.cells[0],n=t.cells[1],r=t.cells[2],a=e.args;if("number"==typeof a)for(var o=0,h=n.length;o<h;++o)s[0]=n[o]=r[o]=a;e.emit("ended",e.args)}},o=e.prototype;Object.defineProperties(o,{"do":{set:function(t){"number"==typeof t&&t>0&&(this._.doNum=t===1/0?1/0:0|t)},get:function(){return this._.doNum}},init:{set:function(t){"function"==typeof t&&(this._.initFunc=t)},get:function(){return this._.initFunc}}}),o.bang=function(){var t=this._;return t.count=0,t.emit("bang"),this},o.wait=function(t){return"string"==typeof t&&(t=s(t)),"number"==typeof t&&t>0&&(this._.count+=this._.samplerate*t*.001|0),this},o.process=function(t){var e,s=this.cells[0],n=this._;if(this.tickID!==t&&(this.tickID=t,n.i<n.imax)){for(;n.count<=0;){if(n.j>=n.jmax){if(++n.i,n.i>=n.imax){i.nextTick(n.onended);break}n.j=0}e=n.task[n.j++],e&&e.call(this,n.i,n.args)}n.count-=s.length}return this},i.register("task",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,0,e),i.timer(this),i.fixKR(this);var s=this._;this.playbackState=i.FINISHED_STATE,s.currentTime=0,s.samplesMax=0,s.samples=0,s.onended=i.make_onended(this),this.once("init",n),this.on("start",r)}var i=t.fn,s=t.timevalue;i.extend(e);var n=function(){this._.timeout||(this.timeout=1e3)},r=function(){this.playbackState=i.PLAYING_STATE};Object.defineProperty(r,"unremovable",{value:!0,writable:!1});var a=e.prototype;Object.defineProperties(a,{timeout:{set:function(t){var e=this._;"string"==typeof t&&(t=s(t)),"number"==typeof t&&t>=0&&(this.playbackState=i.PLAYING_STATE,e.timeout=t,e.samplesMax=e.samplerate*(.001*t)|0,e.samples=e.samplesMax)},get:function(){return this._.timeout}},currentTime:{get:function(){return this._.currentTime}}}),a.bang=function(){var t=this._;return this.playbackState=i.PLAYING_STATE,t.samples=t.samplesMax,t.currentTime=0,t.emit("bang"),this},a.process=function(t){var e=this.cells[0],s=this._;if(this.tickID!==t){if(this.tickID=t,s.samples>0&&(s.samples-=e.length),s.samples<=0){for(var n=this.nodes,r=0,a=n.length;r<a;++r)n[r].bang();i.nextTick(s.onended)}s.currentTime+=i.currentTimeIncr}return this},i.register("timeout",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e),i.fixAR(this),this._.curve=null}var i=t.fn;i.extend(e);var s=e.prototype;Object.defineProperties(s,{curve:{set:function(t){i.isSignalArray(t)&&(this._.curve=t)},get:function(){return this._.curve}}}),s.process=function(t){var e=this._;if(this.tickID!==t){if(this.tickID=t,i.inputSignalAR(this),e.curve){var s,n,r=this.cells[0],a=e.curve,o=a.length,h=e.cellsize;for(n=0;n<h;++n)s=.5*(r[n]+1)*o+.5|0,s<0?s=0:s>=o-1&&(s=o-1),r[n]=a[s]}i.outputSignalAR(this)}return this},i.register("waveshaper",e)}(timbre),function(t){"use strict";function e(e){t.Object.call(this,1,e);var i=this._;i.inMin=0,i.inMax=1,i.outMin=0,i.outMax=1,i.ar=!1,this.once("init",s)}var i=t.fn;i.extend(e);var s=function(){this._.warp||(this.warp="linlin")},n=e.prototype;Object.defineProperties(n,{inMin:{set:function(t){"number"==typeof t&&(this._.inMin=t)},get:function(){return this._.inMin}},inMax:{set:function(t){"number"==typeof t&&(this._.inMax=t)},get:function(){return this._.inMax}},outMin:{set:function(t){"number"==typeof t&&(this._.outMin=t)},get:function(){return this._.outMin}},outMax:{set:function(t){"number"==typeof t&&(this._.outMax=t)},get:function(){return this._.outMax}},warp:{set:function(t){if("string"==typeof t){var e=r[t];e&&(this._.warp=e,this._.warpName=t)}},get:function(){return this._.warpName}}}),n.process=function(t){var e=this._,s=this.cells[0];if(this.tickID!==t){this.tickID=t;var n,r=e.inMin,a=e.inMax,o=e.outMin,h=e.outMax,u=e.warp,l=this.nodes.length,c=e.mul,f=e.add,p=s.length;if(e.ar&&l){for(i.inputSignalAR(this),n=0;n<p;++n)s[n]=u(s[n],r,a,o,h)*c+f;i.outputSignalAR(this)}else{var d=this.nodes.length?i.inputSignalKR(this):0,v=u(d,r,a,o,h)*c+f;for(n=0;n<p;++n)s[n]=v}}return this};var r={linlin:function(t,e,i,s,n){return t<e?s:t>i?n:i===e?s:(t-e)/(i-e)*(n-s)+s},linexp:function(t,e,i,s,n){return t<e?s:t>i?n:0===s?0:i===e?n:Math.pow(n/s,(t-e)/(i-e))*s},explin:function(t,e,i,s,n){return t<e?s:t>i?n:0===e?n:Math.log(t/e)/Math.log(i/e)*(n-s)+s},expexp:function(t,e,i,s,n){return t<e?s:t>i?n:0===e||0===s?0:Math.pow(n/s,Math.log(t/e)/Math.log(i/e))*s}};i.register("zmap",e)}(timbre);
!function(t){"use strict";function e(t){timbre.Object.call(this,2,t.slice(0,t.length-1)),n.fixAR(this);var e=this._,r=t.slice(-1)[0];e.mode="",e.bufferL=new n.SignalArray(i<<2),e.bufferR=new n.SignalArray(i<<2),e.buffermask=e.bufferL.length-1,e.node=null,e.script=r.createScriptProcessor(i,2,2),e.writeIndex=0,e.readIndex=0,e.totalRead=0,e.totalWrite=0,e.context=r}if("webkit"===t.env){var n=t.fn,i=1024;n.extend(e);var r=e.prototype;Object.defineProperties(r,{context:{get:function(){return this._.context}},mode:{get:function(){return this._.mode}}}),r.cancel=function(){for(var t=this._,e=this.cells[0],n=0,i=e.length;n<i;++n)e[n]=0;t.node=null,null!==t.connectIndex&&void 0!==t.connectIndex?t.script.disconnect(t.connectIndex):t.script.disconnect()},function(){function t(t){e.call(this,t);var n=t.slice(-1)[0],r=this._;r.mode="recv",r.script.onaudioprocess=i(this),r.gain=n.createGain(),r.gain.gain.value=0,r.script.connect(r.gain)}n.extend(t,e);var i=function(t){return function(e){var n=t._,i=e.inputBuffer,r=i.getChannelData(0),c=i.getChannelData(1),s=i.length,a=n.writeIndex;n.bufferL.set(r,a),n.bufferR.set(c,a),n.writeIndex=a+s&n.buffermask,n.totalWrite+=s}},r=t.prototype;r.cancel=function(){this._.node&&this._.node.disconnect(),e.prototype.cancel.call(this),this._.gain.disconnect()},r.recv=function(t){var e=this._;try{e.node=t,e.node.connect(e.script),e.gain.connect(e.context.destination)}catch(n){e.node=null}return e.writeIndex=0,e.readIndex=0,e.totalWrite=0,e.totalRead=0,this},r.process=function(t){var e=this._;if(null===e.node)return this;if(this.tickID!==t){this.tickID=t;var i=e.cellsize,r=e.bufferL,c=e.bufferR;if(e.totalWrite>e.totalRead+i){var s=e.readIndex,a=s+i;this.cells[1].set(r.subarray(s,a)),this.cells[2].set(c.subarray(s,a)),e.readIndex=a&e.buffermask,e.totalRead+=i}n.outputSignalAR(this)}return this},n.register("WebAudioAPI:recv",t)}(),function(){function t(t){e.call(this,t),n.listener(this);var r=this._;r.mode="send",r.script.onaudioprocess=i(this),r.connectIndex=null}n.extend(t,e);var i=function(t){return function(e){var n=t._,i=e.outputBuffer,r=i.length;if(n.totalWrite>n.totalRead+r){var c=n.readIndex,s=c+r;i.getChannelData(0).set(n.bufferL.subarray(c,s)),i.getChannelData(1).set(n.bufferR.subarray(c,s)),n.readIndex=s&n.buffermask,n.totalRead+=r}}},r=t.prototype;r.cancel=function(){e.prototype.cancel.call(this),this.unlisten()},r.send=function(t,e){var n=this._;try{n.node=t,"number"==typeof e?(n.script.connect(n.node,e),n.connectIndex=e):(n.script.connect(n.node),n.connectIndex=null),this.listen()}catch(i){n.node=null}return n.writeIndex=0,n.readIndex=0,n.totalWrite=0,n.totalRead=0,this},r.process=function(t){var e=this._;if(null===e.script)return this;if(this.tickID!==t){this.tickID=t;var i=this.cells[1],r=this.cells[2],c=e.cellsize,s=e.writeIndex;n.inputSignalAR(this),e.bufferL.set(i,s),e.bufferR.set(r,s),e.writeIndex=s+c&e.buffermask,e.totalWrite+=c,n.outputSignalAR(this)}return this},n.register("WebAudioAPI:send",t)}()}}(timbre);
!function(e){var o=function(){for(var e=arguments[0],n=[].slice.call(arguments,1),i=0;i<n.length;++i){var t=n[i];for(key in t){var r=t[key];e[key]="object"==typeof r?o("object"==typeof e[key]?e[key]:{},r):r}}return e},n={wav:"WebAudioRecorderWav.min.js",ogg:"WebAudioRecorderOgg.min.js",mp3:"WebAudioRecorderMp3.min.js"},i={workerDir:"/",numChannels:2,encoding:"wav",options:{timeLimit:300,encodeAfterRecord:!1,progressInterval:1e3,bufferSize:void 0,wav:{mimeType:"audio/wav"},ogg:{mimeType:"audio/ogg",quality:.5},mp3:{mimeType:"audio/mpeg",bitRate:160}}},t=function(e,n){o(this,i,n||{}),this.context=e.context,null==this.context.createScriptProcessor&&(this.context.createScriptProcessor=this.context.createJavaScriptNode),this.input=this.context.createGain(),e.connect(this.input),this.buffer=[],this.initWorker()};o(t.prototype,{isRecording:function(){return null!=this.processor},setEncoding:function(e){this.isRecording()?this.error("setEncoding: cannot set encoding during recording"):this.encoding!==e&&(this.encoding=e,this.initWorker())},setOptions:function(e){this.isRecording()?this.error("setOptions: cannot set options during recording"):(o(this.options,e),this.worker.postMessage({command:"options",options:this.options}))},startRecording:function(){if(this.isRecording())this.error("startRecording: previous recording is running");else{var e=this.numChannels,o=this.buffer,n=this.worker;this.processor=this.context.createScriptProcessor(this.options.bufferSize,this.numChannels,this.numChannels),this.input.connect(this.processor),this.processor.connect(this.context.destination),this.processor.onaudioprocess=function(i){for(var t=0;t<e;++t)o[t]=i.inputBuffer.getChannelData(t);n.postMessage({command:"record",buffer:o})},this.worker.postMessage({command:"start",bufferSize:this.processor.bufferSize}),this.startTime=Date.now()}},recordingTime:function(){return this.isRecording()?.001*(Date.now()-this.startTime):null},cancelRecording:function(){this.isRecording()?(this.input.disconnect(),this.processor.disconnect(),delete this.processor,this.worker.postMessage({command:"cancel"})):this.error("cancelRecording: no recording is running")},finishRecording:function(){this.isRecording()?(this.input.disconnect(),this.processor.disconnect(),delete this.processor,this.worker.postMessage({command:"finish"})):this.error("finishRecording: no recording is running")},cancelEncoding:function(){this.options.encodeAfterRecord?this.isRecording()?this.error("cancelEncoding: recording is not finished"):(this.onEncodingCanceled(this),this.initWorker()):this.error("cancelEncoding: invalid method call")},initWorker:function(){null!=this.worker&&this.worker.terminate(),this.onEncoderLoading(this,this.encoding),this.worker=new Worker(this.workerDir+n[this.encoding]);var e=this;this.worker.onmessage=function(o){var n=o.data;switch(n.command){case"loaded":e.onEncoderLoaded(e,e.encoding);break;case"timeout":e.onTimeout(e);break;case"progress":e.onEncodingProgress(e,n.progress);break;case"complete":e.onComplete(e,n.blob);break;case"error":e.error(n.message)}},this.worker.postMessage({command:"init",config:{sampleRate:this.context.sampleRate,numChannels:this.numChannels},options:this.options})},error:function(e){this.onError(this,"WebAudioRecorder.min.js:"+e)},onEncoderLoading:function(e,o){},onEncoderLoaded:function(e,o){},onTimeout:function(e){e.finishRecording()},onEncodingProgress:function(e,o){},onEncodingCanceled:function(e){},onComplete:function(e,o){e.onError(e,"WebAudioRecorder.min.js: You must override .onComplete event")},onError:function(e,o){console.log(o)}}),e.WebAudioRecorder=t}(window);
!function(){var n=function(n){var t=[];this.add=function(n){t.push(n)},this.cast=function(i){for(var r=0;r<t.length;r++){var o=t[r],a=o(i);if(a)return a}throw"Can't convert "+i+" to "+n}},t=function(){var t={};this.register=function(i,r){var o;t[i]||(t[i]=new n(i)),o=t[i],o.add(r)},this.cast=function(n,i){var r=t[n];if(!r)throw"unkown type "+n;return r.cast(i)}};window.MUSIC=window.MUSIC||{},window.MUSIC.Types=new t}();
window.MUSIC=window.MUSIC||{},function(){MUSIC.SoundLib=MUSIC.SoundLib||{},MUSIC.Effects=MUSIC.Effects||{},MUSIC.playablePipeExtend=function(n){return n.during=function(n){var t=this;return MUSIC.playablePipeExtend({play:function(){var e=!1,i=t.play(),o={stop:function(){e||i.stop(),e=!0}};return setTimeout(o.stop,n),o},duration:function(){return n}})},n.stopDelay=function(n){var t=this;return MUSIC.playablePipeExtend({play:function(e){var i=t.play(e);return{stop:function(){setTimeout(i.stop.bind(i),n)}}}})},n.onError=function(n){var t=this;return MUSIC.playablePipeExtend({play:function(e){try{var i=t.play(e);return{stop:function(){try{i.stop()}catch(t){console.error(t),n(t)}}}}catch(o){throw console.error(o),n(o),o}}})},n.onStop=function(n){var t=this;return MUSIC.playablePipeExtend({play:function(e){var i=t.play(e);return{stop:function(){i.stop(),n(e)}}}})},n},MUSIC.Types.register("playable",function(n){if(n.play)return n}),MUSIC.Types.register("playable",function(n){if("function"==typeof n)return{play:n}}),MUSIC.EffectsPipeline=function(n,t){this._audio=n,this._audioDestination=t};var n=function(n){return n},t=function(n,t){return function(e){return t(n(e))}};MUSIC.EffectsPipeline.prototype={_wrapFcn:n,wrap:function(e){var i=new MUSIC.DummyNode(this);return this._wrapFcn!==n&&(e=t(e,this._wrapFcn)),i._wrapFcn=function(n){var t=e(n);return t._wrapFcn=i._wrapFcn,t},i},sfxBase:function(){var n=[],t=function(n){n.dispose()},e=function(t){if(!t.dispose)return t;var e=function(n){return n!=t},i=t.dispose;return n.push(t),t.dispose=function(){n=n.filter(e),i.call(t)},t},i=function(){n.forEach(t)},o=this.wrap(e),r=this;return o.getOriginal=function(){return r.getOriginal?r.getOriginal():r},o.prune=i,o},constant:function(n){return this._wrapFcn(new MUSIC.SoundLib.Constant(this._audio,this._audioDestination,n))},oscillator:function(n){return this._wrapFcn(new MUSIC.SoundLib.Oscillator(this._audio,this._audioDestination,n))},soundfont:function(n){return this._wrapFcn(new MUSIC.SoundfontInstrument(n,this._audio,this._audioDestination))},sound:function(n){var t=this._audio,e=this._audioDestination,i=new XMLHttpRequest;i.open("GET",n,!0),i.responseType="arraybuffer";var o;return i.onerror=function(n){console.error(n)},i.onload=function(n){t.audio.decodeAudioData(i.response,function(n){o=n})},i.send(),MUSIC.playablePipeExtend({play:function(){var n=t.audio.createBufferSource();return n.buffer=o,n.connect(e._destination),n.start(t.audio.currentTime),{stop:function(){n.stop(),n.disconnect(e._destination)}}}})},formulaGenerator:function(n){return this._wrapFcn(new MUSIC.SoundLib.FormulaGenerator(this._audio,this._audioDestination,n))},signal_and:function(n){return this.gain(n||1)},signal_nand:function(n){return this.signal_not().signal_and(n||1)},signal_or:function(n){return this.signal_not().signal_nor(n||0)},signal_nor:function(n){var t=function(n){return n.apply?{apply:function(t,e,i){return n.apply(t,e,i,function(n,t){return t(n.signal_not())})}}:n},e=this.signal_and(1),i=function(n){e.update(t(n))};i(n);var o=e.signal_not();return o.update=i,o},signal_not:function(){return this.signal_scale({top:0,base:2})},signal_scale:function(n){var t=this.gain(1),e=this.constant(0),i=t.update.bind(t),o=t.dispose.bind(t),r=e.update.bind(e),a=e.dispose.bind(e),u=function(){o(),a()},s=function(n){var t,e;t=(n.top-n.base)/2,e=n.base+t,i(t),r(e)};return s(n),t.update=s,t.dispose=u,t},T:function(){return this._wrapFcn(new MUSIC.T(arguments,this._audio,this._audioDestination))},noise:function(){return this._wrapFcn(new MUSIC.SoundLib.Noise(this._audio,this._audioDestination))},pink_noise:function(){return this._wrapFcn(new MUSIC.SoundLib.PinkNoise(this._audio,this._audioDestination))},red_noise:function(){return this._wrapFcn(new MUSIC.SoundLib.RedNoise(this._audio,this._audioDestination))}},MUSIC.DummyNode=function(n){MUSIC.EffectsPipeline.apply(this,[n._audio,n._audioDestination])},MUSIC.DummyNode.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.T=function(n,t,e){var i=T("WebAudioAPI:recv",t.audio),o=i.context,r=o.createGain(1);i.recv(r),setTimeout(function(){r.connect(e._destination)});for(var a=[],u=0;u<n.length;u++)a.push(n[u]);a.push(i);var s=T.apply(null,a),c=T("WebAudioAPI:send",s,t.audio).send(e._destination);this.output=function(){return r};var f=!1;this.disconnect=function(){f||(f=!0,r.disconnect(e._destination),c.removeAll(),i.cancel(),c.cancel(),s.unlisten())},this.dispose=this.disconnect,this._destination=r,this.next=function(){return e},MUSIC.EffectsPipeline.bind(this)(t,this)},MUSIC.T.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.Effects.register=function(n,t){MUSIC.EffectsPipeline.prototype[n]=function(n){return this._wrapFcn(t(this._audio,this._audioDestination,n))}};var e=new(window.AudioContext||window.webkitAudioContext);MUSIC.Context=function(n){var t=e,i=this,o=t.createGain();n=n||{},o.gain.value=1,n.nooutput||o.connect(t.destination),i.audio=t,i._destination=o,this.resume=function(){"running"!==e.state&&e.resume()},this.record=function(n,t){var e=new WebAudioRecorder(o,{workerDir:"src/lib/recorder/worker/",encoding:n.encoding,numChannels:n.numChannels});return e.onComplete=function(n,e){t(e)},e.startRecording(),{stop:function(){e.finishRecording()}}},this.audio=t,MUSIC.EffectsPipeline.bind(this)(i,this)},MUSIC.Context.prototype=new MUSIC.EffectsPipeline,MUSIC.SoundLib.FormulaGenerator=function(n,t,e){this.play=function(i){var o=new MUSIC.Effects.Formula(n,t,function(n,t){return e(t)});return{stop:function(){o.disconnect(t._destination)}}},MUSIC.playablePipeExtend(this)},MUSIC.SoundLib.PinkNoise=function(n,t){this.play=function(e){var i,o,r,a,u,s,c;i=o=r=a=u=s=c=0;var f=new MUSIC.Effects.Formula(n,t,function(){var n=2*Math.random()-1;i=.99886*i+.0555179*n,o=.99332*o+.0750759*n,r=.969*r+.153852*n,a=.8665*a+.3104856*n,u=.55*u+.5329522*n,s=-.7616*s-.016898*n;var t=i+o+r+a+u+s+c+.5362*n;return c=.115926*n,.11*t});return{stop:function(){f.disconnect(t._destination)}}},this.setValue=function(){},MUSIC.playablePipeExtend(this)},MUSIC.SoundLib.RedNoise=function(n,t){this.play=function(e){var i=0,o=new MUSIC.Effects.Formula(n,t,function(){var n=2*Math.random()-1,t=(i+.02*n)/1.02;return i=t,3.5*t});return{stop:function(){o.disconnect(t._destination)}}},this.setValue=function(){},MUSIC.playablePipeExtend(this)},MUSIC.SoundLib.Noise=function(n,t){for(var e=n.audio,i=2*e.sampleRate,o=e.createBuffer(1,i,e.sampleRate),r=o.getChannelData(0),a=0;a<i;a++)r[a]=2*Math.random()-1;this.play=function(n){var i=e.createBufferSource();return i.buffer=o,i.loop=!0,i.start(0),i.connect(t._destination),{stop:function(){i.stop(),i.disconnect(t._destination)}}},this.setValue=function(){},MUSIC.playablePipeExtend(this)},MUSIC.SoundLib.Wave=function(n,t){var e=new MUSIC.Context({nooutput:!0}),i=e.sound(n),o=Math.floor(t*e.audio.sampleRate/1e3),r=[];setTimeout(function(){var n=e.record();i.play(),setTimeout(function(){n.stop(),n.getBuffer(function(n){for(var t=n[0],e=0;e<o;e++)r.push(t[e])})},t+100)},500),this.f=function(n){if(n<0)return 0;var t=r[Math.floor(n*o)];return t}},MUSIC.AudioDestinationWrapper=function(n,t){this._destination=t,MUSIC.EffectsPipeline.bind(this)(n,this)},MUSIC.AudioDestinationWrapper.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.modulator=function(n){var t=function(n,t){return t(n)};return{apply:function(e,i,o,r){var a,u;return a=new MUSIC.AudioDestinationWrapper(o,i).sfxBase(),a.audioParamModulation=i,u=(r||t)(a,n),{dispose:function(){a.prune()}}}}},function(){for(var n=128,t=new Float32Array(n),e=0;e<n;e++)t[e]=1;var i;MUSIC.SoundLib.Constant=function(n,e,o){var r,a,u=n._audio.audio;u.createConstantSource?(r=u.createConstantSource(),this._destination=r,r.offset.value=o.offset||0,r.connect(e._destination),r.start()):(r=u.createGain(),a=u.createBufferSource(),r.gain.value=o.offset||0,i||(i=u.createBuffer(1,t.length,n._audio.audio.sampleRate),i.getChannelData(0).set(t)),a.loop=!0,a.buffer=i,a.connect(r),r.connect(e._destination),a.start());var s=function(){};this.setParam=function(t,e){"offset"!==t||u.createConstantSource||(t="gain"),e.apply(n.audio.currentTime,r[t])},this.setParamTarget=function(t,e,i){"offset"!==t||u.createConstantSource||(t="gain");var o=r[t];o.cancelScheduledValues(0),o.setTargetAtTime(e,n.audio.currentTime,i)},this.dispose=function(){u.createConstantSource?r.stop():(a.stop(),a.disconnect(r)),r.disconnect(e._destination),this.dispose=function(){}},this.update=function(n){u.createConstantSource?r.offset.value=n:r.gain.value=n},this.freq=function(n){var t={};return t.setFreq=s,t.reset=s,t.play=function(){return{stop:s}},MUSIC.playablePipeExtend(t),t}}}(),MUSIC.SoundLib.Oscillator=function(n,t,e){e=e||{};var i,o=(e.effects,e.detune),r=e.frequency,a=e.time_constant;i=t._destination,(!isFinite(a)||isNaN(a)||a<=0)&&(a=.01);var u;u=n.audio.createOscillator(),u.connect(i);var s;if(r&&(u.frequency.value=r),o&&(o.apply?s=o.apply(n.audio.currentTime,u.detune,n):u.detune.value=o),"custom"===e.type){var c=new Float32Array(e.terms.sin||[]),f=new Float32Array(e.terms.cos||[]),p=n.audio.createPeriodicWave(c,f);u.setPeriodicWave(p)}else u.type=e.type;if(this.currentTime=function(){return n.audio.currentTime},this.schedule_freq=function(n,t){var e;e=a||.1;var i=function(){},o=function(){return u.frequency.setTargetAtTime(n,t,e),{stop:i}};return{play:o}},this.freq=function(t){var o=e.fixed_frequency?e.fixed_frequency:t;o&&(u.frequency.value=o);var r={};return r.setFreq=function(t,e){r.setFreqOnTime(t,e,n.audio.currentTime)},r.cancelScheduledValues=function(){u.frequency.cancelScheduledValues(0)},r.setFreqOnTime=function(n,t,i){if(!e.fixed_frequency){var o;o=t&&t.tc?t.tc:a||.1,u.frequency.setTargetAtTime(n,i,o)}},r.reset=function(){},r.play=function(n){var t;return t=function(){u&&u.disconnect(i),u=null},u.start(0),{stop:function(){s&&s.dispose&&s.dispose(),u&&u.stop(0),t()}}},MUSIC.playablePipeExtend(r),r},e.f)this.play=function(i){var o,r=e.wtPosition||0,a=e.f,u=0,s=e.frequency;o=s.at?s.at.bind(s):function(n){return s};var c,f=0,p=0;if(r.at)var d=new MUSIC.Effects.Formula(n,t,function(n,t){return f=t-p,u+=f*o(t),u%=1,c=u+r.at(t),c%=1,c<0&&c++,p=t,a(c)});else var d=new MUSIC.Effects.Formula(n,t,function(n,t){return f=t-p,u+=f*o(t),u%=1,c=u+r,c%=1,c<0&&c++,p=t,a(c)});return{stop:function(){d.disconnect(t._destination)}}};else if(e.wave){var d=Object.create(e);d.f=e.wave.f,MUSIC.SoundLib.Oscillator.bind(this)(n,t,d)}},MUSIC.Loop=function(n,t){var e=n.duration();return{play:function(){var i,o=window.performance.now(),r=0;i=n.play();var a=function(){var a=window.performance.now();a-o>r*e&&(setTimeout(function(){i=n.play()},(r+1)*e-a),r++,r==t-1&&clearInterval(u))},u=setInterval(a,e);return{stop:function(){clearInterval(u),i&&i.stop()}}}}},MUSIC.Silence=function(n){return{play:function(){return{stop:function(){}}},duration:function(){return n}}}}();
MUSIC.Effects=MUSIC.Effects||{};var effectsObject={};MUSIC.Effects.forEach=function(e){for(var t in effectsObject)e(t,effectsObject[t])},MUSIC.Effects.WebAudioNodeWrapper=function(e,t,n,i){this._destination=t,t.connect(n._destination),setTimeout(function(){}),this.next=function(){return n};var o=!1;this.disconnect=function(){o||(i&&i(),o=!0,t.disconnect(n._destination))},this.dispose=this.disconnect,this.output=function(){return t},this.currentTime=function(){return e.audio.currentTime},this.setParam=function(n,i){i.apply(e.audio.currentTime,t[n])},this.setParamTarget=function(n,i,o){var a=t[n];a.cancelScheduledValues(0),a.setTargetAtTime(i,e.audio.currentTime,o)},this.record=function(){var e=new Recorder(t,{workerPath:"lib/recorder/recorderWorker.js"});return e.record(),e},MUSIC.EffectsPipeline.bind(this)(e,this)},MUSIC.Effects.WebAudioNodeWrapper.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.Effects.Formula=function(e,t,n){var i=e.audio.createScriptProcessor(1024,1,1),o=0,a=e.audio.sampleRate;i.onaudioprocess=function(e){for(var t=e.inputBuffer,i=e.outputBuffer,r=0;r<i.numberOfChannels;r++)for(var u=t.getChannelData(r),s=i.getChannelData(r),c=0;c<t.length;c++)s[c]=n(u[c],(t.length*o+c)/a);o++},setTimeout(function(){i.connect(t._destination)}),this._destination=i,MUSIC.EffectsPipeline.bind(this)(e,this),this.next=function(){return t};var r=!1;this.disconnect=function(){r||(r=!0,setTimeout(function(){i.disconnect(t._destination)}))},this.dispose=this.disconnect,this.update=function(e){n=e,this.fcn=n},this.fcn=n,this.output=function(){return i},this.isFormula=!0},MUSIC.Effects.Formula.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.Effects.register("formula",function(e,t,n){return new MUSIC.Effects.Formula(e,t,n)}),MUSIC.Effects.BiQuad=function(e,t,n){var i=e.audio.createBiquadFilter(),o=nodispose,a=nodispose,r=nodispose,u=nodispose,s=n.type;this.update=function(t){i.type=s;var n=function(t,n){if(t){if(t.apply)return t.apply(e.audio.currentTime,n,e);n.value=t}return nodispose};o.dispose(),a.dispose(),r.dispose(),u.dispose(),o=n(t.gain,i.gain),a=n(t.Q,i.Q),r=n(t.frequency,i.frequency),u=n(t.detune,i.detune)},this.update(n),MUSIC.Effects.WebAudioNodeWrapper.bind(this)(e,i,t,function(){o.dispose(),a.dispose(),r.dispose(),u.dispose()})},MUSIC.Effects.BiQuad.prototype=Object.create(MUSIC.Effects.WebAudioNodeWrapper.prototype),MUSIC.Effects.register("biquad",MUSIC.Effects.BiQuad),["lowpass","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass"].forEach(function(e){MUSIC.Effects.register(e,function(t,n,i){return new MUSIC.Effects.BiQuad(t,n,{type:e,frequency:i.frequency,Q:i.Q,detune:i.detune})})});var canMutate=function(e,t){return e.update=function(n){return t(n),e},e},nodispose={dispose:function(){}};MUSIC.Effects.register("gain",function(e,t,n){var i=e.audio.createGain(),o=nodispose;return canMutate(new MUSIC.Effects.WebAudioNodeWrapper(e,i,t,function(){o.dispose()}),function(t){o.dispose(),t.apply?(i.gain.value=0,o=t.apply(e.audio.currentTime,i.gain,e)):(o=nodispose,i.gain.value=t)}).update(n)}),MUSIC.Effects.register("delay",function(e,t,n){var i=e.audio.createDelay(60),o=nodispose;return canMutate(new MUSIC.Effects.WebAudioNodeWrapper(e,i,t,function(){o.dispose()}),function(t){o.dispose(),t.apply?o=t.apply(e.audio.currentTime,i.delayTime,e):(o=nodispose,i.delayTime.value=t)}).update(n)});var Echo=function(e,t,n){this.update=function(e){i.delayTime.value=e.delay||.02,r.gain.value=0===e.gain?0:e.gain||.2,i.delayTime.value<.01&&(i.delayTime.value=.01),i.delayTime.value>1&&(i.delayTime.value=1),r.gain.value>.99&&(r.gain.value=.99),r.gain.value<0&&(r.gain.value=0)};var i=e.audio.createDelay(60),o=e.audio.createGain(),a=e.audio.createGain();o.gain.value=1,a.gain.value=1;var r=e.audio.createGain();this.update(n),setTimeout(function(){o.connect(a),o.connect(i),i.connect(r),a.connect(t._destination),a.connect(i),r.connect(a)}),this._destination=o,this.next=function(){return t};var u=!1;this.disconnect=function(){u||(u=!0,o.disconnect(a),o.disconnect(i),i.disconnect(r),a.disconnect(t._destination),a.disconnect(i),r.disconnect(a))},this.dispose=this.disconnect,this.output=function(){return audioNode},this.setParam=function(t,n){n.apply(e.audio.currentTime,audioNode[t])},MUSIC.EffectsPipeline.bind(this)(e,this)};Echo.prototype=Object.create(MUSIC.EffectsPipeline.prototype);var WaveShaper=function(e,t,n){n=n||{};var i=n.samples||8192,o=n.f||function(e){return e},a=function(){for(var e=new Float32Array(i),t=0;t<i;t++)e[t]=o(2*t/i-1);return e};this.next=function(){return t};var r=e.audio.createWaveShaper();r.curve=a(),r.oversample="4x",setTimeout(function(){r.connect(t._destination)}),this._destination=r;var u=!1;this.disconnect=function(){u||(u=!0,r.disconnect(t._destination))},MUSIC.EffectsPipeline.bind(this)(e,this)};WaveShaper.prototype=Object.create(MUSIC.EffectsPipeline.prototype),MUSIC.Effects.register("echo",function(e,t,n){return new Echo(e,t,n)}),MUSIC.Effects.register("wave_shaper",function(e,t,n){return new WaveShaper(e,t,n)}),MUSIC.Curve=function(e){this.during=during(e)},MUSIC.Curve.concat=function(e,t,n,i,o){var a=t+i;o||(o=Math.floor(100*a)+1);for(var r=function(i){return i<t?e.at(i):n.at(i-t)},u=new Float32Array(o+1),s=0;s<o+1;s++)u[s]=r(a*(s/o));return{apply:function(e,t){t.cancelScheduledValues(0),t.setValueCurveAtTime(u,e,a)},at:r}};var during=function(e,t){return function(n){t||(t=Math.floor(100*n)+1);for(var i=new Float32Array(t+1),o=0;o<t+1;o++)i[o]=e(o/t);return{apply:function(e,t){t.cancelScheduledValues(0),t.setValueCurveAtTime(i,e,n)},at:function(t){return e(t/n)}}}};MUSIC.Curve.Formula=function(e,t){this.during=during(e,t)},MUSIC.Curve.Ramp=function(e,t,n){MUSIC.Curve.Formula.bind(this)(function(n){return e+(t-e)*n},n)},MUSIC.Curve.Periodic=function(e,t){var n,i=0,o=0,a=1/t;t.at?this.at=function(a){return n=a-o,i+=n*t.at(a),i%=1,o=a,e(i)}:this.at=function(t){return i=t%a/a,i<0&&i++,e(i)}},MUSIC.Effects.register("ADSR",function(e,t,n){n=n||{};var i=n.samples||100,o=n.attackTime,a=n.decayTime,r=n.sustainLevel,u=n.releaseTime;void 0===o&&(o=.1),void 0===a&&(a=.1),void 0===r&&(r=.8),void 0===u&&(u=.1);var s=n.node,c=new MUSIC.Curve.Ramp(0,1,i).during(o),f=new MUSIC.Curve.Ramp(1,r,i).during(a),d=MUSIC.Curve.concat(c,o,f,a),p=t.gain(r);return p.setParam("gain",d),s(p).onStop(function(){p.dispose()}).stopDelay(1e3*u).onStop(function(){var e=p._destination.gain.value,t=new MUSIC.Curve.Ramp(e,0,i).during(u);p.setParam("gain",t)})}),MUSIC.Effects.register("stopCurve",function(e,t,n){n=n||{};var i=n.samples||100,o=n.duration||.4,a=n.node,r=new MUSIC.Curve.Ramp(1,0,i).during(o),u=t.gain(1);return a(u).onStop(function(){u.dispose()}).stopDelay(1e3*o).onStop(function(){u.setParam("gain",r)})});
function _typeof(n){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}!function(){var n=function(n){return 16.35*Math.pow(2,n/12)},t={C:0,D:2,E:4,F:5,G:7,A:9,B:11},e=function i(n){var t=function(n,t){return{stop:function(){setTimeout(n.stop.bind(n),t)}}},e=function(n,e){return{play:function(r){var o=n.play(r);return t(o,e)}}};return n.stopDelay=function(t){return i({note:function(r,o){return e(n.note(r,o),t)}})},n.perNoteWrap=function(t){return i({note:function(e,r){return t(n.note(e,r))}})},n.mapNote=function(t){return i({note:function(e,r){return n.note(t(e),r)}})},n.eventPreprocessor||(n.eventPreprocessor=function(n){return n}),n.note||(n.note=function(n,t){return this.schedule_note(n,t,0)}),n};MUSIC.noteToNoteNum=function(n){var e;if(e=t[n.charAt(0)],void 0!==e)return"#"===n.charAt(1)&&e++,"b"===n.charAt(1)&&e--,""!==n.charAt(2)&&(e+=12*parseInt(n.charAt(2))),e},MUSIC.PolyphonyInstrument=function(n,t){var r=[],o=[],u=[],i=function(n){for(var t=0;t<n;t++)if(!o[t])return t;return u[0]||0};this.note=function(e,c){var s=t(),f=i(s),a=r[f];return a||(a=n(),r[f]=a),u.push(f),u.length>s&&u.shift(),o[f]=!0,a.note(e,c).onStop(function(){o[f]=!1})},e(this),this.eventPreprocessor=function(t,e){var o=r[0];return o||(o=n(),r[0]=o),(o.eventPreprocessor||function(n){return n})(t,e)}},MUSIC.MonoNoteInstrument=function(n){var t,r,o=0;this.note=function(e,u){return t||(t=n.note(e,u)),MUSIC.playablePipeExtend({play:function(n){return r||(r=t.play(n)),t.setValue(e,u),o++,{stop:function(){o--,t.reset&&0===o&&t.reset()}}}})},this.currentTime=function(){return n.currentTime()},this.schedule_note=function(e,o,u){return t||(t=n.note(e,o)),MUSIC.playablePipeExtend({play:function(n){return r||(r=t.play(n)),t.setValueOnTime(e,o,u),{stop:function(){t.cancelScheduledValues()}}}})},this.dispose=function(){r&&r.stop(),n.dispose&&n.dispose()},e(this)},MUSIC.Instrument=function(t){t.schedule_freq&&(this.currentTime=function(){return t.currentTime()},this.schedule_note=function(e,r,o,u){if(void 0!==e){var i=n(e);return MUSIC.playablePipeExtend({play:function(n){var e=t.schedule_freq(i,o),r=e.play(n);return{stop:function(){r.stop()}}}})}}),this.note=function(e){if(void 0!==e){var r=n(e);return MUSIC.playablePipeExtend({play:function(e){var o=t.freq(r),u=o.play(e);return o.setFreq&&(this.setValue=function(t,e){o.setFreq(n(t),e)},this.reset=o.reset.bind(o)),o.cancelScheduledValues&&(this.cancelScheduledValues=o.cancelScheduledValues.bind(o)),o.setFreqOnTime&&(this.setValueOnTime=function(t,e,r){o.setFreqOnTime(n(t),e,r)},this.reset=o.reset.bind(o)),{stop:function(){u.stop()}}}})}},e(this)},MUSIC.instrumentExtend=e,MUSIC.Instrument.frequency=n,MUSIC.MultiInstrument=function(n){if(Array.isArray(n))return MUSIC.MultiInstrument.bind(this)(function(){return n});var t=function(n){return n.play()},r=function(n){return n.stop()},o=function(n){this.play=function(){var e=n.map(t);return{stop:function(){e.forEach(r)}}}};this.note=function(t,e){return MUSIC.playablePipeExtend(new o(n().map(function(n){return n.note(t,e)})))},this.dispose=function(){n().forEach(function(n){n.dispose&&n.dispose()})},n().every(function(n){return n.schedule_note})&&(this.currentTime=function(){var t=n().filter(function(n){return n.currentTime})[0];return t?t.currentTime():0},this.schedule_note=function(t,e,r,u){return MUSIC.playablePipeExtend(new o(n().map(function(n){return n.schedule_note(t,e,r,u)})))}),e(this),this.eventPreprocessor=function(t,e){var r=n();if(!r.length)return t;var o=r.map(function(n){return n.eventPreprocessor?n.eventPreprocessor(t,e):t});if(1===o.length)return o[0];for(var u=0,i=0,c=0,s={},f=0;f<o.length;f++){var a=o[f];if(u+=a[0],i+=a[1],c+=a[2],a[3])for(var p in a[3])s[p]=a[3][p]}return[Math.floor(u/o.length),i/o.length,c/o.length,s]}};var r=["C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","B"],o=function(n){var t=r[n%12],e=Math.floor(n/12+1);return t+e};MUSIC.PatchInstrument=function(n){var t,r=[];for(var o in n){var u=MUSIC.Types.cast("playable",n[o]);t=MUSIC.noteToNoteNum(o),r[t]=u}this.note=function(n){var t=r[n];return t?MUSIC.playablePipeExtend({play:t.play}):t},e(this)},MUSIC.SoundfontInstrument=function(n,t,r){function u(n){for(var t=window.atob(n),e=t.length,r=new Uint8Array(e),o=0;o<e;o++){var u=t.charCodeAt(o);r[o]=u}return r.buffer}var i=[];t=t.audio;for(var c=0;c<72;c++)!function(){var e=c,r=(new XMLHttpRequest,o(c)),s=n[r],f=s.split(",")[1];t.decodeAudioData(u(f),function(n){i[e]=n},function(n){console.error("error "+n+" loading "+e)})}();this.note=function(n){t.createBufferSource();return MUSIC.playablePipeExtend({play:function(){var e=t.createBufferSource();return e.buffer=i[n],e.connect(r._destination),e.start(0),{stop:function(){e.stop(0),e.disconnect(r._destination)}}}})},e(this)},MUSIC.Types.register("instrument",function(n){if(n.note)return n}),MUSIC.Types.register("instrument",function(n){if(n.freq)return new MUSIC.Instrument(n)}),MUSIC.Types.register("instrument",function(n){if(n.play)return{note:function(){return n}}});var u={play:function(){return{stop:function(){}}}};MUSIC.Types.register("instrument",function(n){if("function"==typeof n)return{note:function(t){return n(t)||u}}}),MUSIC.Types.register("instrument",function(n){if(n instanceof Array)return new MUSIC.MultiInstrument(n)}),MUSIC.Types.register("instrument",function(n){if("object"===_typeof(n)&&n.constructor===Object)return new MUSIC.PatchInstrument(n)}),MUSIC.StopEvent=function(){return function(n){return MUSIC.playablePipeExtend({play:function(){var t={onplay:function(){},onstop:function(){}},e=n.play(t);return t.onplay(),{stop:function(){t.onstop(),e.stop()}}}})}}}();
MUSIC.Effects=MUSIC.Effects||{};var LemonadePlayable=function(t,e,n,a){this._destination=e,this._music=t,this._ops=a,this._output=n};LemonadePlayable.prototype.play=function(){for(var t=this._destination,e=this._ops,n=e.length,a=[],o=[],i=0;i<n;i++)a[i]=0,o[i]=0,e[i].wave=MUSIC.Types.cast("function",e[i].wave);var s=0,u=this._output,l=new MUSIC.Effects.Formula(this._music,t,function(t,i){for(var l=i-s,p=0;p<n;p++){s=i,o[p]=o[p]+l*e[p].frequency.apply(null,a);var r=o[p]%1;r<0&&r++,a[p]=e[p].wave(r)}return u.apply(null,a)});return{stop:function(){l.disconnect(t._destination)}}},MUSIC.playablePipeExtend(LemonadePlayable.prototype),MUSIC.Effects.register("lemonade",function(t,e,n){return new LemonadePlayable(t,e._audioDestination,n.output,n.ops)});
!function(){MUSIC.Math=MUSIC.Math||{},MUSIC.Math.bpmToSecondTick=function(n,t){return 6e4/t/n.ticks_per_beat};var n=function(n){return n=n.map(function(n){var t=r(n.f),i=e(n.f);return{init:t(n.init),end:t(n.end),f:i}}),function(t){var e=n.find(function(n){return t>=n.init&&(!n.end||t<=n.end)});return e?e.f(t):0}},t=function(n){return n=n.map(function(n){return{init:n.init,end:n.end,f:r(n.f)}}),function(t){var e=n.find(function(n){return t>=n.init&&(!n.end||t<=n.end)});return e?e.f(t):0}},e=function a(n){if(2==n.length){var t=n[1],e=n[0];return function(n){return(n-e)/t}}if(3==n.length){var e=n[2],t=n[1],r=n[0];return 0===e?a([r,t]):function(n){return 2*(r-n)/(-t-Math.sqrt(t*t-4*e*(r-n)))}}},r=function(n){if(2==n.length){var t=n[1],e=n[0];return function(n){return t*n+e}}if(3==n.length){var e=n[2],t=n[1],r=n[0];return function(n){return e*n*n+t*n+r}}},i=function(n,t){var e=t[0],r=t[1];if(1==n.length){var i=-n[0]*e+r;return[i,n[0]]}if(2==n.length){var i=r-e*n[0]-e*e*n[1]/2;return[i,n[0],n[1]/2]}};MUSIC.Math.integrateBpmEvents=function(n){var t=function(t){var e=t.l;return n.bpm_events.forEach(function(n){if(n!==t&&n.s>=t.s&&n.s<t.s+e){var r=n.s-t.s;r<e&&(e=r)}}),{s:t.s,l:e,n:Math.max(t.n,1)}};n.bpm_events=n.bpm_events.map(t);for(var e=n.bpm_events[0].s,a=[{init:0,end:e,f:[MUSIC.Math.bpmToSecondTick(n,n.bpm)]}],u=0;u<n.bpm_events.length;u++){var s=n.bpm_events[u],f=n.bpm_events[u+1],p=MUSIC.Math.bpmToSecondTick(n,0==u?n.bpm:n.bpm_events[u-1].n),c=MUSIC.Math.bpmToSecondTick(n,s.n),v=(c-p)/s.l,m=p-v*s.s;0===s.l?a.push({init:s.s,end:f&&f.s,f:[c]}):(a.push({init:s.s,end:s.s+s.l,f:[m,v]}),a.push({init:s.s+s.l,end:f&&f.s,f:[c]}))}for(var o=[],b=[0,0],u=0;u<a.length;u++){var _=a[u],h=i(_.f,b);o.push({init:_.init,end:_.end,f:i(_.f,b)}),b=[_.end,r(h)(_.end)]}return o},MUSIC.Math.ticksToTime=function(n){if(n.start){var e=MUSIC.Math.ticksToTime({bpm:n.bpm,ticks_per_beat:n.ticks_per_beat,bpm_events:n.bpm_events}),r=e(n.start);return function(n){return e(n)-r}}var i=n.bpm,a=n.ticks_per_beat;if(n.bpm_events&&n.bpm_events.length){var u=MUSIC.Math.integrateBpmEvents(n);return t(u)}var s=6e4/i/a;return function(n){return n*s}},MUSIC.Math.timeToTicks=function(t){if(t.start){var e=MUSIC.Math.timeToTicks({bpm:t.bpm,ticks_per_beat:t.ticks_per_beat,bpm_events:t.bpm_events}),r=MUSIC.Math.ticksToTime({bpm:t.bpm,ticks_per_beat:t.ticks_per_beat,bpm_events:t.bpm_events}),i=r(t.start);return function(n){return e(n+i)}}var a=t.bpm,u=t.ticks_per_beat;if(t.bpm_events&&t.bpm_events.length){var s=MUSIC.Math.integrateBpmEvents(t);return n(s)}var f=u*a/6e4;return function(n){return n*f}}}();
!function(){MUSIC.NoteSequence=function(t,e){var n,i=e&&e.songCtx;t||(n=MUSIC.Utils.Clock(window.performance.now.bind(window.performance),setInterval,clearInterval,500),t=MUSIC.Utils.FunctionSeq(n,setTimeout,clearTimeout),t.push({t:0,f:function(){i.referenceInstrument&&(i.sequenceStartTime=i.referenceInstrument.currentTime())},externalSchedule:!0})),this._time=e&&e.time,this._funseq=t,this._totalduration=0,this._noteid=0,this._contextList=[]},MUSIC.NoteSequence.Playable=function(t,e,n,i){this._noteseq=t,this._instrument=e,this._duration=n,this._contextList=i||[]},MUSIC.NoteSequence.Playable.prototype.loop=function(t){return MUSIC.Loop(this,t)},MUSIC.NoteSequence.Playable.prototype.duration=function(){return this._duration},MUSIC.NoteSequence.Playable.prototype.play=function(t){var e=MUSIC.NoteSequence.context(this._instrument,this._contextList);return this._runningFunSeq=this._noteseq._funseq.start(e),new MUSIC.NoteSequence.Playing(this._runningFunSeq,e)},MUSIC.NoteSequence.Playing=function(t,e){this._runningFunSeq=t,this._context=e},MUSIC.NoteSequence.Playing.prototype.stop=function(){this._context.playing&&this._context.playing.stop(),this._context.stop(),this._runningFunSeq.stop()},MUSIC.NoteSequence.prototype.paddingTo=function(t){this._totalduration=this._time(t)},MUSIC.NoteSequence.prototype.padding=function(t){this._totalduration=this._totalduration+t},MUSIC.NoteSequence.prototype.pushCallback=function(t){var e=this._time(t[0]);if(!(e<0)){var n=t[1];this._funseq.push({t:e,f:n})}},MUSIC.NoteSequence.prototype.push=function(t,e){var n=t[0],i=this._time(t[1]),o=this._time(t[1]+t[2])-i;if(i<0){if(i+o<0)return;o+=i,i=0}var s=t[3];this._noteid++;var u=this._noteid;e&&this._contextList.indexOf(e)===-1&&this._contextList.push(e),e&&e.instrument&&e.instrument.schedule_note?(e.instrument.currentTime&&(e.songCtx.referenceInstrument=e.instrument),this._funseq.push({t:i,f:function(t){var r=e.instrument.schedule_note(n,s,e.sequenceStartTime()+i/1e3,o/1e3);e.setPlaying(u,r)},externalSchedule:!0})):(console.warn("UNSUPPORTED WEBAUDIO SCHEDULE FOR note n="+n+" at "+i+" (fallback to setTimeout)"),this._funseq.push({t:i,f:function(t){var i=e||t;if(i.instrument.note){var o=i.instrument.note(n,s);i.setPlaying(u,o)}}}),this._funseq.push({t:i+o,f:function(t){var n=e||t;n.unsetPlaying(u)}})),i+o>this._totalduration&&(this._totalduration=i+o)},MUSIC.NoteSequence.prototype.makePlayable=function(t){return new MUSIC.NoteSequence.Playable(this,t,this._totalduration,this._contextList)},MUSIC.NoteSequence.context=function(t,e,n){var i={},o=function(t,e){i[t]=e.play()},s=function(t){var e=i[t];e&&(e.stop(),delete i[t])},u=function(){if(e)for(var t=0;t<e.length;t++)e[t].stop();for(var n in i)i[n].stop();i={}},r=function(){return n.sequenceStartTime||(n.sequenceStartTime=this.instrument.currentTime()),n.sequenceStartTime};return{sequenceStartTime:r,setPlaying:o,unsetPlaying:s,instrument:t,stop:u,songCtx:n}}}();
!function(){var e=function(e){e.stop()};MUSIC.MultiPlayable=function(e){this._playableArray=e,MUSIC.playablePipeExtend(this)},MUSIC.MultiPlayable.prototype.play=function(n){var t=function(e){return e.play(n)},a=this._playableArray.map(t);return{stop:function(){a.forEach(e)}}};var n=function(e,n){return e>n?e:n},t=function(e){return e&&e.duration?e.duration():0};MUSIC.MultiPlayable.prototype.duration=function(){return this._playableArray.map(t).reduce(n,0)},MUSIC.ChangeTimeWrapper=function(e,n){this._noteseq=e,this._extensionTime=n},MUSIC.ChangeTimeWrapper.prototype.push=function(e){this._noteseq.push([e[0],e[1]*this._extensionTime,e[2]*this._extensionTime])},MUSIC.Pattern=function(e,n){var t=[];return n=n||{},n.pulseTime=n.pulseTime||50,t=e.map(function(e){var t=e[0],a=MUSIC.Types.cast("instrument",e[1]),r=new MUSIC.NoteSequence;return MUSIC.SequenceParser.parse(t,new MUSIC.ChangeTimeWrapper(r,n.pulseTime)),r.makePlayable(a)}),new MUSIC.MultiPlayable(t)}}();
!function(){MUSIC.SequenceParser={};var e={Cb:-1,C:0,"C#":1,Db:1,D:2,"D#":3,Eb:3,E:4,"E#":5,Fb:4,F:5,"F#":6,Gb:6,G:7,"G#":8,Ab:8,A:9,"A#":10,Bb:10,B:11,"B#":12},n=function(e){return"CDEFGAB".indexOf(e)!==-1},r=function(e){for(var r=[],a="",i=0;i<e.length;i++)n(e[i])&&(""!==a&&r.push(a),a="")," "!==e[i]&&"."!==e[i]||(""!==a&&r.push(a),a=""),a+=e[i];return""!==a&&r.push(a),r},a=new RegExp("\\|","g");MUSIC.SequenceParser.parse=function(n,i){var s;if(""!==n){n=n.replace(a,"");for(var u=r(n),t=0,c=0;c<u.length;c++){var f=u[c],h=f.length,l=f.indexOf("=");l!=-1&&(f=f.slice(0,l));var p=f.slice(-1),v=parseInt(p);isNaN(v)?v=0:f=f.slice(0,f.length-1);var s=e[f];void 0!==s&&i.push([s+12*v,t,h]),t+=h}}}}();
!function(){var t=function(t,n,e){this._context={playing:[],onStop:e&&e.onStop},this._patternContexts=n,this._funseqHandler=t.start(this._context)};t.prototype.stop=function(){this._patternContexts&&this._patternContexts.length&&this._patternContexts.forEach(function(t){t.stop()}),this._context.playing.forEach(function(t){t.stop()}),this._funseqHandler.stop(),this._context.onStop&&this._context.onStop()};var n={play:function(){return{stop:function(){}}}},e=function(t){return function(e){return"string"==typeof e?t[e]:e||n}},r={stop:function(){}},o=function(t){return!!t.schedule},i=function(t){return!t.schedule};MUSIC.Song=function(t,n,s){var a,u=this;if(2===arguments.length)return MUSIC.Song.bind(this)(t,{},n);a=n,s=s||{};var c,p=s.pattern||e(a),f=(s.measure||500)*s.ticks_per_beat;if(!c){var h=MUSIC.Utils.Clock(window.performance.now.bind(window.performance),setInterval,clearInterval,500);c=MUSIC.Utils.FunctionSeq(h,setTimeout,clearTimeout)}var l=t[0].length;this._funseq=c;for(var _=function(t,n){return t.s-n.s},S=[],m=0;m<l;m++)for(var v=0;v<t.length;v++){var C=p(t[v][m]);if(C.bpm_events){var g=C.bpm_events.map(function(t){return{n:t.n,s:t.s+m*f,l:t.l}});S=S.concat(g)}}S=S.sort(_);var x=MUSIC.Math.ticksToTime({bpm:s.bpm,ticks_per_beat:s.ticks_per_beat,bpm_events:S,start:s.start||0});this.timeToTicks=function(){return MUSIC.Math.timeToTicks({bpm:s.bpm,ticks_per_beat:s.ticks_per_beat,bpm_events:S,start:s.start||0})};var b=function(t){return function(n){return x(t+n)}};this._duration=x(l*f),this.songCtx={},c.push({t:0,f:function(){u.songCtx.referenceInstrument&&(u.songCtx.sequenceStartTime=u.songCtx.referenceInstrument.currentTime())},externalSchedule:!0});for(var m=0;m<l;m++)!function(){for(var n=[],e=0;e<t.length;e++)n.push(t[e][m]);var s=n.map(p),a=s.filter(o),h=s.filter(i);if(h.length>0){var l=new MUSIC.MultiPlayable(h),_=r,S=l.duration();c.push({t:m*f,f:function(t){_=l.play(),t.playing.push(_)}}),c.push({t:m*f+S,f:function(t){_.stop(),t.playing=t.playing.filter(function(t){return t!=_})}})}a.forEach(function(t){var n=t.schedule(new MUSIC.NoteSequence(c,{time:b(m*f)}),u.songCtx);u._patternContexts=(u._patternContexts||[]).concat(n)})}();c.push({t:b(0)(l*f),f:function(t){t.onStop&&t.onStop()}})},MUSIC.Song.prototype.duration=function(){return this._duration},MUSIC.Song.prototype.play=function(n){return new t(this._funseq,this._patternContexts,n)}}();
!function(){MUSIC.Utils=MUSIC.Utils||{},MUSIC.Utils.Scale=function(t){var n,r;n={},r=[0,2,5,7,9];for(var e=0;e<r.length;e++)n[(t+r[e])%12]=!0;return{add:function(t,r){for(var e=t;r>0;)e+=n[e%12]?2:1,r--;return e}}},MUSIC.Utils.Clock=function(t,n,r,e){var i=function(i){var u=t();i(0);var o=n(function(){var n=t();i(n-u)},e);return{stop:function(){r(o)}}};return{start:i}},MUSIC.Utils.FunctionSeq=function(t,n,r){var e=[],i=function(t){return function(n){return t!=n}},u=function(u){var o=(u||{}).maxDelta||2e3,a=e.slice(0).sort(function(t,n){var r=t.t-n.t;return 0===r?e.indexOf(t)-e.indexOf(n):r}),f=[],c=function(){f=f.filter(i(this.timeoutHandler)),this.f(u,0)},l=(a.length,0),s=0,v=t.start(function(t){if(!(t<s))for(;l<a.length;l++){var r=a[l];if(!r)break;var e=r.t-t;if(!(e<0)){if(e>o)break;if(r.externalSchedule)r.f(u,e);else{var i={f:r.f};i.timeoutHandler=n(c.bind(i),e),f.push(i.timeoutHandler)}s=r.t}}});return{stop:function(){for(var t=0;t<f.length;t++)r(f[t]);v.stop()}}},o=e.push.bind(e);return{start:u,push:o}},MUSIC.Utils.FunctionSeq.preciseTimeout=function(t,n){var r;clock=MUSIC.Utils.Clock(window.performance.now.bind(window.performance),setInterval,clearInterval,500),r=MUSIC.Utils.FunctionSeq(clock,setTimeout,clearTimeout);var e;r.push({f:function(){e&&e.stop(),t()},t:n}),e=r.start()},MUSIC.Utils.DelayedFunctionSeq=function(t,n){var r=function(n){return t.start(n)},e=function(r){return t.push({f:r.f,t:r.t+n,externalSchedule:r.externalSchedule})};return{start:r,push:e}}}();
!function(){MUSIC=MUSIC||{},MUSIC.Types.register("function",function(n){if("function"==typeof n.at)return n.at.bind(n)}),MUSIC.Types.register("function",function(n){if("function"==typeof n)return n}),MUSIC.Types.register("wave",function(n){if("function"==typeof n)return new MUSIC.Wave.FunctionWave(n)}),MUSIC.Types.register("wave",function(n){if("function"==typeof n.at)return n});var n=2*Math.PI;MUSIC.Wave={};var t=function(n){return function(){var t=this;return{at:function(e){t.at(n(e))}}}},e={reverse:t(function(n){return n-1}),scale:function(n){var t=this;return new MUSIC.Wave.FunctionWave(function(e){return t.at(e*n)})},translate:function(n){var t=this;return new MUSIC.Wave.FunctionWave(function(e){return t.at(e+n)})},table:function(n){return new MUSIC.Wave.Table(this,n)},combine:function(n,t){var e=this;t=t||.5;var r=1-t;return n=MUSIC.Types.cast("wave",n),new MUSIC.Wave.FunctionWave(function(u){return n.at(u)*t+e.at(u)*r})}},r=function(n){n.length;return function(t){var e=Math.floor(t*n.length);return n[e]}};MUSIC.Wave.Table=function(n,t){t=t||{};for(var e=t.samples||100,u=t.interpolation||r,a=[],i=0;i<e;i++)a[i]=n.at(i/e);this.at=u(a)},MUSIC.Wave.Table.prototype=e,MUSIC.Wave.FunctionWave=function(n){this.at=n},MUSIC.Wave.FunctionWave.prototype=e,MUSIC.Wave.sine=function(){return new MUSIC.Wave.FunctionWave(function(t){return Math.sin(n*t)})},MUSIC.Wave.square=function(n){n=n||{};var t=n.dutyCycle||.5,e=n.dutyLevel||1,r=n.offLevel||-1;return new MUSIC.Wave.FunctionWave(function(n){return n<t?e:r})},MUSIC.Wave.triangle=function(){return new MUSIC.Wave.FunctionWave(function(n){var t=n-.25;return t<0&&t++,t<.5?1-4*t:-1+4*(t-.5)})},MUSIC.Wave.sawtooth=function(){return new MUSIC.Wave.FunctionWave(function(n){return 2*n-1})}}();
MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},MUSIC.Formats.CachedSerializer=function(i){var r,e,a;return{serialize:function(n,s){var t;return a&&e&&(t=JSON.stringify(s),a===n&&e===t)?r:(a=n,e=t||JSON.stringify(s),r=i.serialize(n,s))},deserialize:i.deserialize.bind(i)}};
MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},function(){MUSIC.Formats.HuffmanSerializerWrapper=function(r){var e=[[",",100],["[]",20],["0123456789",10],["abcdef.-{}",4],["t+-*/()<>=? ",1]],n=function(r,e){for(var n="",t=0;t<e;t++)n+=r;return n},t=function(r,e){return r.concat(e)},a=e.map(function(r){return n(r[0],r[1])}).reduce(t);a+="!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";var i=Huffman.treeFromText(a),u=function(e,n){var t=r.serialize(e,n);return i.encode(t)},o=function(e,n){var t=i.decode(n);return r.deserialize(e,t)};return{serialize:u,deserialize:o}}}();
MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},MUSIC.Formats.JSONSerializer={},MUSIC.Formats.JSONSerializer.serialize=function(r,S){return JSON.stringify(S)},MUSIC.Formats.JSONSerializer.deserialize=function(r,S){return JSON.parse(S)};
function _typeof(r){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(r){return typeof r}:function(r){return r&&"function"==typeof Symbol&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r})(r)}MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},MUSIC.Formats.MultiSerializer={},function(){var r=[],e=function n(r,e){if(_typeof(r)!==_typeof(e))return!1;if(Array.isArray(r)&&!Array.isArray(e))return!1;if(Array.isArray(e)&&!Array.isArray(r))return!1;if(Array.isArray(r)){if(r.length!==e.length)return!1;for(var t=0;t<r.length;t++)if(!n(r[t],e[t]))return!1;return!0}return"object"===_typeof(r)?Object.keys(r).every(function(t){return n(r[t],e[t])}):r===e};MUSIC.Formats.MultiSerializer.match=e,MUSIC.Formats.MultiSerializer.wrapSerializer=function(r){return{serialize:function(e,t){try{var i=r.serialize(e,t),n=r.deserialize(e,i);return MUSIC.Formats.MultiSerializer.match(t,n)?i:null}catch(a){return null}},deserialize:r.deserialize}};var t=function(r,e){return r.length<e.length?r:e},i=function(r){return!!r};MUSIC.Formats.MultiSerializer.selector=function(r){if(r=r.filter(i),r.length)return r.filter(i).reduce(t);throw new Error("serialization not found")},MUSIC.Formats.MultiSerializer.serialize=function(e,t){return MUSIC.Formats.MultiSerializer.selector(r.map(function(r){var i=r.serializer.serialize(e,t);return i?r.base.concat(i):i}))},MUSIC.Formats.MultiSerializer.deserialize=function(e,t){for(var i=0;i<r.length;i++)if(t[0]===r[i].base)return r[i].serializer.deserialize(e,t.slice(1));throw new Error("Unsupported format")},MUSIC.Formats.MultiSerializer.setSerializers=function(e){r=e.map(function(r){return{serializer:MUSIC.Formats.MultiSerializer.wrapSerializer(r.serializer),base:r.base}})}}();
MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},MUSIC.Formats.PackedJSONSerializer={},function(){var n=function(n){var r=function(r){for(var e=[],a=0;a<n.length;a++){var t=n[a];Array.isArray(t)?e.push(t[1].pack(r[t[0]],r)):null!==r[t]&&void 0!==r[t]&&e.push(r[t])}return e},e=function(r){for(var e={},a=0;a<r.length;a++){var t=n[a];Array.isArray(t)?e[t[0]]=t[1].unpack(r[a],e):null!==r[a]&&void 0!==r[a]&&(e[t]=r[a])}return e};return{pack:r,unpack:e}},r=function(n){var r=function(r){return r.map(n.pack)},e=function(r){return r.map(n.unpack)};return{pack:r,unpack:e}},e=function(n,r){return n.concat(r)},a=function(n,r){var a=function(r){var a=n.pack(r);return a.reduce(e,[])},t=function(e){for(var a=[],t=0;t<e.length;t+=r)a.push(e.slice(t,t+r));return n.unpack(a)};return{pack:a,unpack:t}},t=n(["measure","measureCount","bpm","selectedTrack","scrollLeft",["tracks",a(r(n(["scroll",["events",a(r(n(["n","s","l"])),3)],"instrument"])),3)]]),i=function(n){var r=function(r){var e=[],a=function(n){return n.id?(e.indexOf(n.id)===-1&&e.push(n.id),{id:e.indexOf(n.id)+1}):{id:0}},t=function(n){return{blocks:n.blocks.map(a)}},i={patterns:e,measure:r.measure,bpm:r.bpm,tracks:r.tracks.map(t)};return n.pack(i)},e=function(r){var e=n.unpack(r);return e.tracks.forEach(function(n){n.blocks.forEach(function(n){0===n.id?delete n.id:n.id=e.patterns[n.id-1]})}),{measure:e.measure,bpm:e.bpm,tracks:e.tracks}};return{pack:r,unpack:e}},u=function(n){var r=function(r){var e=n.indexOf(r);return e===-1?r:e},e=function(r){return isNaN(r)?r:n[r]};return{pack:r,unpack:e}},c=function(n,r){var e=function(e,a){var t=r[a[n]];return t?t.pack(e):e},a=function(e,a){var t=r[a[n]];return t?t.unpack(e):e};return{pack:e,unpack:a}},s={pack:function(n){return void 0===n?3:null===n?4:n?1:0},unpack:function(n){if(3!==n)return 4===n?null:1===n}},o=function(n){var r=function(r){return void 0===r?0:null===r?1:n?n.pack(r):r},e=function(r){if(0!==r)return 1===r?null:n?n.unpack(r):r};return{pack:r,unpack:e}},p=i(n(["patterns","measure","bpm",["tracks",a(r(n([["blocks",a(r(n(["id"])),1)]])),1)]])),l={pack:function(n){return S.pack(n)},unpack:function(n){return S.unpack(n)}},f=n([["array",r(l)]]),k=n(["attackTime","decayTime","sustainLevel","releaseTime",["reset_on_cut",s]]),m=n([["oscillatorType",u(["sine","square","sawtooth","triangle","custom"])],["fixed_frequency",s],["frequency",o()],["waveform",o()],["serie",o(n(["sin","cos"]))],["terms",o(n(["sin","cos"]))],["modulation",o(n([["detune",l]]))],"time_constant"]),d=n(["frequency","detune","Q",["modulation",n([["frequency",l],["detune",l],["Q",l]])]]),h=n([]),v=n([["subobjects",a(r(l),2)]]),g=["script","null","oscillator","notesplit","rise","adsr","envelope","transpose","scale","gain","echo","lowpass","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","reverb","noise","pink_noise","red_noise","arpeggiator","stack","multi_instrument","monophoner","polyphoner"],y=n([["force_note_cut",s]]),b=n(["maxChannels"]),S=n([["type",u(g)],["data",c("type",{script:n(["code"]),"null":h,oscillator:m,notesplit:n(["delay"]),rise:n(["time","target"]),adsr:k,envelope:k,transpose:n(["amount"]),scale:n(["base","top"]),gain:n(["gain"]),echo:n(["gain","delay"]),lowpass:d,highpass:d,bandpass:d,lowshelf:d,highshelf:d,peaking:d,notch:d,allpass:d,reverb:n(["room","damp","mix"]),noise:h,pink_noise:h,red_noise:h,arpeggiator:n(["scale","interval","duration","gap"]),stack:f,multi_instrument:v,monophoner:y,polyphoner:b})]]),_={pattern:t,song:p,instrument:S};MUSIC.Formats.PackedJSONSerializer.serialize=function(n,r){if(_[n]){var e=JSON.stringify(_[n].pack(r));return e=e.slice(1,e.length-1)}return JSON.stringify(r)},MUSIC.Formats.PackedJSONSerializer.deserialize=function(n,r){return _[n]?_[n].unpack(JSON.parse("["+r+"]")):JSON.parse(r)}}();
MUSIC=MUSIC||{},MUSIC.Formats=MUSIC.Formats||{},MUSIC.Formats.PackedJSONSerializerB={},function(){var n=function(n){var e=function(e){for(var a=[],t=0;t<n.length;t++){var r=n[t];Array.isArray(r)?a.push(r[1].pack(e[r[0]],e)):null!==e[r]&&void 0!==e[r]&&a.push(e[r])}return a},a=function(e){for(var a={},t=0;t<e.length;t++){var r=n[t];Array.isArray(r)?a[r[0]]=r[1].unpack(e[t],a):null!==e[t]&&void 0!==e[t]&&(a[r]=e[t])}return a};return{pack:e,unpack:a}},e=function(n){var e=function(e){return e.map(n.pack)},a=function(e){return e.map(n.unpack)};return{pack:e,unpack:a}},a=function(n,e){return n.concat(e)},t=function(n,e){var t=function(e){var t=n.pack(e);return t.reduce(a,[])},r=function(a){for(var t=[],r=0;r<a.length;r+=e)t.push(a.slice(r,r+e));return n.unpack(t)};return{pack:t,unpack:r}},r={pack:function(n){return void 0===n?3:null===n?4:n?1:0},unpack:function(n){if(3!==n)return 4===n?null:1===n}},i={pack:function(n){var e=n.n;for(var a in n)"n"!==a&&"s"!==a&&"l"!==a&&(e===n.n&&(e={n:n.n}),e[a]=n[a]);return[e,n.s,n.l]},unpack:function(n){var e=n[0];if("number"==typeof e)return{n:n[0],s:n[1],l:n[2]};var a={};for(var t in e)a[t]=e[t];return a.s=n[1],a.l=n[2],a}},o=n(["measure","measureCount","bpm","selectedTrack","scrollLeft",["tracks",e(n([["muted",r],["solo",r],"scroll",["events",t(e(i),3)],"instrument"]))]]),s=function(n){var e=function(e){var a=[],t=function(n){return n.id?(a.indexOf(n.id)===-1&&a.push(n.id),{id:a.indexOf(n.id)+1}):{id:0}},r=function(n){return{blocks:n.blocks.map(t)}},i={patterns:a,measure:e.measure,bpm:e.bpm,tracks:e.tracks.map(r)};return n.pack(i)},a=function(e){var a=n.unpack(e);return a.tracks.forEach(function(n){n.blocks.forEach(function(n){0===n.id?delete n.id:n.id=a.patterns[n.id-1]})}),{measure:a.measure,bpm:a.bpm,tracks:a.tracks}};return{pack:e,unpack:a}},c=function(n){var e=function(e){var a=n.indexOf(e);return a===-1?e:a},a=function(e){return isNaN(e)?e:n[e]};return{pack:e,unpack:a}},u=function(n,e){var a=function(a,t){var r=e[t[n]];return r?r.pack(a):a},t=function(a,t){var r=e[t[n]];return r?r.unpack(a):a};return{pack:a,unpack:t}},l=function(n){var e=function(e){return void 0===e?0:null===e?1:n?n.pack(e):e},a=function(e){if(0!==e)return 1===e?null:n?n.unpack(e):e};return{pack:e,unpack:a}},p=s(n(["patterns","measure","bpm",["tracks",t(e(n([["blocks",t(e(n(["id"])),1)]])),1)]])),d={pack:function(n){return C.pack(n)},unpack:function(n){return C.unpack(n)}},f=n([["array",e(d)]]),_=n(["attackTime","decayTime","sustainLevel","releaseTime",["reset_on_cut",r]]),m=n([["oscillatorType",c(["sine","square","sawtooth","triangle","custom"])],["fixed_frequency",r],["frequency",l()],["waveform",l()],["serie",l(n(["sin","cos"]))],["terms",l(n(["sin","cos"]))],["modulation",l(n([["detune",d],["pulse_width",l(d)]]))],"time_constant","pulse_width"]),k=n(["frequency","detune","Q",["modulation",n([["frequency",d],["detune",d],["Q",d]])]]),g=n([]),h=n([["subobjects",t(e(d),2)]]),v=["script","null","oscillator","notesplit","rise","adsr","envelope","transpose","scale","gain","echo","lowpass","highpass","bandpass","lowshelf","highshelf","peaking","notch","allpass","reverb","noise","pink_noise","red_noise","arpeggiator","stack","multi_instrument","monophoner","polyphoner","note_padding","note_condition","signal_monitor","signal_constant","note_delay","sample_rate_reduction","bit_crushing","signal_scale","signal_not","signal_or","signal_and","signal_nor","signal_nand","delay","note_frequency_generator","note_time_shift","wave_shaper"],y=n([["force_note_cut",r]]),b=n(["maxChannels"]),S=n(["time"]),w=function(n){return[n,d]},O=function(e){return l(n(e.map(w)))},C=n([["type",c(v)],["data",u("type",{script:n(["code"]),"null":g,oscillator:m,notesplit:n(["delay"]),rise:n(["time","target"]),adsr:_,envelope:_,transpose:n(["amount"]),scale:n(["base","top"]),gain:n(["gain",["modulation",O(["gain"])]]),echo:n(["gain","delay"]),lowpass:k,highpass:k,bandpass:k,lowshelf:k,highshelf:k,peaking:k,notch:k,allpass:k,reverb:n(["room","damp","mix"]),noise:g,pink_noise:g,red_noise:g,arpeggiator:n(["scale","interval","duration","gap"]),stack:f,multi_instrument:h,monophoner:y,polyphoner:b,note_padding:S,note_condition:n(["note_on","note_off","enter_time_constant","leave_time_constant"]),signal_monitor:g,signal_constant:n(["offset"]),note_delay:n(["delay"]),delay:n(["delay",["modulation",O(["delay"])]]),sample_rate_reduction:n(["factor"]),bit_crushing:n(["bits"]),signal_scale:n(["base","top"]),signal_not:g,signal_or:n(["second_signal",["modulation",O(["second_signal"])]]),signal_and:n(["second_signal",["modulation",O(["second_signal"])]]),signal_nor:n(["second_signal",["modulation",O(["second_signal"])]]),signal_nand:n(["second_signal",["modulation",O(["second_signal"])]]),note_frequency_generator:n(["time_constant"]),note_time_shift:n(["time"]),wave_shaper:n(["samples","f"])})]]),N={pattern:o,song:p,instrument:C};MUSIC.Formats.PackedJSONSerializerB.serialize=function(n,e){if(N[n]){var a=JSON.stringify(N[n].pack(e));return a=a.slice(1,a.length-1)}return JSON.stringify(e)},MUSIC.Formats.PackedJSONSerializerB.deserialize=function(n,e){return N[n]?N[n].unpack(JSON.parse("["+e+"]")):JSON.parse(e)}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
