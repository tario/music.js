/**
 * Copyright (c) 2010 Wilker LÃºcio
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Huffman;Huffman={treeFromText:function(b){var a;a=new Huffman.TreeBuilder(b);return a.build()}};Huffman.CoreHelpers={isArray:function(a){return !!(a&&a.constructor===Array)},lpad:function(a,b){b=b||8;while(a.length<b){a="0"+a}return a}};Huffman.Tree=function(a){this.root=a;this.root=this.root||new Huffman.Tree.Node();return this};Huffman.Tree.prototype.encode=function(a){return this.bitStringToString(this.encodeBitString(a))};Huffman.Tree.prototype.decode=function(j){var g,f,e,a,c,i,h,b;a=this.stringToBitString(j);i="";b=this.root;f=a.split("");for(g=0,e=f.length;g<e;g++){h=f[g];c=h==="0"?"left":"right";b=b[c];if(b.isLeaf()){i+=b.value;b=this.root}}return i};Huffman.Tree.prototype.encodeBitString=function(f){var c,b,a,d,e;e="";b=f.split("");for(c=0,a=b.length;c<a;c++){d=b[c];e+=this.bitValue(d)}return e};Huffman.Tree.prototype.bitStringToString=function(a){var d,b,f,c,e;e=8-a.length%8;for(c=0;(0<=e?c<e:c>e);(0<=e?c+=1:c-=1)){a+="0"}f=(function(){d=[];b=a.length;for(c=0;(0<=b?c<b:c>b);c+=8){d.push(String.fromCharCode(parseInt(a.substr(c,8),2)))}return d})();return f.join("")+e.toString()};Huffman.Tree.prototype.stringToBitString=function(c){var e,d,b,a,f,h,g;g=c.split("");h=parseInt(g.pop());g=(function(){e=[];b=g;for(d=0,a=b.length;d<a;d++){f=b[d];e.push(Huffman.CoreHelpers.lpad(f.charCodeAt(0).toString(2)))}return e})();g=g.join("");return g.substr(0,g.length-h)};Huffman.Tree.prototype.bitValue=function(b){var a;if(!((typeof(a=this.leafCache)!=="undefined"&&a!==null))){this.generateLeafCache()}return this.leafCache[b]};Huffman.Tree.prototype.generateLeafCache=function(a,b){this.leafCache=(typeof this.leafCache!=="undefined"&&this.leafCache!==null)?this.leafCache:{};a=a||this.root;b=b||"";if(a.isLeaf()){return(this.leafCache[a.value]=b)}else{this.generateLeafCache(a.left,b+"0");return this.generateLeafCache(a.right,b+"1")}};Huffman.Tree.prototype.encodeTree=function(){return this.root.encode()};Huffman.Tree.decodeTree=function(a){return new Huffman.Tree(Huffman.Tree.parseNode(a))};Huffman.Tree.parseNode=function(b){var a;a=new Huffman.Tree.Node();if(Huffman.CoreHelpers.isArray(b)){a.left=Huffman.Tree.parseNode(b[0]);a.right=Huffman.Tree.parseNode(b[1])}else{a.value=b}return a};Huffman.Tree.Node=function(){this.left=(this.right=(this.value=null));return this};Huffman.Tree.Node.prototype.isLeaf=function(){return(this.left===this.right)&&(this.right===null)};Huffman.Tree.Node.prototype.encode=function(){return this.value?this.value:[this.left.encode(),this.right.encode()]};var __hasProp=Object.prototype.hasOwnProperty;Huffman.TreeBuilder=function(a){this.text=a;return this};Huffman.TreeBuilder.prototype.build=function(){var a,b;b=this.buildFrequencyTable();a=this.combineTable(b);return Huffman.Tree.decodeTree(this.compressCombinedTable(a))};Huffman.TreeBuilder.prototype.buildFrequencyTable=function(){var d,c,b,a,e,h,f,g;g={};c=this.text.split("");for(d=0,b=c.length;d<b;d++){e=c[d];g[e]=(typeof g[e]!=="undefined"&&g[e]!==null)?g[e]:0;g[e]+=1}f=[];a=g;for(e in a){if(!__hasProp.call(a,e)){continue}h=a[e];f.push([h,e])}f.sort(this.frequencySorter);return f};Huffman.TreeBuilder.prototype.frequencySorter=function(d,c){return d[0]>c[0]?1:(d[0]<c[0]?-1:0)};Huffman.TreeBuilder.prototype.combineTable=function(b){var c,a;while(b.length>1){c=b.shift();a=b.shift();b.push([c[0]+a[0],[c,a]]);b.sort(this.frequencySorter)}return b[0]};Huffman.TreeBuilder.prototype.compressCombinedTable=function(a){var b;b=a[1];return Huffman.CoreHelpers.isArray(b)?[this.compressCombinedTable(b[0]),this.compressCombinedTable(b[1])]:b};
(function(window){

  var WORKER_PATH = 'recorderWorker.js';

  var Recorder = function(source, cfg){
    var config = cfg || {};
    var bufferLen = config.bufferLen || 4096;
    this.context = source.context;
    this.node = (this.context.createScriptProcessor ||
                 this.context.createJavaScriptNode).call(this.context,
                                                         bufferLen, 2, 2);
    var worker = new Worker(config.workerPath || WORKER_PATH);
    worker.postMessage({
      command: 'init',
      config: {
        sampleRate: this.context.sampleRate
      }
    });
    var recording = false,
      currCallback;

    this.node.onaudioprocess = function(e){
      if (!recording) return;
      worker.postMessage({
        command: 'record',
        buffer: [
          e.inputBuffer.getChannelData(0),
          e.inputBuffer.getChannelData(1)
        ]
      });
    }

    this.configure = function(cfg){
      for (var prop in cfg){
        if (cfg.hasOwnProperty(prop)){
          config[prop] = cfg[prop];
        }
      }
    }

    this.record = function(){
      recording = true;
    }

    this.stop = function(){
      recording = false;
    }

    this.clear = function(){
      worker.postMessage({ command: 'clear' });
    }

    this.getBuffer = function(cb) {
      currCallback = cb || config.callback;
      worker.postMessage({ command: 'getBuffer' })
    }

    this.exportWAV = function(cb, type){
      currCallback = cb || config.callback;
      type = type || config.type || 'audio/wav';
      if (!currCallback) throw new Error('Callback not set');
      worker.postMessage({
        command: 'exportWAV',
        type: type
      });
    }

    worker.onmessage = function(e){
      var blob = e.data;
      currCallback(blob);
    }

    source.connect(this.node);
    this.node.connect(this.context.destination);    //this should not be necessary
  };

  Recorder.forceDownload = function(blob, filename){
    var url = (window.URL || window.webkitURL).createObjectURL(blob);
    var link = window.document.createElement('a');
    link.href = url;
    link.download = filename || 'output.wav';
    var click = document.createEvent("Event");
    click.initEvent("click", true, true);
    link.dispatchEvent(click);
  }

  window.Recorder = Recorder;

})(window);

/**
 * T("timbre.js") - A JavaScript library for objective sound programming
 */
(function(undefined) {
    "use strict";

    var timbre = function() {
        return T.apply(null, arguments);
    };

    var slice = Array.prototype.slice;

    var FINISHED_STATE    = 0;
    var PLAYING_STATE     = 1;
    var UNSCHEDULED_STATE = 2; // (not use)
    var SCHEDULED_STATE   = 3; // (not use)

    var ACCEPT_SAMPLERATES = [8000,11025,12000,16000,22050,24000,32000,44100,48000];
    var ACCEPT_CELLSIZES = [32,64,128,256];

    var _ver = "14.11.25";
    var _sys = null;
    var _constructors = {};
    var _factories    = {};
    var _envtype = (typeof window !== "undefined") ? "browser" :
        (typeof module !== "undefined" && module.exports) ? "node" : "unknown";
    var _envmobile = _envtype === "browser" && /(iPhone|iPad|iPod|Android)/i.test(navigator.userAgent);
    var _f64mode = false;
    var _bpm = 120;

    var T = function() {
        var args = slice.call(arguments), key = args[0], t, m;

        switch (typeof key) {
        case "string":
            if (_constructors[key]) {
                t = new _constructors[key](args.slice(1));
            } else if (_factories[key]) {
                t = _factories[key](args.slice(1));
            } else {
                m = /^(.+?)(?:\.(ar|kr))?$/.exec(key);
                if (m) {
                    key = m[1];
                    if (_constructors[key]) {
                        t = new _constructors[key](args.slice(1));
                    } else if (_factories[key]) {
                        t = _factories[key](args.slice(1));
                    }
                    if (t && m[2]) {
                        t[m[2]]();
                    }
                }
            }
            break;
        case "number":
            t = new NumberWrapper(args);
            break;
        case "boolean":
            t = new BooleanWrapper(args);
            break;
        case "function":
            t = new FunctionWrapper(args);
            break;
        case "object":
            if (key !== null) {
                if (key instanceof TimbreObject) {
                    return key;
                } else if (key.context instanceof TimbreObject) {
                    return key.context;
                } else if (isDictionary(key)) {
                    t = new ObjectWrapper(args);
                } else if (isArray(key)) {
                    t = new ArrayWrapper(args);
                }
            }
            break;
        }

        if (t === undefined) {
            t = new AddNode(args.slice(1));
            console.warn("T(\"" + key + "\") is not defined.");
        }

        var _ = t._;
        _.originkey = key;
        _.meta = __buildMetaData(t);
        _.emit("init");

        return t;
    };

    var __buildMetaData = function(instance) {
        var meta = instance._.meta;
        var names, desc;
        var p = instance;
        while (p !== null && p.constructor !== Object) {
            names = Object.getOwnPropertyNames(p);
            for (var i = 0, imax = names.length; i < imax; ++i) {
                if (meta[names[i]]) {
                    continue;
                }
                if (/^(constructor$|process$|_)/.test(names[i])) {
                    meta[names[i]] = "ignore";
                } else {
                    desc = Object.getOwnPropertyDescriptor(p, names[i]);
                    if (typeof desc.value === "function") {
                        meta[names[i]] = "function";
                    } else if (desc.get || desc.set) {
                        meta[names[i]] = "property";
                    }
                }
            }
            p = Object.getPrototypeOf(p);
        }
        return meta;
    };

    // properties
    Object.defineProperties(timbre, {
        version  : { value: _ver },
        envtype  : { value: _envtype },
        envmobile: { value: _envmobile },
        env: {
            get: function() {
                return _sys.impl.env;
            }
        },
        samplerate: {
            get: function() {
                return _sys.samplerate;
            }
        },
        channels: {
            get: function() {
                return _sys.channels;
            }
        },
        cellsize: {
            get: function() {
                return _sys.cellsize;
            }
        },
        currentTime: {
            get: function() {
                return _sys.currentTime;
            }
        },
        isPlaying: {
            get: function() {
                return _sys.status === PLAYING_STATE;
            }
        },
        isRecording: {
            get: function() {
                return _sys.status === SCHEDULED_STATE;
            }
        },
        amp: {
            set: function(value) {
                if (typeof value === "number") {
                    _sys.amp = value;
                }
            },
            get: function() {
                return _sys.amp;
            }
        },
        bpm: {
            set: function(value) {
                if (typeof value === "number") {
                    if (5 <= value && value <= 300) {
                        _bpm = value;
                    }
                }
            },
            get: function() {
                return _bpm;
            }
        }
    });

    timbre.bind = function(Klass, opts) {
        _sys.bind(Klass, opts);
        return timbre;
    };
    timbre.setup = function(opts) {
        _sys.setup(opts);
        return timbre;
    };
    timbre.play = function() {
        _sys.play();
        return timbre;
    };
    timbre.pause = function() {
        _sys.pause();
        return timbre;
    };
    timbre.reset = function() {
        _sys.reset();
        _sys.events.emit("reset");
        return timbre;
    };
    timbre.on = timbre.addListener = function(type, listener) {
        _sys.on(type, listener);
        return timbre;
    };
    timbre.once = function(type, listener) {
        _sys.once(type, listener);
        return timbre;
    };
    timbre.off = timbre.removeListener = function(type, listener) {
        _sys.off(type, listener);
        return timbre;
    };
    timbre.removeAllListeners = function(type) {
        _sys.removeAllListeners(type);
        return timbre;
    };
    timbre.listeners = function(type) {
        return _sys.listeners(type);
    };
    timbre.rec = function() {
        return _sys.rec.apply(_sys, arguments);
    };
    timbre.timevalue = (function() {
        var getbpm = function(str) {
            var m, bpm = _bpm;
            if ((m = /^bpm(\d+(?:\.\d+)?)/i.exec(str))) {
                bpm = Math.max(5, Math.min(300, +(m[1]||0)));
            }
            return bpm;
        };
        return function(str) {
            var m, ms, x;
            if ((m = /^(\d+(?:\.\d+)?)Hz$/i.exec(str))) {
                return +m[1] === 0 ? 0 : 1000 / +m[1];
            }
            if ((m = /L(\d+)?(\.*)$/i.exec(str))) {
                ms = 60 / getbpm(str) * (4 / (m[1]||4)) * 1000;
                ms *= 2 - (1 / Math.pow(2, (m[2]||"").length));
                return ms;
            }
            if ((m = /^(\d+(?:\.\d+)?|\.(?:\d+))(min|sec|m)s?$/i.exec(str))) {
                switch (m[2]) {
                case "min": return +(m[1]||0) * 60 * 1000;
                case "sec": return +(m[1]||0) * 1000;
                case "m"  : return +(m[1]||0);
                }
            }
            if ((m = /^(?:([0-5]?[0-9]):)?(?:([0-5]?[0-9]):)(?:([0-5]?[0-9]))(?:\.([0-9]{1,3}))?$/.exec(str))) {
                x = (m[1]||0) * 3600 + (m[2]||0) * 60 + (m[3]||0);
                x = x * 1000 + ((((m[4]||"")+"00").substr(0, 3))|0);
                return x;
            }
            if ((m = /(\d+)\.(\d+)\.(\d+)$/i.exec(str))) {
                x = (m[1] * 4 + (+m[2])) * 480 + (+m[3]);
                return 60 / getbpm(str) * (x / 480) * 1000;
            }
            if ((m = /(\d+)ticks$/i.exec(str))) {
                return 60 / getbpm(str) * (m[1] / 480) * 1000;
            }
            if ((m = /^(\d+)samples(?:\/(\d+)Hz)?$/i.exec(str))) {
                return m[1] * 1000 / (m[2] || timbre.samplerate);
            }
            return 0;
        };
    })();

    var fn = timbre.fn = {
        SignalArray: Float32Array,
        currentTimeIncr: 0,
        emptycell: null,
        FINISHED_STATE: FINISHED_STATE,
        PLAYING_STATE: PLAYING_STATE,
        UNSCHEDULED_STATE: UNSCHEDULED_STATE,
        SCHEDULED_STATE: SCHEDULED_STATE
    };

    var isArray = fn.isArray = Array.isArray;
    var isDictionary = fn.isDictionary = function(object) {
        return typeof object === "object" && object.constructor === Object;
    };

    fn.nop = function() {
        return this;
    };

    fn.isSignalArray = function(obj) {
        if (obj instanceof fn.SignalArray) {
            return true;
        }
        if (Array.isArray(obj) && obj.__klass && obj.__klass.type === 2) {
            return true;
        }
        return false;
    };

    // borrowed from coffee-script
    fn.extend = function(child, parent) {
        parent = parent || TimbreObject;

        for (var key in parent) {
            if (parent.hasOwnProperty(key)) {
                child[key] = parent[key];
            }
        }
        /*jshint validthis:true */
        function ctor() {
            this.constructor = child;
        }
        /*jshint validthis:false */
        ctor.prototype  = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    };

    fn.constructorof = function(ctor, Klass) {
        var f = ctor && ctor.prototype;
        while (f) {
            if (f === Klass.prototype) {
                return true;
            }
            f = Object.getPrototypeOf(f);
        }
        return false;
    };

    fn.register = function(key, ctor) {
        if (fn.constructorof(ctor, TimbreObject)) {
            _constructors[key] = ctor;
        } else {
            _factories[key] = ctor;
        }
    };

    fn.alias = function(key, alias) {
        if (_constructors[alias]) {
            _constructors[key] = _constructors[alias];
        } else if (_factories[alias]) {
            _factories[key] = _factories[alias];
        }

    };

    fn.getClass = function(key) {
        return _constructors[key];
    };

    fn.pointer = function(src, offset, length) {
        offset = src.byteOffset + offset * src.constructor.BYTES_PER_ELEMENT;
        if (typeof length === "number") {
            return new src.constructor(src.buffer, offset, length);
        } else {
            return new src.constructor(src.buffer, offset);
        }
    };

    fn.nextTick = function(func) {
        _sys.nextTick(func);
        return timbre;
    };

    fn.fixAR = function(self) {
        self._.ar = true;
        self._.aronly = true;
    };

    fn.fixKR = function(self) {
        self._.ar = false;
        self._.kronly = true;
    };

    fn.changeWithValue = function() {
        var _ = this._;
        var x = _.value * _.mul + _.add;
        if (isNaN(x)) {
            x = 0;
        }
        var cell = this.cells[0];
        for (var i = 0, imax = cell.length; i < imax; ++i) {
            cell[i] = x;
        }
    };
    fn.changeWithValue.unremovable = true;

    fn.clone = function(src) {
        var new_instance = new src.constructor([]);
        new_instance._.ar  = src._.ar;
        new_instance._.mul = src._.mul;
        new_instance._.add = src._.add;
        new_instance._.bypassed = src._.bypassed;
        return new_instance;
    };

    fn.timer = (function() {
        var make_onstart = function(self) {
            return function() {
                if (_sys.timers.indexOf(self) === -1) {
                    _sys.timers.push(self);
                    _sys.events.emit("addObject");
                    self._.emit("start");
                    fn.buddies_start(self);
                }
            };
        };
        var make_onstop = function(self) {
            return function() {
                var i = _sys.timers.indexOf(self);
                if (i !== -1) {
                    _sys.timers.splice(i, 1);
                    self._.emit("stop");
                    _sys.events.emit("removeObject");
                    fn.buddies_stop(self);
                }
            };
        };
        return function(self) {
            var onstart = make_onstart(self);
            var onstop  = make_onstop(self);
            self.nodeType = TimbreObject.TIMER;
            self.start = function() {
                _sys.nextTick(onstart);
                return self;
            };
            self.stop = function() {
                _sys.nextTick(onstop);
                return self;
            };
            return self;
        };
    })();

    fn.listener = (function() {
        var make_onlisten = function(self) {
            return function() {
                if (_sys.listeners.indexOf(self) === -1) {
                    _sys.listeners.push(self);
                    _sys.events.emit("addObject");
                    self._.emit("listen");
                    fn.buddies_start(self);
                }
            };
        };
        var make_onunlisten = function(self) {
            return function() {
                var i = _sys.listeners.indexOf(self);
                if (i !== -1) {
                    _sys.listeners.splice(i, 1);
                    self._.emit("unlisten");
                    _sys.events.emit("removeObject");
                    fn.buddies_stop(self);
                }
            };
        };
        return function(self) {
            var onlisten = make_onlisten(self);
            var onunlisten = make_onunlisten(self);
            self.nodeType = TimbreObject.LISTENER;
            self.listen = function(buddies) {
                if (arguments.length) {
                    self.append.apply(self, arguments);
                }
                if (self.nodes.length) {
                    _sys.nextTick(onlisten);
                }
                return self;
            };
            self.unlisten = function() {
                if (arguments.length) {
                    self.remove.apply(self, arguments);
                }
                if (!self.nodes.length) {
                    _sys.nextTick(onunlisten);
                }
                return self;
            };
            return self;
        };
    })();

    fn.make_onended = function(self, lastValue) {
        return function() {
            self.playbackState = FINISHED_STATE;
            if (typeof lastValue === "number") {
                var cell  = self.cells[0];
                var cellL = self.cells[1];
                var cellR = self.cells[2];
                for (var i = 0, imax = cellL.length; i < imax; ++i) {
                    cell[0] = cellL[i] = cellR[i] = lastValue;
                }
            }
            self._.emit("ended");
        };
    };

    fn.inputSignalAR = function(self) {
        var cell  = self.cells[0];
        var cellL = self.cells[1];
        var cellR = self.cells[2];
        var nodes = self.nodes;
        var i, imax = nodes.length;
        var j, jmax = cell.length;
        var tickID  = self.tickID;
        var not_clear, tmp, tmpL, tmpR;

        if (self.numChannels === 2) {
            not_clear = true;
            if (imax !== 0) {
                for (i = 0; i < imax; ++i) {
                    if (nodes[i].playbackState === PLAYING_STATE) {
                        nodes[i].process(tickID);
                        cellL.set(nodes[i].cells[1]);
                        cellR.set(nodes[i].cells[2]);
                        not_clear = false;
                        ++i;
                        break;
                    }
                }
                for (; i < imax; ++i) {
                    if (nodes[i].playbackState === PLAYING_STATE) {
                        nodes[i].process(tickID);
                        tmpL = nodes[i].cells[1];
                        tmpR = nodes[i].cells[2];
                        for (j = jmax; j; ) {
                            j -= 8;
                            cellL[j  ] += tmpL[j  ]; cellR[j  ] += tmpR[j  ];
                            cellL[j+1] += tmpL[j+1]; cellR[j+1] += tmpR[j+1];
                            cellL[j+2] += tmpL[j+2]; cellR[j+2] += tmpR[j+2];
                            cellL[j+3] += tmpL[j+3]; cellR[j+3] += tmpR[j+3];
                            cellL[j+4] += tmpL[j+4]; cellR[j+4] += tmpR[j+4];
                            cellL[j+5] += tmpL[j+5]; cellR[j+5] += tmpR[j+5];
                            cellL[j+6] += tmpL[j+6]; cellR[j+6] += tmpR[j+6];
                            cellL[j+7] += tmpL[j+7]; cellR[j+7] += tmpR[j+7];
                        }
                    }
                }
            }
            if (not_clear) {
                cellL.set(fn.emptycell);
                cellR.set(fn.emptycell);
            }
        } else {
            not_clear = true;
            if (imax !== 0) {
                for (i = 0; i < imax; ++i) {
                    if (nodes[i].playbackState === PLAYING_STATE) {
                        nodes[i].process(tickID);
                        cell.set(nodes[i].cells[0]);
                        not_clear = false;
                        ++i;
                        break;
                    }
                }
                for (; i < imax; ++i) {
                    if (nodes[i].playbackState === PLAYING_STATE) {
                        tmp = nodes[i].process(tickID).cells[0];
                        for (j = jmax; j; ) {
                            j -= 8;
                            cell[j  ] += tmp[j  ];
                            cell[j+1] += tmp[j+1];
                            cell[j+2] += tmp[j+2];
                            cell[j+3] += tmp[j+3];
                            cell[j+4] += tmp[j+4];
                            cell[j+5] += tmp[j+5];
                            cell[j+6] += tmp[j+6];
                            cell[j+7] += tmp[j+7];
                        }
                    }
                }
            }
            if (not_clear) {
                cell.set(fn.emptycell);
            }
        }
    };

    fn.inputSignalKR = function(self) {
        var nodes = self.nodes;
        var i, imax = nodes.length;
        var tickID = self.tickID;
        var tmp = 0;
        for (i = 0; i < imax; ++i) {
            if (nodes[i].playbackState === PLAYING_STATE) {
                tmp += nodes[i].process(tickID).cells[0][0];
            }
        }
        return tmp;
    };

    fn.outputSignalAR = function(self) {
        var cell  = self.cells[0];
        var cellL = self.cells[1];
        var cellR = self.cells[2];
        var mul = self._.mul, add = self._.add;
        var i;

        if (self.numChannels === 2) {
            for (i = cell.length; i; ) {
                i -= 8;
                cellL[i  ] = cellL[i  ] * mul + add; cellR[i  ] = cellR[i  ] * mul + add;
                cellL[i+1] = cellL[i+1] * mul + add; cellR[i+1] = cellR[i+1] * mul + add;
                cellL[i+2] = cellL[i+2] * mul + add; cellR[i+2] = cellR[i+2] * mul + add;
                cellL[i+3] = cellL[i+3] * mul + add; cellR[i+3] = cellR[i+3] * mul + add;
                cellL[i+4] = cellL[i+4] * mul + add; cellR[i+4] = cellR[i+4] * mul + add;
                cellL[i+5] = cellL[i+5] * mul + add; cellR[i+5] = cellR[i+5] * mul + add;
                cellL[i+6] = cellL[i+6] * mul + add; cellR[i+6] = cellR[i+6] * mul + add;
                cellL[i+7] = cellL[i+7] * mul + add; cellR[i+7] = cellR[i+7] * mul + add;
                cell[i  ] = (cellL[i  ] + cellR[i  ]) * 0.5;
                cell[i+1] = (cellL[i+1] + cellR[i+1]) * 0.5;
                cell[i+2] = (cellL[i+2] + cellR[i+2]) * 0.5;
                cell[i+3] = (cellL[i+3] + cellR[i+3]) * 0.5;
                cell[i+4] = (cellL[i+4] + cellR[i+4]) * 0.5;
                cell[i+5] = (cellL[i+5] + cellR[i+5]) * 0.5;
                cell[i+6] = (cellL[i+6] + cellR[i+6]) * 0.5;
                cell[i+7] = (cellL[i+7] + cellR[i+7]) * 0.5;
            }
        } else {
            if (mul !== 1 || add !== 0) {
                for (i = cell.length; i; ) {
                    i -= 8;
                    cell[i  ] = cell[i  ] * mul + add;
                    cell[i+1] = cell[i+1] * mul + add;
                    cell[i+2] = cell[i+2] * mul + add;
                    cell[i+3] = cell[i+3] * mul + add;
                    cell[i+4] = cell[i+4] * mul + add;
                    cell[i+5] = cell[i+5] * mul + add;
                    cell[i+6] = cell[i+6] * mul + add;
                    cell[i+7] = cell[i+7] * mul + add;
                }
            }
        }
    };

    fn.outputSignalKR = function(self) {
        var cell  = self.cells[0];
        var cellL = self.cells[1];
        var cellR = self.cells[2];
        var mul = self._.mul, add = self._.add;
        var value = cell[0] * mul + add;
        var i;

        if (self.numChannels === 2) {
            for (i = cell.length; i; ) {
                i -= 8;
                cell[i] = cell[i+1] = cell[i+2] = cell[i+3] = cell[i+4] = cell[i+5] = cell[i+6] = cell[i+7] = cellL[i] = cellL[i+1] = cellL[i+2] = cellL[i+3] = cellL[i+4] = cellL[i+5] = cellL[i+6] = cellL[i+7] = cellR[i] = cellR[i+1] = cellR[i+2] = cellR[i+3] = cellR[i+4] = cellR[i+5] = cellR[i+6] = cellR[i+7] = value;
            }
        } else {
            for (i = cell.length; i; ) {
                i -= 8;
                cell[i] = cell[i+1] = cell[i+2] = cell[i+3] = cell[i+4] = cell[i+5] = cell[i+6] = cell[i+7] = value;
            }
        }
    };

    fn.buddies_start = function(self) {
        var buddies = self._.buddies;
        var node, i, imax;
        for (i = 0, imax = buddies.length; i < imax; ++i) {
            node = buddies[i];
            switch (node.nodeType) {
            case TimbreObject.DSP:
                node.play();
                break;
            case TimbreObject.TIMER:
                node.start();
                break;
            case TimbreObject.LISTENER:
                node.listen();
                break;
            }
        }
    };

    fn.buddies_stop = function(self) {
        var buddies = self._.buddies;
        var node, i, imax;
        for (i = 0, imax = buddies.length; i < imax; ++i) {
            node = buddies[i];
            switch (node.nodeType) {
            case TimbreObject.DSP:
                node.pause();
                break;
            case TimbreObject.TIMER:
                node.stop();
                break;
            case TimbreObject.LISTENER:
                node.unlisten();
                break;
            }
        }
    };

    fn.fix_iOS6_1_problem = function(flag) {
        _sys.fix_iOS6_1_problem(flag);
    };

    var modules = timbre.modules = {};

    // EventEmitter
    var EventEmitter = modules.EventEmitter = (function() {
        function EventEmitter(context) {
            this.context = context;
            this.events = {};
        }

        var $ = EventEmitter.prototype;

        $.emit = function(type) {
            var handler = this.events[type];
            if (!handler) {
                return false;
            }

            var args;
            if (typeof handler === "function") {
                switch (arguments.length) {
                case 1:
                    handler.call(this.context);
                    break;
                case 2:
                    handler.call(this.context, arguments[1]);
                    break;
                case 3:
                    handler.call(this.context, arguments[1], arguments[2]);
                    break;
                default:
                    args = slice.call(arguments, 1);
                    handler.apply(this.context, args);
                }
                return true;
            } else if (isArray(handler)) {
                args = slice.call(arguments, 1);
                var listeners = handler.slice();
                for (var i = 0, imax = listeners.length; i < imax; ++i) {
                    if (listeners[i] instanceof TimbreObject) {
                        listeners[i].bang.apply(listeners[i], args);
                    } else {
                        listeners[i].apply(this.context, args);
                    }
                }
                return true;
            } else if (handler instanceof TimbreObject) {
                args = slice.call(arguments, 1);
                handler.bang.apply(handler, args);
            } else {
                return false;
            }
        };

        $.on = function(type, listener) {
            if (typeof listener !== "function" && !(listener instanceof TimbreObject)) {
                throw new Error("addListener takes instances of Function or timbre.Object");
            }
            var e = this.events;

            if (!e[type]) {
                e[type] = listener;
            } else if (isArray(e[type])) {
                e[type].push(listener);
            } else {
                e[type] = [e[type], listener];
            }
            return this;
        };

        $.once = function(type, listener) {
            var self = this;
            var g;
            if (typeof listener === "function") {
                g = function () {
                    self.off(type, g);
                    listener.apply(self.context, arguments);
                };
            } else if (listener instanceof TimbreObject) {
                g = function () {
                    self.off(type, g);
                    listener.bang.apply(listener, arguments);
                };
            } else {
                throw new Error("once takes instances of Function or timbre.Object");
            }
            g.listener = listener;

            self.on(type, g);

            return this;
        };

        $.off = function(type, listener) {
            if (typeof listener !== "function" && !(listener instanceof TimbreObject)) {
                throw new Error("removeListener takes instances of Function or timbre.Object");
            }
            var e = this.events;

            if (!e[type]) {
                return this;
            }

            var list = e[type];

            if (isArray(list)) {
                var position = -1;
                for (var i = 0, imax = list.length; i < imax; ++i) {
                    if (list[i] === listener ||
                        // once listener
                        (list[i].listener && list[i].listener === listener)) {
                        position = i;
                        break;
                    }
                }

                if (position < 0) {
                    return this;
                }
                list.splice(position, 1);
                if (list.length === 0) {
                    e[type] = null;
                }
            } else if (list === listener ||
                       // once listener
                       (list.listener && list.listener === listener)) {
                e[type] = null;
            }

            return this;
        };

        $.removeAllListeners = function(type) {
            var e = this.events;

            var remain = false;
            var listeners = e[type];
            if (isArray(listeners)) {
                for (var i = listeners.length; i--; ) {
                    var listener = listeners[i];
                    if (listener.unremovable) {
                        remain = true;
                        continue;
                    }
                    this.off(type, listener);
                }
            } else if (listeners) {
                if (!listeners.unremovable) {
                    this.off(type, listeners);
                } else {
                    remain = true;
                }
            }
            if (!remain) {
                e[type] = null;
            }

            return this;
        };

        $.listeners = function(type) {
            var a, e = this.events;
            if (!e[type]) {
                return [];
            }
            e = e[type];
            if (!isArray(e)) {
                return e.unremovable ? [] : [e];
            }
            e = e.slice();
            a = [];
            for (var i = 0, imax = e.length; i < imax; ++i) {
                if (!e[i].unremovable) {
                    a.push(e[i]);
                }
            }
            return a;
        };

        return EventEmitter;
    })();

    var Deferred = modules.Deferred = (function() {
        function Deferred(context) {
            this.context = context || this;
            this._state = "pending";
            this._doneList = [];
            this._failList = [];

            this._promise = new Promise(this);
        }

        var $ = Deferred.prototype;

        var exec = function(statue, list, context, args) {
            if (this._state === "pending") {
                this._state = statue;
                for (var i = 0, imax = list.length; i < imax; ++i) {
                    list[i].apply(context, args);
                }
                this._doneList = this._failList = null;
            }
        };

        var isDeferred = function(x) {
            return x && typeof x.promise === "function";
        };

        $.resolve = function() {
            var args = slice.call(arguments, 0);
            exec.call(this, "resolved", this._doneList, this.context || this, args);
            return this;
        };
        $.resolveWith = function(context) {
            var args = slice.call(arguments, 1);
            exec.call(this, "resolved", this._doneList, context, args);
            return this;
        };
        $.reject = function() {
            var args = slice.call(arguments, 0);
            exec.call(this, "rejected", this._failList, this.context || this, args);
            return this;
        };
        $.rejectWith = function(context) {
            var args = slice.call(arguments, 1);
            exec.call(this, "rejected", this._failList, context, args);
            return this;
        };

        $.promise = function() {
            return this._promise;
        };
        $.done = function() {
            var args = slice.call(arguments);
            var isResolved = (this._state === "resolved");
            var isPending  = (this._state === "pending");
            var list = this._doneList;
            for (var i = 0, imax = args.length; i < imax; ++i) {
                if (typeof args[i] === "function") {
                    if (isResolved) {
                        args[i]();
                    } else if (isPending) {
                        list.push(args[i]);
                    }
                }
            }
            return this;
        };
        $.fail = function() {
            var args = slice.call(arguments);
            var isRejected = (this._state === "rejected");
            var isPending  = (this._state === "pending");
            var list = this._failList;
            for (var i = 0, imax = args.length; i < imax; ++i) {
                if (typeof args[i] === "function") {
                    if (isRejected) {
                        args[i]();
                    } else if (isPending) {
                        list.push(args[i]);
                    }
                }
            }
            return this;
        };
        $.always = function() {
            this.done.apply(this, arguments);
            this.fail.apply(this, arguments);
            return this;
        };
        $.then = function then(done, fail) {
            return this.done(done).fail(fail);
        };
        $.pipe = function(done, fail) {
            var self = this;
            var dfd = new Deferred(this.context);

            this.done(function() {
                var res = done.apply(self.context, arguments);
                if (isDeferred(res)) {
                    res.then(function() {
                        var args = slice.call(arguments);
                        dfd.resolveWith.apply(dfd, [res].concat(args));
                    });
                } else {
                    dfd.resolveWith(self, res);
                }
            });
            this.fail(function() {
                if (typeof fail === "function") {
                    var res = fail.apply(self.context, arguments);
                    if (isDeferred(res)) {
                        res.fail(function() {
                            var args = slice.call(arguments);
                            dfd.rejectWith.apply(dfd, [res].concat(args));
                        });
                    }
                } else {
                    dfd.reject.apply(dfd, arguments);
                }
            });

            return dfd.promise();
        };
        // $.then = $.pipe;

        $.isResolved = function() {
            return this._state === "resolved";
        };
        $.isRejected = function() {
            return this._state === "rejected";
        };
        $.state = function() {
            return this._state;
        };

        // TODO: test
        Deferred.when = function(subordinate) {
            var i = 0;
            var resolveValues = slice.call(arguments);
            var length    = resolveValues.length;
            var remaining = length;

            if (length === 1 && !isDeferred(subordinate)) {
                remaining = 0;
            }
            var deferred = (remaining === 1) ? subordinate : new Deferred();

            var updateFunc = function(i, results) {
                return function(value) {
                    results[i] = arguments.length > 1 ? slice.call(arguments) : value;
                    if (!(--remaining)) {
                        deferred.resolve.apply(deferred, results);
                    }
                };
            };

            if (length > 1) {
                var resolveResults = new Array(length);
                var onfailed = function() {
                    deferred.reject();
                };
                for (; i < length; ++i) {
                    if (resolveValues[i] && isDeferred(resolveValues[i])) {
                        resolveValues[i].promise().done(
                            updateFunc(i, resolveResults)
                        ).fail(onfailed);
                    } else {
                        resolveResults[i] = resolveValues[i];
                        --remaining;
                    }
                }
            }

            if (!remaining) {
                deferred.resolve.apply(deferred, resolveValues);
            }

            return deferred.promise();
        };

        function Promise(object) {
            this.context = object.context;
            this.then = object.then;
            this.done = function() {
                object.done.apply(object, arguments);
                return this;
            };
            this.fail = function() {
                object.fail.apply(object, arguments);
                return this;
            };
            this.pipe = function() {
                return object.pipe.apply(object, arguments);
            };
            this.always = function() {
                object.always.apply(object, arguments);
                return this;
            };
            this.promise = function() {
                return this;
            };
            this.isResolved = function() {
                return object.isResolved();
            };
            this.isRejected = function() {
                return object.isRejected();
            };
        }

        return Deferred;
    })();

    // root object
    var TimbreObject = timbre.Object = (function() {
        function TimbreObject(numChannels, _args) {
            this._ = {}; // private members
            var e = this._.events = new EventEmitter(this);
            this._.emit = function() {
                return e.emit.apply(e, arguments);
            };
            if (isDictionary(_args[0])) {
                var params = _args.shift();
                var _in = params["in"];
                this.once("init", function() {
                    this.set(params);
                    if (_in) {
                        if (isArray(_in)) {
                            this.append.apply(this, _in);
                        } else if (_in instanceof TimbreObject) {
                            this.append(_in);
                        }
                    }
                });
            }

            this.tickID = -1;
            this.nodes  = _args.map(timbre);
            this.cells  = [];
            this.numChannels = numChannels;
            switch (numChannels) {
            case 0:
                this.L = this.R = new ChannelObject(null);
                this.cells[0] = this.cells[1] = this.cells[2] = this.L.cell;
                break;
            case 1:
                this.L = this.R = new ChannelObject(this);
                this.cells[0] = this.cells[1] = this.cells[2] = this.L.cell;
                break;
            case 2:
                this.L = new ChannelObject(this);
                this.R = new ChannelObject(this);
                this.cells[0] = new fn.SignalArray(_sys.cellsize);
                this.cells[1] = this.L.cell;
                this.cells[2] = this.R.cell;
                break;
            }
            this.playbackState = PLAYING_STATE;
            this.nodeType = TimbreObject.DSP;

            this._.ar  = true;
            this._.mul = 1;
            this._.add = 0;
            this._.dac = null;
            this._.bypassed = false;
            this._.meta = {};
            this._.samplerate = _sys.samplerate;
            this._.cellsize   = _sys.cellsize;
            this._.buddies    = [];
        }
        TimbreObject.DSP      = 1;
        TimbreObject.TIMER    = 2;
        TimbreObject.LISTENER = 3;

        var $ = TimbreObject.prototype;

        Object.defineProperties($, {
            isAr: {
                get: function() {
                    return this._.ar;
                }
            },
            isKr: {
                get: function() {
                    return !this._.ar;
                }
            },
            isBypassed: {
                get: function() {
                    return this._.bypassed;
                }
            },
            isEnded: {
                get: function() {
                    return !(this.playbackState & 1);
                }
            },
            mul: {
                set: function(value) {
                    if (typeof value === "number") {
                        this._.mul = value;
                        this._.emit("setMul", value);
                    }
                },
                get: function() {
                    return this._.mul;
                }
            },
            add: {
                set: function(value) {
                    if (typeof value === "number") {
                        this._.add = value;
                        this._.emit("setAdd", value);
                    }
                },
                get: function() {
                    return this._.add;
                }
            },
            buddies: {
                set: function(value) {
                    if (!isArray(value)) {
                        value = [value];
                    }
                    this._.buddies = value.filter(function(node) {
                        return node instanceof TimbreObject;
                    });
                },
                get: function() {
                    return this._.buddies;
                }
            }
        });

        $.toString = function() {
            return this.constructor.name;
        };

        $.valueOf = function() {
            if (_sys.tickID !== this.tickID) {
                this.process(_sys.tickID);
            }
            return this.cells[0][0];
        };

        $.append = function() {
            if (arguments.length > 0) {
                var list = slice.call(arguments).map(timbre);
                this.nodes = this.nodes.concat(list);
                this._.emit("append", list);
            }
            return this;
        };

        $.appendTo = function(object) {
            object.append(this);
            return this;
        };

        $.remove = function() {
            if (arguments.length > 0) {
                var j, nodes = this.nodes, list = [];
                for (var i = 0, imax = arguments.length; i < imax; ++i) {
                    if ((j = nodes.indexOf(arguments[i])) !== -1) {
                        list.push(nodes[j]);
                        nodes.splice(j, 1);
                    }
                }
                if (list.length > 0) {
                    this._.emit("remove", list);
                }
            }
            return this;
        };

        $.removeFrom = function(object) {
            object.remove(this);
            return this;
        };

        $.removeAll = function() {
            var list = this.nodes.slice();
            this.nodes = [];
            if (list.length > 0) {
                this._.emit("remove", list);
            }
            return this;
        };

        $.removeAtIndex = function(index) {
            var item = this.nodes[index];
            if (item) {
                this.nodes.splice(index, 1);
                this._.emit("remove", [item]);
            }
            return this;
        };

        $.postMessage = function(message) {
            this._.emit("message", message);
            return this;
        };

        $.to = function(object) {
            if (object instanceof TimbreObject) {
                object.append(this);
            } else {
                var args = slice.call(arguments);
                if (isDictionary(args[1])) {
                    args.splice(2, 0, this);
                } else {
                    args.splice(1, 0, this);
                }
                object = T.apply(null, args);
            }
            return object;
        };

        $.splice = function(ins, obj, rem) {
            var i;
            if (!obj) {
                if (this._.dac) {
                    if (ins instanceof TimbreObject) {
                        if (rem instanceof TimbreObject) {
                            if (rem._.dac) {
                                rem._.dac._.node = ins;
                                ins._.dac = rem._.dac;
                                rem._.dac = null;
                                ins.nodes.push(this);
                            }
                        } else {
                            if (this._.dac) {
                                this._.dac._.node = ins;
                                ins._.dac = this._.dac;
                                this._.dac = null;
                                ins.nodes.push(this);
                            }
                        }
                    } else if (rem instanceof TimbreObject) {
                        if (rem._.dac) {
                            rem._.dac._.node = this;
                            this._.dac = rem._.dac;
                            rem._.dac = null;
                        }
                    }
                }
            } else {
                if (obj instanceof TimbreObject) {
                    i = obj.nodes.indexOf(rem);
                    if (i !== -1) {
                        obj.nodes.splice(i, 1);
                    }
                    if (ins instanceof TimbreObject) {
                        ins.nodes.push(this);
                        obj.nodes.push(ins);
                    } else {
                        obj.nodes.push(this);
                    }
                }
            }
            return this;
        };

        // EventEmitter
        $.on = $.addListener = function(type, listener) {
            this._.events.on(type, listener);
            return this;
        };

        $.once = function(type, listener) {
            this._.events.once(type, listener);
            return this;
        };

        $.off = $.removeListener = function(type, listener) {
            this._.events.off(type, listener);
            return this;
        };

        $.removeAllListeners = function(type) {
            this._.events.removeAllListeners(type);
            return this;
        };

        $.listeners = function(type) {
            return this._.events.listeners(type);
        };

        $.set = function(key, value) {
            var x, desc, meta = this._.meta;
            switch (typeof key) {
            case "string":
                switch (meta[key]) {
                case "property":
                    this[key] = value;
                    break;
                case "function":
                    this[key](value);
                    break;
                default:
                    x = this;
                    while (x !== null) {
                        desc = Object.getOwnPropertyDescriptor(x, key);
                        if (desc) {
                            if (typeof desc.value === "function") {
                                meta[key] = "function";
                                this[key](value);
                            } else if (desc.get || desc.set) {
                                meta[key] = "property";
                                this[key] = value;
                            }
                        }
                        x = Object.getPrototypeOf(x);
                    }
                }
                break;
            case "object":
                for (x in key) {
                    this.set(x, key[x]);
                }
                break;
            }
            return this;
        };

        $.get = function(key) {
            if (this._.meta[key] === "property") {
                return this[key];
            }
        };

        $.bang = function() {
            this._.emit.apply(this, ["bang"].concat(slice.call(arguments)));
            return this;
        };

        $.process = fn.nop;

        $.bypass = function() {
            this._.bypassed = (arguments.length === 0) ? true : !!arguments[0];
            return this;
        };

        $.play = function() {
            var dac = this._.dac;
            if (dac === null) {
                dac = this._.dac = new SystemInlet(this);
            }
            if (dac.play()) {
                this._.emit.apply(this, ["play"].concat(slice.call(arguments)));
            }
            fn.buddies_start(this);
            return this;
        };

        $.pause = function() {
            var dac = this._.dac;
            if (dac && dac.playbackState === PLAYING_STATE) {
                dac.pause();
                this._.dac = null;
                this._.emit("pause");
            }
            fn.buddies_stop(this);
            return this;
        };

        $.start = $.stop = $.listen = $.unlisten = function() {
            return this;
        };

        $.ar = function() {
            if ((arguments.length === 0) ? true : !!arguments[0]) {
                if (!this._.kronly) {
                    this._.ar = true;
                    this._.emit("ar", true);
                }
            } else {
                this.kr(true);
            }
            return this;
        };

        $.kr = function() {
            if ((arguments.length === 0) ? true : !!arguments[0]) {
                if (!this._.aronly) {
                    this._.ar = false;
                    this._.emit("ar", false);
                }
            } else {
                this.ar(true);
            }
            return this;
        };

        if (_envtype === "browser") {
            $.plot = function(opts) {
                var _ = this._;
                var canvas = opts.target;

                if (!canvas) {
                    return this;
                }

                var width    = opts.width  || canvas.width  || 320;
                var height   = opts.height || canvas.height || 240;
                var offset_x = (opts.x || 0) + 0.5;
                var offset_y = (opts.y || 0);

                var context = canvas.getContext("2d");

                var foreground;
                if (opts.foreground !== undefined) {
                    foreground = opts.foreground;
                } else{
                    foreground = _.plotForeground || "rgb(  0, 128, 255)";
                }
                var background;
                if (opts.background !== undefined) {
                    background = opts.background;
                } else {
                    background = _.plotBackground || "rgb(255, 255, 255)";
                }
                var lineWidth  = opts.lineWidth  || _.plotLineWidth || 1;
                var cyclic     = !!_.plotCyclic;

                var data  = _.plotData || this.cells[0];
                var range = opts.range || _.plotRange || [-1.2, +1.2];
                var rangeMin   = range[0];
                var rangeDelta = height / (range[1] - rangeMin);

                var x, dx = (width / data.length);
                var y, dy, y0;
                var i, imax = data.length;

                context.save();

                context.rect(offset_x, offset_y, width, height);
                // context.clip();

                if (background !== null) {
                    context.fillStyle = background;
                    context.fillRect(offset_x, offset_y, width, height);
                }
                if (_.plotBefore) {
                    _.plotBefore.call(
                        this, context, offset_x, offset_y, width, height
                    );
                }

                if (_.plotBarStyle) {
                    context.fillStyle = foreground;
                    x = 0;
                    for (i = 0; i < imax; ++i) {
                        dy = (data[i] - rangeMin) * rangeDelta;
                        y  = height - dy;
                        context.fillRect(x + offset_x, y + offset_y, dx, dy);
                        x += dx;
                    }
                } else {
                    context.strokeStyle = foreground;
                    context.lineWidth   = lineWidth;

                    context.beginPath();

                    x  = 0;
                    y0 = height - (data[0] - rangeMin) * rangeDelta;
                    context.moveTo(x + offset_x, y0 + offset_y);
                    for (i = 1; i < imax; ++i) {
                        x += dx;
                        y = height - (data[i] - rangeMin) * rangeDelta;
                        context.lineTo(x + offset_x, y + offset_y);
                    }
                    if (cyclic) {
                        context.lineTo(x + dx + offset_x, y0 + offset_y);
                    } else {
                        context.lineTo(x + dx + offset_x, y  + offset_y);
                    }
                    context.stroke();
                }

                if (_.plotAfter) {
                    _.plotAfter.call(
                        this, context, offset_x, offset_y, width, height
                    );
                }
                var border = opts.border || _.plotBorder;
                if (border) {
                    context.strokeStyle =
                        (typeof border === "string") ? border : "#000";
                    context.lineWidth = 1;
                    context.strokeRect(offset_x, offset_y, width, height);
                }

                context.restore();

                return this;
            };
        } else {
            $.plot = fn.nop;
        }

        return TimbreObject;
    })();

    var ChannelObject = timbre.ChannelObject = (function() {
        function ChannelObject(parent) {
            timbre.Object.call(this, -1, []);
            fn.fixAR(this);

            this._.parent = parent;
            this.cell = new fn.SignalArray(_sys.cellsize);

            this.L = this.R = this;
            this.cells[0] = this.cells[1] = this.cells[2] = this.cell;

            this.numChannels = 1;
        }
        fn.extend(ChannelObject);

        ChannelObject.prototype.process = function(tickID) {
            if (this.tickID !== tickID) {
                this.tickID = tickID;
                if (this._.parent) {
                    this._.parent.process(tickID);
                }
            }
            return this;
        };

        return ChannelObject;
    })();

    var AddNode = (function() {
        function AddNode(_args) {
            TimbreObject.call(this, 2, _args);
        }
        fn.extend(AddNode);

        AddNode.prototype.process = function(tickID) {
            var _ = this._;
            if (this.tickID !== tickID) {
                this.tickID = tickID;
                if (_.ar) {
                    fn.inputSignalAR(this);
                    fn.outputSignalAR(this);
                } else {
                    this.cells[0][0] = fn.inputSignalKR(this);
                    fn.outputSignalKR(this);
                }
            }
            return this;
        };
        fn.register("+", AddNode);

        return AddNode;
    })();

    var NumberWrapper = (function() {
        function NumberWrapper(_args) {
            TimbreObject.call(this, 1, []);
            fn.fixKR(this);

            this.value = _args[0];

            if (isDictionary(_args[1])) {
                var params = _args[1];
                this.once("init", function() {
                    this.set(params);
                });
            }
            this.on("setAdd", fn.changeWithValue);
            this.on("setMul", fn.changeWithValue);
        }
        fn.extend(NumberWrapper);

        var $ = NumberWrapper.prototype;

        Object.defineProperties($, {
            value: {
                set: function(value) {
                    if (typeof value === "number") {
                        this._.value = isNaN(value) ? 0 : value;
                        fn.changeWithValue.call(this);
                    }
                },
                get: function() {
                    return this._.value;
                }
            }
        });

        return NumberWrapper;
    })();

    var BooleanWrapper = (function() {
        function BooleanWrapper(_args) {
            TimbreObject.call(this, 1, []);
            fn.fixKR(this);

            this.value = _args[0];

            if (isDictionary(_args[1])) {
                var params = _args[1];
                this.once("init", function() {
                    this.set(params);
                });
            }
            this.on("setAdd", fn.changeWithValue);
            this.on("setMul", fn.changeWithValue);
        }
        fn.extend(BooleanWrapper);

        var $ = BooleanWrapper.prototype;

        Object.defineProperties($, {
            value: {
                set: function(value) {
                    this._.value = value ? 1 : 0;
                    fn.changeWithValue.call(this);
                },
                get: function() {
                    return !!this._.value;
                }
            }
        });

        return BooleanWrapper;
    })();

    var FunctionWrapper = (function() {
        function FunctionWrapper(_args) {
            TimbreObject.call(this, 1, []);
            fn.fixKR(this);

            this.func    = _args[0];
            this._.value = 0;

            if (isDictionary(_args[1])) {
                var params = _args[1];
                this.once("init", function() {
                    this.set(params);
                });
            }
            this.on("setAdd", fn.changeWithValue);
            this.on("setMul", fn.changeWithValue);
        }
        fn.extend(FunctionWrapper);

        var $ = FunctionWrapper.prototype;

        Object.defineProperties($, {
            func: {
                set: function(value) {
                    if (typeof value === "function") {
                        this._.func = value;
                    }
                },
                get: function() {
                    return this._.func;
                }
            },
            args: {
                set: function(value) {
                    if (isArray(value)) {
                        this._.args = value;
                    } else {
                        this._.args = [value];
                    }
                },
                get: function() {
                    return this._.args;
                }
            }
        });

        $.bang = function() {
            var _ = this._;
            var args = slice.call(arguments).concat(_.args);
            var x = _.func.apply(this, args);
            if (typeof x === "number") {
                _.value = x;
                fn.changeWithValue.call(this);
            }
            this._.emit("bang");
            return this;
        };

        return FunctionWrapper;
    })();

    var ArrayWrapper = (function() {
        function ArrayWrapper(_args) {
            TimbreObject.call(this, 1, []);

            var i, imax;
            for (i = 0, imax = _args[0].length; i < imax; ++i) {
              this.append(_args[0][i]);
            }

            if (isDictionary(_args[1])) {
                var params = _args[1];
                this.once("init", function() {
                    this.set(params);
                });
            }
        }
        fn.extend(ArrayWrapper);

        var $ = ArrayWrapper.prototype;

        Object.defineProperties($, {

        });

        $.bang = function() {
            var args = ["bang"].concat(slice.call(arguments));
            var nodes = this.nodes;
            var i, imax;
            for (i = 0, imax = nodes.length; i < imax; ++i) {
                nodes[i].bang.apply(nodes[i], args);
            }
            return this;
        };

        $.postMessage = function(message) {
            var nodes = this.nodes;
            var i, imax;
            for (i = 0, imax = nodes.length; i < imax; ++i) {
                nodes[i].postMessage(message);
            }
            return this;
        };

        $.process = function(tickID) {
            var _ = this._;
            if (this.tickID !== tickID) {
                this.tickID = tickID;
                if (_.ar) {
                    fn.inputSignalAR(this);
                    fn.outputSignalAR(this);
                } else {
                    this.cells[0][0] = fn.inputSignalKR(this);
                    fn.outputSignalKR(this);
                }
            }
            return this;
        };

        return ArrayWrapper;
    })();

    var ObjectWrapper = (function() {
        function ObjectWrapper(_args) {
            TimbreObject.call(this, 1, []);
            fn.fixKR(this);

            if (isDictionary(_args[1])) {
                var params = _args[1];
                this.once("init", function() {
                    this.set(params);
                });
            }
        }
        fn.extend(ObjectWrapper);

        var $ = ObjectWrapper.prototype;

        Object.defineProperties($, {

        });

        return ObjectWrapper;
    })();

    var SystemInlet = (function() {
        function SystemInlet(object) {
            TimbreObject.call(this, 2, []);

            this.playbackState = FINISHED_STATE;
            var _ = this._;
            _.node = object;
            _.onplay  = make_onplay(this);
            _.onpause = make_onpause(this);
        }
        fn.extend(SystemInlet);

        var make_onplay = function(self) {
            return function() {
                if (_sys.inlets.indexOf(self) === -1) {
                    _sys.inlets.push(self);
                    _sys.events.emit("addObject");
                    self.playbackState = PLAYING_STATE;
                    self._.emit("play");
                }
            };
        };

        var make_onpause = function(self) {
            return function() {
                var i = _sys.inlets.indexOf(self);
                if (i !== -1) {
                    _sys.inlets.splice(i, 1);
                    self.playbackState = FINISHED_STATE;
                    self._.emit("pause");
                    _sys.events.emit("removeObject");
                }
            };
        };

        var $ = SystemInlet.prototype;

        $.play = function() {
            _sys.nextTick(this._.onplay);
            return (_sys.inlets.indexOf(this) === -1);
        };

        $.pause = function() {
            _sys.nextTick(this._.onpause);
        };

        $.process = function(tickID) {
            var node = this._.node;
            if (node.playbackState & 1) {
                node.process(tickID);
                this.cells[1].set(node.cells[1]);
                this.cells[2].set(node.cells[2]);
            } else {
                this.cells[1].set(fn.emptycell);
                this.cells[2].set(fn.emptycell);
            }
        };

        return SystemInlet;
    })();

    var SoundSystem = (function() {
        function SoundSystem() {
            this.context = this;
            this.tickID = 0;
            this.impl = null;
            this.amp  = 0.8;
            this.status = FINISHED_STATE;
            this.samplerate = 44100;
            this.channels   = 2;
            this.cellsize   = 64;
            this.streammsec = 20;
            this.streamsize = 0;
            this.currentTime = 0;
            this.nextTicks = [];
            this.inlets    = [];
            this.timers    = [];
            this.listeners = [];

            this.deferred = null;
            this.recStart   = 0;
            this.recBuffers = null;
            this.delayProcess = make_delayProcess(this);

            this.events = null;

            fn.currentTimeIncr = this.cellsize * 1000 / this.samplerate;
            fn.emptycell = new fn.SignalArray(this.cellsize);

            this.reset(true);
        }

        var make_delayProcess = function(self) {
            return function() {
                self.recStart = Date.now();
                self.process();
            };
        };

        var $ = SoundSystem.prototype;

        $.bind = function(Klass, opts) {
            if (typeof Klass === "function") {
                var player = new Klass(this, opts);
                this.impl = player;
                if (this.impl.defaultSamplerate) {
                    this.samplerate = this.impl.defaultSamplerate;
                }
            }
            return this;
        };

        $.setup = function(params) {
            if (typeof params === "object") {
                if (ACCEPT_SAMPLERATES.indexOf(params.samplerate) !== -1) {
                    if (params.samplerate <= this.impl.maxSamplerate) {
                        this.samplerate = params.samplerate;
                    } else {
                        this.samplerate = this.impl.maxSamplerate;
                    }
                }
                if (ACCEPT_CELLSIZES.indexOf(params.cellsize) !== -1) {
                    this.cellsize = params.cellsize;
                }
                if (typeof Float64Array !== "undefined" && typeof params.f64 !== "undefined") {
                    _f64mode = !!params.f64;
                    if (_f64mode) {
                        fn.SignalArray = Float64Array;
                    } else {
                        fn.SignalArray = Float32Array;
                    }
                }
            }
            fn.currentTimeIncr = this.cellsize * 1000 / this.samplerate;
            fn.emptycell = new fn.SignalArray(this.cellsize);
            return this;
        };

        $.getAdjustSamples = function(samplerate) {
            var samples, bits;
            samplerate = samplerate || this.samplerate;
            samples = this.streammsec / 1000 * samplerate;
            bits = Math.ceil(Math.log(samples) * Math.LOG2E);
            bits = (bits < 8) ? 8 : (bits > 14) ? 14 : bits;
            return 1 << bits;
        };

        $.play = function() {
            if (this.status === FINISHED_STATE) {
                this.status = PLAYING_STATE;

                this.streamsize = this.getAdjustSamples();
                this.strmL = new fn.SignalArray(this.streamsize);
                this.strmR = new fn.SignalArray(this.streamsize);

                this.impl.play();
                this.events.emit("play");
            }
            return this;
        };

        $.pause = function() {
            if (this.status === PLAYING_STATE) {
                this.status = FINISHED_STATE;
                this.impl.pause();
                this.events.emit("pause");
            }
            return this;
        };

        $.reset = function(deep) {
            if (deep) {
                this.events = new EventEmitter(this).on("addObject", function() {
                    if (this.status === FINISHED_STATE) {
                        this.play();
                    }
                }).on("removeObject", function() {
                    if (this.status === PLAYING_STATE) {
                        if (this.inlets.length + this.timers.length + this.listeners.length === 0) {
                            this.pause();
                        }
                    }
                });
            }
            this.currentTime = 0;
            this.nextTicks = [];
            this.inlets    = [];
            this.timers    = [];
            this.listeners = [];
            return this;
        };

        $.process = function() {
            var tickID = this.tickID;
            var strmL = this.strmL, strmR = this.strmR;
            var amp = this.amp;
            var x, tmpL, tmpR;
            var i, imax = this.streamsize, saved_i = 0;
            var j, jmax;
            var k, kmax = this.cellsize;
            var n = this.streamsize / this.cellsize;
            var nextTicks;
            var timers    = this.timers;
            var inlets    = this.inlets;
            var listeners = this.listeners;
            var currentTimeIncr = fn.currentTimeIncr;

            for (i = 0; i < imax; ++i) {
                strmL[i] = strmR[i] = 0;
            }

            while (n--) {
                ++tickID;

                for (j = 0, jmax = timers.length; j < jmax; ++j) {
                    if (timers[j].playbackState & 1) {
                        timers[j].process(tickID);
                    }
                }

                for (j = 0, jmax = inlets.length; j < jmax; ++j) {
                    x = inlets[j];
                    x.process(tickID);
                    if (x.playbackState & 1) {
                        tmpL = x.cells[1];
                        tmpR = x.cells[2];
                        for (k = 0, i = saved_i; k < kmax; ++k, ++i) {
                            strmL[i] += tmpL[k];
                            strmR[i] += tmpR[k];
                        }
                    }
                }
                saved_i += kmax;

                for (j = 0, jmax = listeners.length; j < jmax; ++j) {
                    if (listeners[j].playbackState & 1) {
                        listeners[j].process(tickID);
                    }
                }

                this.currentTime += currentTimeIncr;

                nextTicks = this.nextTicks.splice(0);
                for (j = 0, jmax = nextTicks.length; j < jmax; ++j) {
                    nextTicks[j]();
                }
            }

            for (i = 0; i < imax; ++i) {
                x = strmL[i] * amp;
                if (x < -1) {
                    x = -1;
                } else if (x > 1) {
                    x = 1;
                }
                strmL[i] = x;
                x = strmR[i] * amp;
                if (x < -1) {
                    x = -1;
                } else if (x > 1) {
                    x = 1;
                }
                strmR[i] = x;
            }

            this.tickID = tickID;

            var currentTime = this.currentTime;

            if (this.status === SCHEDULED_STATE) {
                if (this.recCh === 2) {
                    this.recBuffers.push(new fn.SignalArray(strmL));
                    this.recBuffers.push(new fn.SignalArray(strmR));
                } else {
                    var strm = new fn.SignalArray(strmL.length);
                    for (i = 0, imax = strm.length; i < imax; ++i) {
                        strm[i] = (strmL[i] + strmR[i]) * 0.5;
                    }
                    this.recBuffers.push(strm);
                }

                if (currentTime >= this.maxDuration) {
                    this.deferred.sub.reject();
                } else if (currentTime >= this.recDuration) {
                    this.deferred.sub.resolve();
                } else {
                    var now = Date.now();
                    if ((now - this.recStart) > 20) {
                        setTimeout(this.delayProcess, 10);
                    } else {
                        this.process();
                    }
                }
            }
        };

        $.nextTick = function(func) {
            if (this.status === FINISHED_STATE) {
                func();
            } else {
                this.nextTicks.push(func);
            }
        };

        $.rec = function() {
            fn.fix_iOS6_1_problem(true);

            var dfd = new Deferred(this);

            if (this.deferred) {
                console.warn("rec deferred is exists??");
                return dfd.reject().promise();
            }

            if (this.status !== FINISHED_STATE) {
                console.log("status is not none", this.status);
                return dfd.reject().promise();
            }

            var i = 0, args = arguments;
            var opts = isDictionary(args[i]) ? args[i++] : {};
            var func = args[i];

            if (typeof func !== "function") {
                // throw error??
                console.warn("no function");
                return dfd.reject().promise();
            }

            this.deferred = dfd;
            this.status = SCHEDULED_STATE;
            this.reset();

            var rec_inlet = new T("+");
            var inlet_dfd = new Deferred(this);

            var outlet = {
                done: function() {
                    inlet_dfd.resolve.apply(inlet_dfd, slice.call(arguments));
                },
                send: function() {
                    rec_inlet.append.apply(rec_inlet, arguments);
                }
            };

            var self = this;
            inlet_dfd.then(recdone, function() {
                fn.fix_iOS6_1_problem(false);
                recdone.call(self, true);
            });

            this.deferred.sub = inlet_dfd;

            this.savedSamplerate = this.samplerate;
            this.samplerate  = opts.samplerate  || this.samplerate;
            this.recDuration = opts.recDuration || Infinity;
            this.maxDuration = opts.maxDuration || 10 * 60 * 1000;
            this.recCh = opts.ch || 1;
            if (this.recCh !== 2) {
                this.recCh = 1;
            }
            this.recBuffers = [];

            this.streamsize = this.getAdjustSamples();
            this.strmL = new fn.SignalArray(this.streamsize);
            this.strmR = new fn.SignalArray(this.streamsize);

            this.inlets.push(rec_inlet);

            func(outlet);

            setTimeout(this.delayProcess, 10);

            return dfd.promise();
        };

        var recdone = function() {
            this.status = FINISHED_STATE;
            this.reset();

            var recBuffers = this.recBuffers;
            var samplerate = this.samplerate;
            var streamsize = this.streamsize;
            var bufferLength;

            this.samplerate = this.savedSamplerate;

            if (this.recDuration !== Infinity) {
                bufferLength = (this.recDuration * samplerate * 0.001)|0;
            } else {
                bufferLength = (recBuffers.length >> (this.recCh-1)) * streamsize;
            }

            var result;
            var i, imax = (bufferLength / streamsize)|0;
            var j = 0, k = 0;
            var remaining = bufferLength;

            if (this.recCh === 2) {
                var L = new fn.SignalArray(bufferLength);
                var R = new fn.SignalArray(bufferLength);
                var mixed = new fn.SignalArray(bufferLength);

                for (i = 0; i < imax; ++i) {
                    L.set(recBuffers[j++], k);
                    R.set(recBuffers[j++], k);
                    k += streamsize;
                    remaining -= streamsize;
                    if (remaining > 0 && remaining < streamsize) {
                        L.set(recBuffers[j++].subarray(0, remaining), k);
                        R.set(recBuffers[j++].subarray(0, remaining), k);
                        break;
                    }
                }
                for (i = 0, imax = bufferLength; i < imax; ++i) {
                    mixed[i] = (L[i] + R[i]) * 0.5;
                }

                result = {
                    samplerate: samplerate,
                    channels  : 2,
                    buffer: [mixed, L, R]
                };

            } else {
                var buffer = new fn.SignalArray(bufferLength);
                for (i = 0; i < imax; ++i) {
                    buffer.set(recBuffers[j++], k);
                    k += streamsize;
                    remaining -= streamsize;
                    if (remaining > 0 && remaining < streamsize) {
                        buffer.set(recBuffers[j++].subarray(0, remaining), k);
                        break;
                    }
                }
                result = {
                    samplerate: samplerate,
                    channels  : 1,
                    buffer: [buffer]
                };
            }

            var args = [].concat.apply([result], arguments);
            this.deferred.resolve.apply(this.deferred, args);
            this.deferred = null;
        };

        // EventEmitter
        $.on = function(type, listeners) {
            this.events.on(type, listeners);
        };
        $.once = function(type, listeners) {
            this.events.once(type, listeners);
        };
        $.off = function(type, listener) {
            this.events.off(type, listener);
        };
        $.removeAllListeners = function(type) {
            this.events.removeListeners(type);
        };
        $.listeners = function(type) {
            return this.events.listeners(type);
        };

        $.fix_iOS6_1_problem = function(flag) {
            if (this.impl.fix_iOS6_1_problem) {
                this.impl.fix_iOS6_1_problem(flag);
            }
        };

        return SoundSystem;
    })();

    // player
    var ImplClass    = null;
    var AudioContext;
    if (typeof window !== "undefined") {
      AudioContext = window.AudioContext || window.webkitAudioContext;
    }

    if (typeof AudioContext !== "undefined") {
        ImplClass = function(sys) {
            var context = new AudioContext();
            var bufSrc, jsNode;

            fn._audioContext = context;

            this.maxSamplerate     = context.sampleRate;
            this.defaultSamplerate = context.sampleRate;
            this.env = "webkit";

            var ua = navigator.userAgent;
            if (ua.match(/linux/i)) {
                sys.streammsec *= 8;
            } else if (ua.match(/win(dows)?\s*(nt 5\.1|xp)/i)) {
                sys.streammsec *= 4;
            }

            this.play = function() {
                var onaudioprocess;
                var jsn_streamsize = sys.getAdjustSamples(context.sampleRate);
                var sys_streamsize = sys.streamsize;
                var x, dx;

                if (sys.samplerate === context.sampleRate) {
                    onaudioprocess = function(e) {
                        var outs = e.outputBuffer;
                        sys.process();
                        outs.getChannelData(0).set(sys.strmL);
                        outs.getChannelData(1).set(sys.strmR);
                    };
                } else if (sys.samplerate * 2 === context.sampleRate) {
                    onaudioprocess = function(e) {
                        var inL = sys.strmL;
                        var inR = sys.strmR;
                        var outs = e.outputBuffer;
                        var outL = outs.getChannelData(0);
                        var outR = outs.getChannelData(1);
                        var i, imax = outs.length;
                        var j;

                        sys.process();
                        for (i = j = 0; i < imax; i += 2, ++j) {
                            outL[i] = outL[i+1] = inL[j];
                            outR[i] = outR[i+1] = inR[j];
                        }
                    };
                } else {
                    x  = sys_streamsize;
                    dx = sys.samplerate / context.sampleRate;
                    onaudioprocess = function(e) {
                        var inL = sys.strmL;
                        var inR = sys.strmR;
                        var outs = e.outputBuffer;
                        var outL = outs.getChannelData(0);
                        var outR = outs.getChannelData(1);
                        var i, imax = outs.length;

                        for (i = 0; i < imax; ++i) {
                            if (x >= sys_streamsize) {
                                sys.process();
                                x -= sys_streamsize;
                            }
                            outL[i] = inL[x|0];
                            outR[i] = inR[x|0];
                            x += dx;
                        }
                    };
                }

                bufSrc = context.createBufferSource();
                jsNode = context.createScriptProcessor(jsn_streamsize, 2, sys.channels);
                jsNode.onaudioprocess = onaudioprocess;
                if (bufSrc.noteOn) {
                    bufSrc.noteOn(0);
                }
                bufSrc.connect(jsNode);
                jsNode.connect(context.destination);
            };

            this.pause = function() {
                bufSrc.disconnect();
                jsNode.disconnect();
            };

            if (_envmobile) {
                var n   = 0;
                var buf = context.createBufferSource();
                this.fix_iOS6_1_problem = function(flag) {
                    n += flag ? 1 : -1;
                    if (n === 1) {
                        buf.noteOn(0);
                        buf.connect(context.destination);
                    } else if (n === 0) {
                        buf.disconnect();
                    }
                };
            }
        };
    } else {
        ImplClass = function(sys) {
            this.maxSamplerate     = 48000;
            this.defaultSamplerate = 44100;
            this.env = "nop";
            this.play  = function() {};
            this.pause = function() {};
        };
    }

    _sys = new SoundSystem().bind(ImplClass);

    var exports = timbre;

    if (_envtype === "node" || typeof module !== "undefined" && module.exports) {
        module.exports = global.timbre = exports;
    } else if (_envtype === "browser") {
        exports.noConflict = (function() {
           var _t = window.timbre, _T = window.T;
            return function(deep) {
                if (window.T === exports) {
                    window.T = _T;
                }
                if (deep && window.timbre === exports) {
                    window.timbre = _t;
                }
                return exports;
            };
        })();

        window.timbre = window.T = exports;
    }

    // Flash fallback
    (function() {
        if (_sys.impl.env !== "nop" || _envtype !== "browser" || _envmobile) {
            return;
        }
        var nav = navigator;

        /*jshint latedef:true */
        if (getFlashPlayerVersion(0) < 10) {
            return;
        }
        /*jshint latedef:false */

        var swf, PlayerDivID = "TimbreFlashPlayerDiv";
        var src = (function() {
            var scripts = document.getElementsByTagName("script");
            if (scripts && scripts.length) {
                for (var m, i = 0, imax = scripts.length; i < imax; ++i) {
                    if ((m = /^(.*\/)timbre(?:\.dev)?\.js$/i.exec(scripts[i].src))) {
                        return m[1] + "timbre.swf";
                    }
                }
            }
        })();

        window.timbrejs_flashfallback_init = function() {
            function TimbreFlashPlayer(sys) {
                var timerId = 0;

                this.maxSamplerate     = 44100;
                this.defaultSamplerate = 44100;
                this.env = "flash";

                this.play = function() {
                    var onaudioprocess;
                    var interleaved = new Array(sys.streamsize * sys.channels);
                    var streammsec  = sys.streammsec;
                    var written = 0;
                    var writtenIncr = sys.streamsize / sys.samplerate * 1000;
                    var start = Date.now();

                    onaudioprocess = function() {
                        if (written > Date.now() - start) {
                            return;
                        }
                        var inL = sys.strmL;
                        var inR = sys.strmR;
                        var i = interleaved.length;
                        var j = inL.length;
                        sys.process();
                        while (j--) {
                            interleaved[--i] = (inR[j] * 32768)|0;
                            interleaved[--i] = (inL[j] * 32768)|0;
                        }
                        swf.writeAudio(interleaved.join(" "));
                        written += writtenIncr;
                    };

                    if (swf.setup) {
                        swf.setup(sys.channels, sys.samplerate);
                        timerId = setInterval(onaudioprocess, streammsec);
                    } else {
                        console.warn("Cannot find " + src);
                    }
                };

                this.pause = function() {
                    if (timerId !== 0) {
                        swf.cancel();
                        clearInterval(timerId);
                        timerId = 0;
                    }
                };
            }
            _sys.bind(TimbreFlashPlayer);
            delete window.timbrejs_flashfallback_init;
        };

        var o, p;
        var swfSrc  = src;
        var swfName = swfSrc + "?" + (+new Date());
        var swfId   = "TimbreFlashPlayer";
        var div = document.createElement("div");
        div.id = PlayerDivID;
        div.style.display = "inline";
        div.width = div.height = 1;

        if (nav.plugins && nav.mimeTypes && nav.mimeTypes.length) {
            // ns
            o = document.createElement("object");
            o.id = swfId;
            o.classid = "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000";
            o.width = o.height = 1;
            o.setAttribute("data", swfName);
            o.setAttribute("type", "application/x-shockwave-flash");
            p = document.createElement("param");
            p.setAttribute("name", "allowScriptAccess");
            p.setAttribute("value", "always");
            o.appendChild(p);
            div.appendChild(o);
        } else {
            // ie
            /*jshint quotmark:single */
            div.innerHTML = '<object id="' + swfId + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="1" height="1"><param name="movie" value="' + swfName + '" /><param name="bgcolor" value="#FFFFFF" /><param name="quality" value="high" /><param name="allowScriptAccess" value="always" /></object>';
            /*jshint quotmark:double */
        }
        window.addEventListener("load", function() {
            document.body.appendChild(div);
            swf = document[swfId];
        });

        function getFlashPlayerVersion(subs) {
            /*global ActiveXObject:true */
            try {
                if (nav.plugins && nav.mimeTypes && nav.mimeTypes.length) {
                    return nav.plugins["Shockwave Flash"].description.match(/([0-9]+)/)[subs];
                }
                return (new ActiveXObject("ShockwaveFlash.ShockwaveFlash")).GetVariable("$version").match(/([0-9]+)/)[subs];
            } catch (e) {
                return -1;
            }
            /*global ActiveXObject:false */
        }
    })();

})();
(function(T) {
    "use strict";

    function Biquad(samplerate) {
        this.samplerate = samplerate;
        this.frequency = 340;
        this.Q         = 1;
        this.gain      = 0;

        this.x1L = this.x2L = this.y1L = this.y2L = 0;
        this.x1R = this.x2R = this.y1R = this.y2R = 0;
        this.b0 = this.b1 = this.b2 = this.a1 = this.a2 = 0;

        this.setType("lpf");
    }

    var $ = Biquad.prototype;

    $.process = function(cellL, cellR) {
        var xL, xR, yL, yR;
        var x1L = this.x1L, x2L = this.x2L, y1L = this.y1L, y2L = this.y2L;
        var x1R = this.x1R, x2R = this.x2R, y1R = this.y1R, y2R = this.y2R;
        var b0 = this.b0, b1 = this.b1, b2 = this.b2, a1 = this.a1, a2 = this.a2;
        var i, imax;

        for (i = 0, imax = cellL.length; i < imax; ++i) {
            xL = cellL[i];
            yL = b0 * xL + b1 * x1L + b2 * x2L - a1 * y1L - a2 * y2L;
            x2L = x1L; x1L = xL; y2L = y1L; y1L = yL;

            xR = cellR[i];
            yR = b0 * xR + b1 * x1R + b2 * x2R - a1 * y1R - a2 * y2R;
            x2R = x1R; x1R = xR; y2R = y1R; y1R = yR;

            cellL[i] = yL;
            cellR[i] = yR;
        }
        this.x1L = x1L; this.x2L = x2L; this.y1L = y1L; this.y2L = y2L;
        this.x1R = x1R; this.x2R = x2R; this.y1R = y1R; this.y2R = y2R;
    };

    $.setType = function(type) {
        var f;
        if ((f = setParams[type])) {
            this.type = type;
            f.call(this, this.frequency, this.Q, this.gain);
        }
    };

    $.setParams = function(frequency, Q, dbGain) {
        this.frequency = frequency;
        this.Q = Q;
        this.gain = dbGain;

        var f = setParams[this.type];
        if (f) {
            f.call(this, frequency, Q, dbGain);
        }

        return this;
    };


    var setParams = {
        lowpass: function(cutoff, resonance) {
            cutoff /= (this.samplerate * 0.5);

            if (cutoff >= 1) {
                this.b0 = 1;
                this.b1 = this.b2 = this.a1 = this.a2 = 0;
            } else if (cutoff <= 0) {
                this.b0 = this.b1 = this.b2 = this.a1 = this.a2 = 0;
            } else {
                resonance = (resonance < 0) ? 0 : resonance;
                var g = Math.pow(10.0, 0.05 * resonance);
                var d = Math.sqrt((4 - Math.sqrt(16 - 16 / (g * g))) * 0.5);

                var theta = Math.PI * cutoff;
                var sn = 0.5 * d * Math.sin(theta);
                var beta = 0.5 * (1 - sn) / (1 + sn);
                var gamma = (0.5 + beta) * Math.cos(theta);
                var alpha = 0.25 * (0.5 + beta - gamma);

                this.b0 = 2 * alpha;
                this.b1 = 4 * alpha;
                this.b2 = this.b0; // 2 * alpha;
                this.a1 = 2 * -gamma;
                this.a2 = 2 * beta;
            }
        },
        highpass: function(cutoff, resonance) {
            cutoff /= (this.samplerate * 0.5);
            if (cutoff >= 1) {
                this.b0 = this.b1 = this.b2 = this.a1 = this.a2 = 0;
            } else if (cutoff <= 0) {
                this.b0 = 1;
                this.b1 = this.b2 = this.a1 = this.a2 = 0;
            } else {
                resonance = (resonance < 0) ? 0 : resonance;

                var g = Math.pow(10.0, 0.05 * resonance);
                var d = Math.sqrt((4 - Math.sqrt(16 - 16 / (g * g))) / 2);

                var theta = Math.PI * cutoff;
                var sn = 0.5 * d * Math.sin(theta);
                var beta = 0.5 * (1 - sn) / (1 + sn);
                var gamma = (0.5 + beta) * Math.cos(theta);
                var alpha = 0.25 * (0.5 + beta + gamma);

                this.b0 = 2 * alpha;
                this.b1 = -4 * alpha;
                this.b2 = this.b0; // 2 * alpha;
                this.a1 = 2 * -gamma;
                this.a2 = 2 * beta;
            }
        },
        bandpass: function(frequency, Q) {
            frequency /= (this.samplerate * 0.5);
            if (frequency > 0 && frequency < 1) {
                if (Q > 0) {
                    var w0 = Math.PI * frequency;

                    var alpha = Math.sin(w0) / (2 * Q);
                    var k = Math.cos(w0);

                    var ia0 = 1 / (1 + alpha);

                    this.b0 = alpha * ia0;
                    this.b1 = 0;
                    this.b2 = -alpha * ia0;
                    this.a1 = -2 * k * ia0;
                    this.a2 = (1 - alpha) * ia0;
                } else {
                    this.b0 = this.b1 = this.b2 = this.a1 = this.a2 = 0;
                }
            } else {
                this.b0 = this.b1 = this.b2 = this.a1 = this.a2 = 0;
            }
        },
        lowshelf: function(frequency, _dummy_, dbGain) {
            frequency /= (this.samplerate * 0.5);

            var A = Math.pow(10.0, dbGain / 40);

            if (frequency >= 1) {
                this.b0 = A* A;
                this.b1 = this.b2 = this.a1 = this.a2 = 0;
            } else if (frequency <= 0) {
                this.b0 = 1;
                this.b1 = this.b2 = this.a1 = this.a2 = 0;
            } else {
                var w0 = Math.PI * frequency;
                var S = 1; // filter slope (1 is max value)
                var alpha = 0.5 * Math.sin(w0) * Math.sqrt((A + 1 / A) * (1 / S - 1) + 2);
                var k = Math.cos(w0);
                var k2 = 2 * Math.sqrt(A) * alpha;
                var aPlusOne = A + 1;
                var aMinusOne = A - 1;

                var ia0 = 1 / (aPlusOne + aMinusOne * k + k2);

                this.b0 = (A * (aPlusOne - aMinusOne * k + k2)) * ia0;
                this.b1 = (2 * A * (aMinusOne - aPlusOne * k)) * ia0;
                this.b2 = (A * (aPlusOne - aMinusOne * k - k2)) * ia0;
                this.a1 = (-2 * (aMinusOne + aPlusOne * k)) * ia0;
                this.a2 = (aPlusOne + aMinusOne * k - k2) * ia0;
            }
        },
        highshelf: function(frequency, _dummy_, dbGain) {
            frequency /= (this.samplerate * 0.5);

            var A = Math.pow(10.0, dbGain / 40);

            if (frequency >= 1) {
                this.b0 = 1;
                this.b1 = this.b2 = this.a1 = this.a2 = 0;
            } else if (frequency <= 0) {
                this.b0 = A * A;
                this.b1 = this.b2 = this.a1 = this.a2 = 0;
            } else {
                var w0 = Math.PI * frequency;
                var S = 1; // filter slope (1 is max value)
                var alpha = 0.5 * Math.sin(w0) * Math.sqrt((A + 1 / A) * (1 / S - 1) + 2);
                var k = Math.cos(w0);
                var k2 = 2 * Math.sqrt(A) * alpha;
                var aPlusOne = A + 1;
                var aMinusOne = A - 1;

                var ia0 = 1 / (aPlusOne - aMinusOne * k + k2);

                this.b0 = (A * (aPlusOne + aMinusOne * k + k2)) * ia0;
                this.b1 = (-2 * A * (aMinusOne + aPlusOne * k)) * ia0;
                this.b2 = (A * (aPlusOne + aMinusOne * k - k2)) * ia0;
                this.a1 = (2 * (aMinusOne - aPlusOne * k)) * ia0;
                this.a2 = (aPlusOne - aMinusOne * k - k2) * ia0;
            }
        },
        peaking: function(frequency, Q, dbGain) {
            frequency /= (this.samplerate * 0.5);

            if (frequency > 0 && frequency < 1) {
                var A = Math.pow(10.0, dbGain / 40);
                if (Q > 0) {
                    var w0 = Math.PI * frequency;
                    var alpha = Math.sin(w0) / (2 * Q);
                    var k = Math.cos(w0);
                    var ia0 = 1 / (1 + alpha / A);

                    this.b0 = (1 + alpha * A) * ia0;
                    this.b1 = (-2 * k) * ia0;
                    this.b2 = (1 - alpha * A) * ia0;
                    this.a1 = this.b1; // (-2 * k) * ia0;
                    this.a2 = (1 - alpha / A) * ia0;
                } else {
                    this.b0 = A * A;
                    this.b1 = this.b2 = this.a1 = this.a2 = 0;
                }
            } else {
                this.b0 = 1;
                this.b1 = this.b2 = this.a1 = this.a2 = 0;
            }
        },
        notch: function(frequency, Q) {
            frequency /= (this.samplerate * 0.5);

            if (frequency > 0 && frequency < 1) {
                if (Q > 0) {
                    var w0 = Math.PI * frequency;
                    var alpha = Math.sin(w0) / (2 * Q);
                    var k = Math.cos(w0);
                    var ia0 = 1 / (1 + alpha);

                    this.b0 = ia0;
                    this.b1 = (-2 * k) * ia0;
                    this.b2 = ia0;
                    this.a1 = this.b1; // (-2 * k) * ia0;
                    this.a2 = (1 - alpha) * ia0;
                } else {
                    this.b0 = this.b1 = this.b2 = this.a1 = this.a2 = 0;
                }
            } else {
                this.b0 = 1;
                this.b1 = this.b2 = this.a1 = this.a2 = 0;
            }
        },
        allpass: function(frequency, Q) {
            frequency /= (this.samplerate * 0.5);

            if (frequency > 0 && frequency < 1) {
                if (Q > 0) {
                    var w0 = Math.PI * frequency;
                    var alpha = Math.sin(w0) / (2 * Q);
                    var k = Math.cos(w0);
                    var ia0 = 1 / (1 + alpha);

                    this.b0 = (1 - alpha) * ia0;
                    this.b1 = (-2 * k) * ia0;
                    this.b2 = (1 + alpha) * ia0;
                    this.a1 = this.b1; // (-2 * k) * ia0;
                    this.a2 = this.b0; // (1 - alpha) * ia0;
                } else {
                    this.b0 = -1;
                    this.b1 = this.b2 = this.a1 = this.a2 = 0;
                }
            } else {
                this.b0 = 1;
                this.b1 = this.b2 = this.a1 = this.a2 = 0;
            }
        }
    };

    setParams.lpf = setParams.lowpass;
    setParams.hpf = setParams.highpass;
    setParams.bpf = setParams.bandpass;
    setParams.bef = setParams.notch;
    setParams.brf = setParams.notch;
    setParams.apf = setParams.allpass;

    T.modules.Biquad = Biquad;

})(timbre);
(function(T) {
    "use strict";

    function Chorus(samplerate) {
        this.samplerate = samplerate;

        var bits = Math.round(Math.log(samplerate * 0.1) * Math.LOG2E);
        this.buffersize = 1 << bits;
        this.bufferL = new T.fn.SignalArray(this.buffersize + 1);
        this.bufferR = new T.fn.SignalArray(this.buffersize + 1);

        this.wave       = null;
        this._wave      = null;
        this.writeIndex = this.buffersize >> 1;
        this.readIndex  = 0;
        this.delayTime  = 20;
        this.rate       = 4;
        this.depth      = 20;
        this.feedback   = 0.2;
        this.wet        = 0.5;
        this.phase      = 0;
        this.phaseIncr  = 0;
        this.phaseStep  = 4;

        this.setWaveType("sin");
        this.setDelayTime(this.delayTime);
        this.setRate(this.rate);
    }

    var $ = Chorus.prototype;

    var waves = [];
    waves[0] = (function() {
        var wave = new Float32Array(512);
        for (var i = 0; i < 512; ++i) {
            wave[i] = Math.sin(2 * Math.PI * (i/512));
        }
        return wave;
    })();
    waves[1] = (function() {
        var wave = new Float32Array(512);
        for (var x, i = 0; i < 512; ++i) {
            x = (i / 512) - 0.25;
            wave[i] = 1.0 - 4.0 * Math.abs(Math.round(x) - x);
        }
        return wave;
    })();

    $.setWaveType = function(waveType) {
        if (waveType === "sin") {
            this.wave = waveType;
            this._wave = waves[0];
        } else if (waveType === "tri") {
            this.wave = waveType;
            this._wave = waves[1];
        }
    };

    $.setDelayTime = function(delayTime) {
        this.delayTime = delayTime;
        var readIndex = this.writeIndex - ((delayTime * this.samplerate * 0.001)|0);
        while (readIndex < 0) {
            readIndex += this.buffersize;
        }
        this.readIndex = readIndex;
    };

    $.setRate = function(rate) {
        this.rate      = rate;
        this.phaseIncr = (512 * this.rate / this.samplerate) * this.phaseStep;
    };

    $.process = function(cellL, cellR) {
        var bufferL = this.bufferL;
        var bufferR = this.bufferR;
        var size = this.buffersize;
        var mask = size - 1;
        var wave       = this._wave;
        var phase      = this.phase;
        var phaseIncr  = this.phaseIncr;
        var writeIndex = this.writeIndex;
        var readIndex  = this.readIndex;
        var depth      = this.depth;
        var feedback   = this.feedback;
        var x, index, mod;
        var wet = this.wet, dry = 1 - wet;
        var i, imax = cellL.length;
        var j, jmax = this.phaseStep;

        for (i = 0; i < imax; ) {
            mod = wave[phase|0] * depth;
            phase += phaseIncr;
            while (phase > 512) {
                phase -= 512;
            }
            for (j = 0; j < jmax; ++j, ++i) {
                index = (readIndex + size + mod) & mask;

                x = (bufferL[index] + bufferL[index + 1]) * 0.5;
                bufferL[writeIndex] = cellL[i] - x * feedback;
                cellL[i] = (cellL[i] * dry) + (x * wet);

                x = (bufferR[index] + bufferR[index + 1]) * 0.5;
                bufferR[writeIndex] = cellR[i] - x * feedback;
                cellR[i] = (cellR[i] * dry) + (x * wet);

                writeIndex = (writeIndex + 1) & mask;
                readIndex  = (readIndex  + 1) & mask;
            }
        }

        this.phase = phase;
        this.writeIndex = writeIndex;
        this.readIndex  = readIndex;
    };

    T.modules.Chorus = Chorus;

})(timbre);
(function(T) {
    "use strict";

    var MaxPreDelayFrames     = 1024;
    var MaxPreDelayFramesMask = MaxPreDelayFrames - 1;
    var DefaultPreDelayFrames = 256;
    var kSpacingDb = 5;

    function Compressor(samplerate, channels) {
        this.samplerate = samplerate;
        this.channels = channels;

        this.lastPreDelayFrames = 0;
        this.preDelayReadIndex  = 0;
        this.preDelayWriteIndex = DefaultPreDelayFrames;
        this.ratio       = -1;
        this.slope       = -1;
        this.linearThreshold = -1;
        this.dbThreshold = -1;
        this.dbKnee      = -1;
        this.kneeThreshold    = -1;
        this.kneeThresholdDb  = -1;
        this.ykneeThresholdDb = -1;
        this.K = -1;

        this.attackTime  = 0.003;
        this.releaseTime = 0.25;

        this.preDelayTime = 0.006;
        this.dbPostGain   = 0;
        this.effectBlend  = 1;
        this.releaseZone1 = 0.09;
        this.releaseZone2 = 0.16;
        this.releaseZone3 = 0.42;
        this.releaseZone4 = 0.98;

        this.detectorAverage = 0;
        this.compressorGain  = 1;
        this.meteringGain    = 1;

        this.delayBufferL = new T.fn.SignalArray(MaxPreDelayFrames);
        if (channels === 2) {
            this.delayBufferR = new T.fn.SignalArray(MaxPreDelayFrames);
        } else {
            this.delayBufferR = this.delayBufferL;
        }
        this.preDelayTime = 6;
        this.preDelayReadIndex = 0;
        this.preDelayWriteIndex = DefaultPreDelayFrames;
        this.maxAttackCompressionDiffDb = -1;
        this.meteringReleaseK = 1 - Math.exp(-1 / (this.samplerate * 0.325));

        this.setAttackTime(this.attackTime);
        this.setReleaseTime(this.releaseTime);
        this.setPreDelayTime(this.preDelayTime);
        this.setParams(-24, 30, 12);
    }

    var $ = Compressor.prototype;

    $.clone = function() {
        var new_instance = new Compressor(this.samplerate, this.channels);
        new_instance.setAttackTime(this.attackTime);
        new_instance.setReleaseTime(this.releaseTime);
        new_instance.setPreDelayTime(this.preDelayTime);
        new_instance.setParams(this.dbThreshold, this.dbKnee, this.ratio);
        return new_instance;
    };

    $.setAttackTime = function(value) {
        this.attackTime = Math.max(0.001, value);
        this._attackFrames = this.attackTime * this.samplerate;
    };

    $.setReleaseTime = function(value) {
        this.releaseTime = Math.max(0.001, value);
        var releaseFrames = this.releaseTime * this.samplerate;

        var satReleaseTime = 0.0025;
        this._satReleaseFrames = satReleaseTime * this.samplerate;

        var y1 = releaseFrames * this.releaseZone1;
        var y2 = releaseFrames * this.releaseZone2;
        var y3 = releaseFrames * this.releaseZone3;
        var y4 = releaseFrames * this.releaseZone4;

        this._kA = 0.9999999999999998*y1 + 1.8432219684323923e-16*y2 - 1.9373394351676423e-16*y3 + 8.824516011816245e-18*y4;
        this._kB = -1.5788320352845888*y1 + 2.3305837032074286*y2 - 0.9141194204840429*y3 + 0.1623677525612032*y4;
        this._kC = 0.5334142869106424*y1 - 1.272736789213631*y2 + 0.9258856042207512*y3 - 0.18656310191776226*y4;
        this._kD = 0.08783463138207234*y1 - 0.1694162967925622*y2 + 0.08588057951595272*y3 - 0.00429891410546283*y4;
        this._kE = -0.042416883008123074*y1 + 0.1115693827987602*y2 - 0.09764676325265872*y3 + 0.028494263462021576*y4;
    };

    $.setPreDelayTime = function(preDelayTime) {
        this.preDelayTime = preDelayTime;
        var preDelayFrames = preDelayTime * this.samplerate;
        if (preDelayFrames > MaxPreDelayFrames - 1) {
            preDelayFrames = MaxPreDelayFrames - 1;
        }
        if (this.lastPreDelayFrames !== preDelayFrames) {
            this.lastPreDelayFrames = preDelayFrames;
            for (var i = 0, imax = this.delayBufferL.length; i < imax; ++i) {
                this.delayBufferL[i] = this.delayBufferR[i] = 0;
            }
            this.preDelayReadIndex = 0;
            this.preDelayWriteIndex = preDelayFrames;
        }
    };

    $.setParams = function(dbThreshold, dbKnee, ratio) {
        this._k = this.updateStaticCurveParameters(dbThreshold, dbKnee, ratio);

        var fullRangeGain = this.saturate(1, this._k);
        var fullRangeMakeupGain = 1 / fullRangeGain;

        fullRangeMakeupGain = Math.pow(fullRangeMakeupGain, 0.6);

        this._masterLinearGain = Math.pow(10, 0.05 * this.dbPostGain) * fullRangeMakeupGain;
    };

    $.kneeCurve = function(x, k) {
        if (x < this.linearThreshold) {
            return x;
        }
        return this.linearThreshold + (1 - Math.exp(-k * (x - this.linearThreshold))) / k;
    };

    $.saturate = function(x, k) {
        var y;
        if (x < this.kneeThreshold) {
            y = this.kneeCurve(x, k);
        } else {
            var xDb = (x) ? 20 * Math.log(x) * Math.LOG10E : -1000;
            var yDb = this.ykneeThresholdDb + this.slope * (xDb - this.kneeThresholdDb);
            y = Math.pow(10, 0.05 * yDb);
        }
        return y;
    };

    $.slopeAt = function(x, k) {
        if (x < this.linearThreshold) {
            return 1;
        }

        var x2   = x * 1.001;
        var xDb  = (x ) ? 20 * Math.log(x ) * Math.LOG10E : -1000;
        var x2Db = (x2) ? 20 * Math.log(x2) * Math.LOG10E : -1000;
        var y  = this.kneeCurve(x , k);
        var y2 = this.kneeCurve(x2, k);
        var yDb  = (y ) ? 20 * Math.log(y ) * Math.LOG10E : -1000;
        var y2Db = (y2) ? 20 * Math.log(y2) * Math.LOG10E : -1000;

        return (y2Db - yDb) / (x2Db - xDb);
    };

    $.kAtSlope = function(desiredSlope) {
        var xDb = this.dbThreshold + this.dbKnee;
        var x   = Math.pow(10, 0.05 * xDb);

        var minK = 0.1;
        var maxK = 10000;
        var k = 5;

        for (var i = 0; i < 15; ++i) {
            var slope = this.slopeAt(x, k);
            if (slope < desiredSlope) {
                maxK = k;
            } else {
                minK = k;
            }
            k = Math.sqrt(minK * maxK);
        }
        return k;
    };

    $.updateStaticCurveParameters = function(dbThreshold, dbKnee, ratio) {
        this.dbThreshold     = dbThreshold;
        this.linearThreshold = Math.pow(10, 0.05 * dbThreshold);
        this.dbKnee          = dbKnee;

        this.ratio = ratio;
        this.slope = 1 / this.ratio;

        this.kneeThresholdDb = dbThreshold + dbKnee;
        this.kneeThreshold   = Math.pow(10, 0.05 * this.kneeThresholdDb);

        var k = this.kAtSlope(1 / this.ratio);
        var y = this.kneeCurve(this.kneeThreshold, k);
        this.ykneeThresholdDb = (y) ? 20 * Math.log(y) * Math.LOG10E : -1000;

        this._k = k;

        return this._k;
    };

    $.process = function(cellL, cellR) {
        var dryMix = 1 - this.effectBlend;
        var wetMix = this.effectBlend;
        var k = this._k;
        var masterLinearGain = this._masterLinearGain;
        var satReleaseFrames = this._satReleaseFrames;
        var kA = this._kA;
        var kB = this._kB;
        var kC = this._kC;
        var kD = this._kD;
        var kE = this._kE;
        var nDivisionFrames = 64;
        var nDivisions = cellL.length / nDivisionFrames;
        var frameIndex = 0;
        var desiredGain = this.detectorAverage;
        var compressorGain = this.compressorGain;
        var maxAttackCompressionDiffDb = this.maxAttackCompressionDiffDb;
        var i_attackFrames = 1 / this._attackFrames;
        var preDelayReadIndex = this.preDelayReadIndex;
        var preDelayWriteIndex = this.preDelayWriteIndex;
        var detectorAverage = this.detectorAverage;
        var delayBufferL = this.delayBufferL;
        var delayBufferR = this.delayBufferR;
        var meteringGain = this.meteringGain;
        var meteringReleaseK = this.meteringReleaseK;

        for (var i = 0; i < nDivisions; ++i) {
            var scaledDesiredGain = Math.asin(desiredGain) / (0.5 * Math.PI);
            var envelopeRate;
            var isReleasing = scaledDesiredGain > compressorGain;
            var x = compressorGain / scaledDesiredGain;

            var compressionDiffDb = (x) ? 20 * Math.log(x) * Math.LOG10E : -1000;
            if (compressionDiffDb === Infinity || isNaN(compressionDiffDb)) {
                compressionDiffDb = -1;
            }

            if (isReleasing) {
                maxAttackCompressionDiffDb = -1;

                x = compressionDiffDb;
                if (x < -12) {
                    x = 0;
                } else if (x > 0) {
                    x = 3;
                } else {
                    x = 0.25 * (x + 12);
                }

                var x2 = x * x;
                var x3 = x2 * x;
                var x4 = x2 * x2;
                var _releaseFrames = kA + kB * x + kC * x2 + kD * x3 + kE * x4;

                var _dbPerFrame = kSpacingDb / _releaseFrames;

                envelopeRate = Math.pow(10, 0.05 * _dbPerFrame);
            } else {
                if (maxAttackCompressionDiffDb === -1 || maxAttackCompressionDiffDb < compressionDiffDb) {
                    maxAttackCompressionDiffDb = compressionDiffDb;
                }

                var effAttenDiffDb = Math.max(0.5, maxAttackCompressionDiffDb);

                x = 0.25 / effAttenDiffDb;
                envelopeRate = 1 - Math.pow(x, i_attackFrames);
            }

            var loopFrames = nDivisionFrames;
            while (loopFrames--) {
                var compressorInput = 0;

                var absUndelayedSource = (cellL[frameIndex] + cellR[frameIndex]) * 0.5;
                delayBufferL[preDelayWriteIndex] = cellL[frameIndex];
                delayBufferR[preDelayWriteIndex] = cellR[frameIndex];

                if (absUndelayedSource < 0) {
                    absUndelayedSource *= -1;
                }
                if (compressorInput < absUndelayedSource) {
                    compressorInput = absUndelayedSource;
                }

                var absInput = compressorInput;
                if (absInput < 0) {
                    absInput *= -1;
                }

                var shapedInput = this.saturate(absInput, k);
                var attenuation = absInput <= 0.0001 ? 1 : shapedInput / absInput;
                var attenuationDb = (attenuation) ? -20 * Math.log(attenuation) * Math.LOG10E : 1000;
                if (attenuationDb < 2) {
                    attenuationDb = 2;
                }

                var dbPerFrame = attenuationDb / satReleaseFrames;
                var satReleaseRate = Math.pow(10, 0.05 * dbPerFrame) - 1;
                var isRelease = (attenuation > detectorAverage);
                var rate = isRelease ? satReleaseRate : 1;

                detectorAverage += (attenuation - detectorAverage) * rate;
                if (detectorAverage > 1) {
                    detectorAverage = 1;
                }

                if (envelopeRate < 1) {
                    compressorGain += (scaledDesiredGain - compressorGain) * envelopeRate;
                } else {
                    compressorGain *= envelopeRate;
                    if (compressorGain > 1) {
                        compressorGain = 1;
                    }
                }

                var postWarpCompressorGain = Math.sin(0.5 * Math.PI * compressorGain);
                var totalGain = dryMix + wetMix * masterLinearGain * postWarpCompressorGain;

                var dbRealGain = 20 * Math.log(postWarpCompressorGain) * Math.LOG10E;
                if (dbRealGain < meteringGain)  {
                    meteringGain = dbRealGain;
                } else {
                    meteringGain += (dbRealGain - meteringGain) * meteringReleaseK;
                }
                cellL[frameIndex] = delayBufferL[preDelayReadIndex] * totalGain;
                cellR[frameIndex] = delayBufferR[preDelayReadIndex] * totalGain;

                frameIndex++;
                preDelayReadIndex  = (preDelayReadIndex  + 1) & MaxPreDelayFramesMask;
                preDelayWriteIndex = (preDelayWriteIndex + 1) & MaxPreDelayFramesMask;
            }

            if (detectorAverage < 1e-6) {
                detectorAverage = 1e-6;
            }
            if (compressorGain < 1e-6) {
                compressorGain = 1e-6;
            }
        }
        this.preDelayReadIndex  = preDelayReadIndex;
        this.preDelayWriteIndex = preDelayWriteIndex;
        this.detectorAverage    = detectorAverage;
        this.compressorGain = compressorGain;
        this.maxAttackCompressionDiffDb = maxAttackCompressionDiffDb;
        this.meteringGain = meteringGain;
    };

    $.reset = function() {
        this.detectorAverage = 0;
        this.compressorGain = 1;
        this.meteringGain = 1;

        for (var i = 0, imax = this.delayBufferL.length; i < imax; ++i) {
            this.delayBufferL[i] = this.delayBufferR[i] = 0;
        }

        this.preDelayReadIndex = 0;
        this.preDelayWriteIndex = DefaultPreDelayFrames;

        this.maxAttackCompressionDiffDb = -1;
    };

    T.modules.Compressor = Compressor;

})(timbre);
(function(T) {
    "use strict";

    function Decoder() {}

    Decoder.prototype.decode = function(src, onloadedmetadata, onloadeddata) {
        if (typeof src === "string") {
            if (/\.wav$/.test(src)) {
                return Decoder.wav_decode(src, onloadedmetadata, onloadeddata);
            } else if (Decoder.ogg_decode && /\.ogg$/.test(src)) {
                return Decoder.ogg_decode(src, onloadedmetadata, onloadeddata);
            } else if (Decoder.mp3_decode && /\.mp3$/.test(src)) {
                return Decoder.mp3_decode(src, onloadedmetadata, onloadeddata);
            }
        } else if (typeof src === "object") {
            if (src.type === "wav") {
                return Decoder.wav_decode(src.data, onloadedmetadata, onloadeddata);
            } else if (Decoder.ogg_decode && src.type === "ogg") {
                return Decoder.ogg_decode(src.data, onloadedmetadata, onloadeddata);
            } else if (Decoder.mp3_decode && src.type === "mp3") {
                return Decoder.mp3_decode(src.data, onloadedmetadata, onloadeddata);
            }
        }
        if (Decoder.webkit_decode) {
            if (typeof src === "object") {
                return Decoder.webkit_decode(src.data||src, onloadedmetadata, onloadeddata);
            } else {
                return Decoder.webkit_decode(src, onloadedmetadata, onloadeddata);
            }
        } else if (Decoder.moz_decode) {
            return Decoder.moz_decode(src, onloadedmetadata, onloadeddata);
        }
        onloadedmetadata(false);
    };
    T.modules.Decoder = Decoder;

    if (T.envtype === "browser") {
        Decoder.getBinaryWithPath = function(path, callback) {
            T.fn.fix_iOS6_1_problem(true);

            var xhr = new XMLHttpRequest();
            xhr.open("GET", path);
            xhr.responseType = "arraybuffer";
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    if (xhr.response) {
                        callback(new Uint8Array(xhr.response));
                    } else if (xhr.responseBody !== undefined) {
                        /*global VBArray:true */
                        callback(new Uint8Array(VBArray(xhr.responseBody).toArray()));
                        /*global VBArray:false */
                    }
                    T.fn.fix_iOS6_1_problem(false);
                }
            };
            xhr.send();
        };
    } else {
        Decoder.getBinaryWithPath = function(path, callback) {
            callback("no support");
        };
    }

    var _24bit_to_32bit = function(uint8) {
        var b0, b1, b2, bb, x;
        var int32 = new Int32Array(uint8.length / 3);
        for (var i = 0, imax = uint8.length, j = 0; i < imax; ) {
            b0 = uint8[i++];
            b1 = uint8[i++];
            b2 = uint8[i++];
            bb = b0 + (b1 << 8) + (b2 << 16);
            x = (bb & 0x800000) ? bb - 16777216 : bb;
            int32[j++] = x;
        }
        return int32;
    };

    Decoder.wav_decode = (function() {
        var _decode = function(data, onloadedmetadata, onloadeddata) {
            if (String.fromCharCode(data[0], data[1], data[2], data[3]) !== "RIFF") {
                return onloadedmetadata(false);
            }

            var l1 = data[4] + (data[5]<<8) + (data[6]<<16) + (data[7]<<24);
            if (l1 + 8 !== data.length) {
                return onloadedmetadata(false);
            }

            if (String.fromCharCode(data[8], data[9], data[10], data[11]) !== "WAVE") {
                return onloadedmetadata(false);
            }

            if (String.fromCharCode(data[12], data[13], data[14], data[15]) !== "fmt ") {
                return onloadedmetadata(false);
            }

            var channels   = data[22] + (data[23]<<8);
            var samplerate = data[24] + (data[25]<<8) + (data[26]<<16) + (data[27]<<24);
            var bitSize    = data[34] + (data[35]<<8);

            var i = 36;
            while (i < data.length) {
                if (String.fromCharCode(data[i], data[i+1], data[i+2], data[i+3]) === "data") {
                    break;
                }
                i += 1;
            }
            if (i >= data.length) {
                return onloadedmetadata(false);
            }
            i += 4;

            var l2 = data[i] + (data[i+1]<<8) + (data[i+2]<<16) + (data[i+3]<<24);
            var duration = ((l2 / channels) >> 1) / samplerate;
            i += 4;

            if (l2 > data.length - i) {
                return onloadedmetadata(false);
            }

            var mixdown, bufferL, bufferR;
            mixdown = new Float32Array((duration * samplerate)|0);
            if (channels === 2) {
                bufferL = new Float32Array(mixdown.length);
                bufferR = new Float32Array(mixdown.length);
            }

            onloadedmetadata({
                samplerate: samplerate,
                channels  : channels,
                buffer    : [mixdown, bufferL, bufferR],
                duration  : duration
            });

            if (bitSize === 8) {
                data = new Int8Array(data.buffer, i);
            } else if (bitSize === 16) {
                data = new Int16Array(data.buffer, i);
            } else if (bitSize === 32) {
                data = new Int32Array(data.buffer, i);
            } else if (bitSize === 24) {
                data = _24bit_to_32bit(new Uint8Array(data.buffer, i));
            }

            var imax, j, k = 1 / ((1 << (bitSize-1)) - 1), x;
            if (channels === 2) {
                for (i = j = 0, imax = mixdown.length; i < imax; ++i) {
                    x =  bufferL[i] = data[j++] * k;
                    x += bufferR[i] = data[j++] * k;
                    mixdown[i] = x * 0.5;
                }
            } else {
                for (i = 0, imax = mixdown.length; i < imax; ++i) {
                    mixdown[i] = data[i] * k;
                }
            }

            onloadeddata();
        };

        return function(src, onloadedmetadata, onloadeddata) {
            if (typeof src === "string") {
                Decoder.getBinaryWithPath(src, function(data) {
                    _decode(data, onloadedmetadata, onloadeddata);
                });
            } else {
                _decode(src, onloadedmetadata, onloadeddata);
            }
        };
    })();

    Decoder.webkit_decode = (function() {
        if (typeof T.fn._audioContext !== "undefined") {
            var ctx = T.fn._audioContext;
            var _decode = function(data, onloadedmetadata, onloadeddata) {
                var samplerate, channels, bufferL, bufferR, duration;

                if (typeof data === "string") {
                    return onloadeddata(false);
                }

                var buffer;
                try {
                    buffer = ctx.createBuffer(data.buffer, false);
                } catch (e) {
                    return onloadedmetadata(false);
                }

                samplerate = ctx.sampleRate;
                channels   = buffer.numberOfChannels;
                if (channels === 2) {
                    bufferL = buffer.getChannelData(0);
                    bufferR = buffer.getChannelData(1);
                } else {
                    bufferL = bufferR = buffer.getChannelData(0);
                }
                duration = bufferL.length / samplerate;

                var mixdown = new Float32Array(bufferL);
                for (var i = 0, imax = mixdown.length; i < imax; ++i) {
                    mixdown[i] = (mixdown[i] + bufferR[i]) * 0.5;
                }

                onloadedmetadata({
                    samplerate: samplerate,
                    channels  : channels,
                    buffer    : [mixdown, bufferL, bufferR],
                    duration  : duration
                });

                onloadeddata();
            };

            return function(src, onloadedmetadata, onloadeddata) {
                /*global File:true */
                if (src instanceof File) {
                    var reader = new FileReader();
                    reader.onload = function(e) {
                        _decode(new Uint8Array(e.target.result),
                                onloadedmetadata, onloadeddata);
                    };
                    reader.readAsArrayBuffer(src);
                } else if (typeof src === "string") {
                    Decoder.getBinaryWithPath(src, function(data) {
                        _decode(data, onloadedmetadata, onloadeddata);
                    });
                } else {
                    _decode(src, onloadedmetadata, onloadeddata);
                }
                /*global File:false */
            };
        }
    })();

    Decoder.moz_decode = (function() {
        if (typeof Audio === "function" && typeof new Audio().mozSetup === "function") {
            return function(src, onloadedmetadata, onloadeddata) {
                var samplerate, channels, mixdown, bufferL, bufferR, duration;
                var writeIndex = 0;

                var audio = new Audio(src);
                audio.volume = 0.0;
                audio.addEventListener("loadedmetadata", function() {
                    samplerate = audio.mozSampleRate;
                    channels   = audio.mozChannels;
                    duration   = audio.duration;
                    mixdown = new Float32Array((audio.duration * samplerate)|0);
                    if (channels === 2) {
                        bufferL = new Float32Array((audio.duration * samplerate)|0);
                        bufferR = new Float32Array((audio.duration * samplerate)|0);
                    }
                    if (channels === 2) {
                        audio.addEventListener("MozAudioAvailable", function(e) {
                            var x, samples = e.frameBuffer;
                            for (var i = 0, imax = samples.length; i < imax; i += 2) {
                                x =  bufferL[writeIndex] = samples[i  ];
                                x += bufferR[writeIndex] = samples[i+1];
                                mixdown[writeIndex] = x * 0.5;
                                writeIndex += 1;
                            }
                        }, false);
                    } else {
                        audio.addEventListener("MozAudioAvailable", function(e) {
                            var samples = e.frameBuffer;
                            for (var i = 0, imax = samples.length; i < imax; ++i) {
                                mixdown[i] = samples[i];
                                writeIndex += 1;
                            }
                        }, false);
                    }
                    audio.play();
                    setTimeout(function() {
                        onloadedmetadata({
                            samplerate: samplerate,
                            channels  : channels,
                            buffer    : [mixdown, bufferL, bufferR],
                            duration  : duration
                        });
                    }, 1000);
                }, false);
                audio.addEventListener("ended", function() {
                    onloadeddata();
                }, false);
                audio.load();
            };
        }
    })();
})(timbre);
(function(T) {
    "use strict";

    function Envelope(samplerate) {
        this.samplerate = samplerate || 44100;
        this.value  = ZERO;
        this.status = StatusWait;
        this.curve  = "linear";
        this.step   = 1;
        this.releaseNode = null;
        this.loopNode    = null;
        this.emit = null;

        this._envValue = new EnvelopeValue(samplerate);

        this._table  = [];
        this._initValue  = ZERO;
        this._curveValue = 0;
        this._defaultCurveType = CurveTypeLin;
        this._index   = 0;
        this._counter = 0;
    }

    var ZERO           = Envelope.ZERO = 1e-6;
    var CurveTypeSet   = Envelope.CurveTypeSet   = 0;
    var CurveTypeLin   = Envelope.CurveTypeLin   = 1;
    var CurveTypeExp   = Envelope.CurveTypeExp   = 2;
    var CurveTypeSin   = Envelope.CurveTypeSin   = 3;
    var CurveTypeWel   = Envelope.CurveTypeWel   = 4;
    var CurveTypeCurve = Envelope.CurveTypeCurve = 5;
    var CurveTypeSqr   = Envelope.CurveTypeSqr   = 6;
    var CurveTypeCub   = Envelope.CurveTypeCub   = 7;

    var StatusWait    = Envelope.StatusWait    = 0;
    var StatusGate    = Envelope.StatusGate    = 1;
    var StatusSustain = Envelope.StatusSustain = 2;
    var StatusRelease = Envelope.StatusRelease = 3;
    var StatusEnd     = Envelope.StatusEnd     = 4;

    var CurveTypeDict = {
        set:CurveTypeSet,
        lin:CurveTypeLin, linear     :CurveTypeLin,
        exp:CurveTypeExp, exponential:CurveTypeExp,
        sin:CurveTypeSin, sine       :CurveTypeSin,
        wel:CurveTypeWel, welch      :CurveTypeWel,
        sqr:CurveTypeSqr, squared    :CurveTypeSqr,
        cub:CurveTypeCub, cubed      :CurveTypeCub
    };
    Envelope.CurveTypeDict = CurveTypeDict;

    var $ = Envelope.prototype;

    $.clone = function() {
        var new_instance = new Envelope(this.samplerate);
        new_instance._table = this._table;
        new_instance._initValue = this._initValue;
        new_instance.setCurve(this.curve);
        if (this.releaseNode !== null) {
            new_instance.setReleaseNode(this.releaseNode + 1);
        }
        if (this.loopNode !== null) {
            new_instance.setLoopNode(this.loopNode + 1);
        }
        new_instance.setStep(this.step);
        new_instance.reset();
        return new_instance;
    };
    $.setTable = function(value) {
        this._initValue = value[0];
        this._table = value.slice(1);
        this.value = this._envValue.value = this._initValue;
        this._index   = 0;
        this._counter = 0;
        this.status = StatusWait;
    };
    $.setCurve = function(value) {
        if (typeof value === "number")  {
            this._defaultCurveType = CurveTypeCurve;
            this._curveValue = value;
            this.curve = value;
        } else {
            this._defaultCurveType = CurveTypeDict[value] || null;
            this.curve = value;
        }
    };
    $.setReleaseNode = function(value) {
        if (typeof value === "number" && value > 0) {
            this.releaseNode = value - 1;
        }
    };
    $.setLoopNode = function(value) {
        if (typeof value === "number" && value > 0) {
            this.loopNode = value - 1;
        }
    };
    $.setStep = function(step) {
        this.step = this._envValue.step = step;
    };
    $.reset = function() {
        this.value = this._envValue.value = this._initValue;
        this._index   = 0;
        this._counter = 0;
        this.status = StatusWait;
    };
    $.release = function() {
        if (this.releaseNode !== null && this._index <= this.releaseNode) {
            this._counter = 0;
            this._index = this.releaseNode;
            this.status = StatusRelease;
        }
    };
    $.getInfo = function(sustainTime) {
        var table = this._table;
        var i, imax;
        var totalDuration    = 0;
        var loopBeginTime    = Infinity;
        var releaseBeginTime = Infinity;
        var isEndlessLoop    = false;
        for (i = 0, imax = table.length; i < imax; ++i) {
            if (this.loopNode === i) {
                loopBeginTime = totalDuration;
            }
            if (this.releaseNode === i) {
                if (totalDuration < sustainTime) {
                    totalDuration += sustainTime;
                } else {
                    totalDuration  = sustainTime;
                }
                releaseBeginTime = totalDuration;
            }

            var items = table[i];
            if (Array.isArray(items)) {
                totalDuration += items[1];
            }
        }
        if (loopBeginTime !== Infinity && releaseBeginTime === Infinity) {
            totalDuration += sustainTime;
            isEndlessLoop = true;
        }

        return {
            totalDuration   : totalDuration,
            loopBeginTime   : loopBeginTime,
            releaseBeginTime: releaseBeginTime,
            isEndlessLoop   : isEndlessLoop
        };
    };

    $.calcStatus = function() {
        var status  = this.status;
        var table   = this._table;
        var index   = this._index;
        var counter = this._counter;

        var curveValue = this._curveValue;
        var defaultCurveType = this._defaultCurveType;
        var loopNode    = this.loopNode;
        var releaseNode = this.releaseNode;
        var envValue = this._envValue;
        var items, endValue, time, curveType, emit = null;

        switch (status) {
        case StatusWait:
        case StatusEnd:
            break;
        case StatusGate:
        case StatusRelease:
            while (counter <= 0) {
                if (index >= table.length) {
                    if (status === StatusGate && loopNode !== null) {
                        index = loopNode;
                        continue;
                    }
                    status    = StatusEnd;
                    counter   = Infinity;
                    curveType = CurveTypeSet;
                    emit      = "ended";
                    continue;
                } else if (status === StatusGate && index === releaseNode) {
                    if (loopNode !== null && loopNode < releaseNode) {
                        index = loopNode;
                        continue;
                    }
                    status    = StatusSustain;
                    counter   = Infinity;
                    curveType = CurveTypeSet;
                    emit      = "sustained";
                    continue;
                }
                items = table[index++];

                endValue = items[0];
                if (items[2] === null) {
                    curveType = defaultCurveType;
                } else {
                    curveType = items[2];
                }
                if (curveType === CurveTypeCurve) {
                    curveValue = items[3];
                    if (Math.abs(curveValue) < 0.001) {
                        curveType = CurveTypeLin;
                    }
                }
                time = items[1];

                counter = envValue.setNext(endValue, time, curveType, curveValue);
            }
            break;
        }

        this.status = status;
        this.emit   = emit;
        this._index = index;
        this._counter = counter;

        return status;
    };

    $.next = function() {
        if (this.calcStatus() & 1) {
            this.value  = this._envValue.next() || ZERO;
        }
        this._counter -= 1;
        return this.value;
    };

    $.process = function(cell) {
        var envValue = this._envValue;
        var i, imax = cell.length;

        if (this.calcStatus() & 1) {
            for (i = 0; i < imax; ++i) {
                cell[i] = envValue.next() || ZERO;
            }
        } else {
            var value = this.value || ZERO;
            for (i = 0; i < imax; ++i) {
                cell[i] = value;
            }
        }
        this.value = cell[imax-1];

        this._counter -= cell.length;
    };


    function EnvelopeValue(samplerate) {
        this.samplerate = samplerate;
        this.value = ZERO;
        this.step  = 1;

        this._curveType  = CurveTypeLin;
        this._curveValue = 0;

        this._grow = 0;

        this._a2 = 0;
        this._b1 = 0;
        this._y1 = 0;
        this._y2 = 0;
    }
    EnvelopeValue.prototype.setNext = function(endValue, time, curveType, curveValue) {
        var n = this.step;
        var value = this.value;
        var grow, w, a1, a2, b1, y1, y2;

        var counter = ((time * 0.001 * this.samplerate) / n)|0;
        if (counter < 1) {
            counter   = 1;
            curveType = CurveTypeSet;
        }

        switch (curveType) {
        case CurveTypeSet:
            this.value = endValue;
            break;
        case CurveTypeLin:
            grow = (endValue - value) / counter;
            break;
        case CurveTypeExp:
            if (value !== 0) {
                grow = Math.pow(
                    endValue / value, 1 / counter
                );
            } else {
                grow = 0;
            }
            break;
        case CurveTypeSin:
            w = Math.PI / counter;
            a2 = (endValue + value) * 0.5;
            b1 = 2 * Math.cos(w);
            y1 = (endValue - value) * 0.5;
            y2 = y1 * Math.sin(Math.PI * 0.5 - w);
            value = a2 - y1;
            break;
        case CurveTypeWel:
            w = (Math.PI * 0.5) / counter;
            b1 = 2 * Math.cos(w);
            if (endValue >= value) {
                a2 = value;
                y1 = 0;
                y2 = -Math.sin(w) * (endValue - value);
            } else {
                a2 = endValue;
                y1 = value - endValue;
                y2 = Math.cos(w) * (value - endValue);
            }
            value = a2 + y1;
            break;
        case CurveTypeCurve:
            a1 = (endValue - value) / (1.0 - Math.exp(curveValue));
            a2 = value + a1;
            b1 = a1;
            grow = Math.exp(curveValue / counter);
            break;
        case CurveTypeSqr:
            y1 = Math.sqrt(value);
            y2 = Math.sqrt(endValue);
            grow = (y2 - y1) / counter;
            break;
        case CurveTypeCub:
            y1 = Math.pow(value   , 0.33333333);
            y2 = Math.pow(endValue, 0.33333333);
            grow = (y2 - y1) / counter;
            break;
        }

        this.next = NextFunctions[curveType];
        this._grow = grow;
        this._a2 = a2;
        this._b1 = b1;
        this._y1 = y1;
        this._y2 = y2;

        return counter;
    };

    var NextFunctions = [];
    NextFunctions[CurveTypeSet] = function() {
        return this.value;
    };
    NextFunctions[CurveTypeLin] = function() {
        this.value += this._grow;
        return this.value;
    };
    NextFunctions[CurveTypeExp] = function() {
        this.value *= this._grow;
        return this.value;
    };
    NextFunctions[CurveTypeSin] = function() {
        var y0 = this._b1 * this._y1 - this._y2;
        this.value = this._a2 - y0;
        this._y2 = this._y1;
        this._y1 = y0;
        return this.value;
    };
    NextFunctions[CurveTypeWel] = function() {
        var y0 = this._b1 * this._y1 - this._y2;
        this.value = this._a2 + y0;
        this._y2 = this._y1;
        this._y1 = y0;
        return this.value;
    };
    NextFunctions[CurveTypeCurve] = function() {
        this._b1 *= this._grow;
        this.value = this._a2 - this._b1;
        return this.value;
    };
    NextFunctions[CurveTypeSqr] = function() {
        this._y1 += this._grow;
        this.value = this._y1 * this._y1;
        return this.value;
    };
    NextFunctions[CurveTypeCub] = function() {
        this._y1 += this._grow;
        this.value = this._y1 * this._y1 * this._y1;
        return this.value;
    };

    EnvelopeValue.prototype.next = NextFunctions[CurveTypeSet];

    T.modules.Envelope      = Envelope;
    T.modules.EnvelopeValue = EnvelopeValue;

})(timbre);
(function(T) {
    "use strict";

    function FFT(n) {
        n = (typeof n === "number") ? n : 512;
        n = 1 << Math.ceil(Math.log(n) * Math.LOG2E);

        this.length  = n;
        this.buffer  = new T.fn.SignalArray(n);
        this.real    = new T.fn.SignalArray(n);
        this.imag    = new T.fn.SignalArray(n);
        this._real   = new T.fn.SignalArray(n);
        this._imag   = new T.fn.SignalArray(n);
        this.mag     = new T.fn.SignalArray(n>>1);

        this.minDecibels =  -30;
        this.maxDecibels = -100;

        var params = FFTParams.get(n);
        this._bitrev   = params.bitrev;
        this._sintable = params.sintable;
        this._costable = params.costable;
    }

    var $ = FFT.prototype;

    $.setWindow = function(key) {
        if (typeof key === "string") {
            var m = /([A-Za-z]+)(?:\(([01]\.?\d*)\))?/.exec(key);
            if (m !== null) {
                var name = m[1].toLowerCase(), a = m[2] !== undefined ? +m[2] : 0.25;
                var f = WindowFunctions[name];
                if (f) {
                    if (!this._window) {
                        this._window = new T.fn.SignalArray(this.length);
                    }
                    var w = this._window, n = 0, N = this.length;
                    a = (a < 0) ? 0 : (a > 1) ? 1 : a;
                    for (; n < N; ++n) {
                        w[n] = f(n, N, a);
                    }
                    this.windowName = key;
                }
            }
        }
    };

    $.forward = function(_buffer) {
        var buffer   = this.buffer;
        var real   = this.real;
        var imag   = this.imag;
        var window = this._window;
        var bitrev = this._bitrev;
        var sintable = this._sintable;
        var costable = this._costable;
        var n = buffer.length;
        var i, j, k, k2, h, d, c, s, ik, dx, dy;

        if (window) {
            for (i = 0; i < n; ++i) {
                buffer[i] = _buffer[i] * window[i];
            }
        } else {
            buffer.set(_buffer);
        }

        for (i = 0; i < n; ++i) {
            real[i] = buffer[bitrev[i]];
            imag[i] = 0.0;
        }

        for (k = 1; k < n; k = k2) {
            h = 0; k2 = k + k; d = n / k2;
            for (j = 0; j < k; j++) {
                c = costable[h];
                s = sintable[h];
                for (i = j; i < n; i += k2) {
                    ik = i + k;
                    dx = s * imag[ik] + c * real[ik];
                    dy = c * imag[ik] - s * real[ik];
                    real[ik] = real[i] - dx; real[i] += dx;
                    imag[ik] = imag[i] - dy; imag[i] += dy;
                }
                h += d;
            }
        }

        var mag = this.mag;
        var rval, ival;
        for (i = 0; i < n; ++i) {
            rval = real[i];
            ival = imag[i];
            mag[i] = Math.sqrt(rval * rval + ival * ival);
        }

        return {real:real, imag:imag};
    };

    $.inverse = function(_real, _imag) {
        var buffer = this.buffer;
        var real   = this._real;
        var imag   = this._imag;
        var bitrev = this._bitrev;
        var sintable = this._sintable;
        var costable = this._costable;
        var n = buffer.length;
        var i, j, k, k2, h, d, c, s, ik, dx, dy;

        for (i = 0; i < n; ++i) {
            j = bitrev[i];
            real[i] = +_real[j];
            imag[i] = -_imag[j];
        }

        for (k = 1; k < n; k = k2) {
            h = 0; k2 = k + k; d = n / k2;
            for (j = 0; j < k; j++) {
                c = costable[h];
                s = sintable[h];
                for (i = j; i < n; i += k2) {
                    ik = i + k;
                    dx = s * imag[ik] + c * real[ik];
                    dy = c * imag[ik] - s * real[ik];
                    real[ik] = real[i] - dx; real[i] += dx;
                    imag[ik] = imag[i] - dy; imag[i] += dy;
                }
                h += d;
            }
        }

        for (i = 0; i < n; ++i) {
            buffer[i] = real[i] / n;
        }
        return buffer;
    };

    $.getFrequencyData = function(array) {
        var minDecibels  = this.minDecibels;
        var i, imax = Math.min(this.mag.length, array.length);
        if (imax) {
            var x, mag = this.mag;
            var peak = 0;
            for (i = 0; i < imax; ++i) {
                x  = mag[i];
                array[i] = !x ? minDecibels : 20 * Math.log(x) * Math.LOG10E;
                if (peak < array[i]) {
                    peak = array[i];
                }
            }
        }
        return array;
    };

    var FFTParams = {
        get: function(n) {
            return FFTParams[n] || (function() {
                var bitrev = (function() {
                    var x, i, j, k, n2;
                    x = new Int16Array(n);
                    n2 = n >> 1;
                    i = j = 0;
                    for (;;) {
                        x[i] = j;
                        if (++i >= n) {
                            break;
                        }
                        k = n2;
                        while (k <= j) {
                            j -= k;
                            k >>= 1;
                        }
                        j += k;
                    }
                    return x;
                }());
                var i, imax, k = Math.floor(Math.log(n) / Math.LN2);
                var sintable = new T.fn.SignalArray((1<<k)-1);
                var costable = new T.fn.SignalArray((1<<k)-1);
                var PI2 = Math.PI * 2;

                for (i = 0, imax = sintable.length; i < imax; ++i) {
                    sintable[i] = Math.sin(PI2 * (i / n));
                    costable[i] = Math.cos(PI2 * (i / n));
                }
                FFTParams[n] = {
                    bitrev: bitrev, sintable:sintable, costable:costable
                };
                return FFTParams[n];
            }());
        }
    };

    var WindowFunctions = (function() {
        var PI   = Math.PI;
        var PI2  = Math.PI * 2;
        var abs  = Math.abs;
        var pow  = Math.pow;
        var cos  = Math.cos;
        var sin  = Math.sin;
        var sinc = function(x) { return sin(PI*x) / (PI*x); };
        var E    = Math.E;

        return {
            rectangular: function() {
                return 1;
            },
            hann: function(n, N) {
                return 0.5 * (1 - cos((PI2*n) / (N-1)));
            },
            hamming: function(n, N) {
                return 0.54 - 0.46 * cos((PI2*n) / (N-1));
            },
            tukery: function(n, N, a) {
                if ( n < (a * (N-1))/2 ) {
                    return 0.5 * ( 1 + cos(PI * (((2*n)/(a*(N-1))) - 1)) );
                } else if ( (N-1)*(1-(a/2)) < n ) {
                    return 0.5 * ( 1 + cos(PI * (((2*n)/(a*(N-1))) - (2/a) + 1)) );
                } else {
                    return 1;
                }
            },
            cosine: function(n, N) {
                return sin((PI*n) / (N-1));
            },
            lanczos: function(n, N) {
                return sinc(((2*n) / (N-1)) - 1);
            },
            triangular: function(n, N) {
                return (2/(N+1)) * (((N+1)/2) - abs(n - ((N-1)/2)));
            },
            bartlett: function(n, N) {
                return (2/(N-1)) * (((N-1)/2) - abs(n - ((N-1)/2)));
            },
            gaussian: function(n, N, a) {
                return pow(E, -0.5 * pow((n - (N-1) / 2) / (a * (N-1) / 2), 2));
            },
            bartlettHann: function(n, N) {
                return 0.62 - 0.48 * abs((n / (N-1)) - 0.5) - 0.38 * cos((PI2*n) / (N-1));
            },
            blackman: function(n, N, a) {
                var a0 = (1 - a) / 2, a1 = 0.5, a2 = a / 2;
                return a0 - a1 * cos((PI2*n) / (N-1)) + a2 * cos((4*PI*n) / (N-1));
            }
        };
    }());

    T.modules.FFT = FFT;

})(timbre);
(function(T) {
    "use strict";

    function Oscillator(samplerate) {
        this.samplerate = samplerate || 44100;

        this.wave = null;
        this.step = 1;
        this.frequency = 0;
        this.value = 0;
        this.phase = 0;
        this.feedback = false;

        this._x = 0;
        this._lastouts = 0;
        this._coeff = TABLE_SIZE / this.samplerate;
        this._radtoinc = TABLE_SIZE / (Math.PI * 2);
    }

    var TABLE_SIZE = 1024;
    var TABLE_MASK = TABLE_SIZE - 1;

    var $ = Oscillator.prototype;

    $.setWave = function(value) {
        var i, dx, wave = this.wave;
        if (!this.wave) {
            this.wave = new Float32Array(TABLE_SIZE + 1);
        }
        if (typeof value === "function") {
            for (i = 0; i < TABLE_SIZE; ++i) {
                wave[i] = value(i / TABLE_SIZE);
            }
        } else if (T.fn.isSignalArray(value)) {
            if (value.length === wave.length) {
                wave.set(value);
            } else {
                dx = value.length / TABLE_SIZE;
                for (i = 0; i < TABLE_SIZE; ++i) {
                    wave[i] = value[(i * dx)|0];
                }
            }
        } else if (typeof value === "string") {
            if ((dx = getWavetable(value)) !== undefined) {
                this.wave.set(dx);
            }
        }
        this.wave[TABLE_SIZE] = this.wave[0];
    };

    $.clone = function() {
        var new_instance = new Oscillator(this.samplerate);
        new_instance.wave      = this.wave;
        new_instance.step      = this.step;
        new_instance.frequency = this.frequency;
        new_instance.value     = this.value;
        new_instance.phase     = this.phase;
        new_instance.feedback  = this.feedback;
        return new_instance;
    };

    $.reset = function() {
        this._x = 0;
    };

    $.next = function() {
        var x = this._x;
        var index = (x + this.phase * this._radtoinc)|0;
        this.value = this.wave[index & TABLE_MASK];
        x += this.frequency * this._coeff * this.step;
        if (x > TABLE_SIZE) {
            x -= TABLE_SIZE;
        }
        this._x = x;
        return this.value;
    };

    $.process = function(cell) {
        var wave = this.wave;
        var radtoinc = this._radtoinc;
        var phase, x = this._x;
        var index, frac, x0, x1, dx = this.frequency * this._coeff;
        var i, imax = this.step;

        if (this.feedback) {
            var lastouts = this._lastouts;
            radtoinc *= this.phase;
            for (i = 0; i < imax; ++i) {
                phase = x + lastouts * radtoinc;
                index = phase|0;
                frac  = phase - index;
                index = index & TABLE_MASK;
                x0 = wave[index  ];
                x1 = wave[index+1];
                cell[i] = lastouts = x0 + frac * (x1 - x0);
                x += dx;
            }
            this._lastouts = lastouts;
        } else {
            var phaseoffset = this.phase * radtoinc;
            for (i = 0; i < imax; ++i) {
                phase = x + phaseoffset;
                index = phase|0;
                frac  = phase - index;
                index = index & TABLE_MASK;
                x0 = wave[index  ];
                x1 = wave[index+1];
                cell[i] = x0 + frac * (x1 - x0);
                x += dx;
            }
        }
        if (x > TABLE_SIZE) {
            x -= TABLE_SIZE;
        }
        this._x = x;
        this.value = cell[cell.length - 1];
    };

    $.processWithFreqArray = function(cell, freqs) {
        var wave = this.wave;
        var radtoinc = this._radtoinc;
        var phase, x = this._x;
        var index, frac, x0, x1, dx = this._coeff;
        var i, imax = this.step;

        if (this.feedback) {
            var lastouts = this._lastouts;
            radtoinc *= this.phase;
            for (i = 0; i < imax; ++i) {
                phase = x + lastouts * radtoinc;
                index = phase|0;
                frac  = phase - index;
                index = index & TABLE_MASK;
                x0 = wave[index  ];
                x1 = wave[index+1];
                cell[i] = lastouts = x0 + frac * (x1 - x0);
                x += freqs[i] * dx;
            }
            this._lastouts = lastouts;
        } else {
            var phaseoffset = this.phase * this._radtoinc;
            for (i = 0; i < imax; ++i) {
                phase = x + phaseoffset;
                index = phase|0;
                frac  = phase - index;
                index = index & TABLE_MASK;
                x0 = wave[index  ];
                x1 = wave[index+1];
                cell[i] = x0 + frac * (x1 - x0);
                x += freqs[i] * dx;
            }
        }
        if (x > TABLE_SIZE) {
            x -= TABLE_SIZE;
        }
        this._x = x;
        this.value = cell[cell.length - 1];
    };

    $.processWithPhaseArray = function(cell, phases) {
        var wave = this.wave;
        var radtoinc = this._radtoinc;
        var phase, x = this._x;
        var index, frac, x0, x1, dx = this.frequency * this._coeff;
        var i, imax = this.step;

        if (this.feedback) {
            var lastouts = this._lastouts;
            radtoinc *= this.phase;
            for (i = 0; i < imax; ++i) {
                phase = x + lastouts * radtoinc;
                index = phase|0;
                frac  = phase - index;
                index = index & TABLE_MASK;
                x0 = wave[index  ];
                x1 = wave[index+1];
                cell[i] = lastouts = x0 + frac * (x1 - x0);
                x += dx;
            }
            this._lastouts = lastouts;
        } else {
            for (i = 0; i < imax; ++i) {
                phase = x + phases[i] * radtoinc;
                index = phase|0;
                frac  = phase - index;
                index = index & TABLE_MASK;
                x0 = wave[index  ];
                x1 = wave[index+1];
                cell[i] = x0 + frac * (x1 - x0);
                x += dx;
            }
        }
        if (x > TABLE_SIZE) {
            x -= TABLE_SIZE;
        }
        this._x = x;
        this.value = cell[cell.length - 1];
    };

    $.processWithFreqAndPhaseArray = function(cell, freqs, phases) {
        var wave = this.wave;
        var radtoinc = this._radtoinc;
        var phase, x = this._x;
        var index, frac, x0, x1, dx = this._coeff;
        var i, imax = this.step;

        if (this.feedback) {
            var lastouts = this._lastouts;
            radtoinc *= this.phase;
            for (i = 0; i < imax; ++i) {
                phase = x + lastouts * radtoinc;
                index = phase|0;
                frac  = phase - index;
                index = index & TABLE_MASK;
                x0 = wave[index  ];
                x1 = wave[index+1];
                cell[i] = lastouts = x0 + frac * (x1 - x0);
                x += freqs[i] * dx;
            }
            this._lastouts = lastouts;
        } else {
            for (i = 0; i < imax; ++i) {
                phase = x + phases[i] * TABLE_SIZE;
                index = phase|0;
                frac  = phase - index;
                index = index & TABLE_MASK;
                x0 = wave[index  ];
                x1 = wave[index+1];
                cell[i] = x0 + frac * (x1 - x0);
                x += freqs[i] * dx;
            }
        }
        if (x > TABLE_SIZE) {
            x -= TABLE_SIZE;
        }
        this._x = x;
        this.value = cell[cell.length - 1];
    };


    function waveshape(sign, name, shape, width) {
        var wave = Wavetables[name];
        var _wave;
        var i, imax, j, jmax;

        if (wave === undefined) {
            return;
        }

        if (typeof wave === "function") {
            wave = wave();
        }

        switch (shape) {
        case "@1":
            for (i = 512; i < 1024; ++i) {
                wave[i] = 0;
            }
            break;
        case "@2":
            for (i = 512; i < 1024; ++i) {
                wave[i] = Math.abs(wave[i]);
            }
            break;
        case "@3":
            for (i = 256; i <  512; ++i) {
                wave[i] = 0;
            }
            for (i = 512; i <  768; ++i) {
                wave[i] = Math.abs(wave[i]);
            }
            for (i = 768; i < 1024; ++i) {
                wave[i] = 0;
            }
            break;
        case "@4":
            _wave = new Float32Array(1024);
            for (i = 0; i < 512; ++i) {
                _wave[i] = wave[i<<1];
            }
            wave = _wave;
            break;
        case "@5":
            _wave = new Float32Array(1024);
            for (i = 0; i < 512; ++i) {
                _wave[i] = Math.abs(wave[i<<1]);
            }
            wave = _wave;
            break;
        }

        // duty-cycle
        if (width !== undefined && width !== 50) {
            width *= 0.01;
            width = (width < 0) ? 0 : (width > 1) ? 1 : width;

            _wave = new Float32Array(1024);
            imax = (1024 * width)|0;
            for (i = 0; i < imax; ++i) {
                _wave[i] = wave[(i / imax * 512)|0];
            }
            jmax = (1024 - imax);
            for (j = 0; i < 1024; ++i, ++j) {
                _wave[i] = wave[(j / jmax * 512 + 512)|0];
            }
            wave = _wave;
        }

        if (sign === "+") {
            for (i = 0; i < 1024; ++i) {
                wave[i] = wave[i] * 0.5 + 0.5;
            }
        } else if (sign === "-") {
            for (i = 0; i < 1024; ++i) {
                wave[i] *= -1;
            }
        }
        return wave;
    }

    function wavb(src) {
        var wave = new Float32Array(1024);
        var n = src.length >> 1;
        if ([2,4,8,16,32,64,128,256,512,1024].indexOf(n) !== -1) {

            for (var i = 0, k = 0; i < n; ++i) {
                var x = parseInt(src.substr(i * 2, 2), 16);

                x = (x & 0x80) ? (x-256) / 128.0 : x / 127.0;
                for (var j = 0, jmax = 1024 / n; j < jmax; ++j) {
                    wave[k++] = x;
                }
            }
        }
        return wave;
    }

    function wavc(src) {
        var wave = new Float32Array(1024);
        if (src.length === 8) {
            var color = parseInt(src, 16);
            var bar   = new Float32Array(8);
            var i, j;

            bar[0] = 1;
            for (i = 0; i < 7; ++i) {
                bar[i+1] = (color & 0x0f) * 0.0625; // 0.0625 = 1/16
                color >>= 4;
            }

            for (i = 0; i < 8; ++i) {
                var x = 0, dx = (i + 1) / 1024;
                for (j = 0; j < 1024; ++j) {
                    wave[j] += Math.sin(2 * Math.PI * x) * bar[i];
                    x += dx;
                }
            }

            var maxx = 0, absx;
            for (i = 0; i < 1024; ++i) {
                if (maxx < (absx = Math.abs(wave[i]))) {
                    maxx = absx;
                }
            }
            if (maxx > 0) {
                for (i = 0; i < 1024; ++i) {
                    wave[i] /= maxx;
                }
            }
        }
        return wave;
    }

    var getWavetable = function(key) {
        var wave = Wavetables[key];
        if (wave !== undefined) {
            if (typeof wave === "function") {
                wave = wave();
            }
            return wave;
        }

        var m;
        // wave shaping
        m = /^([\-+]?)(\w+)(?:\((@[0-7])?:?(\d+)?\))?$/.exec(key);
        if (m !== null) {
            var sign = m[1], name = m[2], shape = m[3], width = m[4];
            wave = waveshape(sign, name, shape, width);
            if (wave !== undefined) {
                Wavetables[key] = wave;
                return wave;
            }
        }

        // wave bytes
        m = /^wavb\(((?:[0-9a-fA-F][0-9a-fA-F])+)\)$/.exec(key);
        if (m !== null) {
            return wavb(m[1]);
        }

        // wave color
        m = /^wavc\(([0-9a-fA-F]{8})\)$/.exec(key);
        if (m !== null) {
            return wavc(m[1]);
        }

        // warn message
    };
    Oscillator.getWavetable = getWavetable;

    var setWavetable = function(name, value) {
        var dx, wave = new Float32Array(1024);
        var i;
        if (typeof value === "function") {
            for (i = 0; i < 1024; ++i) {
                wave[i] = value(i / 1024);
            }
        } else if (T.fn.isSignalArray(value)) {
            if (value.length === wave.length) {
                wave.set(value);
            } else {
                dx = value.length / 1024;
                for (i = 0; i < 1024; ++i) {
                    wave[i] = value[(i * dx)|0];
                }
            }
        }
        Wavetables[name] = wave;
    };
    Oscillator.setWavetable = setWavetable;

    var Wavetables = {
        sin: function() {
            var wave = new Float32Array(1024);
            for (var i = 0; i < 1024; ++i) {
                wave[i] = Math.sin(2 * Math.PI * (i/1024));
            }
            return wave;
        },
        cos: function() {
            var wave = new Float32Array(1024);
            for (var i = 0; i < 1024; ++i) {
                wave[i] = Math.cos(2 * Math.PI * (i/1024));
            }
            return wave;
        },
        pulse: function() {
            var wave = new Float32Array(1024);
            for (var i = 0; i < 1024; ++i) {
                wave[i] = (i < 512) ? +1 : -1;
            }
            return wave;
        },
        tri: function() {
            var wave = new Float32Array(1024);
            for (var x, i = 0; i < 1024; ++i) {
                x = (i / 1024) - 0.25;
                wave[i] = 1.0 - 4.0 * Math.abs(Math.round(x) - x);
            }
            return wave;
        },
        saw: function() {
            var wave = new Float32Array(1024);
            for (var x, i = 0; i < 1024; ++i) {
                x = (i / 1024);
                wave[i] = +2.0 * (x - Math.round(x));
            }
            return wave;
        },
        fami: function() {
            var d = [ +0.000, +0.125, +0.250, +0.375, +0.500, +0.625, +0.750, +0.875,
                      +0.875, +0.750, +0.625, +0.500, +0.375, +0.250, +0.125, +0.000,
                      -0.125, -0.250, -0.375, -0.500, -0.625, -0.750, -0.875, -1.000,
                      -1.000, -0.875, -0.750, -0.625, -0.500, -0.375, -0.250, -0.125 ];
            var wave = new Float32Array(1024);
            for (var i = 0; i < 1024; ++i) {
                wave[i] = d[(i / 1024 * d.length)|0];
            }
            return wave;
        },
        konami: function() {
            var d = [-0.625, -0.875, -0.125, +0.750, + 0.500, +0.125, +0.500, +0.750,
                     +0.250, -0.125, +0.500, +0.875, + 0.625, +0.000, +0.250, +0.375,
                     -0.125, -0.750, +0.000, +0.625, + 0.125, -0.500, -0.375, -0.125,
                     -0.750, -1.000, -0.625, +0.000, - 0.375, -0.875, -0.625, -0.250 ];
            var wave = new Float32Array(1024);
            for (var i = 0; i < 1024; ++i) {
                wave[i] = d[(i / 1024 * d.length)|0];
            }
            return wave;
        }
    };

    T.modules.Oscillator = Oscillator;

})(timbre);
/**
 * Port of the Freeverb Schrodoer/Moorer reverb model.
 * https://ccrma.stanford.edu/~jos/pasp/Freeverb.html
*/
(function(T) {
    "use strict";

    var CombParams    = [1116,1188,1277,1356,1422,1491,1557,1617];
    var AllpassParams = [225,556,441,341];

    function Reverb(samplerate, buffersize) {
        this.samplerate = samplerate;

        var i, imax;
        var k = samplerate / 44100;

        imax = CombParams.length * 2;
        this.comb = new Array(imax);
        this.combout = new Array(imax);
        for (i = 0; i < imax; ++i) {
            this.comb[i]    = new CombFilter(CombParams[i % CombParams.length] * k);
            this.combout[i] = new T.fn.SignalArray(buffersize);
        }

        imax = AllpassParams.length * 2;
        this.allpass = new Array(imax);
        for (i = 0; i < imax; ++i) {
            this.allpass[i] = new AllpassFilter(AllpassParams[i % AllpassParams.length] * k);
        }
        this.outputs = [ new T.fn.SignalArray(buffersize),
                         new T.fn.SignalArray(buffersize) ];
        this.damp = 0;
        this.wet  = 0.33;

        this.setRoomSize(0.5);
        this.setDamp(0.5);
    }

    var $ = Reverb.prototype;

    $.setRoomSize = function(roomsize) {
        var comb = this.comb;
        var value = (roomsize * 0.28) + 0.7;
        this.roomsize = roomsize;
        comb[0].feedback = comb[1].feedback = comb[2].feedback = comb[3].feedback = comb[4].feedback = comb[5].feedback = comb[6].feedback = comb[7].feedback = comb[8].feedback = comb[9].feedback = comb[10].feedback = comb[11].feedback = comb[12].feedback = comb[13].feedback = comb[14].feedback = comb[15].feedback = value;
    };
    $.setDamp = function(damp) {
        var comb = this.comb;
        var value = damp * 0.4;
        this.damp = damp;
        comb[0].damp = comb[1].damp = comb[2].damp = comb[3].damp = comb[4].damp = comb[5].damp = comb[6].damp = comb[7].damp = comb[8].damp = comb[9].damp = comb[10].damp = comb[11].damp = comb[12].damp = comb[13].damp = comb[14].damp = comb[15].damp = value;

    };
    $.process = function(cellL, cellR) {
        var comb = this.comb;
        var combout = this.combout;
        var allpass = this.allpass;
        var output0 = this.outputs[0];
        var output1 = this.outputs[1];
        var wet = this.wet, dry = 1 - wet;
        var i, imax = cellL.length;

        comb[0].process(cellL, combout[0]);
        comb[1].process(cellL, combout[1]);
        comb[2].process(cellL, combout[2]);
        comb[3].process(cellL, combout[3]);
        comb[4].process(cellL, combout[4]);
        comb[5].process(cellL, combout[5]);
        comb[6].process(cellL, combout[6]);
        comb[7].process(cellL, combout[7]);

        comb[ 8].process(cellR, combout[ 8]);
        comb[ 9].process(cellR, combout[ 9]);
        comb[10].process(cellR, combout[10]);
        comb[11].process(cellR, combout[11]);
        comb[12].process(cellR, combout[12]);
        comb[13].process(cellR, combout[13]);
        comb[14].process(cellR, combout[14]);
        comb[15].process(cellR, combout[15]);

        for (i = 0; i < imax; ++i) {
            output0[i] = combout[0][i] + combout[1][i] + combout[2][i] + combout[3][i] + combout[4][i] + combout[5][i] + combout[6][i] + combout[7][i];
            output1[i] = combout[8][i] + combout[9][i] + combout[10][i] + combout[11][i] + combout[12][i] + combout[13][i] + combout[14][i] + combout[15][i];
        }
        allpass[0].process(output0, output0);
        allpass[1].process(output0, output0);
        allpass[2].process(output0, output0);
        allpass[3].process(output0, output0);

        allpass[4].process(output1, output1);
        allpass[5].process(output1, output1);
        allpass[6].process(output1, output1);
        allpass[7].process(output1, output1);

        for (i = 0; i < imax; ++i) {
            cellL[i] = output0[i] * wet + cellL[i] * dry;
            cellR[i] = output1[i] * wet + cellR[i] * dry;
        }
    };

    function CombFilter(buffersize) {
        this.buffer = new T.fn.SignalArray(buffersize|0);
        this.buffersize = this.buffer.length;
        this.bufidx = 0;
        this.feedback =  0;
        this.filterstore = 0;
        this.damp = 0;
    }

    CombFilter.prototype.process = function(input, output) {
        var ins, outs;
        var buffer = this.buffer;
        var buffersize = this.buffersize;
        var bufidx = this.bufidx;
        var filterstore = this.filterstore;
        var feedback = this.feedback;
        var damp1 = this.damp, damp2 = 1 - damp1;
        var i, imax = input.length;

        for (i = 0; i < imax; ++i) {
            ins = input[i] * 0.015;
            outs = buffer[bufidx];

            filterstore = (outs * damp2) + (filterstore * damp1);

            buffer[bufidx] = ins + (filterstore * feedback);

            if (++bufidx >= buffersize) {
                bufidx = 0;
            }

            output[i] = outs;
        }

        this.bufidx = bufidx;
        this.filterstore = filterstore;
    };

    function AllpassFilter(buffersize) {
        this.buffer = new T.fn.SignalArray(buffersize|0);
        this.buffersize = this.buffer.length;
        this.bufidx = 0;
    }

    AllpassFilter.prototype.process = function(input, output) {
        var ins, outs, bufout;
        var buffer = this.buffer;
        var buffersize = this.buffersize;
        var bufidx = this.bufidx;
        var i, imax = input.length;

        for (i = 0; i < imax; ++i) {
            ins = input[i];

            bufout = buffer[bufidx];

            outs = -ins + bufout;
            buffer[bufidx] = ins + (bufout * 0.5);

            if (++bufidx >= buffersize) {
                bufidx = 0;
            }

            output[i] = outs;
        }

        this.bufidx = bufidx;
    };

    T.modules.Reverb = Reverb;

})(timbre);
(function(T) {
    "use strict";

    var DummyBuffer = new Float32Array(60);

    function Scissor(soundbuffer) {
        return new Tape(soundbuffer);
    }

    var silencebuffer = {
        buffer:DummyBuffer, samplerate:1
    };

    Scissor.silence = function(duration) {
        return new Scissor(silencebuffer).slice(0, 1).fill(duration);
    };

    Scissor.join = function(tapes) {
        var new_instance = new Tape();

        for (var i = 0; i < tapes.length; i++) {
            if (tapes[i] instanceof Tape) {
                new_instance.add_fragments(tapes[i].fragments);
            }
        }

        return new_instance;
    };

    function Tape(soundbuffer) {
        this.fragments = [];
        if (soundbuffer) {
            var samplerate = soundbuffer.samplerate || 44100;
            var duration   = soundbuffer.buffer[0].length / samplerate;
            this.fragments.push(
                new Fragment(soundbuffer, 0, duration)
            );
        }
    }
    Scissor.Tape = Tape;

    Tape.prototype.add_fragment = function(fragment) {
        this.fragments.push(fragment);
        return this;
    };

    Tape.prototype.add_fragments = function(fragments) {
        for (var i = 0; i < fragments.length; i++) {
            this.fragments.push(fragments[i]);
        }
        return this;
    };

    Tape.prototype.duration = function() {
        var result = 0;
        for (var i = 0; i < this.fragments.length; i++) {
            result += this.fragments[i].duration();
        }
        return result;
    };

    Tape.prototype.slice = function(start, length) {
        var duration = this.duration();
        if (start + length > duration) {
            length = duration - start;
        }

        var new_instance  = new Tape();
        var remainingstart  = start;
        var remaininglength = length;

        for (var i = 0; i < this.fragments.length; i++) {
            var fragment = this.fragments[i];
            var items = fragment.create(remainingstart, remaininglength);
            var new_fragment = items[0];
            remainingstart  = items[1];
            remaininglength = items[2];
            if (new_fragment) {
                new_instance.add_fragment(new_fragment);
            }
            if (remaininglength === 0) {
                break;
            }
        }

        return new_instance;
    };
    Tape.prototype.cut = Tape.prototype.slice;

    Tape.prototype.concat = function(other) {
        var new_instance = new Tape();
        new_instance.add_fragments(this.fragments);
        new_instance.add_fragments(other.fragments);
        return new_instance;
    };

    Tape.prototype.loop = function(count) {
        var i;
        var orig_fragments = [];
        for (i = 0; i < this.fragments.length; i++) {
            orig_fragments.push(this.fragments[i].clone());
        }
        var new_instance = new Tape();
        for (i = 0; i < count; i++ ) {
            new_instance.add_fragments(orig_fragments);
        }
        return new_instance;
    };

    Tape.prototype.times = Tape.prototype.loop;

    Tape.prototype.split = function(count) {
        var splitted_duration = this.duration() / count;
        var results = [];
        for (var i = 0; i < count; i++) {
            results.push(this.slice(i * splitted_duration, splitted_duration));
        }
        return results;
    };

    Tape.prototype.fill = function(filled_duration) {
        var duration = this.duration();
        if (duration === 0) {
            throw "EmptyFragment";
        }
        var loop_count = (filled_duration / duration)|0;
        var remain = filled_duration % duration;

        return this.loop(loop_count).plus(this.slice(0, remain));
    };

    Tape.prototype.replace = function(start, length, replaced) {
        var new_instance = new Tape();
        var offset = start + length;

        new_instance = new_instance.plus(this.slice(0, start));

        var new_instance_duration = new_instance.duration();
        if (new_instance_duration < start) {
            new_instance = new_instance.plus(Scissor.silence(start-new_instance_duration));
        }

        new_instance = new_instance.plus(replaced);

        var duration = this.duration();
        if (duration > offset) {
            new_instance = new_instance.plus(this.slice(offset, duration - offset));
        }

        return new_instance;
    };

    Tape.prototype.reverse = function() {
        var new_instance = new Tape();

        for (var i = this.fragments.length; i--; ) {
            var fragment = this.fragments[i].clone();
            fragment.reverse = !fragment.isReversed();
            new_instance.add_fragment(fragment);
        }

        return new_instance;
    };

    Tape.prototype.pitch = function(pitch, stretch) {
        var new_instance = new Tape();

        stretch = stretch || false;
        for (var i = 0; i < this.fragments.length; i++) {
            var fragment = this.fragments[i].clone();
            fragment.pitch  *= pitch * 0.01;
            fragment.stretch = stretch;
            new_instance.add_fragment(fragment);
        }

        return new_instance;
    };

    Tape.prototype.stretch = function(factor) {
        var factor_for_pitch = 1 / (factor * 0.01) * 100;
        return this.pitch(factor_for_pitch, true);
    };

    Tape.prototype.pan = function(right_percent) {
        var new_instance = new Tape();
        if (right_percent > 100) {
            right_percent = 100;
        } else if (right_percent < 0) {
            right_percent = 0;
        }
        for (var i = 0; i < this.fragments.length; i++) {
            var fragment = this.fragments[i].clone();
            fragment.pan = right_percent;
            new_instance.add_fragment(fragment);
        }

        return new_instance;
    };

    Tape.prototype.silence = function() {
        return Scissor.silence(this.duration());
    };

    Tape.prototype.join = function(tapes) {
        var new_instance = new Tape();

        for (var i = 0; i < tapes.length; i++) {
            if (tapes[i] instanceof Tape) {
                new_instance.add_fragments(tapes[i].fragments);
            }
        }

        return new_instance;
    };

    Tape.prototype.getBuffer = function() {
        var samplerate = 44100;
        if (this.fragments.length > 0) {
            samplerate = this.fragments[0].samplerate;
        }
        var stream = new TapeStream(this, samplerate);
        var total_samples = (this.duration() * samplerate)|0;
        return {
            samplerate: samplerate,
            buffer    : stream.fetch(total_samples)
        };
    };

    function Fragment(soundbuffer, start, duration, reverse, pitch, stretch, pan) {
        if (!soundbuffer) {
            soundbuffer = silencebuffer;
        }
        this.buffer     = soundbuffer.buffer[0];
        this.samplerate = soundbuffer.samplerate || 44100;
        this.start     = start;
        this._duration = duration;
        this.reverse = reverse || false;
        this.pitch   = pitch   || 100;
        this.stretch = stretch || false;
        this.pan     = pan     || 50;
    }

    Fragment.prototype.duration = function() {
        return this._duration * (100 / this.pitch);
    };
    Fragment.prototype.original_duration = function() {
        return this._duration;
    };
    Fragment.prototype.isReversed = function() {
        return this.reverse;
    };
    Fragment.prototype.isStretched = function() {
        return this.stretched;
    };
    Fragment.prototype.create = function(remaining_start, remaining_length) {
        var duration = this.duration();
        if (remaining_start >= duration) {
            return [null, remaining_start - duration, remaining_length];
        }

        var have_remain_to_retuen = (remaining_start + remaining_length) >= duration;

        var new_length;
        if (have_remain_to_retuen) {
            new_length = duration - remaining_start;
            remaining_length -= new_length;
        } else {
            new_length = remaining_length;
            remaining_length = 0;
        }

        var new_fragment = this.clone();
        new_fragment.start     = this.start + remaining_start * this.pitch * 0.01;
        new_fragment._duration = new_length * this.pitch * 0.01;
        new_fragment.reverse   = false;
        return [new_fragment, 0, remaining_length];
    };

    Fragment.prototype.clone = function() {
        var new_instance = new Fragment();
        new_instance.buffer     = this.buffer;
        new_instance.samplerate = this.samplerate;
        new_instance.start     = this.start;
        new_instance._duration = this._duration;
        new_instance.reverse   = this.reverse;
        new_instance.pitch     = this.pitch;
        new_instance.stretch   = this.stretch;
        new_instance.pan       = this.pan;
        return new_instance;
    };
    Scissor.Fragment = Fragment;


    function TapeStream(tape, samplerate) {
        this.tape = tape;
        this.fragments  = tape.fragments;
        this.samplerate = samplerate || 44100;

        this.isEnded = false;
        this.buffer  = null;
        this.bufferIndex = 0;
        this.bufferIndexIncr  = 0;
        this.bufferBeginIndex = 0;
        this.bufferEndIndex   = 0;
        this.fragment      = null;
        this.fragmentIndex = 0;
        this.panL = 0.5;
        this.panR = 0.5;
    }
    Scissor.TapeStream = TapeStream;

    TapeStream.prototype.reset = function() {
        this.isEnded = false;
        this.buffer  = null;
        this.bufferIndex = 0;
        this.bufferIndexIncr  = 0;
        this.bufferBeginIndex = 0;
        this.bufferEndIndex   = 0;
        this.fragment      = null;
        this.fragmentIndex = 0;
        this.panL = 0.5;
        this.panR = 0.5;
        this.isLooped = false;
        return this;
    };

    TapeStream.prototype.fetch = function(n) {
        var cellL = new T.fn.SignalArray(n);
        var cellR = new T.fn.SignalArray(n);
        var fragments     = this.fragments;

        if (fragments.length === 0) {
            return [cellL, cellR];
        }

        var samplerate  = this.samplerate * 100;
        var buffer      = this.buffer;
        var bufferIndex = this.bufferIndex;
        var bufferIndexIncr = this.bufferIndexIncr;
        var bufferBeginIndex = this.bufferBeginIndex;
        var bufferEndIndex   = this.bufferEndIndex;
        var fragment      = this.fragment;
        var fragmentIndex = this.fragmentIndex;
        var pan;
        var panL = this.panL;
        var panR = this.panR;

        for (var i = 0; i < n; i++) {
            while (!buffer ||
                   bufferIndex < bufferBeginIndex || bufferIndex >= bufferEndIndex) {
                if (!fragment || fragmentIndex < fragments.length) {
                    fragment = fragments[fragmentIndex++];
                    buffer   = fragment.buffer;
                    bufferIndexIncr = fragment.samplerate / samplerate * fragment.pitch;
                    bufferBeginIndex = fragment.start * fragment.samplerate;
                    bufferEndIndex   = bufferBeginIndex + fragment.original_duration() * fragment.samplerate;

                    pan = (fragment.pan * 0.01);
                    panL = 1 - pan;
                    panR = pan;

                    if (fragment.reverse) {
                        bufferIndexIncr *= -1;
                        bufferIndex = bufferEndIndex + bufferIndexIncr;
                    } else {
                        bufferIndex = bufferBeginIndex;
                    }
                } else {
                    if (this.isLooped) {
                        buffer  = null;
                        bufferIndex = 0;
                        bufferIndexIncr  = 0;
                        bufferBeginIndex = 0;
                        bufferEndIndex   = 0;
                        fragment      = null;
                        fragmentIndex = 0;
                    } else {
                        this.isEnded = true;
                        buffer   = DummyBuffer;
                        bufferIndexIncr = 0;
                        bufferIndex = 0;
                        break;
                    }
                }
            }
            cellL[i] = buffer[bufferIndex|0] * panL;
            cellR[i] = buffer[bufferIndex|0] * panR;
            bufferIndex += bufferIndexIncr;
        }
        this.buffer      = buffer;
        this.bufferIndex = bufferIndex;
        this.bufferIndexIncr  = bufferIndexIncr;
        this.bufferBeginIndex = bufferBeginIndex;
        this.bufferEndIndex   = bufferEndIndex;
        this.fragment      = fragment;
        this.fragmentIndex = fragmentIndex;
        this.panL = panL;
        this.panR = panR;

        return [cellL, cellR];
    };

    T.modules.Scissor = Scissor;

})(timbre);
(function(T) {
    "use strict";

    function StereoDelay(samplerate) {
        this.samplerate = samplerate;

        var bits = Math.ceil(Math.log(samplerate * 1.5) * Math.LOG2E);

        this.buffersize = 1 << bits;
        this.buffermask = this.buffersize - 1;
        this.writeBufferL = new T.fn.SignalArray(this.buffersize);
        this.writeBufferR = new T.fn.SignalArray(this.buffersize);
        this.readBufferL = this.writeBufferL;
        this.readBufferR = this.writeBufferR;
        this.delaytime = null;
        this.feedback  = null;
        this.cross = null;
        this.mix   = null;
        this.prevL = 0;
        this.prevR = 0;

        this.readIndex  = 0;
        this.writeIndex = 0;

        this.setParams(125, 0.25, false, 0.45);
    }

    var $ = StereoDelay.prototype;

    $.setParams = function(delaytime, feedback, cross ,mix) {
        if (this.delaytime !== delaytime) {
            this.delaytime = delaytime;
            var offset = (delaytime * 0.001 * this.samplerate)|0;
            if (offset > this.buffermask) {
                offset = this.buffermask;
            }
            this.writeIndex = (this.readIndex + offset) & this.buffermask;
        }
        if (this.feedback !== feedback) {
            this.feedback = feedback;
        }
        if (this.cross !== cross) {
            this.cross = cross;
            if (cross) {
                this.readBufferL = this.writeBufferR;
                this.readBufferR = this.writeBufferL;
            } else {
                this.readBufferL = this.writeBufferL;
                this.readBufferR = this.writeBufferR;
            }
        }
        if (this.mix !== mix) {
            this.mix = mix;
        }
    };

    $.process = function(cellL, cellR) {
        var readBufferL = this.readBufferL;
        var readBufferR = this.readBufferR;
        var writeBufferL = this.writeBufferL;
        var writeBufferR = this.writeBufferR;
        var readIndex  = this.readIndex;
        var writeIndex = this.writeIndex;
        var mask = this.buffermask;
        var fb = this.feedback;
        var wet = this.mix, dry = 1 - wet;
        var prevL = this.prevL;
        var prevR = this.prevR;

        var x;
        var i, imax = cellL.length;

        for (i = 0; i < imax; ++i) {
            x = readBufferL[readIndex];
            writeBufferL[writeIndex] = cellL[i] - x * fb;
            cellL[i] = prevL = ((cellL[i] * dry) + (x * wet) + prevL) * 0.5;

            x = readBufferR[readIndex];
            writeBufferR[writeIndex] = cellR[i] - x * fb;
            cellR[i] = prevR = ((cellR[i] * dry) + (x * wet) + prevR) * 0.5;

            readIndex  += 1;
            writeIndex = (writeIndex + 1) & mask;
        }

        this.readIndex  = readIndex  & this.buffermask;
        this.writeIndex = writeIndex;
        this.prevL = prevL;
        this.prevR = prevR;
    };

    T.modules.StereoDelay = StereoDelay;

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var modules = T.modules;

    fn.register("audio", function(_args) {
        var BufferNode = fn.getClass("buffer");
        var instance = new BufferNode(_args);

        instance.playbackState = fn.FINISHED_STATE;
        instance._.isLoaded = false;

        Object.defineProperties(instance, {
            isLoaded: {
                get: function() {
                    return this._.isLoaded;
                }
            }
        });

        instance.load     = load;
        instance.loadthis = loadthis;

        return instance;
    });

    var load = function(src) {
        var self = this, _ = this._;
        var dfd = new modules.Deferred(this);

        var args = arguments, i = 1;

        dfd.done(function() {
            self._.emit("done");
        });

        if (typeof args[i] === "function") {
            dfd.done(args[i++]);
            if (typeof args[i] === "function") {
                dfd.fail(args[i++]);
            }
        }

        _.loadedTime = 0;

        var onloadedmetadata = function(result, msg) {
            var _ = self._;
            if (result) {
                self.playbackState = fn.PLAYING_STATE;
                _.samplerate = result.samplerate;
                _.channels   = result.channels;
                _.bufferMix  = null;
                _.buffer     = result.buffer;
                _.phase      = 0;
                _.phaseIncr  = result.samplerate / T.samplerate;
                _.duration   = result.duration * 1000;
                _.currentTime = 0;
                if (_.isReversed) {
                    _.phaseIncr *= -1;
                    _.phase = result.buffer[0].length + _.phaseIncr;
                }
                self._.emit("loadedmetadata");
            } else {
                dfd.reject(msg);
            }
        };

        var onloadeddata = function() {
            self._.isLoaded  = true;
            self._.plotFlush = true;
            self._.emit("loadeddata");
            dfd.resolveWith(self);
        };

        new modules.Decoder().decode(src, onloadedmetadata, onloadeddata);

        return dfd.promise();
    };

    var loadthis = function() {
        load.apply(this, arguments);
        return this;
    };

})(timbre);
(function(T) {
    "use strict";

    var fn  = T.fn;
    var FFT = T.modules.FFT;
    var Biquad = T.modules.Biquad;
    var PLOT_LOW_FREQ = 20;

    function BiquadNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var _ = this._;
        _.biquad = new Biquad(_.samplerate);
        _.freq = T(340);
        _.band = T(1);
        _.gain = T(0);

        _.plotBefore = plotBefore;
        _.plotRange  = [-18, 18];
        _.plotFlush  = true;
    }
    fn.extend(BiquadNode);

    var plotBefore = function(context, x, y, width, height) {
        context.lineWidth = 1;
        context.strokeStyle = "rgb(192, 192, 192)";
        var nyquist = this._.samplerate * 0.5;
        for (var i = 1; i <= 10; ++i) {
            for (var j = 1; j <= 4; j++) {
                var f = i * Math.pow(10, j);
                if (f <= PLOT_LOW_FREQ || nyquist <= f) {
                    continue;
                }
                context.beginPath();
                var _x = (Math.log(f/PLOT_LOW_FREQ)) / (Math.log(nyquist/PLOT_LOW_FREQ));
                _x = ((_x * width + x)|0) + 0.5;
                context.moveTo(_x, y);
                context.lineTo(_x, y + height);
                context.stroke();
            }
        }

        var h = height / 6;
        for (i = 1; i < 6; i++) {
            context.beginPath();
            var _y = ((y + (i * h))|0) + 0.5;
            context.moveTo(x, _y);
            context.lineTo(x + width, _y);
            context.stroke();
        }
    };

    var $ = BiquadNode.prototype;

    Object.defineProperties($, {
        type: {
            set: function(value) {
                var _ = this._;
                if (value !== _.biquad.type) {
                    _.biquad.setType(value);
                    _.plotFlush = true;
                }
            },
            get: function() {
                return this._.biquad.type;
            }
        },
        freq: {
            set: function(value) {
                this._.freq = T(value);
            },
            get: function() {
                return this._.freq;
            }
        },
        cutoff: {
            set: function(value) {
                this._.freq = T(value);
            },
            get: function() {
                return this._.freq;
            }
        },
        res: {
            set: function(value) {
                this._.band = T(value);
            },
            get: function() {
                return this._.band;
            }
        },
        Q: {
            set: function(value) {
                this._.band = T(value);
            },
            get: function() {
                return this._.band;
            }
        },
        band: {
            set: function(value) {
                this._.band = T(value);
            },
            get: function() {
                return this._.band;
            }
        },
        gain: {
            set: function(value) {
                this._.gain = T(value);
            },
            get: function() {
                return this._.gain;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);

            var freq = _.freq.process(tickID).cells[0][0];
            var band = _.band.process(tickID).cells[0][0];
            var gain = _.gain.process(tickID).cells[0][0];
            if (_.prevFreq !== freq || _.prevband !== band || _.prevGain !== gain) {
                _.prevFreq = freq;
                _.prevband = band;
                _.prevGain = gain;
                _.biquad.setParams(freq, band, gain);
                _.plotFlush = true;
            }

            if (!_.bypassed) {
                _.biquad.process(this.cells[1], this.cells[2]);
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    var fft = new FFT(2048);
    var super_plot = T.Object.prototype.plot;

    $.plot = function(opts) {
        if (this._.plotFlush) {
            var biquad = new Biquad(this._.samplerate);
            biquad.setType(this.type);
            biquad.setParams(this.freq.valueOf(), this.band.valueOf(), this.gain.valueOf());

            var impluse = new Float32Array(fft.length);
            impluse[0] = 1;

            biquad.process(impluse, impluse);
            fft.forward(impluse);

            var size = 512;
            var data = new Float32Array(size);
            var nyquist  = this._.samplerate * 0.5;
            var spectrum = new Float32Array(size);
            var i, j, f, index, delta, x0, x1, xx;

            fft.getFrequencyData(spectrum);
            for (i = 0; i < size; ++i) {
                f = Math.pow(nyquist / PLOT_LOW_FREQ, i / size) * PLOT_LOW_FREQ;
                j = f / (nyquist / spectrum.length);
                index = j|0;
                delta = j - index;
                if (index === 0) {
                    x1 = x0 = xx = spectrum[index];
                } else {
                    x0 = spectrum[index - 1];
                    x1 = spectrum[index];
                    xx = ((1.0 - delta) * x0 + delta * x1);
                }
                data[i] = xx;
            }
            this._.plotData  = data;
            this._.plotFlush = null;
        }
        return super_plot.call(this, opts);
    };

    fn.register("biquad", BiquadNode);
    fn.register("lowpass", function(_args) {
        return new BiquadNode(_args).set("type", "lowpass");
    });
    fn.register("highpass", function(_args) {
        return new BiquadNode(_args).set("type", "highpass");
    });
    fn.register("bandpass", function(_args) {
        return new BiquadNode(_args).set("type", "bandpass");
    });
    fn.register("lowshelf", function(_args) {
        return new BiquadNode(_args).set("type", "lowshelf");
    });
    fn.register("highshelf", function(_args) {
        return new BiquadNode(_args).set("type", "highshelf");
    });
    fn.register("peaking", function(_args) {
        return new BiquadNode(_args).set("type", "peaking");
    });
    fn.register("notch", function(_args) {
        return new BiquadNode(_args).set("type", "notch");
    });
    fn.register("allpass", function(_args) {
        return new BiquadNode(_args).set("type", "allpass");
    });

    fn.alias("lpf", "lowpass");
    fn.alias("hpf", "highpass");
    fn.alias("bpf", "bandpass");
    fn.alias("bef", "notch");
    fn.alias("brf", "notch");
    fn.alias("apf", "allpass");

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var Tape = T.modules.Scissor.Tape;
    var isSignalArray = function(obj) {
        return fn.isSignalArray(obj) || obj instanceof Float32Array;
    };

    function BufferNode(_args) {
        T.Object.call(this, 1, _args);
        fn.fixAR(this);

        var _ = this._;
        _.pitch      = T(1);
        _.samplerate = 44100;
        _.channels   = 0;
        _.bufferMix  = null;
        _.buffer     = [];
        _.isLooped   = false;
        _.isReversed = false;
        _.duration    = 0;
        _.currentTime = 0;
        _.currentTimeObj = null;
        _.phase = 0;
        _.phaseIncr = 0;
        _.onended  = fn.make_onended(this, 0);
        _.onlooped = make_onlooped(this);
    }
    fn.extend(BufferNode);

    var make_onlooped = function(self) {
        return function() {
            var _ = self._;
            if (_.phase >= _.buffer[0].length) {
                _.phase = 0;
            } else if (_.phase < 0) {
                _.phase = _.buffer[0].length + _.phaseIncr;
            }
            self._.emit("looped");
        };
    };

    var $ = BufferNode.prototype;

    var setBuffer = function(value) {
        var _ = this._;
        if (typeof value === "object") {
            var buffer = [], samplerate, channels;

            if (isSignalArray(value)) {
                buffer[0] = value;
                channels = 1;
            } else if (typeof value === "object") {
                if (value instanceof T.Object) {
                    value = value.buffer;
                } else if (value instanceof Tape) {
                    value = value.getBuffer();
                }
                if (Array.isArray(value.buffer)) {
                    if (isSignalArray(value.buffer[0])) {
                        if (isSignalArray(value.buffer[1]) &&
                            isSignalArray(value.buffer[2])) {
                            channels = 2;
                            buffer = value.buffer;
                        } else {
                            channels = 1;
                            buffer = [value.buffer[0]];
                        }
                    }
                } else if (isSignalArray(value.buffer)) {
                    channels = 1;
                    buffer = [value.buffer];
                }
                if (typeof value.samplerate === "number") {
                    samplerate = value.samplerate;
                }
            }
            if (buffer.length) {
                if (samplerate > 0) {
                    _.samplerate = value.samplerate;
                }
                _.bufferMix = null;
                _.buffer  = buffer;
                _.phase     = 0;
                _.phaseIncr = _.samplerate / T.samplerate;
                _.duration  = _.buffer[0].length * 1000 / _.samplerate;
                _.currentTime = 0;
                _.plotFlush = true;
                this.reverse(_.isReversed);
            }
        }
    };

    Object.defineProperties($, {
        buffer: {
            set: setBuffer,
            get: function() {
                var _ = this._;
                return {
                    samplerate: _.samplerate,
                    channels  : _.channels,
                    buffer    : _.buffer
                };
            }
        },
        pitch: {
            set: function(value) {
                this._.pitch = T(value);
            },
            get: function() {
                return this._.pitch;
            }
        },
        isLooped: {
            get: function() {
                return this._.isLooped;
            }
        },
        isReversed: {
            get: function() {
                return this._.isReversed;
            }
        },
        samplerate: {
            get: function() {
                return this._.samplerate;
            }
        },
        duration: {
            get: function() {
                return this._.duration;
            }
        },
        currentTime: {
            set: function(value) {
                if (typeof value === "number") {
                    var _ = this._;
                    if (0 <= value && value <= _.duration) {
                        _.phase = (value / 1000) * _.samplerate;
                        _.currentTime = value;
                    }
                } else if (value instanceof T.Object) {
                    this._.currentTimeObj = value;
                } else if (value === null) {
                    this._.currentTimeObj = null;
                }
            },
            get: function() {
                if (this._.currentTimeObj) {
                    return this._.currentTimeObj;
                } else {
                    return this._.currentTime;
                }
            }
        }
    });

    $.clone = function() {
        var _ = this._;
        var instance = fn.clone(this);

        if (_.buffer.length) {
            setBuffer.call(instance, {
                buffer    : _.buffer,
                samplerate: _.samplerate,
                channels  : _.channels
            });
        }
        instance.loop(_.isLooped);
        instance.reverse(_.isReversed);

        return instance;
    };

    $.slice = function(begin, end) {
        var _ = this._;
        var instance = T(_.originkey);
        var isReversed = _.isReversed;

        if (_.buffer.length) {
            if (typeof begin === "number" ){
                begin = (begin * 0.001 * _.samplerate)|0;
            } else {
                begin = 0;
            }
            if (typeof end === "number") {
                end   = (end   * 0.001 * _.samplerate)|0;
            } else {
                end = _.buffer[0].length;
            }
            if (begin > end) {
                var tmp = begin;
                begin = end;
                end   = tmp;
                isReversed = !isReversed;
            }

            if (_.channels === 2) {
                setBuffer.call(instance, {
                    buffer   : [ fn.pointer(_.buffer[0], begin, end-begin),
                                 fn.pointer(_.buffer[1], begin, end-begin),
                                 fn.pointer(_.buffer[2], begin, end-begin) ],
                    samplerate: _.samplerate
                });
            } else {
                setBuffer.call(instance, {
                    buffer: fn.pointer(_.buffer[0], begin, end-begin),
                    samplerate: _.samplerate
                });
            }
            instance.playbackState = fn.PLAYING_STATE;
        }
        instance.loop(_.isLooped);
        instance.reverse(_.isReversed);

        return instance;
    };

    $.reverse = function(value) {
        var _ = this._;

        _.isReversed = !!value;
        if (_.isReversed) {
            if (_.phaseIncr > 0) {
                _.phaseIncr *= -1;
            }
            if (_.phase === 0 && _.buffer.length) {
                _.phase = _.buffer[0].length + _.phaseIncr;
            }
        } else {
            if (_.phaseIncr < 0) {
                _.phaseIncr *= -1;
            }
        }

        return this;
    };

    $.loop = function(value) {
        this._.isLooped = !!value;
        return this;
    };

    $.bang = function(value) {
        this.playbackState = (value === false ? fn.FINISHED_STATE : fn.PLAYING_STATE);
        this._.phase = 0;
        this._.emit("bang");
        return this;
    };

    $.process = function(tickID) {
        var _ = this._;

        if (!_.buffer.length) {
            return this;
        }

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var cellL = this.cells[1];
            var cellR = this.cells[2];
            var phase  = _.phase;
            var i, imax = _.cellsize;

            var bufferL, bufferR;
            if (_.channels === 2) {
                bufferL = _.buffer[1];
                bufferR = _.buffer[2];
            } else {
                bufferL = bufferR = _.buffer[0];
            }

            if (_.currentTimeObj) {
                var pos = _.currentTimeObj.process(tickID).cells[0];
                var t, sr = _.samplerate * 0.001;
                for (i = 0; i < imax; ++i) {
                    t = pos[i];
                    phase = t * sr;
                    cellL[i] = (bufferL[phase|0] || 0);
                    cellR[i] = (bufferR[phase|0] || 0);
                }
                _.phase = phase;
                _.currentTime = t;
            } else {
                var pitch  = _.pitch.process(tickID).cells[0][0];
                var phaseIncr = _.phaseIncr * pitch;

                for (i = 0; i < imax; ++i) {
                    cellL[i] = (bufferL[phase|0] || 0);
                    cellR[i] = (bufferR[phase|0] || 0);
                    phase += phaseIncr;
                }

                if (phase >= bufferL.length) {
                    if (_.isLooped) {
                        fn.nextTick(_.onlooped);
                    } else {
                        fn.nextTick(_.onended);
                    }
                } else if (phase < 0) {
                    if (_.isLooped) {
                        fn.nextTick(_.onlooped);
                    } else {
                        fn.nextTick(_.onended);
                    }
                }
                _.phase = phase;
                _.currentTime += fn.currentTimeIncr;
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    var super_plot = T.Object.prototype.plot;

    $.plot = function(opts) {
        var _ = this._;
        var bufferL, bufferR;
        if (_.plotFlush) {
            if (_.channels === 2) {
                bufferL = _.buffer[1];
                bufferR = _.buffer[2];
            } else {
                bufferL = bufferR = _.buffer[0];
            }
            var data = new Float32Array(2048);
            var x = 0, xIncr = bufferL.length / 2048;
            for (var i = 0; i < 2048; i++) {
                data[i] = (bufferL[x|0] + bufferR[x|0]) * 0.5;
                x += xIncr;
            }
            _.plotData  = data;
            _.plotFlush = null;
        }
        return super_plot.call(this, opts);
    };

    fn.register("buffer", BufferNode);

})(timbre);
(function(T) {
    "use strict";

    var fn  = T.fn;
    var Chorus = T.modules.Chorus;

    function ChorusNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var chorus = new Chorus(this._.samplerate);
        chorus.setDelayTime(20);
        chorus.setRate(4);
        chorus.depth = 20;
        chorus.feedback = 0.2;
        chorus.mix = 0.33;
        this._.chorus = chorus;
    }
    fn.extend(ChorusNode);

    var $ = ChorusNode.prototype;

    Object.defineProperties($, {
        type: {
            set: function(value) {
                this._.chorus.setDelayTime(value);
            },
            get: function() {
                return this._.chorus.wave;
            }
        },
        delay: {
            set: function(value) {
                if (0.5 <= value && value <= 80) {
                    this._.chorus.setDelayTime(value);
                }
            },
            get: function() {
                return this._.chorus.delayTime;
            }
        },
        rate: {
            set: function(value) {
                if (typeof value === "number" && value > 0) {
                    this._.chorus.setRate(value);
                }
            },
            get: function() {
                return this._.chorus.rate;
            }
        },
        depth: {
            set: function(value) {
                if (typeof value === "number") {
                    if (0 <= value && value <= 100) {
                        value *= this._.samplerate / 44100;
                        this._.chorus.depth = value;
                    }
                }
            },
            get: function() {
                return this._.chorus.depth;
            }
        },
        fb: {
            set: function(value) {
                if (typeof value === "number") {
                    if (-1 <= value && value <= 1) {
                        this._.chorus.feedback = value * 0.99996;
                    }
                }
            },
            get: function() {
                return this._.chorus.feedback;
            }
        },
        mix: {
            set: function(value) {
                this._.mix = T(value);
            },
            get: function() {
                return this._.mix;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);

            if (!_.bypassed) {
                _.chorus.process(this.cells[1], this.cells[2]);
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("chorus", ChorusNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function ClipNode(_args) {
        T.Object.call(this, 2, _args);

        var _ = this._;
        _.min = -0.8;
        _.max = +0.8;
    }
    fn.extend(ClipNode);

    var $ = ClipNode.prototype;

    Object.defineProperties($, {
        minmax: {
            set: function(value) {
                var _ = this._;
                if (typeof value === "number") {
                    _.min = -Math.abs(value);
                    _.max = -_.min;
                }
            },
            get: function() {
                return this._.max;
            }
        },
        min: {
            set: function(value) {
                var _ = this._;
                if (typeof value === "number") {
                    if (_.max < value) {
                        _.max = value;
                    } else {
                        _.min = value;
                    }
                }
            },
            get: function() {
                return this._.min;
            }
        },
        max: {
            set: function(value) {
                var _ = this._;
                if (typeof value === "number") {
                    if (value < _.min) {
                        _.min = value;
                    } else {
                        _.max = value;
                    }
                }
            },
            get: function() {
                return this._.max;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var cellL = this.cells[1];
            var cellR = this.cells[2];
            var i, imax = cellL.length;
            var min = _.min, max = _.max;
            var value;

            if (_.ar) {
                fn.inputSignalAR(this);
                for (i = 0; i < imax; ++i) {
                    value = cellL[i];
                    if (value < min) {
                        value = min;
                    } else if (value > max) {
                        value = max;
                    }
                    cellL[i] = value;
                    value = cellR[i];
                    if (value < min) {
                        value = min;
                    } else if (value > max) {
                        value = max;
                    }
                    cellR[i] = value;
                }
                fn.outputSignalAR(this);
            } else {
                value = fn.inputSignalKR(this);
                if (value < min) {
                    value = min;
                } else if (value > max) {
                    value = max;
                }
                this.cells[0][0] = value;
                fn.outputSignalKR(this);
            }
        }
        return this;
    };

    fn.register("clip", ClipNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;
    var Compressor = T.modules.Compressor;

    function CompressorNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var _ = this._;
        _.prevThresh = -24;
        _.prevKnee   =  30;
        _.prevRatio  =  12;
        _.thresh = T(_.prevThresh);
        _.knee   = T(_.prevKnee);
        _.ratio  = T(_.prevRatio);
        _.postGain  = 6;
        _.reduction = 0;
        _.attack = 3;
        _.release = 25;

        _.comp = new Compressor(_.samplerate);
        _.comp.dbPostGain = _.postGain;
        _.comp.setAttackTime(_.attack * 0.001);
        _.comp.setReleaseTime(_.release * 0.001);
        _.comp.setPreDelayTime(6);
        _.comp.setParams(_.prevThresh, _.prevKnee, _.prevRatio);
    }
    fn.extend(CompressorNode);

    var $ = CompressorNode.prototype;

    Object.defineProperties($, {
        thresh: {
            set: function(value) {
                this._.thresh = T(value);
            },
            get: function() {
                return this._.thresh;
            }
        },
        thre: {
            set: function(value) {
                this._.thresh = T(value);
            },
            get: function() {
                return this._.thre;
            }
        },
        knee: {
            set: function(value) {
                this._.kne = T(value);
            },
            get: function() {
                return this._.knee;
            }
        },
        ratio: {
            set: function(value) {
                this._.ratio = T(value);
            },
            get: function() {
                return this._.ratio;
            }
        },
        gain: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.comp.dbPostGain = value;
                }
            },
            get: function() {
                return this._.comp.dbPostGain;
            }
        },
        attack: {
            set: function(value) {
                if (typeof value === "string") {
                    value = timevalue(value);
                }
                if (typeof value === "number") {
                    value = (value < 0) ? 0 : (1000 < value) ? 1000 : value;
                    this._.attack = value;
                    this._.comp.setAttackTime(value * 0.001);
                }
            },
            get: function() {
                return this._.attack;
            }
        },
        release: {
            set: function(value) {
                if (typeof value === "string") {
                    value = timevalue(value);
                }
                if (typeof value === "number") {
                    value = (value < 0) ? 0 : (1000 < value) ? 1000 : value;
                    this._.release = value;
                    this._.comp.setReleaseTime(value * 0.001);
                }
            },
            get: function() {
                return this._.release;
            }
        },
        reduction: {
            get: function() {
                return this._.reduction;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);

            var thresh = _.thresh.process(tickID).cells[0][0];
            var knee   = _.knee.process(tickID).cells[0][0];
            var ratio  = _.ratio.process(tickID).cells[0][0];
            if (_.prevThresh !== thresh || _.prevKnee !== knee || _.prevRatio !== ratio) {
                _.prevThresh = thresh;
                _.prevKnee   = knee;
                _.prevRatio  = ratio;
                _.comp.setParams(thresh, knee, ratio);
            }

            if (!_.bypassed) {
                _.comp.process(this.cells[1], this.cells[2]);
                _.reduction = _.comp.meteringGain;
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("comp", CompressorNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;
    var StereoDelay = T.modules.StereoDelay;

    function DelayNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var _ = this._;
        _.time  = T(100);
        _.fb    = T(0.2);
        _.cross = T(false);
        _.mix   = 0.33;

        _.delay = new StereoDelay(_.samplerate);
    }
    fn.extend(DelayNode);

    var $ = DelayNode.prototype;

    Object.defineProperties($, {
        time: {
            set: function(value) {
                if (typeof value === "string") {
                    value = timevalue(value);
                }
                this._.time = T(value);
            },
            get: function() {
                return this._.time;
            }
        },
        fb: {
            set: function(value) {
                this._.fb = T(value);
            },
            get: function() {
                return this._.fb;
            }
        },
        cross: {
            set: function(value) {
                this._.cross = T(value);
            },
            get: function() {
                return this._.cross;
            }
        },
        mix: {
            set: function(value) {
                if (typeof value === "number") {
                    value = (value > 1) ? 1 : (value < 0) ? 0 : value;
                    this._.mix = value;
                }
            },
            get: function() {
                return this._.mix;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var time  = _.time.process(tickID).cells[0][0];
            var fb    = _.fb.process(tickID).cells[0][0];
            var cross = _.cross.process(tickID).cells[0][0] !== 0;
            var mix   = _.mix;

            if (_.prevTime !== time || _.prevFb !== fb || _.prevCross !== cross || _.prevMix !== mix) {
                _.prevTime  = time;
                _.prevFb    = fb;
                _.prevCross = cross;
                _.prevMix   = mix;
                _.delay.setParams(time, fb, cross, mix);
            }

            fn.inputSignalAR(this);

            if (!_.bypassed) {
                _.delay.process(this.cells[1], this.cells[2]);
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("delay", DelayNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function DistNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var _ = this._;
        _.pre  = T( 60);
        _.post = T(-18);
        _.x1L = _.x2L = _.y1L = _.y2L = 0;
        _.x1R = _.x2R = _.y1R = _.y2R = 0;
        _.b0 = _.b1 = _.b2 = _.a1 = _.a2 = 0;
        _.cutoff = 0;
        _.Q = 1;
        _.preScale = 0;
        _.postScale = 0;
    }
    fn.extend(DistNode);

    var $ = DistNode.prototype;

    Object.defineProperties($, {
        cutoff: {
            set: function(value) {
                if (typeof value === "number" && value > 0) {
                    this._.cutoff = value;
                }
            },
            get: function() {
                return this._.cutoff;
            }
        },
        pre: {
            set: function(value) {
                this._.pre = T(value);
            },
            get: function() {
                return this._.pre;
            }
        },
        post: {
            set: function(value) {
                this._.post = T(value);
            },
            get: function() {
                return this._.post;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);

            var preGain  = -_.pre.process(tickID).cells[0][0];
            var postGain = -_.post.process(tickID).cells[0][0];

            if (_.prevPreGain !== preGain || _.prevPostGain !== postGain) {
                _.prevPreGain  = preGain;
                _.prevPostGain = postGain;
                _.preScale  = Math.pow(10, -preGain  * 0.05);
                _.postScale = Math.pow(10, -postGain * 0.05);
            }

            if (!_.bypassed) {
                var cellL = this.cells[1];
                var cellR = this.cells[2];
                var preScale  = _.preScale;
                var postScale = _.postScale;
                var i, imax, value, x0, y0;

                if (_.cutoff) {
                    if (_.prevCutoff !== _.cutoff) {
                        _.prevCutoff = _.cutoff;
                        lowpass_params(_);
                    }

                    var x1L = _.x1L, x2L = _.x2L, y1L = _.y1L, y2L = _.y2L;
                    var x1R = _.x1R, x2R = _.x2R, y1R = _.y1R, y2R = _.y2R;
                    var b0 = _.b0, b1 = _.b1, b2 = _.b2, a1 = _.a1, a2 = _.a2;

                    for (i = 0, imax = cellL.length; i < imax; ++i) {
                        x0 = cellL[i] * preScale;
                        y0 = b0 * x0 + b1 * x1L + b2 * x2L - a1 * y1L - a2 * y2L;
                        value = y0 * postScale;
                        if (value < -1) {
                            value = -1;
                        } else if (value > 1) {
                            value = 1;
                        }
                        cellL[i] = value;
                        x2L = x1L; x1L = x0; y2L = y1L; y1L = y0;

                        x0 = cellR[i] * preScale;
                        y0 = b0 * x0 + b1 * x1R + b2 * x2R - a1 * y1R - a2 * y2R;
                        value = y0 * postScale;
                        if (value < -1) {
                            value = -1;
                        } else if (value > 1) {
                            value = 1;
                        }
                        cellR[i] = value;
                        x2R = x1R; x1R = x0; y2R = y1R; y1R = y0;
                    }

                    _.x1L = x1L; _.x2L = x2L; _.y1L = y1L; _.y2L = y2L;
                    _.x1R = x1R; _.x2R = x2R; _.y1R = y1R; _.y2R = y2R;
                } else {
                    for (i = 0, imax = cellL.length; i < imax; ++i) {
                        value = cellL[i] * preScale * postScale;
                        if (value < -1) {
                            value = -1;
                        } else if (value > 1) {
                            value = 1;
                        }
                        cellL[i] = value;

                        value = cellR[i] * preScale * postScale;
                        if (value < -1) {
                            value = -1;
                        } else if (value > 1) {
                            value = 1;
                        }
                        cellR[i] = value;
                    }
                }
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    var lowpass_params = function(_) {
        var w0 = 2 * Math.PI * _.cutoff / _.samplerate;
        var cos = Math.cos(w0);
        var sin = Math.sin(w0);
        var alpha = sin / (2 * _.Q);

        var ia0 = 1 / (1 + alpha);
        _.b0 =  (1 - cos) * 0.5 * ia0;
        _.b1 =   1 - cos * ia0;
        _.b2 =  (1 - cos) * 0.5 * ia0;
        _.a1 =  -2 * cos * ia0;
        _.a2 =   1 - alpha * ia0;
    };

    fn.register("dist", DistNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function DivNode(_args) {
        T.Object.call(this, 2, _args);
        this._.ar = false;
    }
    fn.extend(DivNode);

    var $ = DivNode.prototype;

    $.process = function(tickID) {
            var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var nodes = this.nodes;
            var cell  = this.cells[0];
            var cellL = this.cells[1];
            var cellR = this.cells[2];
            var i, imax = nodes.length;
            var j, jmax = cell.length;
            var tmp, tmpL, tmpR, div;

            if (_.ar) {
                if (nodes.length > 0) {
                    nodes[0].process(tickID);
                    tmpL = nodes[0].cells[1];
                    tmpR = nodes[0].cells[2];
                    cellL.set(tmpL);
                    cellR.set(tmpR);
                    for (i = 1; i < imax; ++i) {
                        nodes[i].process(tickID);
                        tmpL = nodes[i].cells[1];
                        tmpR = nodes[i].cells[2];
                        for (j = 0; j < jmax; ++j) {
                            div = tmpL[j];
                            cellL[j] = (div === 0) ? 0 : cellL[j] / div;
                            div = tmpR[j];
                            cellR[j] = (div === 0) ? 0 : cellR[j] / div;
                        }
                    }
                } else {
                    for (j = 0; j < jmax; ++j) {
                        cellL[j] = cellR[i] = 0;
                    }
                }
                fn.outputSignalAR(this);
            } else {
                if (nodes.length > 0) {
                    tmp = nodes[0].process(tickID).cells[0][0];
                    for (i = 1; i < imax; ++i) {
                        div = nodes[i].process(tickID).cells[0][0];
                        tmp = (div === 0) ? 0 : tmp / div;
                    }
                } else {
                    tmp = 0;
                }
                cell[0] = tmp;
                fn.outputSignalKR(this);
            }
        }

        return this;
    };

    fn.register("/", DivNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;
    var Envelope  = T.modules.Envelope;
    var isDictionary = fn.isDictionary;

    function EnvNode(_args) {
        T.Object.call(this, 2, _args);
        var _ = this._;
        _.env = new Envelope(_.samplerate);
        _.env.setStep(_.cellsize);
        _.tmp = new fn.SignalArray(_.cellsize);
        _.ar = false;
        _.plotFlush = true;
        _.onended = make_onended(this);
        this.on("ar", onar);
    }
    fn.extend(EnvNode);

    var onar = function(value) {
        this._.env.setStep((value) ? 1 : this._.cellsize);
    };

    var make_onended = function(self) {
        return function() {
            self._.emit("ended");
        };
    };

    var $ = EnvNode.prototype;

    Object.defineProperties($, {
        table: {
            set: function(value) {
                if (Array.isArray(value)) {
                    setTable.call(this, value);
                    this._.plotFlush = true;
                }
            },
            get: function() {
                return this._.env.table;
            }
        },
        curve: {
            set: function(value) {
                this._.env.setCurve(value);
            },
            get: function() {
                return this._.env.curve;
            }
        },
        releaseNode: {
            set: function(value) {
                this._.env.setReleaseNode(value);
                this._.plotFlush = true;
            },
            get: function() {
                return this._.env.releaseNode + 1;
            }
        },
        loopNode: {
            set: function(value) {
                this._.env.setLoopNode(value);
                this._.plotFlush = true;
            },
            get: function() {
                return this._.env.loopNode + 1;
            }
        }
    });

    $.clone = function() {
        var instance = fn.clone(this);
        instance._.env = this._.env.clone();
        return instance;
    };

    $.reset = function() {
        this._.env.reset();
        return this;
    };

    $.release = function() {
        var _ = this._;
        _.env.release();
        _.emit("released");
        return this;
    };

    $.bang = function() {
        var _ = this._;
        _.env.reset();
        _.env.status = Envelope.StatusGate;
        _.emit("bang");
        return this;
    };

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var cellL = this.cells[1];
            var cellR = this.cells[2];
            var i, imax = _.cellsize;

            if (this.nodes.length) {
                fn.inputSignalAR(this);
            } else {
                for (i = 0; i < imax; ++i) {
                    cellL[i] = cellR[i] = 1;
                }
            }

            var value, emit = null;
            if (_.ar) {
                var tmp = _.tmp;
                _.env.process(tmp);
                for (i = 0; i < imax; ++i) {
                    cellL[i] *= tmp[i];
                    cellR[i] *= tmp[i];
                }
                emit = _.env.emit;
            } else {
                value = _.env.next();
                for (i = 0; i < imax; ++i) {
                    cellL[i] *= value;
                    cellR[i] *= value;
                }
                emit = _.env.emit;
            }

            fn.outputSignalAR(this);

            if (emit) {
                if (emit === "ended") {
                    fn.nextTick(_.onended);
                } else {
                    this._.emit(emit, _.value);
                }
            }
        }

        return this;
    };

    var setTable = function(list) {
        var env = this._.env;

        var table = [list[0] || ZERO];

        var value, time, curveType, curveValue;
        for (var i = 1, imax = list.length; i < imax; ++i) {
            value = list[i][0] || ZERO;
            time  = list[i][1];
            curveType = list[i][2];

            if (typeof time !== "number") {
                if (typeof time === "string") {
                    time = timevalue(time);
                } else {
                    time = 10;
                }
            }
            if (time < 10) {
                time = 10;
            }

            if (typeof curveType === "number") {
                curveValue = curveType;
                curveType  = Envelope.CurveTypeCurve;
            } else {
                curveType  = Envelope.CurveTypeDict[curveType] || null;
                curveValue = 0;
            }
            table.push([value, time, curveType, curveValue]);
        }

        env.setTable(table);
    };

    var super_plot = T.Object.prototype.plot;

    $.plot = function(opts) {
        if (this._.plotFlush) {
            var env = this._.env.clone();
            var info = env.getInfo(1000);

            var totalDuration    = info.totalDuration;
            var loopBeginTime    = info.loopBeginTime;
            var releaseBeginTime = info.releaseBeginTime;
            var data = new Float32Array(256);
            var duration = 0;
            var durationIncr = totalDuration / data.length;
            var isReleased   = false;
            var samples = (totalDuration * 0.001 * this._.samplerate)|0;
            var i, imax;

            samples /= data.length;
            env.setStep(samples);
            env.status = Envelope.StatusGate;
            for (i = 0, imax = data.length; i < imax; ++i) {
                data[i] = env.next();
                duration += durationIncr;
                if (!isReleased && duration >= releaseBeginTime) {
                    env.release();
                    isReleased = true;
                }
            }
            this._.plotData = data;

            this._.plotBefore = function(context, x, y, width, height) {
                var x1, w;
                if (loopBeginTime !== Infinity && releaseBeginTime !== Infinity) {
                    x1 = x + (width * (loopBeginTime    / totalDuration));
                    w  = x + (width * (releaseBeginTime / totalDuration));
                    w  = w - x1;
                    context.fillStyle = "rgba(224, 224, 224, 0.8)";
                    context.fillRect(x1, 0, w, height);
                }
                if (releaseBeginTime !== Infinity) {
                    x1 = x + (width * (releaseBeginTime / totalDuration));
                    w  = width - x1;
                    context.fillStyle = "rgba(212, 212, 212, 0.8)";
                    context.fillRect(x1, 0, w, height);
                }
            };

            // y-range
            var minValue = Infinity, maxValue = -Infinity;
            for (i = 0; i < imax; ++i) {
                if (data[i] < minValue) {
                    minValue = data[i];
                } else if (data[i] > maxValue) {
                    maxValue = data[i];
                }
            }
            if (maxValue < 1) {
                maxValue = 1;
            }
            this._.plotRange = [minValue, maxValue];

            this._.plotData  = data;
            this._.plotFlush = null;
        }
        return super_plot.call(this, opts);
    };
    fn.register("env", EnvNode);


    function envValue(opts, min, def, name1, name2, func) {
        var x = def;
        if (typeof opts[name1] === "number") {
            x = opts[name1];
        } else if (typeof opts[name2] === "number") {
            x = opts[name2];
        } else if (func) {
            if (typeof opts[name1] === "string") {
                x = func(opts[name1]);
            } else if (typeof opts[name2] === "string") {
                x = func(opts[name2]);
            }
        }
        if (x < min) {
            x = min;
        }
        return x;
    }

    var ZERO = Envelope.ZERO;

    fn.register("perc", function(_args) {
        if (!isDictionary(_args[0])) {
            _args.unshift({});
        }

        var opts = _args[0];
        var a  = envValue(opts,   10,   10, "a" , "attackTime" , timevalue);
        var r  = envValue(opts,   10, 1000, "r" , "releaseTime", timevalue);
        var lv = envValue(opts, ZERO,    1, "lv", "level"     );

        opts.table = [ZERO, [lv, a], [ZERO, r]];

        return new EnvNode(_args);
    });

    fn.register("adsr", function(_args) {
        if (!isDictionary(_args[0])) {
            _args.unshift({});
        }

        var opts = _args[0];
        var a  = envValue(opts,   10,   10, "a" , "attackTime"  , timevalue);
        var d  = envValue(opts,   10,  300, "d" , "decayTime"   , timevalue);
        var s  = envValue(opts, ZERO,  0.5, "s" , "sustainLevel");
        var r  = envValue(opts,   10, 1000, "r" , "decayTime"   , timevalue);
        var lv = envValue(opts, ZERO,    1, "lv", "level"       );

        opts.table = [ZERO, [lv, a], [s, d], [ZERO, r]];
        opts.releaseNode = 3;

        return new EnvNode(_args);
    });

    fn.register("adshr", function(_args) {
        if (!isDictionary(_args[0])) {
            _args.unshift({});
        }

        var opts = _args[0];
        var a  = envValue(opts,   10,   10, "a" , "attackTime"  , timevalue);
        var d  = envValue(opts,   10,  300, "d" , "decayTime"   , timevalue);
        var s  = envValue(opts, ZERO,  0.5, "s" , "sustainLevel");
        var h  = envValue(opts,   10,  500, "h" , "holdTime"    , timevalue);
        var r  = envValue(opts,   10, 1000, "r" , "decayTime"   , timevalue);
        var lv = envValue(opts, ZERO,    1, "lv", "level"       );

        opts.table = [ZERO, [lv, a], [s, d], [s, h], [ZERO, r]];

        return new EnvNode(_args);
    });

    fn.register("asr", function(_args) {
        if (!isDictionary(_args[0])) {
            _args.unshift({});
        }

        var opts = _args[0];
        var a  = envValue(opts,   10,   10, "a" , "attackTime"  , timevalue);
        var s  = envValue(opts, ZERO,  0.5, "s" , "sustainLevel");
        var r  = envValue(opts,   10, 1000, "r" , "releaseTime" , timevalue);

        opts.table = [ZERO, [s, a], [ZERO, r]];
        opts.releaseNode = 2;

        return new EnvNode(_args);
    });

    fn.register("dadsr", function(_args) {
        if (!isDictionary(_args[0])) {
            _args.unshift({});
        }

        var opts = _args[0];
        var dl = envValue(opts,   10,  100, "dl", "delayTime"   , timevalue);
        var a  = envValue(opts,   10,   10, "a" , "attackTime"  , timevalue);
        var d  = envValue(opts,   10,  300, "d" , "decayTime"   , timevalue);
        var s  = envValue(opts, ZERO,  0.5, "s" , "sustainLevel");
        var r  = envValue(opts,   10, 1000, "r" , "relaseTime"  , timevalue);
        var lv = envValue(opts, ZERO,    1, "lv", "level"       );

        opts.table = [ZERO, [ZERO, dl], [lv, a], [s, d], [ZERO, r]];
        opts.releaseNode = 4;

        return new EnvNode(_args);
    });

    fn.register("ahdsfr", function(_args) {
        if (!isDictionary(_args[0])) {
            _args.unshift({});
        }

        var opts = _args[0];
        var a  = envValue(opts,   10,   10, "a" , "attackTime"  , timevalue);
        var h  = envValue(opts,   10,   10, "h" , "holdTime"    , timevalue);
        var d  = envValue(opts,   10,  300, "d" , "decayTime"   , timevalue);
        var s  = envValue(opts, ZERO,  0.5, "s" , "sustainLevel");
        var f  = envValue(opts,   10, 5000, "f" , "fadeTime"    , timevalue);
        var r  = envValue(opts,   10, 1000, "r" , "relaseTime"  , timevalue);
        var lv = envValue(opts, ZERO,    1, "lv", "level"       );

        opts.table = [ZERO, [lv, a], [lv, h], [s, d], [ZERO, f], [ZERO, r]];
        opts.releaseNode = 5;

        return new EnvNode(_args);
    });

    fn.register("linen", function(_args) {
        if (!isDictionary(_args[0])) {
            _args.unshift({});
        }

        var opts = _args[0];
        var a  = envValue(opts,   10,   10, "a" , "attackTime" , timevalue);
        var s  = envValue(opts,   10, 1000, "s" , "sustainTime", timevalue);
        var r  = envValue(opts,   10, 1000, "r" , "releaseTime", timevalue);
        var lv = envValue(opts, ZERO,    1, "lv", "level"      );

        opts.table = [ZERO, [lv, a], [lv, s], [ZERO, r]];

        return new EnvNode(_args);
    });

    fn.register("env.tri", function(_args) {
        if (!isDictionary(_args[0])) {
            _args.unshift({});
        }

        var opts = _args[0];
        var dur = envValue(opts,   20, 1000, "dur", "duration", timevalue);
        var lv  = envValue(opts, ZERO,    1, "lv" , "level"   );

        dur *= 0.5;
        opts.table = [ZERO, [lv, dur], [ZERO, dur]];

        return new EnvNode(_args);
    });

    fn.register("env.cutoff", function(_args) {
        if (!isDictionary(_args[0])) {
            _args.unshift({});
        }

        var opts = _args[0];
        var r  = envValue(opts,   10, 100, "r" , "relaseTime", timevalue);
        var lv = envValue(opts, ZERO,   1, "lv", "level"    );

        opts.table = [lv, [ZERO, r]];

        return new EnvNode(_args);
    });

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var FFT = T.modules.FFT;
    var Biquad = T.modules.Biquad;
    var PLOT_LOW_FREQ = 20;
    var PARAM_NAMES = {
        hpf:0, lf:1, lmf:2, mf:3, hmf:4, hf:5, lpf:6
    };

    function EQNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var _ = this._;
        _.biquads = new Array(7);

        _.plotBefore = plotBefore;
        _.plotRange  = [-18, 18];
        _.plotFlush  = true;
    }
    fn.extend(EQNode);

    var plotBefore = function(context, x, y, width, height) {
        context.lineWidth = 1;
        context.strokeStyle = "rgb(192, 192, 192)";
        var nyquist = this._.samplerate * 0.5;
        for (var i = 1; i <= 10; ++i) {
            for (var j = 1; j <= 4; j++) {
                var f = i * Math.pow(10, j);
                if (f <= PLOT_LOW_FREQ || nyquist <= f) {
                    continue;
                }
                context.beginPath();
                var _x = (Math.log(f/PLOT_LOW_FREQ)) / (Math.log(nyquist/PLOT_LOW_FREQ));
                _x = ((_x * width + x)|0) + 0.5;
                context.moveTo(_x, y);
                context.lineTo(_x, y + height);
                context.stroke();
            }
        }

        var h = height / 6;
        for (i = 1; i < 6; i++) {
            context.beginPath();
            var _y = ((y + (i * h))|0) + 0.5;
            context.moveTo(x, _y);
            context.lineTo(x + width, _y);
            context.stroke();
        }
    };

    var $ = EQNode.prototype;

    Object.defineProperties($, {
        params: {
            set: function(value) {
                if (typeof value === "object") {
                    var keys = Object.keys(value);
                    for (var i = 0, imax = keys.length; i < imax; ++i) {
                        var items = value[keys[i]];
                        if (Array.isArray(items)) {
                            this.setParams(keys[i], items[0], items[1], items[2]);
                        } else {
                            this.setParams(keys[i]);
                        }
                    }
                }
            }
        }
    });

    $.setParams = function(index, freq, Q, gain) {
        var _ = this._;
        if (typeof index === "string") {
            index = PARAM_NAMES[index];
        }
        if (0 <= index && index < _.biquads.length) {
            index |= 0;
            if (typeof freq === "number" && typeof Q === "number") {
                if (typeof gain !== "number") {
                    gain = 0;
                }
                var biquad = _.biquads[index];
                if (!biquad) {
                    biquad = _.biquads[index] = new Biquad(_.samplerate);
                    switch (index) {
                    case 0:
                        biquad.setType("highpass");
                        break;
                    case _.biquads.length - 1:
                        biquad.setType("lowpass");
                        break;
                    default:
                        biquad.setType("peaking");
                        break;
                    }
                }
                biquad.setParams(freq, Q, gain);
            } else {
                _.biquads[index] = undefined;
            }
            _.plotFlush = true;
        }
        return this;
    };

    $.getParams = function(index) {
        var _ = this._;
        var biquad = _.biquads[index|0];
        if (biquad) {
            return {freq:biquad.frequency, Q:biquad.Q, gain:biquad.gain};
        }
    };

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);

            if (!_.bypassed) {
                var cellL = this.cells[1];
                var cellR = this.cells[2];
                var biquads = _.biquads;
                for (var i = 0, imax = biquads.length; i < imax; ++i) {
                    if (biquads[i]) {
                        biquads[i].process(cellL, cellR);
                    }
                }
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    var fft = new FFT(2048);
    var super_plot = T.Object.prototype.plot;

    $.plot = function(opts) {
        if (this._.plotFlush) {
            var _ = this._;
            var impluse = new Float32Array(fft.length);
            impluse[0] = 1;
            for (var i = 0, imax = _.biquads.length; i < imax; ++i) {
                var params = this.getParams(i);
                if (params) {
                    var biquad = new Biquad(_.samplerate);
                    if (i === 0) {
                        biquad.setType("highpass");
                    } else if (i === imax - 1) {
                        biquad.setType("lowpass");
                    } else {
                        biquad.setType("peaking");
                    }
                    biquad.setParams(params.freq, params.Q, params.gain);
                    biquad.process(impluse, impluse);
                }
            }

            fft.forward(impluse);

            var size = 512;
            var data = new Float32Array(size);
            var nyquist  = _.samplerate * 0.5;
            var spectrum = new Float32Array(size);
            var j, f, index, delta, x0, x1, xx;

            fft.getFrequencyData(spectrum);
            for (i = 0; i < size; ++i) {
                f = Math.pow(nyquist / PLOT_LOW_FREQ, i / size) * PLOT_LOW_FREQ;
                j = f / (nyquist / spectrum.length);
                index = j|0;
                delta = j - index;
                if (index === 0) {
                    x1 = x0 = xx = spectrum[index];
                } else {
                    x0 = spectrum[index - 1];
                    x1 = spectrum[index];
                    xx = ((1.0 - delta) * x0 + delta * x1);
                }
                data[i] = xx;
            }
            this._.plotData  = data;
            this._.plotFlush = null;
        }
        return super_plot.call(this, opts);
    };

    fn.register("eq", EQNode);

})(timbre);
(function(T) {
    "use strict";

    var fn  = T.fn;
    var FFT = T.modules.FFT;

    function FFTNode(_args) {
        T.Object.call(this, 2, _args);
        fn.listener(this);
        fn.fixAR(this);

        this.real = new T.ChannelObject(this);
        this.imag = new T.ChannelObject(this);
        this.cells[3] = this.real.cell;
        this.cells[4] = this.imag.cell;

        var _ = this._;
        _.fft = new FFT(_.cellsize * 2);
        _.fftCell  = new fn.SignalArray(_.fft.length);
        _.prevCell = new fn.SignalArray(_.cellsize);
        _.freqs    = new fn.SignalArray(_.fft.length>>1);

        _.plotFlush = true;
        _.plotRange = [0, 32];
        _.plotBarStyle = true;
    }
    fn.extend(FFTNode);

    var $ = FFTNode.prototype;

    Object.defineProperties($, {
        window: {
            set: function(value) {
                this._.fft.setWindow(value);
            },
            get: function() {
                return this._.fft.windowName;
            }
        },
        spectrum: {
            get: function() {
                return this._.fft.getFrequencyData(this._.freqs);
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);
            fn.outputSignalAR(this);

            var cell = this.cells[0];
            var cellsize = _.cellsize;

            _.fftCell.set(_.prevCell);
            _.fftCell.set(cell, cellsize);
            _.fft.forward(_.fftCell);
            _.prevCell.set(cell);
            _.plotFlush = true;

            this.cells[3].set(_.fft.real.subarray(0, cellsize));
            this.cells[4].set(_.fft.imag.subarray(0, cellsize));
        }

        return this;
    };

    var super_plot = T.Object.prototype.plot;

    $.plot = function(opts) {
        if (this._.plotFlush) {
            this._.plotData  = this.spectrum;
            this._.plotFlush = null;
        }
        return super_plot.call(this, opts);
    };

    fn.register("fft", FFTNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function FNoiseNode(_args) {
        T.Object.call(this, 1, _args);
        fn.fixAR(this);

        var _ = this._;
        _.freq = T(440);
        _.reg = 0x8000;
        _.shortFlag = false;
        _.phase     = 0;
        _.lastValue = 0;
    }
    fn.extend(FNoiseNode);

    var $ = FNoiseNode.prototype;

    Object.defineProperties($, {
        shortFlag: {
            set: function(value) {
                this._.shortFlag = !!value;
            },
            get: function() {
                return this._.shortFlag;
            }
        },
        freq: {
            set: function(value) {
                this._.freq = T(value);
            },
            get: function() {
                return this._.freq;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;
        var cell = this.cells[0];

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var lastValue = _.lastValue;
            var phase     = _.phase;
            var phaseStep = _.freq.process(tickID).cells[0][0] / _.samplerate;
            var reg = _.reg;
            var mul = _.mul, add = _.add;
            var i, imax;

            if (_.shortFlag) {
                for (i = 0, imax = cell.length; i < imax; ++i) {
                    if (phase >= 1) {
                        reg >>= 1;
                        reg |= ((reg ^ (reg >> 6)) & 1) << 15;
                        lastValue = ((reg & 1) - 0.5);
                        phase -= 1;
                    }
                    cell[i] = lastValue * mul + add;
                    phase += phaseStep;
                }
            } else {
                for (i = 0, imax = cell.length; i < imax; ++i) {
                    if (phase >= 1) {
                        reg >>= 1;
                        reg |= ((reg ^ (reg >> 1)) & 1) << 15;
                        lastValue = ((reg & 1) - 0.5);
                        phase -= 1;
                    }
                    cell[i] = lastValue * mul + add;
                    phase += phaseStep;
                }
            }
            _.reg       = reg;
            _.phase     = phase;
            _.lastValue = lastValue;
        }

        return this;
    };

    fn.register("fnoise", FNoiseNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    var GateChannelNode = (function() {
        function GateChannelNode(parent) {
            T.Object.call(this, 2, []);
            fn.fixAR(this);
            this._.parent = parent;
        }
        fn.extend(GateChannelNode);

        GateChannelNode.prototype.process = function(tickID) {
            if (this.tickID !== tickID) {
                this.tickID = tickID;
                this._.parent.process(tickID);
            }
            return this;
        };

        return GateChannelNode;
    })();

    function GateNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        this._.selected = 0;
        this._.outputs  = [];
    }
    fn.extend(GateNode);

    var $ = GateNode.prototype;

    Object.defineProperties($, {
        selected: {
            set: function(value) {
                var _ = this._;
                if (typeof value === "number") {
                    _.selected = value;
                    var outputs = _.outputs;
                    for (var i = 0, imax = outputs.length; i < imax; ++i) {
                        if (outputs[i]) {
                            outputs[i].cells[0].set(fn.emptycell);
                            outputs[i].cells[1].set(fn.emptycell);
                            outputs[i].cells[2].set(fn.emptycell);
                        }
                    }
                }
            },
            get: function() {
                return this._.selected;
            }
        }
    });

    $.at = function(index) {
        var _ = this._;
        var output = _.outputs[index];
        if (!output) {
            _.outputs[index] = output = new GateChannelNode(this);
        }
        return output;
    };

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);
            fn.outputSignalAR(this);

            var output = _.outputs[_.selected];
            if (output) {
                output.cells[0].set(this.cells[0]);
                output.cells[1].set(this.cells[1]);
                output.cells[2].set(this.cells[2]);
            }
        }

        return this;
    };

    fn.register("gate", GateNode);

})(timbre);
(function(T) {
    "use strict";

    var fn  = T.fn;
    var FFT = T.modules.FFT;

    function IFFTNode(_args) {
        T.Object.call(this, 1, _args);
        fn.fixAR(this);

        var _ = this._;
        _.fft = new FFT(_.cellsize * 2);
        _.fftCell    = new fn.SignalArray(this._.fft.length);
        _.realBuffer = new fn.SignalArray(this._.fft.length);
        _.imagBuffer = new fn.SignalArray(this._.fft.length);
    }
    fn.extend(IFFTNode);

    var $ = IFFTNode.prototype;

    Object.defineProperties($, {
        real: {
            set: function(value) {
                this._.real = T(value);
            },
            get: function() {
                return this._.real;
            }
        },
        imag: {
            set: function(value) {
                this._.imag = T(value);
            },
            get: function() {
                return this._.imag;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            if (_.real && _.imag) {
                var cell = this.cells[0];
                var real = _.realBuffer;
                var imag = _.imagBuffer;
                var _real = _.real.process(tickID).cells[0];
                var _imag = _.imag.process(tickID).cells[0];

                real.set(_real);
                imag.set(_imag);

                cell.set(_.fft.inverse(real, imag).subarray(0, _.cellsize));

                fn.outputSignalAR(this);
            }
        }

        return this;
    };

    fn.register("ifft", IFFTNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;

    function IntervalNode(_args) {
        T.Object.call(this, 1, _args);
        fn.timer(this);
        fn.fixKR(this);

        var _ = this._;
        _.interval = T(1000);
        _.count = 0;
        _.delay   = 0;
        _.timeout = Infinity;
        _.currentTime = 0;
        _.delaySamples = 0;
        _.countSamples = 0;
        _.onended = fn.make_onended(this);

        this.on("start", onstart);
    }
    fn.extend(IntervalNode);

    var onstart = function() {
        var _ = this._;
        this.playbackState = fn.PLAYING_STATE;
        _.delaySamples = (_.samplerate * (_.delay * 0.001))|0;
        _.countSamples = _.count = _.currentTime = 0;
    };
    Object.defineProperty(onstart, "unremovable", {
        value:true, writable:false
    });

    var $ = IntervalNode.prototype;

    Object.defineProperties($, {
        interval: {
            set: function(value) {
                if (typeof value === "string") {
                    value = timevalue(value);
                    if (value <= 0) {
                        value = 0;
                    }
                }
                this._.interval = T(value);
            },
            get: function() {
                return this._.interval;
            }
        },
        delay: {
            set: function(value) {
                if (typeof value === "string") {
                    value = timevalue(value);
                }
                if (typeof value === "number" && value >= 0) {
                    this._.delay = value;
                    this._.delaySamples = (this._.samplerate * (value * 0.001))|0;
                }
            },
            get: function() {
                return this._.delay;
            }
        },
        count: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.count = value;
                }
            },
            get: function() {
                return this._.count;
            }
        },
        timeout: {
            set: function(value) {
                if (typeof value === "string") {
                    value = timevalue(value);
                }
                if (typeof value === "number" && value >= 0) {
                    this._.timeout = value;
                }
            },
            get: function() {
                return this._.timeout;
            }
        },
        currentTime: {
            get: function() {
                return this._.currentTime;
            }
        }
    });

    $.bang = function() {
        var _ = this._;
        this.playbackState = fn.PLAYING_STATE;
        _.delaySamples = (_.samplerate * (_.delay * 0.001))|0;
        _.countSamples = _.count = _.currentTime = 0;
        _.emit("bang");
        return this;
    };

    $.process = function(tickID) {
        var cell = this.cells[0];

        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            if (_.delaySamples > 0) {
                _.delaySamples -= cell.length;
            }

            var interval = _.interval.process(tickID).cells[0][0];

            if (_.delaySamples <= 0) {
                _.countSamples -= cell.length;
                if (_.countSamples <= 0) {
                    _.countSamples += (_.samplerate * interval * 0.001)|0;
                    var nodes = this.nodes;
                    var count  = _.count;
                    var x = count * _.mul + _.add;
                    for (var j = 0, jmax = cell.length; j < jmax; ++j) {
                        cell[j] = x;
                    }
                    for (var i = 0, imax = nodes.length; i < imax; ++i) {
                        nodes[i].bang(count);
                    }
                    _.count += 1;
                }
            }
            _.currentTime += fn.currentTimeIncr;

            if (_.currentTime >= _.timeout) {
                fn.nextTick(_.onended);
            }
        }
        return this;
    };

    fn.register("interval", IntervalNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;

    function LagNode(_args) {
        T.Object.call(this, 1, _args);
        fn.fixAR(this);

        var _ = this._;
        var bits = Math.ceil(Math.log(_.samplerate) * Math.LOG2E);
        _.buffersize = 1 << bits;
        _.buffermask = _.buffersize - 1;
        _.buffer = new fn.SignalArray(_.buffersize);
        _.time = 0;
        _.readIndex  = 0;
        _.writeIndex = 0;
    }
    fn.extend(LagNode);

    var $ = LagNode.prototype;

    Object.defineProperties($, {
        time: {
            set: function(value) {
                if (typeof value === "string") {
                    value = timevalue(value);
                }
                if (typeof value === "number" && value > 0) {
                    var _ = this._;
                    _.time = value;
                    var offset = (value * 0.001 * _.samplerate)|0;
                    if (offset > _.buffermask) {
                        offset = _.buffermask;
                    }
                    _.writeIndex = (_.readIndex + offset) & _.buffermask;
                }
            },
            get: function() {
                return this._.time;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);

            var cell = this.cells[0];
            var buffer = _.buffer;
            var mask   = _.buffermask;
            var readIndex  = _.readIndex;
            var writeIndex = _.writeIndex;
            var i, imax = cell.length;

            for (i = 0; i < imax; ++i) {
                buffer[writeIndex] = cell[i];
                cell[i] = buffer[readIndex];

                readIndex  += 1;
                writeIndex = (writeIndex + 1) & mask;
            }

            _.readIndex  = readIndex & mask;
            _.writeIndex = writeIndex;

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("lag", LagNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function MapNode(_args) {
        T.Object.call(this, 1, _args);
        var _ = this._;
        _.input  = 0;
        _.value = 0;
        _.prev   = null;
        _.ar     = false;
        _.map    = defaultFunction;
    }
    fn.extend(MapNode);

    var defaultFunction = function(x) {
        return x;
    };

    var $ = MapNode.prototype;

    Object.defineProperties($, {
        input: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.input = value;
                }
            },
            get: function() {
                return this._.input;
            }
        },
        map: {
            set: function(value) {
                if (typeof value === "function") {
                    this._.map = value;
                }
            },
            get: function() {
                return this._.map;
            }
        }
    });

    $.bang = function() {
        this._.prev = null;
        this._.emit("bang");
        return this;
    };

    $.at = function(input) {
        return (this._.map) ? this._.map(input) : 0;
    };

    $.process = function(tickID) {
        var cell = this.cells[0];
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var len = this.nodes.length;
            var i, imax = cell.length;

            if (_.ar && len) {
                fn.inputSignalAR(this);
                var map = _.map;
                if (map) {
                    for (i = 0; i < imax; ++i) {
                        cell[i] = map(cell[i]);
                    }
                }
                _.value = cell[imax-1];
                fn.outputSignalAR(this);
            } else {
                var input = len ? fn.inputSignalKR(this) : _.input;
                if (_.map && _.prev !== input) {
                    _.prev = input;
                    _.value = _.map(input);
                }
                var value = _.value * _.mul + _.add;
                for (i = 0; i < imax; ++i) {
                    cell[i] = value;
                }
            }
        }

        return this;
    };

    fn.register("map", MapNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function MaxNode(_args) {
        T.Object.call(this, 1, _args);
    }
    fn.extend(MaxNode);

    var $ = MaxNode.prototype;

    $.process = function(tickID) {
        var cell = this.cells[0];
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var nodes = this.nodes;
            var i, imax = nodes.length;
            var j, jmax = cell.length;
            var tmp, val;

            if (_.ar) {
                if (nodes.length > 0) {
                    tmp = nodes[0].process(tickID).cells[0];
                    cell.set(tmp);
                    for (i = 1; i < imax; ++i) {
                        tmp = nodes[i].process(tickID).cells[0];
                        for (j = 0; j < jmax; ++j) {
                            val = tmp[j];
                            if (cell[j] < val) {
                                cell[j] = val;
                            }
                        }
                    }
                } else {
                    for (j = 0; j < jmax; ++j) {
                        cell[j] = 0;
                    }
                }
                fn.outputSignalAR(this);
            } else {
                if (nodes.length > 0) {
                    tmp = nodes[0].process(tickID).cells[0][0];
                    for (i = 1; i < imax; ++i) {
                        val = nodes[i].process(tickID).cells[0][0];
                        if (tmp < val) {
                            tmp = val;
                        }
                    }
                } else {
                    tmp = 0;
                }
                cell[0] = tmp;
                fn.outputSignalKR(this);
            }
        }

        return this;
    };

    fn.register("max", MaxNode);

})(timbre);
(function(T) {
    "use strict";

    if (T.envtype !== "browser") {
        return;
    }

    var fn = T.fn;
    var BUFFER_SIZE = 4096;
    var BUFFER_MASK = BUFFER_SIZE - 1;

    function MediaStreamNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var _ = this._;
        _.src = _.func = null;
        _.bufferL = new fn.SignalArray(BUFFER_SIZE);
        _.bufferR = new fn.SignalArray(BUFFER_SIZE);
        _.readIndex  = 0;
        _.writeIndex = 0;
        _.totalRead  = 0;
        _.totalWrite = 0;
    }
    fn.extend(MediaStreamNode);

    var $ = MediaStreamNode.prototype;

    $.listen = function(audio) {
        var _impl = impl[T.env];
        if (_impl) {
            _impl.set.call(this, audio);
            _impl.listen.call(this);
        }
    };

    $.unlisten = function() {
        var _impl = impl[T.env];
        if (_impl) {
            _impl.unlisten.call(this);
        }

        this.cells[0].set(fn.emptycell);
        this.cells[1].set(fn.emptycell);
        this.cells[2].set(fn.emptycell);

        var _ = this._;
        var bufferL = _.bufferL, bufferR = _.bufferR;
        for (var i = 0, imax = bufferL.length; i < imax; ++i) {
            bufferL[i] = bufferR[i] = 0;
        }
    };

    $.process = function(tickID) {
        var _ = this._;

        if (_.src === null) {
            return this;
        }

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var cellsize = _.cellsize;
            if (_.totalWrite > _.totalRead + cellsize) {
                var begin = _.readIndex;
                var end   = begin + cellsize;
                this.cells[1].set(_.bufferL.subarray(begin, end));
                this.cells[2].set(_.bufferR.subarray(begin, end));
                _.readIndex = end & BUFFER_MASK;
                _.totalRead += cellsize;
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    var impl = {};
    impl.webkit = {
        set: function(src) {
            var _ = this._;
            /*global HTMLMediaElement:true */
            if (src instanceof HTMLMediaElement) {
                var context = fn._audioContext;
                _.src = context.createMediaElementSource(src);
            }
            /*global HTMLMediaElement:false */
        },
        listen: function() {
            var _ = this._;
            var context = fn._audioContext;
            _.gain = context.createGain();
            _.gain.gain.value = 0;
            _.node = context.createScriptProcessorNode(1024, 2, 2);
            _.node.onaudioprocess = onaudioprocess(this);
            _.src.connect(_.node);
            _.node.connect(_.gain);
            _.gain.connect(context.destination);
        },
        unlisten: function() {
            var _ = this._;
            if (_.src) {
                _.src.disconnect();
            }
            if (_.gain) {
                _.gain.disconnect();
            }
            if (_.node) {
                _.node.disconnect();
            }
        }
    };
    var onaudioprocess = function(self) {
        return function(e) {
            var _ = self._;
            var ins = e.inputBuffer;
            var length = ins.length;
            var writeIndex = _.writeIndex;

            _.bufferL.set(ins.getChannelData(0), writeIndex);
            _.bufferR.set(ins.getChannelData(1), writeIndex);
            _.writeIndex = (writeIndex + length) & BUFFER_MASK;
            _.totalWrite += length;
        };
    };

    impl.moz = {
        set: function(src) {
            var _ = this._;
            /*global HTMLAudioElement:true */
            if (src instanceof HTMLAudioElement) {
                _.src = src;
                _.istep = _.samplerate / src.mozSampleRate;
            }
            /*global HTMLAudioElement:false */
        },
        listen: function() {
            var _ = this._;
            var o0 = _.bufferL;
            var o1 = _.bufferR;
            var prev0 = 0, prev1 = 0;
            if (_.src.mozChannels === 2) {
                _.x = 0;
                _.func = function(e) {
                    var writeIndex = _.writeIndex;
                    var totalWrite = _.totalWrite;
                    var samples = e.frameBuffer;
                    var x, istep = _.istep;
                    var i, imax = samples.length;
                    x = _.x;
                    for (i = 0; i < imax; i+= 2) {
                        x += istep;
                        while (x > 0) {
                            o0[writeIndex] = (samples[i  ] + prev0) * 0.5;
                            o1[writeIndex] = (samples[i+1] + prev1) * 0.5;
                            writeIndex = (writeIndex + 1) & BUFFER_MASK;
                            ++totalWrite;
                            x -= 1;
                        }
                        prev0 = samples[i  ];
                        prev1 = samples[i+1];
                    }
                    _.x = x;
                    _.writeIndex = writeIndex;
                    _.totalWrite = totalWrite;
                };
            } else {
                _.x = 0;
                _.func = function(e) {
                    var writeIndex = _.writeIndex;
                    var totalWrite = _.totalWrite;
                    var samples = e.frameBuffer;
                    var x, istep = _.istep;
                    var i, imax = samples.length;
                    x = _.x;
                    for (i = 0; i < imax; ++i) {
                        x += istep;
                        while (x >= 0) {
                            o0[writeIndex] = o1[writeIndex] = (samples[i] + prev0) * 0.5;
                            writeIndex = (writeIndex + 1) & BUFFER_MASK;
                            ++totalWrite;
                            x -= 1;
                        }
                        prev0 = samples[i];
                    }
                    _.x = x;
                    _.writeIndex = writeIndex;
                    _.totalWrite = totalWrite;
                };
            }
            _.src.addEventListener("MozAudioAvailable", _.func);
        },
        unlisten: function() {
            var _ = this._;
            if (_.func) {
                _.src.removeEventListener("MozAudioAvailable", _.func);
                _.func = null;
            }
        }
    };

    fn.register("mediastream", MediaStreamNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function MidiCpsNode(_args) {
        T.Object.call(this, 1, _args);
        var _ = this._;
        _.midi = 0;
        _.value = 0;
        _.prev  = null;
        _.a4    = 440;
        _.ar    = false;
    }
    fn.extend(MidiCpsNode);

    var $ = MidiCpsNode.prototype;

    Object.defineProperties($, {
        midi: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.midi = value;
                }
            },
            get: function() {
                return this._.midi;
            }
        },
        a4: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.a4   = value;
                    this._.prev = null;
                }
            },
            get: function() {
                return this._.a4;
            }
        }
    });

    $.bang = function() {
        this._.prev = null;
        this._.emit("bang");
        return this;
    };

    $.at = function(midi) {
        var _ = this._;
        return _.a4 * Math.pow(2, (midi - 69) / 12);
    };

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var cell = this.cells[0];
            var len  = this.nodes.length;
            var i, imax = cell.length;

            if (_.ar && len) {
                fn.inputSignalAR(this);
                var a4 = _.a4;
                for (i = 0; i < imax; ++i) {
                    cell[i] = a4 * Math.pow(2, (cell[i] - 69) / 12);
                }
                _.value = cell[imax-1];
                fn.outputSignalAR(this);
            } else {
                var input = (len) ? fn.inputSignalKR(this) : _.midi;
                if (_.prev !== input) {
                    _.prev = input;
                    _.value = _.a4 * Math.pow(2, (input - 69) / 12);
                }
                cell[0] = _.value;
                fn.outputSignalKR(this);
            }
        }

        return this;
    };

    fn.register("midicps", MidiCpsNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function MidiRatioNode(_args) {
        T.Object.call(this, 1, _args);
        var _ = this._;
        _.midi = 0;
        _.value = 0;
        _.prev  = null;
        _.range = 12;
        _.ar    = false;
    }
    fn.extend(MidiRatioNode);

    var $ = MidiRatioNode.prototype;

    Object.defineProperties($, {
        midi: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.midi = value;
                }
            },
            get: function() {
                return this._.midi;
            }
        },
        range: {
            set: function(value) {
                if (typeof value === "number" && value > 0) {
                    this._.range = value;
                }
            },
            get: function() {
                return this._.range;
            }
        }
    });

    $.bang = function() {
        this._.prev = null;
        this._.emit("bang");
        return this;
    };

    $.at = function(midi) {
        var _ = this._;
        return Math.pow(2, midi / _.range);
    };

    $.process = function(tickID) {
        var cell = this.cells[0];
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var len = this.nodes.length;
            var i, imax = cell.length;

            if (_.ar && len) {
                fn.inputSignalAR(this);
                var range = _.range;
                for (i = 0; i < imax; ++i) {
                    cell[i] = Math.pow(2, cell[i] / range);
                }
                _.value = cell[imax-1];
                fn.outputSignalAR(this);
            } else {
                var input = (this.nodes.length) ? fn.inputSignalKR(this) : _.midi;
                if (_.prev !== input) {
                    _.prev = input;
                    _.value = Math.pow(2, input / _.range);
                }
                var value = _.value * _.mul + _.add;
                for (i = 0; i < imax; ++i) {
                    cell[i] = value;
                }
            }
        }

        return this;
    };

    fn.register("midiratio", MidiRatioNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function MinNode(_args) {
        T.Object.call(this, 1, _args);
    }
    fn.extend(MinNode);

    var $ = MinNode.prototype;

    $.process = function(tickID) {
        var cell = this.cells[0];
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var nodes = this.nodes;
            var i, imax = nodes.length;
            var j, jmax = cell.length;
            var tmp, val;

            if (_.ar) {
                if (nodes.length > 0) {
                    tmp = nodes[0].process(tickID).cells[0];
                    cell.set(tmp);
                    for (i = 1; i < imax; ++i) {
                        tmp = nodes[i].process(tickID).cells[0];
                        for (j = 0; j < jmax; ++j) {
                            val = tmp[j];
                            if (cell[j] > val) {
                                cell[j] = val;
                            }
                        }
                    }
                } else {
                    for (j = 0; j < jmax; ++j) {
                        cell[j] = 0;
                    }
                }
                fn.outputSignalAR(this);
            } else {
                if (nodes.length > 0) {
                    tmp = nodes[0].process(tickID).cells[0][0];
                    for (i = 1; i < imax; ++i) {
                        val = nodes[i].process(tickID).cells[0][0];
                        if (tmp > val) {
                            tmp = val;
                        }
                    }
                } else {
                    tmp = 0;
                }
                cell[0] = tmp;
                fn.outputSignalKR(this);
            }
        }

        return this;
    };

    fn.register("min", MinNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function MML(_args) {
        T.Object.call(this, 0, _args);
        fn.timer(this);
        fn.fixKR(this);

        var _ = this._;
        _.tracks  = [];
        _.onended = fn.make_onended(this);
        _.currentTime = 0;

        this.on("start", onstart);
    }
    fn.extend(MML);

    var onstart = function() {
        var self = this, _ = this._;
        var mml  = _.mml;
        if (typeof mml === "string") {
            mml = [mml];
        }
        _.tracks = mml.map(function(mml, i) {
            return new MMLTrack(self, i, mml);
        });
        _.currentTime = 0;
        this.playbackState = fn.PLAYING_STATE;
    };
    Object.defineProperty(onstart, "unremoved", {
        value:true, writable:false
    });

    var $ = MML.prototype;

    Object.defineProperties($, {
        mml: {
            set: function(value) {
                var _ = this._;
                if (typeof value === "string" || Array.isArray(value)) {
                    _.mml = value;
                }
            },
            get: function() {
                return this._.mml;
            }
        },
        currentTime: {
            get: function() {
                return this._.currentTime;
            }
        }
    });

    $.on = $.addListener = function(type, listener) {
        if (type === "mml") {
            type = "data";
            console.warn("A 'mml' event listener was deprecated in ~v13.03.01. use 'data' event listener.");
        }
        this._.events.on(type, listener);
        return this;
    };

    $.once = function(type, listener) {
        if (type === "mml") {
            type = "data";
            console.warn("A 'mml' event listener was deprecated in ~v13.03.01. use 'data' event listener.");
        }
        this._.events.once(type, listener);
        return this;
    };

    $.off = $.removeListener = function(type, listener) {
        if (type === "mml") {
            type = "data";
            console.warn("A 'mml' event listener was deprecated in ~v13.03.01. use 'data' event listener.");
        }
        this._.events.off(type, listener);
        return this;
    };

    $.removeAllListeners = function(type) {
        if (type === "mml") {
            console.warn("A 'mml' event listener was deprecated in ~v13.03.01. use 'data' event listener.");
            type = "data";
        }
        this._.events.removeAllListeners(type);
        return this;
    };

    $.listeners = function(type) {
        if (type === "mml") {
            console.warn("A 'mml' event listener was deprecated in ~v13.03.01. use 'data' event listener.");
            type = "data";
        }
        return this._.events.listeners(type);
    };

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var i, imax;
            var tracks = _.tracks;

            for (i = 0, imax = tracks.length; i < imax; ++i) {
                tracks[i].process();
            }
            while (i--) {
                if (tracks[i].ended) {
                    tracks.splice(i, 1);
                }
            }
            if (tracks.length === 0) {
                fn.nextTick(_.onended);
            }
            _.currentTime += fn.currentTimeIncr;
        }

        return this;
    };

    fn.register("mml", MML);

    var MMLTrack = (function() {
        function MMLTrack(sequencer, trackNum, mml) {
            var _ = this._ = {};
            _.sequencer = sequencer;
            _.trackNum  = trackNum;
            _.commands  = compile(mml);
            _.status = {t:120, l:4, o:4, v:12, q:6, dot:0, tie:false};
            _.index    = 0;
            _.queue    = [];
            _.currentTime = 0;
            _.queueTime   = 0;
            _.segnoIndex  = -1;
            _.loopStack   = [];
            _.prevNote = 0;
            _.remain   = Infinity;
            this.ended = false;
            sched(this);
        }

        var EOF     = 0;
        var NOTEON  = 1;
        var NOTEOFF = 2;
        var COMMAND = 3;

        MMLTrack.prototype.process = function() {
            var _ = this._;
            var sequencer = _.sequencer;
            var trackNum  = _.trackNum;
            var queue  = _.queue;
            var eof = false;

            if (queue.length) {
                while (queue[0][0] <= _.currentTime) {
                    var nextItem = _.queue.shift();
                    switch (nextItem[1]) {
                    case NOTEON:
                        noteOn(sequencer, trackNum, nextItem[2], nextItem[3]);
                        _.remain = nextItem[4];
                        sched(this);
                        break;
                    case NOTEOFF:
                        noteOff(sequencer, trackNum, nextItem[2], nextItem[3]);
                        break;
                    case COMMAND:
                        command(sequencer, nextItem[2]);
                        break;
                    case EOF:
                        eof = true;
                        break;
                    }
                    if (queue.length === 0) {
                        break;
                    }
                }
            }
            _.remain -= fn.currentTimeIncr;
            if (eof) {
                this.ended = true;
            }
            _.currentTime += fn.currentTimeIncr;
        };

        var noteOn = function(sequencer, trackNum, noteNum, velocity) {
            var gen, i, imax;
            var nodes = sequencer.nodes;
            for (i = 0, imax = nodes.length; i < imax; ++i) {
                gen = nodes[i];
                if (gen.noteOn) {
                    gen.noteOn(noteNum, velocity);
                } else {
                    gen.bang();
                }
            }
            sequencer._.emit("data", "noteOn", {
                trackNum:trackNum, noteNum:noteNum, velocity:velocity
            });
        };

        var noteOff = function(sequencer, trackNum, noteNum, velocity) {
            var gen, i, imax;
            var nodes = sequencer.nodes;
            for (i = 0, imax = nodes.length; i < imax; ++i) {
                gen = nodes[i];
                if (gen.noteOff) {
                    gen.noteOff(noteNum, velocity);
                } else if (gen.release) {
                    gen.release();
                }
            }
            sequencer._.emit("data", "noteOff", {
                trackNum:trackNum, noteNum:noteNum, velocity:velocity
            });
        };

        var command = function(sequencer, cmd) {
            sequencer._.emit("data", "command", {
                command: cmd
            });
        };

        var sched = function(self) {
            var _ = self._;

            var sequencer = _.sequencer;
            var cmd, commands = _.commands;
            var queue  = _.queue;
            var index  = _.index;
            var status = _.status;
            var queueTime = _.queueTime;
            var loopStack = _.loopStack;
            var tempo, val, len, dot, vel;
            var duration, quantize, pending, _queueTime;
            var peek;
            var i, imax;

            pending = [];

            outer:
            while (true) {
                if (commands.length <= index) {
                    if (_.segnoIndex >= 0) {
                        index = _.segnoIndex;
                    } else {
                        break;
                    }
                }
                cmd = commands[index++];

                switch (cmd.name) {
                case "@":
                    queue.push([queueTime, COMMAND, cmd.val]);
                    break;
                case "n":
                    tempo = status.t || 120;
                    if (cmd.len !== null) {
                        len = cmd.len;
                        dot = cmd.dot || 0;
                    } else {
                        len = status.l;
                        dot = cmd.dot || status.dot;
                    }
                    duration = (60 / tempo) * (4 / len) * 1000;
                    duration *= 2 - (1 / Math.pow(2, dot));

                    vel = status.v << 3;
                    if (status.tie) {
                        for (i = queue.length; i--; ) {
                            if (queue[i][2]) {
                                queue.splice(i, 1);
                                break;
                            }
                        }
                        val = _.prevNote;
                    } else {
                        val = _.prevNote = (cmd.val) + (status.o + 1) * 12;
                        queue.push([queueTime, NOTEON, val, vel, duration]);
                    }

                    if (len > 0) {
                        quantize = status.q / 8;
                        // noteOff
                        if (quantize < 1) {
                            _queueTime = queueTime + (duration * quantize);
                            queue.push([_queueTime, NOTEOFF, val, vel]);
                            for (i = 0, imax = pending.length; i < imax; ++i) {
                                queue.push([_queueTime, NOTEOFF, pending[i], vel]);
                            }
                        }
                        pending = [];
                        queueTime += duration;
                        if (!status.tie) {
                            break outer;
                        }
                    } else {
                        pending.push(val);
                    }
                    status.tie = false;
                    break;
                case "r":
                    tempo = status.t || 120;
                    if (cmd.len !== null) {
                        len = cmd.len;
                        dot = cmd.dot || 0;
                    } else {
                        len = status.l;
                        dot = cmd.dot || status.dot;
                    }
                    if (len > 0) {
                        duration = (60 / tempo) * (4 / len) * 1000;
                        duration *= 2 - (1 / Math.pow(2, dot));
                        queueTime += duration;
                    }
                    break;
                case "l":
                    status.l   = cmd.val;
                    status.dot = cmd.dot;
                    break;
                case "o":
                    status.o = cmd.val;
                    break;
                case "<":
                    if (status.o < 9) {
                        status.o += 1;
                    }
                    break;
                case ">":
                    if (status.o > 0) {
                        status.o -= 1;
                    }
                    break;
                case "v":
                    status.v = cmd.val;
                    break;
                case "(":
                    if (status.v < 15) {
                        status.v += 1;
                    }
                    break;
                case ")":
                    if (status.v > 0) {
                        status.v -= 1;
                    }
                    break;
                case "q":
                    status.q = cmd.val;
                    break;
                case "&":
                    status.tie = true;
                    break;
                case "$":
                    _.segnoIndex = index;
                    break;
                case "[":
                    loopStack.push([index, null, null]);
                    break;
                case "|":
                    peek = loopStack[loopStack.length - 1];
                    if (peek) {
                        if (peek[1] === 1) {
                            loopStack.pop();
                            index = peek[2];
                        }
                    }
                    break;
                case "]":
                    peek = loopStack[loopStack.length - 1];
                    if (peek) {
                        if (peek[1] === null) {
                            peek[1] = cmd.count;
                            peek[2] = index;
                        }
                        peek[1] -= 1;
                        if (peek[1] === 0) {
                            loopStack.pop();
                        } else {
                            index = peek[0];
                        }
                    }
                    break;
                case "t":
                    status.t = (cmd.val === null) ? 120 : cmd.val;
                    break;
                case "EOF":
                    queue.push([queueTime, EOF]);
                    break;
                }
            }
            _.index = index;
            _.queueTime = queueTime;
        };

        var compile = function(mml) {
            var def, re, m, cmd;
            var i, imax, j, jmax;
            var checked = new Array(mml.length);
            var commands = [];

            for (i = 0, imax = MMLCommands.length; i < imax; ++i) {
                def = MMLCommands[i];
                re  = def.re;
                while ((m = re.exec(mml))) {
                    if (!checked[m.index]) {
                        for (j = 0, jmax = m[0].length; j < jmax; ++j) {
                            checked[m.index + j] = true;
                        }
                        if (def.func) {
                            cmd = def.func(m);
                        } else {
                            cmd = {name:m[0]};
                        }
                        if (cmd) {
                            cmd.index = m.index;
                            cmd.origin = m[0];
                            commands.push(cmd);
                        }
                    }
                    while (re.lastIndex < mml.length) {
                        if (!checked[re.lastIndex]) {
                            break;
                        }
                        ++re.lastIndex;
                    }
                }
            }
            commands.sort(function(a, b) {
                return a.index - b.index;
            });
            commands.push({name:"EOF"});
            return commands;
        };

        var MMLCommands = [
            { re:/@(\d*)/g, func: function(m) {
                return {
                    name: "@",
                    val: m[1] || null
                };
            }},
            { re:/([cdefgab])([\-+]?)(\d*)(\.*)/g, func: function(m) {
                return {
                    name: "n",
                    val : {c:0,d:2,e:4,f:5,g:7,a:9,b:11}[m[1]] + ({"-":-1,"+":+1}[m[2]]||0),
                    len : (m[3] === "") ? null : Math.min(m[3]|0, 64),
                    dot : m[4].length
                };
            }},
            { re:/r(\d*)(\.*)/g, func: function(m) {
                return {
                    name: "r",
                    len : (m[1] === "") ? null : Math.max(1, Math.min(m[1]|0, 64)),
                    dot : m[2].length
                };
            }},
            { re:/&/g },
            { re:/l(\d*)(\.*)/g, func: function(m) {
                return {
                    name: "l",
                    val : (m[1] === "") ? 4 : Math.min(m[1]|0, 64),
                    dot : m[2].length
                };
            }},
            { re:/o([0-9])/g, func: function(m) {
                return {
                    name: "o",
                    val : (m[1] === "") ? 4 : m[1]|0
                };
            }},
            { re:/[<>]/g },
            { re:/v(\d*)/g, func: function(m) {
                return {
                    name: "v",
                    val : (m[1] === "") ? 12 : Math.min(m[1]|0, 15)
                };
            }},
            { re:/[()]/g },
            { re:/q([0-8])/g, func: function(m) {
                return {
                    name: "q",
                    val : (m[1] === "") ? 6 : Math.min(m[1]|0, 8)
                };
            }},
            { re:/\[/g },
            { re:/\|/g },
            { re:/\](\d*)/g, func: function(m) {
                return {
                    name: "]",
                    count: (m[1]|0)||2
                };
            }},
            { re:/t(\d*)/g, func: function(m) {
                return {
                    name: "t",
                    val : (m[1] === "") ? null : Math.max(5, Math.min(m[1]|0, 300))
                };
            }},
            { re:/\$/g }
        ];

        return MMLTrack;
    })();

})(timbre);
(function(T) {
    "use strict";

    var fn  = T.fn;

    function MonoNode(_args) {
        T.Object.call(this, 1, _args);
    }
    fn.extend(MonoNode);

    MonoNode.prototype.process = function(tickID) {
        var _ = this._;
        if (this.tickID !== tickID) {
            this.tickID = tickID;
            if (_.ar) {
                fn.inputSignalAR(this);
                fn.outputSignalAR(this);
            } else {
                this.cells[0][0] = fn.inputSignalKR(this);
                fn.outputSignalKR(this);
            }
        }
        return this;
    };
    fn.register("mono", MonoNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function MulNode(_args) {
        T.Object.call(this, 2, _args);
    }
    fn.extend(MulNode);

    var $ = MulNode.prototype;

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var nodes = this.nodes;
            var cell  = this.cells[0];
            var cellL = this.cells[1];
            var cellR = this.cells[2];
            var i, imax = nodes.length;
            var j, jmax = cell.length;
            var tmp, tmpL, tmpR;

            if (_.ar) {
                if (nodes.length > 0) {
                    nodes[0].process(tickID);
                    tmpL = nodes[0].cells[1];
                    tmpR = nodes[0].cells[2];
                    cellL.set(tmpL);
                    cellR.set(tmpR);
                    for (i = 1; i < imax; ++i) {
                        nodes[i].process(tickID);
                        tmpL = nodes[i].cells[1];
                        tmpR = nodes[i].cells[2];
                        for (j = 0; j < jmax; ++j) {
                            cellL[j] *= tmpL[j];
                            cellR[j] *= tmpR[j];
                        }
                    }
                } else {
                    for (j = 0; j < jmax; ++j) {
                        cellL[j] = cellR[j] = 0;
                    }
                }
                fn.outputSignalAR(this);
            } else {
                if (nodes.length > 0) {
                    tmp = nodes[0].process(tickID).cells[0][0];
                    for (i = 1; i < imax; ++i) {
                        tmp *= nodes[i].process(tickID).cells[0][0];
                    }
                } else {
                    tmp = 0;
                }
                cell[0] = tmp;
                fn.outputSignalKR(this);
            }
        }

        return this;
    };

    fn.register("*", MulNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function NDictNode(_args) {
        T.Object.call(this, 1, _args);

        var _ = this._;
        _.defaultValue = 0;
        _.index = 0;
        _.dict  = {};
        _.ar    = false;
    }
    fn.extend(NDictNode);

    var $ = NDictNode.prototype;

    Object.defineProperties($, {
        dict: {
            set: function(value) {
                if (typeof value === "object") {
                    this._.dict = value;
                } else if (typeof value === "function") {
                    var dict = {};
                    for (var i = 0; i < 128; ++i) {
                        dict[i] = value(i);
                    }
                    this._.dict = dict;
                }
            },
            get: function() {
                return this._.dict;
            }
        },
        defaultValue: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.defaultValue = value;
                }
            },
            get: function() {
                return this._.defaultValue;
            }
        },
        index: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.index = value;
                }
            },
            get: function() {
                return this._.index;
            }
        }
    });

    $.at = function(index) {
        var _ = this._;
        return (_.dict[index|0] || _.defaultValue) * _.mul + _.add;
    };

    $.clear = function() {
        this._.dict = {};
        return this;
    };

    $.process = function(tickID) {
        var cell = this.cells[0];
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var len = this.nodes.length;
            var index, value;
            var dict = _.dict, defaultValue = _.defaultValue;
            var mul = _.mul, add = _.add;
            var i, imax = cell.length;

            if (_.ar && len) {

                fn.inputSignalAR(this);
                for (i = 0; i < imax; ++i) {
                    index = cell[i];
                    if (index < 0) {
                        index = (index - 0.5)|0;
                    } else {
                        index = (index + 0.5)|0;
                    }
                    cell[i] = (dict[index] || defaultValue) * mul + add;
                }
                fn.outputSignalAR(this);
            } else {
                index = (this.nodes.length) ? fn.inputSignalKR(this) : _.index;
                if (index < 0) {
                    index = (index - 0.5)|0;
                } else {
                    index = (index + 0.5)|0;
                }
                value = (dict[index] || defaultValue) * mul + add;
                for (i = 0; i < imax; ++i) {
                    cell[i] = value;
                }
            }
        }

        return this;
    };

    fn.register("ndict", NDictNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function NoiseNode(_args) {
        T.Object.call(this, 1, _args);
    }
    fn.extend(NoiseNode);

    var $ = NoiseNode.prototype;

    $.process = function(tickID) {
        var cell = this.cells[0];
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var mul = _.mul, add = _.add;
            var i, imax, x;

            if (_.ar) { // audio-rate
                for (i = 0, imax = cell.length; i < imax; ++i) {
                    cell[i] = (Math.random() * 2 - 1) * mul + add;
                }
            } else {    // control-rate
                x = (Math.random() * 2 + 1) * mul + add;
                for (i = 0, imax = cell.length; i < imax; ++i) {
                    cell[i] = x;
                }
            }
        }
        return this;
    };

    fn.register("noise", NoiseNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue  = T.timevalue;
    var Oscillator = T.modules.Oscillator;

    function OscNode(_args) {
        T.Object.call(this, 2, _args);

        var _ = this._;
        _.freq  = T(440);
        _.phase = T(0);
        _.osc = new Oscillator(_.samplerate);
        _.tmp = new fn.SignalArray(_.cellsize);
        _.osc.step = _.cellsize;

        this.once("init", oninit);
    }
    fn.extend(OscNode);

    var oninit = function() {
        var _ = this._;
        if (!this.wave) {
            this.wave = "sin";
        }
        _.plotData = _.osc.wave;
        _.plotLineWidth = 2;
        _.plotCyclic = true;
        _.plotBefore = plotBefore;
    };

    var $ = OscNode.prototype;

    Object.defineProperties($, {
        wave: {
            set: function(value) {
                this._.osc.setWave(value);
            },
            get: function() {
                return this._.osc.wave;
            }
        },
        freq: {
            set: function(value) {
                if (typeof value === "string") {
                    value = timevalue(value);
                    if (value <= 0) {
                        value = 0;
                    } else {
                        value = 1000 / value;
                    }
                }
                this._.freq = T(value);
            },
            get: function() {
                return this._.freq;
            }
        },
        phase: {
            set: function(value) {
                this._.phase = T(value);
                this._.osc.feedback = false;
            },
            get: function() {
                return this._.phase;
            }
        },
        fb: {
            set: function(value) {
                this._.phase = T(value);
                this._.osc.feedback = true;
            },
            get: function() {
                return this._.phase;
            }
        }
    });

    $.clone = function() {
        var instance = fn.clone(this);
        instance._.osc = this._.osc.clone();
        instance._.freq  = this._.freq;
        instance._.phase = this._.phase;
        return instance;
    };

    $.bang = function() {
        this._.osc.reset();
        this._.emit("bang");
        return this;
    };

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var cellL = this.cells[1];
            var cellR = this.cells[2];
            var i, imax = _.cellsize;

            if (this.nodes.length) {
                fn.inputSignalAR(this);
            } else {
                for (i = 0; i < imax; ++i) {
                    cellL[i] = cellR[i] = 1;
                }
            }

            var osc = _.osc;
            var freq  = _.freq.process(tickID).cells[0];
            var phase = _.phase.process(tickID).cells[0];

            osc.frequency = freq[0];
            osc.phase     = phase[0];

            if (_.ar) {
                var tmp  = _.tmp;
                if (_.freq.isAr) {
                    if (_.phase.isAr) {
                        osc.processWithFreqAndPhaseArray(tmp, freq, phase);
                    } else {
                        osc.processWithFreqArray(tmp, freq);
                    }
                } else {
                    if (_.phase.isAr) {
                        osc.processWithPhaseArray(tmp, phase);
                    } else {
                        osc.process(tmp);
                    }
                }
                for (i = 0; i < imax; ++i) {
                    cellL[i] *= tmp[i];
                    cellR[i] *= tmp[i];
                }
            } else {
                var value = osc.next();
                for (i = 0; i < imax; ++i) {
                    cellL[i] *= value;
                    cellR[i] *= value;
                }
            }
            fn.outputSignalAR(this);
        }

        return this;
    };

    var plotBefore;
    if (T.envtype === "browser") {
        plotBefore = function(context, offset_x, offset_y, width, height) {
            var y = (height >> 1) + 0.5;
            context.strokeStyle = "#ccc";
            context.lineWidth   = 1;
            context.beginPath();
            context.moveTo(offset_x, y + offset_y);
            context.lineTo(offset_x + width, y + offset_y);
            context.stroke();
        };
    }

    fn.register("osc", OscNode);

    fn.register("sin", function(_args) {
        return new OscNode(_args).set("wave", "sin");
    });
    fn.register("cos", function(_args) {
        return new OscNode(_args).set("wave", "cos");
    });
    fn.register("pulse", function(_args) {
        return new OscNode(_args).set("wave", "pulse");
    });
    fn.register("tri", function(_args) {
        return new OscNode(_args).set("wave", "tri");
    });
    fn.register("saw", function(_args) {
        return new OscNode(_args).set("wave", "saw");
    });
    fn.register("fami", function(_args) {
        return new OscNode(_args).set("wave", "fami");
    });
    fn.register("konami", function(_args) {
        return new OscNode(_args).set("wave", "konami");
    });
    fn.register("+sin", function(_args) {
        return new OscNode(_args).set("wave", "+sin").kr();
    });
    fn.register("+pulse", function(_args) {
        return new OscNode(_args).set("wave", "+pulse").kr();
    });
    fn.register("+tri", function(_args) {
        return new OscNode(_args).set("wave", "+tri").kr();
    });
    fn.register("+saw", function(_args) {
        return new OscNode(_args).set("wave", "+saw").kr();
    });

    fn.alias("square", "pulse");

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function PanNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var _ = this._;
        _.pos  = T(0);
        _.panL = 0.5;
        _.panR = 0.5;
    }
    fn.extend(PanNode);

    var $ = PanNode.prototype;

    Object.defineProperties($, {
        pos: {
            set: function(value) {
                this._.pos = T(value);
            },
            get: function() {
                return this._.pos;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var pos = _.pos.process(tickID).cells[0][0];
            if (_.prevPos !== pos) {
                var index = pos * 0.5 + 0.5;
                _.panL = 1 - pos;
                _.panR = _.prevPos = pos;
            }

            var nodes = this.nodes;
            var cellL = this.cells[1];
            var cellR = this.cells[2];
            var i, imax = nodes.length;
            var j, jmax = cellL.length;
            var tmp;

            if (imax) {
                tmp = nodes[0].process(tickID).cells[0];
                for (j = 0; j < jmax; ++j) {
                    cellL[j] = cellR[j] = tmp[j];
                }
                for (i = 1; i < imax; ++i) {
                    tmp = nodes[i].process(tickID).cells[0];
                    for (j = 0; j < jmax; ++j) {
                        cellL[j] = (cellR[j] += tmp[j]);
                    }
                }

                var panL = _.panL;
                var panR = _.panR;
                for (j = 0; j < jmax; ++j) {
                    cellL[j] = cellL[j] * panL;
                    cellR[j] = cellR[j] * panR;
                }

            } else {
                cellL.set(fn.emptycell);
                cellR.set(fn.emptycell);
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("pan", PanNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;
    var Envelope      = T.modules.Envelope;
    var EnvelopeValue = T.modules.EnvelopeValue;

    function ParamNode(_args) {
        T.Object.call(this, 2, _args);

        var _ = this._;
        _.value = 0;
        _.env = new EnvelopeValue(_.samplerate);
        _.env.step = _.cellsize;
        _.curve   = "lin";
        _.counter = 0;
        _.ar = false;
        _.onended = make_onended(this);

        this.on("ar", onar);
    }
    fn.extend(ParamNode);

    var make_onended = function(self, lastValue) {
        return function() {
            if (typeof lastValue === "number") {
                var cell  = self.cells[0];
                var cellL = self.cells[1];
                var cellR = self.cells[2];
                var value = self._.env.value;
                for (var i = 0, imax = cellL.length; i < imax; ++i) {
                    cell[0] = cellL[i] = cellR[i] = value;
                }
            }
            self._.emit("ended");
        };
    };

    var onar = function(value) {
        this._.env.step = (value) ? 1 : this._.cellsize;
    };

    var $ = ParamNode.prototype;

    Object.defineProperties($, {
        value: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.env.value = value;
                }
            },
            get: function() {
                return this._.env.value;
            }
        }
    });

    $.to = function(nextValue, time, curve) {
        var _ = this._;
        var env = _.env;
        if (typeof time === "string") {
            time = timevalue(time);
        } else if (typeof time === "undefined") {
            time = 0;
        }
        if (typeof curve === "undefined") {
            _.counter = env.setNext(nextValue, time, Envelope.CurveTypeLin);
            _.curve = "lin";
        } else {
            var _curve = Envelope.CurveTypeDict[curve];
            if (typeof _curve === "undefined") {
                _.counter = env.setNext(nextValue, time, Envelope.CurveTypeCurve, curve);
            } else {
                _.counter = env.setNext(nextValue, time, _curve);
            }
            _.curve = curve;
        }
        _.plotFlush = true;
        return this;
    };

    $.setAt = function(nextValue, time) {
        var _ = this._;
        this.to(_.env.value, time, "set");
        _.atValue = nextValue;
        return this;
    };

    $.linTo = function(nextValue, time) {
        return this.to(nextValue, time, "lin");
    };

    $.expTo = function(nextValue, time) {
        return this.to(nextValue, time, "exp");
    };

    $.sinTo = function(nextValue, time) {
        return this.to(nextValue, time, "sin");
    };

    $.welTo = function(nextValue, time) {
        return this.to(nextValue, time, "wel");
    };

    $.sqrTo = function(nextValue, time) {
        return this.to(nextValue, time, "sqr");
    };

    $.cubTo = function(nextValue, time) {
        return this.to(nextValue, time, "cub");
    };

    $.cancel = function() {
        var _ = this._;
        _.counter = _.env.setNext(_.env.value, 0, Envelope.CurveTypeSet);
        return this;
    };

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var cellL = this.cells[1];
            var cellR = this.cells[2];
            var i, imax = _.cellsize;
            var env = _.env;
            var counter = _.counter;
            var value;

            if (this.nodes.length) {
                fn.inputSignalAR(this);
            } else {
                for (i = 0; i < imax; ++i) {
                    cellL[i] = cellR[i] = 1;
                }
            }

            if (counter <= 0) {
                if (_.curve === "set") {
                    env.setNext(_.atValue, 0, Envelope.CurveTypeSet);
                } else {
                    env.setNext(env.value, 0, Envelope.CurveTypeSet);
                }
                fn.nextTick(_.onended);
                _.counter = Infinity;
            }

            if (_.ar) {
                for (i = 0; i < imax; ++i) {
                    value = env.next();
                    cellL[i] *= value;
                    cellR[i] *= value;
                }
                _.counter -= _.cellsize;
            } else {
                value = env.next();
                for (i = 0; i < imax; ++i) {
                    cellL[i] *= value;
                    cellR[i] *= value;
                }
                _.counter -= 1;
            }

            fn.outputSignalAR(this);

            _.value = value;
        }

        return this;
    };

    var super_plot = T.Object.prototype.plot;

    $.plot = function(opts) {
        var _ = this._;
        if (_.plotFlush) {
            var env  = new EnvelopeValue(128);
            var data = new Float32Array(128);
            var curve, i, imax;
            if (_.curve === "set") {
                for (i = 100, imax = data.length; i < imax; ++i) {
                    data[i] = 1;
                }
            } else {
                curve = Envelope.CurveTypeDict[_.curve];
                if (typeof curve === "undefined") {
                    env.setNext(1, 1000, Envelope.CurveTypeCurve, _.curve);
                } else {
                    env.setNext(1, 1000, curve);
                }

                for (i = 0, imax = data.length; i < imax; ++i) {
                    data[i] = env.next();
                }
            }
            _.plotData  = data;
            _.plotRange = [0, 1];
            _.plotFlush = null;
        }
        return super_plot.call(this, opts);
    };

    fn.register("param", ParamNode);

})(timbre);
(function(T) {
    "use strict";

    var fn  = T.fn;
    var Biquad = T.modules.Biquad;

    function PhaserNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var _ = this._;
        _.freq = T("sin", {freq:1, add:1000, mul:250}).kr();
        _.Q    = T(1);
        _.allpass  = [];

        this.steps = 2;
    }
    fn.extend(PhaserNode);

    var $ = PhaserNode.prototype;

    Object.defineProperties($, {
        freq: {
            set: function(value) {
                this._.freq = value;
            },
            get: function() {
                return this._.freq;
            }
        },
        Q: {
            set: function(value) {
                this._.Q = T(value);
            },
            get: function() {
                return this._.Q;
            }
        },
        steps: {
            set: function(value) {
                if (typeof value === "number") {
                    value |= 0;
                    if (value === 2 || value === 4 || value === 8 || value === 12) {
                        var allpass = this._.allpass;
                        if (allpass.length < value) {
                            for (var i = allpass.length; i < value; ++i) {
                                allpass[i] = new Biquad(this._.samplerate);
                                allpass[i].setType("allpass");
                            }
                        }
                    }
                    this._.steps = value;
                }
            },
            get: function() {
                return this._.steps;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);

            if (!_.bypassed) {
                var cellL = this.cells[1];
                var cellR = this.cells[2];
                var freq  = _.freq.process(tickID).cells[0][0];
                var Q     = _.Q.process(tickID).cells[0][0];
                var steps = _.steps;
                var i;

                for (i = 0; i < steps; i += 2) {
                    _.allpass[i  ].setParams(freq, Q, 0);
                    _.allpass[i  ].process(cellL, cellR);
                    _.allpass[i+1].setParams(freq, Q, 0);
                    _.allpass[i+1].process(cellL, cellR);
                }
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("phaser", PhaserNode);

})(timbre);
(function(T) {
    "use strict";

    // Voss algorithm
    // http://www.firstpr.com.au/dsp/pink-noise/

    var MAX_KEY = 31;
    var fn = T.fn;

    function PinkNoiseNode(_args) {
        T.Object.call(this, 1, _args);
        fn.fixAR(this);

        var whites = new Uint8Array(5);
        for (var i = 0; i < 5; ++i) {
            whites[i] = ((Math.random() * (1<<30))|0) % 25;
        }
        this._.whites = whites;
        this._.key = 0;
    }
    fn.extend(PinkNoiseNode);

    var $ = PinkNoiseNode.prototype;

    $.process = function(tickID) {
        var cell = this.cells[0];
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var i, imax, j;
            var key = _.key, whites = _.whites;
            var mul = _.mul, add = _.add;
            var last_key, sum, diff;

            for (i = 0, imax = cell.length; i < imax; ++i) {
                last_key = key++;
                if (key > MAX_KEY) {
                    key = 0;
                }
                diff = last_key ^ key;
                for (j = sum = 0; j < 5; ++j) {
                    if (diff & (1 << j)) {
                        whites[j] = ((Math.random() * (1<<30))|0) % 25;
                    }
                    sum += whites[j];
                }
                cell[i] = ((sum * 0.01666666) - 1) * mul + add;
            }
            _.key = key;
        }
        return this;
    };

    fn.register("pink", PinkNoiseNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function PluckNode(_args) {
        T.Object.call(this, 1, _args);

        this._.freq   = 440;
        this._.buffer = null;
        this._.index  = 0;
    }
    fn.extend(PluckNode);

    var $ = PluckNode.prototype;

    Object.defineProperties($, {
        freq: {
            set: function(value) {
                if (typeof value === "number") {
                    if (value < 0) {
                        value = 0;
                    }
                    this._.freq = value;
                }
            },
            get: function() {
                return this._.freq;
            }
        }
    });

    $.bang = function() {
        var _ = this._;
        var freq   = _.freq;
        var size   = (_.samplerate / freq + 0.5)|0;
        var buffer = _.buffer = new fn.SignalArray(size);
        for (var i = 0; i < size; ++i) {
            buffer[i] = Math.random() * 2 - 1;
        }
        _.index = 0;
        _.emit("bang");
        return this;
    };

    $.process = function(tickID) {
        var cell = this.cells[0];
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var buffer = _.buffer;
            if (buffer) {
                var bufferLength = buffer.length;
                var index = _.index, write;
                var mul = _.mul, add = _.add;
                var x, i, imax = cell.length;

                for (i = 0; i < imax; ++i) {
                    write = index;
                    x = buffer[index++];
                    if (index >= bufferLength) {
                        index = 0;
                    }
                    x = (x + buffer[index]) * 0.5;
                    buffer[write] = x;
                    cell[i] = x * mul + add;
                }
                _.index = index;
            }
        }

        return this;
    };

    fn.register("pluck", PluckNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;

    var STATUS_WAIT = 0;
    var STATUS_REC  = 1;

    function RecNode(_args) {
        T.Object.call(this, 1, _args);
        fn.listener(this);
        fn.fixAR(this);

        var _ = this._;
        _.timeout    = 5000;
        _.status     = STATUS_WAIT;
        _.writeIndex = 0;
        _.writeIndexIncr  = 1;
        _.currentTime     = 0;
        _.currentTimeIncr = 1000 / _.samplerate;
        _.onended = make_onended(this);
    }
    fn.extend(RecNode);

    var make_onended = function(self) {
        return function() {
            var _ = self._;

            var buffer = new fn.SignalArray(_.buffer.subarray(0, _.writeIndex|0));

            _.status      = STATUS_WAIT;
            _.writeIndex  = 0;
            _.currentTime = 0;

            _.emit("ended", {
                buffer:buffer, samplerate:_.samplerate
            });
        };
    };

    var $ = RecNode.prototype;

    Object.defineProperties($, {
        timeout: {
            set: function(value) {
                if (typeof value === "string") {
                    value = timevalue(value);
                }
                if (typeof value === "number" && value > 0) {
                    this._.timeout = value;
                }
            },
            get: function() {
                return this._.timeout;
            }
        },
        samplerate: {
            set: function(value) {
                if (typeof value === "number") {
                    if (0 < value && value <= this._.samplerate) {
                        this._.samplerate = value;
                    }
                }
            },
            get: function() {
                return this._.samplerate;
            }
        },
        currentTime: {
            get: function() {
                return this._.currentTime;
            }
        }
    });

    $.start = function() {
        var _ = this._, len;
        if (_.status === STATUS_WAIT) {
            len = (_.timeout * 0.01 * _.samplerate)|0;
            if (!_.buffer || _.buffer.length < len) {
                _.buffer = new fn.SignalArray(len);
            }
            _.writeIndex = 0;
            _.writeIndexIncr = _.samplerate / T.samplerate;
            _.currentTime = 0;
            _.status = STATUS_REC;
            _.emit("start");
            this.listen();
        }
        return this;
    };

    $.stop = function() {
        var _ = this._;
        if (_.status === STATUS_REC) {
            _.status = STATUS_WAIT;
            _.emit("stop");
            fn.nextTick(_.onended);
            this.unlisten();
        }
        return this;
    };

    $.bang = function() {
        if (this._.status === STATUS_WAIT) {
            this.srart();
        } else if (this._.status === STATUS_REC) {
            this.stop();
        }
        this._.emit("bang");
        return this;
    };

    $.process = function(tickID) {
        var _ = this._;
        var cell = this.cells[0];

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);

            if (_.status === STATUS_REC) {
                var i, imax = cell.length;
                var buffer  = _.buffer;
                var timeout = _.timeout;
                var writeIndex      = _.writeIndex;
                var writeIndexIncr  = _.writeIndexIncr;
                var currentTime     = _.currentTime;
                var currentTimeIncr = _.currentTimeIncr;

                for (i = 0; i < imax; ++i) {
                    buffer[writeIndex|0] = cell[i];
                    writeIndex += writeIndexIncr;

                    currentTime += currentTimeIncr;
                    if (timeout <= currentTime) {
                        fn.nextTick(_.onended);
                    }
                }
                _.writeIndex  = writeIndex;
                _.currentTime = currentTime;
            }

            fn.outputSignalAR(this);
        }
        return this;
    };

    fn.register("record", RecNode);
    fn.alias("rec", "record");

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var Reverb = T.modules.Reverb;

    function ReverbNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        this._.reverb = new Reverb(this._.samplerate, this._.cellsize);
    }
    fn.extend(ReverbNode);

    var $ = ReverbNode.prototype;

    Object.defineProperties($, {
        room: {
            set: function(value) {
                if (typeof value === "number") {
                    value = (value > 1) ? 1 : (value < 0) ? 0 : value;
                    this._.reverb.setRoomSize(value);
                }
            },
            get: function() {
                return this._.reverb.roomsize;
            }
        },
        damp: {
            set: function(value) {
                if (typeof value === "number") {
                    value = (value > 1) ? 1 : (value < 0) ? 0 : value;
                    this._.reverb.setDamp(value);
                }
            },
            get: function() {
                return this._.reverb.damp;
            }
        },
        mix: {
            set: function(value) {
                if (typeof value === "number") {
                    value = (value > 1) ? 1 : (value < 0) ? 0 : value;
                    this._.reverb.wet = value;
                }
            },
            get: function() {
                return this._.reverb.wet;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);

            if (!_.bypassed) {
                _.reverb.process(this.cells[1], this.cells[2]);
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("reverb", ReverbNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;

    function ScheduleNode(_args) {
        T.Object.call(this, 0, _args);
        fn.timer(this);
        fn.fixKR(this);

        var _ = this._;
        _.queue = [];
        _.currentTime = 0;
        _.maxRemain   = 1000;
    }
    fn.extend(ScheduleNode);

    var $ = ScheduleNode.prototype;

    Object.defineProperties($, {
        queue: {
            get: function() {
                return this._.queue;
            }
        },
        remain: {
            get: function() {
                return this._.queue.length;
            }
        },
        maxRemain: {
            set: function(value) {
                if (typeof value === "number" && value > 0) {
                    this._.maxRemain = value;
                }
            },
            get: function() {
                return this._.maxRemain;
            }
        },
        isEmpty: {
            get: function() {
                return this._.queue.length === 0;
            }
        },
        currentTime: {
            get: function() {
                return this._.currentTime;
            }
        }
    });

    $.sched = function(delta, item, args) {
        if (typeof delta === "string") {
            delta = timevalue(delta);
        }
        if (typeof delta === "number") {
            this.schedAbs(this._.currentTime + delta, item, args);
        }
        return this;
    };

    $.schedAbs = function(time, item, args) {
        if (typeof time === "string") {
            time = timevalue(time);
        }
        if (typeof time === "number") {
            var _ = this._;
            var queue = _.queue;
            if (queue.length >= _.maxRemain) {
                return this;
            }
            for (var i = queue.length; i--; ) {
                if (queue[i][0] < time) {
                    break;
                }
            }
            queue.splice(i + 1, 0, [time, T(item), args]);
        }
        return this;
    };

    $.advance = function(delta) {
        if (typeof delta === "string") {
            delta = timevalue(delta);
        }
        if (typeof delta === "number") {
            this._.currentTime += delta;
        }
        return this;
    };

    $.clear = function() {
        this._.queue.splice(0);
        return this;
    };

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var emit = null;
            var queue = _.queue;

            if (queue.length) {
                while (queue[0][0] < _.currentTime) {
                    var nextItem = _.queue.shift();
                    nextItem[1].bang(nextItem[2]);
                    emit = "sched";
                    if (queue.length === 0) {
                        emit = "empty";
                        break;
                    }
                }
            }
            _.currentTime += fn.currentTimeIncr;
            if (emit) {
                _.emit(emit);
            }
        }
        return this;
    };

    fn.register("schedule", ScheduleNode);
    fn.alias("sched", "schedule");

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;

    function ScopeNode(_args) {
        T.Object.call(this, 2, _args);
        fn.listener(this);
        fn.fixAR(this);

        var _ = this._;
        _.samples    = 0;
        _.writeIndex = 0;
        _.plotFlush = true;

        this.once("init", oninit);
    }
    fn.extend(ScopeNode);

    var oninit = function() {
        if (!this._.buffer) {
            this.size = 1024;
        }
        if (!this._.interval) {
            this.interval = 1000;
        }
    };

    var $ = ScopeNode.prototype;

    Object.defineProperties($, {
        size: {
            set: function(value) {
                var _ = this._;
                if (!_.buffer) {
                    if (typeof value === "number") {
                        var n = (value < 64) ? 64 : (value > 2048) ? 2048 : value;
                        _.buffer = new fn.SignalArray(n);
                        if (_.reservedinterval) {
                            this.interval = _.reservedinterval;
                            _.reservedinterval = null;
                        }
                    }
                }
            },
            get: function() {
                return this._.buffer.length;
            }
        },
        interval: {
            set: function(value) {
                var _ = this._;
                if (typeof value === "string") {
                    value = timevalue(value);
                }
                if (typeof value === "number" && value > 0) {
                    if (!_.buffer) {
                        _.reservedinterval = value;
                    } else {
                        _.interval    = value;
                        _.samplesIncr = value * 0.001 * _.samplerate / _.buffer.length;
                        if (_.samplesIncr < 1) {
                            _.samplesIncr = 1;
                        }
                    }
                }
            },
            get: function() {
                return this._.interval;
            }
        },
        buffer: {
            get: function() {
                return this._.buffer;
            }
        }
    });

    $.bang = function() {
        var _ = this._;
        var buffer = _.buffer;

        for (var i = 0, imax = buffer.length; i < imax; ++i) {
            buffer[i] = 0;
        }
        _.samples    = 0;
        _.writeIndex = 0;
        this._.emit("bang");
        return this;
    };

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);
            fn.outputSignalAR(this);

            var cell = this.cells[0];
            var i, imax = _.cellsize;
            var samples     = _.samples;
            var samplesIncr = _.samplesIncr;
            var buffer      = _.buffer;
            var writeIndex  = _.writeIndex;
            var emit = false;
            var bufferlength = buffer.length;

            for (i = 0; i < imax; ++i) {
                if (samples <= 0) {
                    buffer[writeIndex++] = cell[i];
                    if (writeIndex >= bufferlength) {
                        writeIndex = 0;
                    }
                    emit = _.plotFlush = true;
                    samples += samplesIncr;
                }
                --samples;
            }
            _.samples    = samples;
            _.writeIndex = writeIndex;

            if (emit) {
                this._.emit("data");
            }
        }

        return this;
    };

    var super_plot = T.Object.prototype.plot;

    $.plot = function(opts) {
        var _ = this._;
        if (_.plotFlush) {
            var buffer = _.buffer;
            var mask   = buffer.length - 1;
            var data   = new Float32Array(buffer.length);
            var j = _.writeIndex;
            for (var i = 0, imax = buffer.length; i < imax; i++) {
                data[i] = buffer[++j & mask];
            }
            _.plotData  = data;
            _.plotFlush = null;
        }
        return super_plot.call(this, opts);
    };

    fn.register("scope", ScopeNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function ScriptProcessorNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var _ = this._;
        _.numberOfInputs = 0;
        _.numberOfOutputs = 0;
        _.bufferSize = 0;
        _.bufferMask = 0;
        _.duration   = 0;
        _.inputBufferL = null;
        _.inputBufferR = null;
        _.outputBufferL = null;
        _.outputBufferR = null;
        _.onaudioprocess = null;
        _.index = 0;
        this.once("init", oninit);
    }
    fn.extend(ScriptProcessorNode);

    var oninit = function() {
        var _ = this._;
        if (_.numberOfInputs === 0) {
            this.numberOfInputs = 1;
        }
        if (_.numberOfOutputs === 0) {
            this.numberOfOutputs = 1;
        }
        if (_.bufferSize === 0) {
            this.bufferSize = 1024;
        }
    };

    var $ = ScriptProcessorNode.prototype;

    Object.defineProperties($, {
        numberOfInputs: {
            set: function(value) {
                var _ = this._;
                if (_.numberOfInputs === 0) {
                    _.numberOfInputs = (value === 2) ? 2 : 1;
                }
            },
            get: function() {
                return this._.numberOfInputs;
            }
        },
        numberOfOutputs: {
            set: function(value) {
                var _ = this._;
                if (_.numberOfOutputs === 0) {
                    _.numberOfOutputs = (value === 2) ? 2 : 1;
                }
            },
            get: function() {
                return this._.numberOfOutputs;
            }
        },
        bufferSize: {
            set: function(value) {
                var _ = this._;
                if (_.bufferSize === 0) {
                    if ([256, 512, 1024, 2048, 4096, 8192, 16384].indexOf(value) !== -1) {
                        _.bufferSize = value;
                        _.bufferMask = value - 1;
                        _.duration = value / _.samplerate;
                        _.inputBufferL  = new fn.SignalArray(value);
                        _.inputBufferR  = new fn.SignalArray(value);
                        _.outputBufferL = new fn.SignalArray(value);
                        _.outputBufferR = new fn.SignalArray(value);
                    }
                }
            },
            get: function() {
                return this._.bufferSize;
            }
        },
        onaudioprocess: {
            set: function(value) {
                if (typeof value === "function") {
                    this._.onaudioprocess = value;
                }
            },
            get: function() {
                return this._.onaudioprocess;
            }
        }
    });

    function AudioBuffer(self, buffers) {
        this.samplerate = self._.samplerate;
        this.length     = self._.bufferSize;
        this.duration   = self._.duration;
        this.numberOfChannels = buffers.length;
        this.getChannelData = function(n) {
            return buffers[n];
        };
    }

    function AudioProcessingEvent(self) {
        var _ = self._;
        this.node = self;
        this.playbackTime = T.currentTime;
        if (_.numberOfInputs === 2) {
            this.inputBuffer  = new AudioBuffer(self, [_.inputBufferL, _.inputBufferR]);
        } else {
            this.inputBuffer  = new AudioBuffer(self, [_.inputBufferL]);
        }
        if (_.numberOfOutputs === 2) {
            this.outputBuffer = new AudioBuffer(self, [_.outputBufferL, _.outputBufferR]);
        } else {
            this.outputBuffer = new AudioBuffer(self, [_.outputBufferL]);
        }
    }

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var cellsize   = _.cellsize;
            var bufferMask = _.bufferMask;
            var begin = _.index;
            var end   = begin + cellsize;
            var buffer;
            var cellL  = this.cells[1];
            var cellR  = this.cells[2];

            fn.inputSignalAR(this);

            if (_.numberOfInputs === 2) {
                _.inputBufferL.set(cellL, begin);
                _.inputBufferR.set(cellR, begin);
            } else {
                buffer = _.inputBufferL;
                for (var i = 0; i < cellsize; i++) {
                    buffer[begin + i] = (cellL[i] + cellR[i]) * 0.5;
                }
            }

            cellL.set(_.outputBufferL.subarray(begin, end));
            cellR.set(_.outputBufferR.subarray(begin, end));

            _.index = end & bufferMask;

            if (_.index === 0 && _.onaudioprocess) {
                _.onaudioprocess(new AudioProcessingEvent(this));
                if (_.numberOfOutputs === 1) {
                    _.outputBufferR.set(_.outputBufferL);
                }
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("script", ScriptProcessorNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function SelectorNode(_args) {
        T.Object.call(this, 2, _args);

        this._.selected   = 0;
        this._.background = false;
    }
    fn.extend(SelectorNode);

    var $ = SelectorNode.prototype;

    Object.defineProperties($, {
        selected: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.selected = value;
                    this.cells[1].set(fn.emptycell);
                    this.cells[2].set(fn.emptycell);
                }
            },
            get: function() {
                return this._.selected;
            }
        },
        background: {
            set: function(value) {
                this._.background = !!value;
            },
            get: function() {
                return this._.background;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var nodes = this.nodes;
            var i, imax = nodes.length;

            if (_.background) {
                for (i = 0; i < imax; ++i) {
                    nodes[i].process(tickID);
                }
            }

            var tmp = nodes[_.selected];
            if (tmp) {
                if (!_.background) {
                    tmp.process(tickID);
                }
                this.cells[1].set(tmp.cells[1]);
                this.cells[2].set(tmp.cells[2]);
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("selector", SelectorNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;
    var FFT = T.modules.FFT;

    var WAIT_STATE = 0;
    var EXEC_STATE = 1;

    function SpectrumNode(_args) {
        T.Object.call(this, 2, _args);
        fn.listener(this);
        fn.fixAR(this);

        var _ = this._;
        _.status  = WAIT_STATE;
        _.samples = 0;
        _.samplesIncr = 0;
        _.writeIndex  = 0;

        _.plotFlush = true;
        _.plotRange = [0, 32];
        _.plotBarStyle = true;

        this.once("init", oninit);
    }
    fn.extend(SpectrumNode);

    var oninit = function() {
        var _ = this._;
        if (!_.fft) {
            this.size = 512;
        }
        if (!_.interval) {
            this.interval = 500;
        }
    };

    var $ = SpectrumNode.prototype;

    Object.defineProperties($, {
        size: {
            set: function(value) {
                var _ = this._;
                if (!_.fft) {
                    if (typeof value === "number") {
                        var n = (value < 256) ? 256 : (value > 2048) ? 2048 : value;
                        _.fft    = new FFT(n);
                        _.buffer = new fn.SignalArray(_.fft.length);
                        _.freqs  = new fn.SignalArray(_.fft.length>>1);
                        if (_.reservedwindow) {
                            _.fft.setWindow(_.reservedwindow);
                            _.reservedwindow = null;
                        }
                        if (_.reservedinterval) {
                            this.interval = _.reservedinterval;
                            _.reservedinterval = null;
                        }
                    }
                }
            },
            get: function() {
                return this._.buffer.length;
            }
        },
        window: {
            set: function(value) {
                this._.fft.setWindow(value);
            },
            get: function() {
                return this._.fft.windowName;
            }
        },
        interval: {
            set: function(value) {
                var _ = this._;
                if (typeof value === "string") {
                    value = timevalue(value);
                }
                if (typeof value === "number" && value > 0) {
                    if (!_.buffer) {
                        _.reservedinterval = value;
                    } else {
                        _.interval = value;
                        _.samplesIncr = (value * 0.001 * _.samplerate);
                        if (_.samplesIncr < _.buffer.length) {
                            _.samplesIncr = _.buffer.length;
                            _.interval = _.samplesIncr * 1000 / _.samplerate;
                        }
                    }
                }
            },
            get: function() {
                return this._.interval;
            }
        },
        spectrum: {
            get: function() {
                return this._.fft.getFrequencyData(this._.freqs);
            }
        },
        real: {
            get: function() {
                return this._.fft.real;
            }
        },
        imag: {
            get: function() {
                return this._.fft.imag;
            }
        }
    });

    $.bang = function() {
        this._.samples    = 0;
        this._.writeIndex = 0;
        this._.emit("bang");
        return this;
    };

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);
            fn.outputSignalAR(this);

            var cell = this.cells[0];
            var i, imax = cell.length;
            var status  = _.status;
            var samples = _.samples;
            var samplesIncr = _.samplesIncr;
            var writeIndex  = _.writeIndex;
            var buffer = _.buffer;
            var bufferLength = buffer.length;
            var emit;

            for (i = 0; i < imax; ++i) {
                if (samples <= 0) {
                    if (status === WAIT_STATE) {
                        status = EXEC_STATE;
                        writeIndex = 0;
                        samples += samplesIncr;
                    }
                }
                if (status === EXEC_STATE) {
                    buffer[writeIndex++] = cell[i];
                    if (bufferLength <= writeIndex) {
                        _.fft.forward(buffer);
                        emit = _.plotFlush = true;
                        status = WAIT_STATE;
                    }
                }
                --samples;
            }

            _.samples = samples;
            _.status  = status;
            _.writeIndex = writeIndex;

            if (emit) {
                this._.emit("data");
            }
        }
        return this;
    };

    var super_plot = T.Object.prototype.plot;

    $.plot = function(opts) {
        if (this._.plotFlush) {
            this._.plotData  = this.spectrum;
            this._.plotFlush = null;
        }
        return super_plot.call(this, opts);
    };

    fn.register("spectrum", SpectrumNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function SubtractNode(_args) {
        T.Object.call(this, 2, _args);
        this._.ar = false;
    }
    fn.extend(SubtractNode);

    var $ = SubtractNode.prototype;

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var nodes = this.nodes;
            var cell  = this.cells[0];
            var cellL = this.cells[1];
            var cellR = this.cells[2];
            var i, imax = nodes.length;
            var j, jmax = cell.length;
            var tmp, tmpL, tmpR;

            if (_.ar) {
                if (nodes.length > 0) {
                    nodes[0].process(tickID);
                    tmpL = nodes[0].cells[1];
                    tmpR = nodes[0].cells[2];
                    cellL.set(tmpL);
                    cellR.set(tmpR);
                    for (i = 1; i < imax; ++i) {
                        nodes[i].process(tickID);
                        tmpL = nodes[i].cells[1];
                        tmpR = nodes[i].cells[2];
                        for (j = 0; j < jmax; ++j) {
                            cellL[j] -= tmpL[j];
                            cellR[j] -= tmpR[j];
                        }
                    }
                } else {
                    for (j = 0; j < jmax; ++j) {
                        cellL[j] = cellR[i] = 0;
                    }
                }
                fn.outputSignalAR(this);
            } else {
                if (nodes.length > 0) {
                    tmp = nodes[0].process(tickID).cells[0][0];
                    for (i = 1; i < imax; ++i) {
                        tmp -= nodes[i].process(tickID).cells[0][0];
                    }
                } else {
                    tmp = 0;
                }
                cell[0] = tmp;
                fn.outputSignalKR(this);
            }
        }

        return this;
    };

    fn.register("-", SubtractNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function SynthDefNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var _ = this._;
        this.playbackState = fn.FINISHED_STATE;
        _.poly     = 4;
        _.genList  = [];
        _.genDict  = {};
        _.synthdef = null;
        _.remGen = make_remGen(this);
        _.onended = fn.make_onended(this);
    }
    fn.extend(SynthDefNode);

    var $ = SynthDefNode.prototype;

    Object.defineProperties($, {
        def: {
            set: function(value) {
                if (typeof value === "function") {
                    this._.synthdef = value;
                }
            },
            get: function() {
                return this._.synthdef;
            }
        },
        poly: {
            set: function(value) {
                if (typeof value === "number") {
                    if (0 < value && value <= 64) {
                        this._.poly = value;
                    }
                }
            },
            get: function() {
                return this._.poly;
            }
        }
    });

    var make_doneAction = function(self, opts) {
        return function() {
            self._.remGen(opts.gen);
        };
    };

    var make_remGen = function(self) {
        return function(gen) {
            var _ = self._;
            var i = _.genList.indexOf(gen);
            if (i !== -1) {
                _.genList.splice(i, 1);
            }
            if (typeof gen.noteNum !== "undefined") {
                _.genDict[gen.noteNum] = null;
            }
        };
    };

    var noteOn = function(noteNum, freq, velocity, _opts) {
        velocity |= 0;
        if (velocity <= 0) {
            this.noteOff(this, noteNum);
        } else if (velocity > 127) {
            velocity = 127;
        }
        var _ = this._;
        var list = _.genList, dict = _.genDict;
        var gen = dict[noteNum];
        if (gen) {
            _.remGen(gen);
        }

        var opts = {
            freq    : freq,
            noteNum : noteNum,
            velocity: velocity,
            mul     : velocity * 0.0078125
        };
        if (_opts) {
            for (var key in _opts) {
                opts[key] = _opts[key];
            }
        }
        opts.doneAction = make_doneAction(this, opts);

        gen = _.synthdef.call(this, opts);

        if (gen instanceof T.Object) {
            gen.noteNum = noteNum;
            list.push(gen);
            dict[noteNum] = opts.gen = gen;

            this.playbackState = fn.PLAYING_STATE;

            if (list.length > _.poly) {
                _.remGen(list[0]);
            }
        }
    };

    var midicps = (function() {
        var table = new Float32Array(128);
        for (var i = 0; i < 128; ++i) {
            table[i] = 440 * Math.pow(2, (i - 69) * 1 / 12);
        }
        return table;
    })();

    var cpsmidi = function(cps) {
        if (cps > 0) {
            return Math.log(cps * 1 / 440) * Math.LOG2E * 12 + 69;
        } else {
            return 0;
        }
    };

    $.noteOn = function(noteNum, velocity, _opts) {
        var freq = midicps[noteNum] || (440 * Math.pow(2, (noteNum - 69) / 12));
        noteOn.call(this, (noteNum + 0.5)|0, freq, velocity, _opts);
        return this;
    };

    $.noteOff = function(noteNum) {
        var gen = this._.genDict[noteNum];
        if (gen && gen.release) {
            gen.release();
        }
        return this;
    };

    $.noteOnWithFreq = function(freq, velocity, _opts) {
        var noteNum = cpsmidi(freq);
        noteOn.call(this, (noteNum + 0.5)|0, freq, velocity, _opts);
        return this;
    };

    $.noteOffWithFreq = function(freq) {
        var noteNum = cpsmidi(freq);
        return this.noteOff((noteNum + 0.5)|0);
    };

    $.allNoteOff = function() {
        var list = this._.genList;
        for (var i = 0, imax = list.length; i < imax; ++i) {
            if (list[i].release) {
                list[i].release();
            }
        }
    };

    $.allSoundOff = function() {
        var _ = this._;
        var list = _.genList;
        var dict = _.genDict;
        while (list.length) {
            delete dict[list.shift().noteNum];
        }
    };

    $.synth = function(_opts) {
        var _ = this._;
        var list = _.genList;
        var gen, opts = {};

        if (_opts) {
            for (var key in _opts) {
                opts[key] = _opts[key];
            }
        }
        opts.doneAction = make_doneAction(this, opts);

        gen = _.synthdef.call(this, opts);

        if (gen instanceof T.Object) {
            list.push(gen);
            opts.gen = gen;
            this.playbackState = fn.PLAYING_STATE;

            if (list.length > _.poly) {
                _.remGen(list[0]);
            }
        }

        return this;
    };

    $.process = function(tickID) {
        var cell = this.cells[0];
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            if (this.playbackState === fn.PLAYING_STATE) {
                var list = _.genList;
                var gen;
                var cellL = this.cells[1];
                var cellR = this.cells[2];
                var i, imax;
                var j, jmax = cell.length;
                var tmpL, tmpR;

                if (list.length) {
                    gen = list[0];
                    gen.process(tickID);
                    cellL.set(gen.cells[1]);
                    cellR.set(gen.cells[2]);
                    for (i = 1, imax = list.length; i < imax; ++i) {
                        gen = list[i];
                        gen.process(tickID);
                        tmpL = gen.cells[1];
                        tmpR = gen.cells[2];
                        for (j = 0; j < jmax; ++j) {
                            cellL[j] += tmpL[j];
                            cellR[j] += tmpR[j];
                        }
                    }
                } else {
                    fn.nextTick(_.onended);
                }
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("SynthDef", SynthDefNode);


    var env_desc = {
        set: function(value) {
            if (fn.isDictionary(value)) {
                if (typeof value.type === "string") {
                    this._.env = value;
                }
            } else if (value instanceof T.Object) {
                this._.env = value;
            }
        },
        get: function() {
            return this._.env;
        }
    };

    fn.register("OscGen", (function() {

        var osc_desc = {
            set: function(value) {
                if (value instanceof T.Object) {
                    this._.osc = value;
                }
            },
            get: function() {
                return this._.osc;
            }
        };

        var wave_desc = {
            set: function(value) {
                if (typeof value === "string") {
                    this._.wave = value;
                }
            },
            get: function() {
                return this._.wave;
            }
        };

        var synthdef = function(opts) {
            var _ = this._;
            var synth, osc, env, envtype;

            osc = _.osc || null;
            env = _.env || {};
            envtype = env.type || "perc";

            if (osc instanceof T.Object) {
                if (typeof osc.clone === "function") {
                    osc = osc.clone();
                }
            }
            if (!osc) {
                osc = T("osc", {wave:_.wave});
            }
            osc.freq = opts.freq;
            osc.mul  = osc.mul * opts.velocity/128;

            synth = osc;
            if (env instanceof T.Object) {
                if (typeof env.clone === "function") {
                    synth = env.clone().append(synth);
                }
            } else {
                synth = T(envtype, env, synth);
            }
            synth.on("ended", opts.doneAction).bang();

            return synth;
        };

        return function(_args) {
            var instance = new SynthDefNode(_args);

            instance._.wave = "sin";

            Object.defineProperties(instance, {
                env: env_desc, osc: osc_desc, wave: wave_desc
            });

            instance.def = synthdef;

            return instance;
        };
    })());

    fn.register("PluckGen", (function() {

        var synthdef = function(opts) {
            var _ = this._;
            var synth, env, envtype;

            env = _.env || {};
            envtype = env.type || "perc";

            synth = T("pluck", {freq:opts.freq, mul:opts.velocity/128}).bang();
            if (env instanceof T.Object) {
                if (typeof env.clone === "function") {
                    synth = env.clone().append(synth);
                }
            } else {
                synth = T(envtype, env, synth);
            }
            synth.on("ended", opts.doneAction).bang();

            return synth;
        };

        return function(_args) {
            var instance = new SynthDefNode(_args);

            Object.defineProperties(instance, {
                env: env_desc
            });

            instance.def = synthdef;

            return instance;
        };
    })());

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var Scissor    = T.modules.Scissor;
    var Tape       = Scissor.Tape;
    var TapeStream = Scissor.TapeStream;
    var isSignalArray = fn.isSignalArray;

    function ScissorNode(_args) {
        T.Object.call(this, 2, _args);
        fn.fixAR(this);

        var _ = this._;
        _.isLooped = false;
        _.onended  = fn.make_onended(this, 0);
    }
    fn.extend(ScissorNode);

    var $ = ScissorNode.prototype;

    Object.defineProperties($, {
        tape: {
            set: function(tape) {
                if (tape instanceof Tape) {
                    this.playbackState = fn.PLAYING_STATE;
                    this._.tape = tape;
                    this._.tapeStream = new TapeStream(tape, this._.samplerate);
                    this._.tapeStream.isLooped = this._.isLooped;
                } else {
                    if (tape instanceof T.Object) {
                        if (tape.buffer) {
                            tape = tape.buffer;
                        }
                    }
                    if (typeof tape === "object") {
                        if (Array.isArray(tape.buffer) && isSignalArray(tape.buffer[0])) {
                            this.playbackState = fn.PLAYING_STATE;
                            this._.tape = new Scissor(tape);
                            this._.tapeStream = new TapeStream(this._.tape, this._.samplerate);
                            this._.tapeStream.isLooped = this._.isLooped;
                        }
                    }
                }
            },
            get: function() {
                return this._.tape;
            }
        },
        isLooped: {
            get: function() {
                return this._.isLooped;
            }
        },
        buffer: {
            get: function() {
                if (this._.tape) {
                    return this._.tape.getBuffer();
                }
            }
        }
    });

    $.loop = function(value) {
        this._.isLooped = !!value;
        if (this._.tapeStream) {
            this._.tapeStream.isLooped = this._.isLooped;
        }
        return this;
    };

    $.bang = function() {
        this.playbackState = fn.PLAYING_STATE;
        if (this._.tapeStream) {
            this._.tapeStream.reset();
        }
        this._.emit("bang");
        return this;
    };

    $.getBuffer = function() {
        if (this._.tape) {
            return this._.tape.getBuffer();
        }
    };

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var tapeStream = _.tapeStream;

            if (tapeStream) {
                var cellL = this.cells[1];
                var cellR = this.cells[2];
                var tmp  = tapeStream.fetch(cellL.length);
                cellL.set(tmp[0]);
                cellR.set(tmp[1]);
                if (this.playbackState === fn.PLAYING_STATE && tapeStream.isEnded) {
                    fn.nextTick(_.onended);
                }
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("tape", ScissorNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;
    var FunctionWrapper = T(function(){}).constructor;

    function TaskNode(_args) {
        T.Object.call(this, 1, _args);
        fn.timer(this);

        var _ = this._;
        this.playbackState = fn.FINISHED_STATE;
        _.task = [];
        _.i     = 0;
        _.j     = 0;
        _.imax  = 0;
        _.jmax  = 0;
        _.wait  = 0;
        _.count = 0;
        _.args  = {};
        _.doNum = 1;
        _.initFunc = fn.nop;
        _.onended = make_onended(this);

        this.on("start", onstart);
    }
    fn.extend(TaskNode);

    var onstart = function() {
        var _ = this._, args;
        this.playbackState = fn.PLAYING_STATE;
        _.task = this.nodes.map(function(x) {
            return x instanceof FunctionWrapper ? x.func : false;
        }).filter(function(x) {
            return !!x;
        });
        _.i = _.j = 0;
        _.imax = _.doNum;
        _.jmax = _.task.length;
        args = _.initFunc();
        if (!fn.isDictionary(args)) {
            args = {param:args};
        }
        _.args = args;
    };

    var make_onended = function(self) {
        return function() {
            self.playbackState = fn.FINISHED_STATE;
            var _ = self._;
            var cell  = self.cells[0];
            var cellL = self.cells[1];
            var cellR = self.cells[2];
            var lastValue = _.args;
            if (typeof lastValue === "number") {
                for (var i = 0, imax = cellL.length; i < imax; ++i) {
                    cell[0] = cellL[i] = cellR[i] = lastValue;
                }
            }
            _.emit("ended", _.args);
        };
    };

    var $ = TaskNode.prototype;

    Object.defineProperties($, {
        "do": {
            set: function(value) {
                if (typeof value === "number" && value > 0) {
                    this._.doNum = value === Infinity ? Infinity : value|0;
                }
            },
            get: function() {
                return this._.doNum;
            }
        },
        init: {
            set: function(value) {
                if (typeof value === "function") {
                    this._.initFunc = value;
                }
            },
            get: function() {
                return this._.initFunc;
            }
        }
    });

    $.bang = function() {
        var _ = this._;
        _.count  = 0;
        _.emit("bang");
        return this;
    };

    $.wait = function(time) {
        if (typeof time === "string") {
            time = timevalue(time);
        }
        if (typeof time === "number" && time > 0) {
            this._.count += (this._.samplerate * time * 0.001)|0;
        }
        return this;
    };

    $.process = function(tickID) {
        var cell = this.cells[0];
        var _ = this._;
        var args, func;

        if (this.tickID !== tickID) {
            this.tickID = tickID;
            if (_.i < _.imax) {
                while (_.count <= 0) {
                    if (_.j >= _.jmax) {
                        ++_.i;
                        if (_.i >= _.imax) {
                            fn.nextTick(_.onended);
                            break;
                        }
                        _.j = 0;
                    }
                    func = _.task[_.j++];
                    if (func) {
                        func.call(this, _.i, _.args);
                    }
                }
                _.count -= cell.length;
            }
        }

        return this;
    };

    fn.register("task", TaskNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;
    var timevalue = T.timevalue;

    function TimeoutNode(_args) {
        T.Object.call(this, 0, _args);
        fn.timer(this);
        fn.fixKR(this);

        var _ = this._;
        this.playbackState = fn.FINISHED_STATE;
        _.currentTime = 0;
        _.samplesMax = 0;
        _.samples    = 0;
        _.onended = fn.make_onended(this);

        this.once("init", oninit);
        this.on("start", onstart);
    }

    fn.extend(TimeoutNode);

    var oninit = function() {
        if (!this._.timeout) {
            this.timeout = 1000;
        }
    };

    var onstart = function() {
        this.playbackState = fn.PLAYING_STATE;
    };
    Object.defineProperty(onstart, "unremovable", {
        value:true, writable:false
    });

    var $ = TimeoutNode.prototype;

    Object.defineProperties($, {
        timeout: {
            set: function(value) {
                var _ = this._;
                if (typeof value === "string") {
                    value = timevalue(value);
                }
                if (typeof value === "number" && value >= 0) {
                    this.playbackState = fn.PLAYING_STATE;
                    _.timeout = value;
                    _.samplesMax = (_.samplerate * (value * 0.001))|0;
                    _.samples = _.samplesMax;
                }
            },
            get: function() {
                return this._.timeout;
            }
        },
        currentTime: {
            get: function() {
                return this._.currentTime;
            }
        }
    });

    $.bang = function() {
        var _ = this._;
        this.playbackState = fn.PLAYING_STATE;
        _.samples = _.samplesMax;
        _.currentTime = 0;
        _.emit("bang");
        return this;
    };

    $.process = function(tickID) {
        var cell = this.cells[0];
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            if (_.samples > 0) {
                _.samples -= cell.length;
            }

            if (_.samples <= 0) {
                var nodes = this.nodes;
                for (var i = 0, imax = nodes.length; i < imax; ++i) {
                    nodes[i].bang();
                }
                fn.nextTick(_.onended);
            }
            _.currentTime += fn.currentTimeIncr;
        }
        return this;
    };

    fn.register("timeout", TimeoutNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function WaveShaperNode(_args) {
        T.Object.call(this, 1, _args);
        fn.fixAR(this);

        this._.curve = null;
    }
    fn.extend(WaveShaperNode);

    var $ = WaveShaperNode.prototype;

    Object.defineProperties($, {
        curve: {
            set: function(value) {
                if (fn.isSignalArray(value)) {
                    this._.curve = value;
                }
            },
            get: function() {
                return this._.curve;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            fn.inputSignalAR(this);

            if (_.curve) {
                var cell = this.cells[0];
                var curve = _.curve;
                var len    = curve.length;
                var x, i, imax = _.cellsize;
                for (i = 0; i < imax; ++i) {
                    x = (((cell[i] + 1) * 0.5) * len + 0.5)|0;
                    if (x < 0) {
                        x = 0;
                    } else if (x >= len - 1) {
                        x = len - 1;
                    }
                    cell[i] = curve[x];
                }
            }

            fn.outputSignalAR(this);
        }

        return this;
    };

    fn.register("waveshaper", WaveShaperNode);

})(timbre);
(function(T) {
    "use strict";

    var fn = T.fn;

    function ZMapNode(_args) {
        T.Object.call(this, 1, _args);

        var _ = this._;
        _.inMin  = 0;
        _.inMax  = 1;
        _.outMin = 0;
        _.outMax = 1;
        _.ar     = false;

        this.once("init", oninit);
    }
    fn.extend(ZMapNode);

    var oninit = function() {
        if (!this._.warp) {
            this.warp = "linlin";
        }
    };

    var $ = ZMapNode.prototype;

    Object.defineProperties($, {
        inMin: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.inMin = value;
                }
            },
            get: function() {
                return this._.inMin;
            }
        },
        inMax: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.inMax = value;
                }
            },
            get: function() {
                return this._.inMax;
            }
        },
        outMin: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.outMin = value;
                }
            },
            get: function() {
                return this._.outMin;
            }
        },
        outMax: {
            set: function(value) {
                if (typeof value === "number") {
                    this._.outMax = value;
                }
            },
            get: function() {
                return this._.outMax;
            }
        },
        warp: {
            set: function(value) {
                if (typeof value === "string") {
                    var f = WarpFunctions[value];
                    if (f) {
                        this._.warp = f;
                        this._.warpName = value;
                    }
                }
            },
            get: function() {
                return this._.warpName;
            }
        }
    });

    $.process = function(tickID) {
        var _ = this._;
        var cell = this.cells[0];

        if (this.tickID !== tickID) {
            this.tickID = tickID;

            var inMin  = _.inMin, inMax   = _.inMax;
            var outMin = _.outMin, outMax = _.outMax;
            var warp   = _.warp;

            var len = this.nodes.length;
            var mul = _.mul, add = _.add;
            var i, imax = cell.length;

            if (_.ar && len) {
                fn.inputSignalAR(this);
                for (i = 0; i < imax; ++i) {
                    cell[i] = warp(cell[i], inMin, inMax, outMin, outMax) * mul + add;
                }
                fn.outputSignalAR(this);
            } else {
                var input = (this.nodes.length) ? fn.inputSignalKR(this) : 0;
                var value = warp(input, inMin, inMax, outMin, outMax) * mul + add;
                for (i = 0; i < imax; ++i) {
                    cell[i] = value;
                }
            }
        }

        return this;
    };

    var WarpFunctions = {
        linlin: function(x, inMin, inMax, outMin, outMax) {
            if (x < inMin) {
                return outMin;
            } else if (x > inMax) {
                return outMax;
            }
            if (inMax === inMin) {
                return outMin;
            }
            return (x-inMin) / (inMax-inMin) * (outMax-outMin) + outMin;
        },
        linexp: function(x, inMin, inMax, outMin, outMax) {
            if (x < inMin) {
                return outMin;
            } else if (x > inMax) {
                return outMax;
            }
            if (outMin === 0) {
                return 0;
            }
            if (inMax === inMin) {
                return outMax;
            }
            return Math.pow(outMax/outMin, (x-inMin)/(inMax-inMin)) * outMin;
        },
        explin: function(x, inMin, inMax, outMin, outMax) {
            if (x < inMin) {
                return outMin;
            } else if (x > inMax) {
                return outMax;
            }
            if (inMin === 0) {
                return outMax;
            }
            return Math.log(x/inMin) / Math.log(inMax/inMin) * (outMax-outMin) + outMin;
        },
        expexp: function(x, inMin, inMax, outMin, outMax) {
            if (x < inMin) {
                return outMin;
            } else if (x > inMax) {
                return outMax;
            }
            if (inMin === 0 || outMin === 0) {
                return 0;
            }
            return Math.pow(outMax/outMin, Math.log(x/inMin) / Math.log(inMax/inMin)) * outMin;
        }
    };

    fn.register("zmap", ZMapNode);

})(timbre);

(function(T) {
    "use strict";

    if (T.env !== "webkit") {
        return;
    }

    var fn = T.fn;
//    var context = fn._audioContext;
    var BUFFERSIZE = 1024;

    function WebAudioAPINode(_args) {
        timbre.Object.call(this, 2, _args.slice(0, _args.length-1));
        fn.fixAR(this);

        var _ = this._;
        var context = _args.slice(-1)[0];

        _.mode = "";
        _.bufferL = new fn.SignalArray(BUFFERSIZE << 2);
        _.bufferR = new fn.SignalArray(BUFFERSIZE << 2);
        _.buffermask = _.bufferL.length - 1;
        _.node   = null;
        _.script = context.createScriptProcessor(BUFFERSIZE, 2, 2);
        _.writeIndex = 0;
        _.readIndex  = 0;
        _.totalRead  = 0;
        _.totalWrite = 0;
        _.context = context;
    }
    fn.extend(WebAudioAPINode);

    var $ = WebAudioAPINode.prototype;

    Object.defineProperties($, {
        context: {
            get: function() {
                return this._.context;
            }
        },
        mode: {
            get: function() {
                return this._.mode;
            }
        }
    });

    $.cancel = function() {
        var _ = this._;
        var cell = this.cells[0];
        for (var i = 0, imax = cell.length; i < imax; ++i) {
            cell[i] = 0;
        }
        _.node = null;

        if (_.connectIndex !== null && _.connectIndex !== undefined) {
            _.script.disconnect(_.connectIndex);
        } else {
            _.script.disconnect();
        }
    };

    (function() {
        function WebAudioAPIRecvNode(_args) {
            WebAudioAPINode.call(this, _args);
            var context = _args.slice(-1)[0];

            var _ = this._;
            _.mode = "recv";
            _.script.onaudioprocess = make_recv_process(this);
            _.gain = context.createGain();
            _.gain.gain.value = 0;
            _.script.connect(_.gain);
        }
        fn.extend(WebAudioAPIRecvNode, WebAudioAPINode);

        var make_recv_process = function(self) {
            return function(e) {
                var _ = self._;
                var ins = e.inputBuffer;
                var inputL = ins.getChannelData(0);
                var inputR = ins.getChannelData(1);
                var length = ins.length;
                var writeIndex = _.writeIndex;
                _.bufferL.set(inputL, writeIndex);
                _.bufferR.set(inputR, writeIndex);
                _.writeIndex = (writeIndex + length) & _.buffermask;
                _.totalWrite += length;
            };
        };

        var $ = WebAudioAPIRecvNode.prototype;

        $.cancel = function() {
            if(this._.node) {
              this._.node.disconnect();
            }
            WebAudioAPINode.prototype.cancel.call(this);
            this._.gain.disconnect();
        };

        $.recv = function(node) {
            var _ = this._;
            try {
                _.node = node;
                _.node.connect(_.script);
                _.gain.connect(_.context.destination);
            } catch(e) {
                _.node = null;
            }
            _.writeIndex = 0;
            _.readIndex  = 0;
            _.totalWrite = 0;
            _.totalRead  = 0;
            return this;
        };

        $.process = function(tickID) {
            var _ = this._;

            if (_.node === null) {
                return this;
            }

            if (this.tickID !== tickID) {
                this.tickID = tickID;

                var cellsize = _.cellsize;
                var bufferL = _.bufferL;
                var bufferR = _.bufferR;

                if (_.totalWrite > _.totalRead + cellsize) {
                    var begin = _.readIndex;
                    var end = begin + cellsize;
                    this.cells[1].set(bufferL.subarray(begin, end));
                    this.cells[2].set(bufferR.subarray(begin, end));
                    _.readIndex = end & _.buffermask;
                    _.totalRead += cellsize;
                }
                fn.outputSignalAR(this);
            }
            return this;
        };

        fn.register("WebAudioAPI:recv", WebAudioAPIRecvNode);
    })();

    (function() {
        function WebAudioAPISendNode(_args) {
            WebAudioAPINode.call(this, _args);
            fn.listener(this);

            var _ = this._;
            _.mode = "send";
            _.script.onaudioprocess = make_send_process(this);
            _.connectIndex = null;
        }
        fn.extend(WebAudioAPISendNode, WebAudioAPINode);

        var make_send_process = function(self) {
            return function(e) {
                var _ = self._;
                var outs = e.outputBuffer;
                var length  = outs.length;

                if (_.totalWrite > _.totalRead + length) {
                    var begin = _.readIndex;
                    var end = begin + length;
                    outs.getChannelData(0).set(_.bufferL.subarray(begin, end));
                    outs.getChannelData(1).set(_.bufferR.subarray(begin, end));
                    _.readIndex = end & _.buffermask;
                    _.totalRead += length;
                }
            };
        };

        var $ = WebAudioAPISendNode.prototype;

        $.cancel = function() {
            WebAudioAPINode.prototype.cancel.call(this);
            this.unlisten();
        };

        $.send = function(node, index) {
            var _ = this._;
            try {
                _.node = node;
                if (typeof index === "number") {
                    _.script.connect(_.node, index);
                    _.connectIndex = index;
                } else {
                    _.script.connect(_.node);
                    _.connectIndex = null;
                }
                this.listen();
            } catch(e) {
                _.node = null;
            }
            _.writeIndex = 0;
            _.readIndex  = 0;
            _.totalWrite = 0;
            _.totalRead  = 0;
            return this;
        };

        $.process = function(tickID) {
            var _ = this._;

            if (_.script === null) {
                return this;
            }

            if (this.tickID !== tickID) {
                this.tickID = tickID;

                var cellL = this.cells[1];
                var cellR = this.cells[2];
                var cellsize = _.cellsize;
                var writeIndex = _.writeIndex;

                fn.inputSignalAR(this);

                _.bufferL.set(cellL, writeIndex);
                _.bufferR.set(cellR, writeIndex);
                _.writeIndex = (writeIndex + cellsize) & _.buffermask;
                _.totalWrite += cellsize;

                fn.outputSignalAR(this);
            }
            return this;
        };

        fn.register("WebAudioAPI:send", WebAudioAPISendNode);
    })();

})(timbre);

(function(n){var e=function(){var i=arguments[0],t=[].slice.call(arguments,1);for(var n=0;n<t.length;++n){var r=t[n];for(key in r){var o=r[key];i[key]=typeof o==="object"?e(typeof i[key]==="object"?i[key]:{},o):o}}return i};var o={wav:"WebAudioRecorderWav.min.js",ogg:"WebAudioRecorderOgg.min.js",mp3:"WebAudioRecorderMp3.min.js"};var t={workerDir:"/",numChannels:2,encoding:"wav",options:{timeLimit:300,encodeAfterRecord:false,progressInterval:1e3,bufferSize:undefined,wav:{mimeType:"audio/wav"},ogg:{mimeType:"audio/ogg",quality:.5},mp3:{mimeType:"audio/mpeg",bitRate:160}}};var i=function(i,n){e(this,t,n||{});this.context=i.context;if(this.context.createScriptProcessor==null)this.context.createScriptProcessor=this.context.createJavaScriptNode;this.input=this.context.createGain();i.connect(this.input);this.buffer=[];this.initWorker()};e(i.prototype,{isRecording:function(){return this.processor!=null},setEncoding:function(e){if(this.isRecording())this.error("setEncoding: cannot set encoding during recording");else if(this.encoding!==e){this.encoding=e;this.initWorker()}},setOptions:function(i){if(this.isRecording())this.error("setOptions: cannot set options during recording");else{e(this.options,i);this.worker.postMessage({command:"options",options:this.options})}},startRecording:function(){if(this.isRecording())this.error("startRecording: previous recording is running");else{var i=this.numChannels,e=this.buffer,n=this.worker;this.processor=this.context.createScriptProcessor(this.options.bufferSize,this.numChannels,this.numChannels);this.input.connect(this.processor);this.processor.connect(this.context.destination);this.processor.onaudioprocess=function(t){for(var o=0;o<i;++o)e[o]=t.inputBuffer.getChannelData(o);n.postMessage({command:"record",buffer:e})};this.worker.postMessage({command:"start",bufferSize:this.processor.bufferSize});this.startTime=Date.now()}},recordingTime:function(){return this.isRecording()?(Date.now()-this.startTime)*.001:null},cancelRecording:function(){if(this.isRecording()){this.input.disconnect();this.processor.disconnect();delete this.processor;this.worker.postMessage({command:"cancel"})}else this.error("cancelRecording: no recording is running")},finishRecording:function(){if(this.isRecording()){this.input.disconnect();this.processor.disconnect();delete this.processor;this.worker.postMessage({command:"finish"})}else this.error("finishRecording: no recording is running")},cancelEncoding:function(){if(this.options.encodeAfterRecord)if(this.isRecording())this.error("cancelEncoding: recording is not finished");else{this.onEncodingCanceled(this);this.initWorker()}else this.error("cancelEncoding: invalid method call")},initWorker:function(){if(this.worker!=null)this.worker.terminate();this.onEncoderLoading(this,this.encoding);this.worker=new Worker(this.workerDir+o[this.encoding]);var e=this;this.worker.onmessage=function(n){var i=n.data;switch(i.command){case"loaded":e.onEncoderLoaded(e,e.encoding);break;case"timeout":e.onTimeout(e);break;case"progress":e.onEncodingProgress(e,i.progress);break;case"complete":e.onComplete(e,i.blob);break;case"error":e.error(i.message)}};this.worker.postMessage({command:"init",config:{sampleRate:this.context.sampleRate,numChannels:this.numChannels},options:this.options})},error:function(e){this.onError(this,"WebAudioRecorder.min.js:"+e)},onEncoderLoading:function(e,i){},onEncoderLoaded:function(e,i){},onTimeout:function(e){e.finishRecording()},onEncodingProgress:function(e,i){},onEncodingCanceled:function(e){},onComplete:function(e,i){e.onError(e,"WebAudioRecorder.min.js: You must override .onComplete event")},onError:function(i,e){console.log(e)}});n.WebAudioRecorder=i})(window);

;

(function () {
  var TypeConversor = function TypeConversor(typeName) {
    var conversorArray = [];

    this.add = function (conversor) {
      conversorArray.push(conversor);
    };

    this.cast = function (obj) {
      for (var i = 0; i < conversorArray.length; i++) {
        var conversor = conversorArray[i];
        var converted = conversor(obj);
        if (converted) return converted;
      }

      throw "Can't convert " + obj + " to " + typeName;
    };
  };

  var TypeCast = function TypeCast() {
    var typeConversors = {};

    this.register = function (typeName, conversor) {
      var typeConversor;

      if (!typeConversors[typeName]) {
        typeConversors[typeName] = new TypeConversor(typeName);
      }

      typeConversor = typeConversors[typeName];
      typeConversor.add(conversor);
    };

    this.cast = function (typeName, obj) {
      var typeConversor = typeConversors[typeName];
      if (!typeConversor) throw "unkown type " + typeName;
      return typeConversor.cast(obj);
    };
  };

  window.MUSIC = window.MUSIC || {};
  window.MUSIC.Types = new TypeCast();
})();
;

window.MUSIC = window.MUSIC || {};

(function () {
  MUSIC.SoundLib = MUSIC.SoundLib || {};
  MUSIC.Effects = MUSIC.Effects || {};

  MUSIC.playablePipeExtend = function (obj) {
    obj.during = function (_duration) {
      var original = this;
      return MUSIC.playablePipeExtend({
        play: function play() {
          var stopped = false;
          var playable = original.play();
          var wrapper = {
            stop: function stop() {
              if (!stopped) playable.stop();
              stopped = true;
            }
          };
          setTimeout(wrapper.stop, _duration);
          return wrapper;
        },
        duration: function duration() {
          return _duration;
        }
      });
    };

    obj.stopDelay = function (delay) {
      var original = this;
      return MUSIC.playablePipeExtend({
        play: function play(param) {
          var playing = original.play(param);
          return {
            stop: function stop() {
              setTimeout(playing.stop.bind(playing), delay);
            }
          };
        }
      });
    };

    obj.onError = function (fcn) {
      var original = this;
      return MUSIC.playablePipeExtend({
        play: function play(param) {
          try {
            var playing = original.play(param);
            return {
              stop: function stop() {
                try {
                  playing.stop();
                } catch (e) {
                  console.error(e);
                  fcn(e);
                }
              }
            };
          } catch (e) {
            console.error(e);
            fcn(e);
            throw e;
          }
        }
      });
    };

    obj.onStop = function (fcn) {
      var original = this;
      return MUSIC.playablePipeExtend({
        play: function play(param) {
          var playing = original.play(param);
          return {
            stop: function stop() {
              playing.stop();
              fcn(param);
            }
          };
        }
      });
    };

    return obj;
  };

  MUSIC.Types.register("playable", function (playable) {
    if (playable.play) {
      return playable;
    }
  });
  MUSIC.Types.register("playable", function (fcn) {
    if (typeof fcn === "function") {
      return {
        play: fcn
      };
    }
  });

  MUSIC.EffectsPipeline = function (audio, audioDestination) {
    this._audio = audio;
    this._audioDestination = audioDestination;
  };

  var defaultWrapFcn = function defaultWrapFcn(obj) {
    return obj;
  };

  var compose = function compose(f, g) {
    return function (obj) {
      return g(f(obj));
    };
  };

  MUSIC.EffectsPipeline.prototype = {
    _wrapFcn: defaultWrapFcn,
    wrap: function wrap(f) {
      var ret = new MUSIC.DummyNode(this);

      if (this._wrapFcn !== defaultWrapFcn) {
        f = compose(f, this._wrapFcn);
      }

      ret._wrapFcn = function (obj) {
        var ret2 = f(obj);
        ret2._wrapFcn = ret._wrapFcn;
        return ret2;
      };

      return ret;
    },
    sfxBase: function sfxBase() {
      var objects = [];

      var dispose = function dispose(obj) {
        obj.dispose();
      };

      var sfxBaseWrapper = function sfxBaseWrapper(elem) {
        if (!elem.dispose) return elem;

        var removeElem = function removeElem(x) {
          return x != elem;
        };

        var originalDispose = elem.dispose;
        objects.push(elem);

        elem.dispose = function () {
          objects = objects.filter(removeElem);
          originalDispose.call(elem);
        };

        return elem;
      };

      var sfxPrune = function sfxPrune() {
        objects.forEach(dispose);
      };

      var ret = this.wrap(sfxBaseWrapper);
      var original = this;

      ret.getOriginal = function () {
        if (original.getOriginal) return original.getOriginal();
        return original;
      };

      ret.prune = sfxPrune;
      return ret;
    },
    constant: function constant(options) {
      return this._wrapFcn(new MUSIC.SoundLib.Constant(this._audio, this._audioDestination, options));
    },
    oscillator: function oscillator(options) {
      return this._wrapFcn(new MUSIC.SoundLib.Oscillator(this._audio, this._audioDestination, options));
    },
    soundfont: function soundfont(param) {
      return this._wrapFcn(new MUSIC.SoundfontInstrument(param, this._audio, this._audioDestination));
    },
    sound: function sound(path) {
      var audio = this._audio;
      var audioDestination = this._audioDestination;
      var request = new XMLHttpRequest();
      request.open("GET", path, true);
      request.responseType = "arraybuffer";
      var audioBuffer;

      request.onerror = function (err) {
        console.error(err);
      };

      request.onload = function (e) {
        audio.audio.decodeAudioData(request.response, function (buffer) {
          audioBuffer = buffer;
        });
      };

      request.send();
      return MUSIC.playablePipeExtend({
        play: function play() {
          var bufferSource = audio.audio.createBufferSource();
          bufferSource.buffer = audioBuffer;
          bufferSource.connect(audioDestination._destination);
          bufferSource.start(audio.audio.currentTime);
          return {
            stop: function stop() {
              bufferSource.stop();
              bufferSource.disconnect(audioDestination._destination);
            }
          };
        }
      });
    },
    formulaGenerator: function formulaGenerator(fcn) {
      return this._wrapFcn(new MUSIC.SoundLib.FormulaGenerator(this._audio, this._audioDestination, fcn));
    },
    signal_and: function signal_and(value) {
      return this.gain(value || 1);
    },
    signal_nand: function signal_nand(value) {
      return this.signal_not().signal_and(value || 1);
    },
    signal_or: function signal_or(value) {
      return this.signal_not().signal_nor(value || 0);
    },
    signal_nor: function signal_nor(value) {
      var negateModl = function negateModl(modl) {
        if (!modl.apply) return modl;
        return {
          apply: function apply(currentTime, audioParam, music) {
            return modl.apply(currentTime, audioParam, music, function (modulatorFactory, f) {
              return f(modulatorFactory.signal_not());
            });
          }
        };
      };

      var andNode = this.signal_and(1);

      var update = function update(value) {
        andNode.update(negateModl(value));
      };

      update(value);
      var ret = andNode.signal_not();
      ret.update = update;
      return ret;
    },
    signal_not: function signal_not() {
      return this.signal_scale({
        top: 0,
        base: 2
      });
    },
    signal_scale: function signal_scale(options) {
      var gain = this.gain(1.0);
      var c1 = this.constant(0.0);
      var gainUpdate = gain.update.bind(gain);
      var gainDispose = gain.dispose.bind(gain);
      var constantUpdate = c1.update.bind(c1);
      var constantDispose = c1.dispose.bind(c1);

      var dispose = function dispose() {
        gainDispose();
        constantDispose();
      };

      var update = function update(options) {
        var a, b;
        a = (options.top - options.base) / 2;
        b = options.base + a;
        gainUpdate(a);
        constantUpdate(b);
      };

      update(options);
      gain.update = update;
      gain.dispose = dispose;
      return gain;
    },
    T: function T() {
      return this._wrapFcn(new MUSIC.T(arguments, this._audio, this._audioDestination));
    },
    noise: function noise() {
      return this._wrapFcn(new MUSIC.SoundLib.Noise(this._audio, this._audioDestination));
    },
    pink_noise: function pink_noise() {
      return this._wrapFcn(new MUSIC.SoundLib.PinkNoise(this._audio, this._audioDestination));
    },
    red_noise: function red_noise() {
      return this._wrapFcn(new MUSIC.SoundLib.RedNoise(this._audio, this._audioDestination));
    }
  };

  MUSIC.DummyNode = function (music) {
    MUSIC.EffectsPipeline.apply(this, [music._audio, music._audioDestination]);
  };

  MUSIC.DummyNode.prototype = Object.create(MUSIC.EffectsPipeline.prototype);

  MUSIC.T = function (args, music, audioDestination) {
    var api = T("WebAudioAPI:recv", music.audio
    /* audioContext */
    );
    var context = api.context;
    var gainNode = context.createGain(1.0);
    api.recv(gainNode);
    setTimeout(function () {
      // this hack prevents a bug in current version of chrome
      gainNode.connect(audioDestination._destination);
    });
    var Targuments = [];

    for (var i = 0; i < args.length; i++) {
      Targuments.push(args[i]);
    }

    ;
    Targuments.push(api);
    var synth = T.apply(null, Targuments); // ("reverb", {room:0.95, damp:0.1, mix:0.75}, api);

    var send = T("WebAudioAPI:send", synth, music.audio
    /* audioContext */
    ).send(audioDestination._destination);

    this.output = function () {
      return gainNode;
    };

    var disconnected = false;

    this.disconnect = function () {
      if (disconnected) return;
      disconnected = true;
      gainNode.disconnect(audioDestination._destination);
      send.removeAll();
      api.cancel();
      send.cancel();
      synth.unlisten();
    };

    this.dispose = this.disconnect;
    this._destination = gainNode;

    this.next = function () {
      return audioDestination;
    };

    MUSIC.EffectsPipeline.bind(this)(music, this);
  };

  MUSIC.T.prototype = Object.create(MUSIC.EffectsPipeline.prototype);

  MUSIC.Effects.register = function (effectName, fcn) {
    MUSIC.EffectsPipeline.prototype[effectName] = function (value) {
      return this._wrapFcn(fcn(this._audio, this._audioDestination, value));
    };
  };

  var audioContext = new (window.AudioContext || window.webkitAudioContext)();

  MUSIC.Context = function (options) {
    var audio = audioContext;
    var music = this;
    var gainNode = audio.createGain();
    options = options || {};
    gainNode.gain.value = 1.0;
    if (!options.nooutput) gainNode.connect(audio.destination);
    music.audio = audio;
    music._destination = gainNode;

    this.resume = function () {
      if (audioContext.state !== 'running') {
        audioContext.resume();
      }
    };

    this.record = function (options, callback) {
      var recorder = new WebAudioRecorder(gainNode, {
        workerDir: "src/lib/recorder/worker/",
        encoding: options.encoding,
        numChannels: options.numChannels
      });

      recorder.onComplete = function (recorder, blob) {
        callback(blob);
      };

      recorder.startRecording(); //recorder.record();

      return {
        stop: function stop() {
          recorder.finishRecording();
        }
      };
    };

    this.audio = audio;
    MUSIC.EffectsPipeline.bind(this)(music, this);
  };

  MUSIC.Context.prototype = new MUSIC.EffectsPipeline();

  MUSIC.SoundLib.FormulaGenerator = function (audio, nextProvider, fcn) {
    this.play = function (param) {
      var audioDestination;
      var formulaGenerator = new MUSIC.Effects.Formula(audio, nextProvider, function (input, t) {
        return fcn(t);
      });
      return {
        stop: function stop() {
          formulaGenerator.disconnect(nextProvider._destination);
        }
      };
    };

    MUSIC.playablePipeExtend(this);
  };

  MUSIC.SoundLib.PinkNoise = function (audio, nextProvider) {
    this.play = function (param) {
      var audioDestination;
      var b0, b1, b2, b3, b4, b5, b6;
      b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;
      var noiseGenerator = new MUSIC.Effects.Formula(audio, nextProvider, function () {
        var white = Math.random() * 2 - 1;
        b0 = 0.99886 * b0 + white * 0.0555179;
        b1 = 0.99332 * b1 + white * 0.0750759;
        b2 = 0.96900 * b2 + white * 0.1538520;
        b3 = 0.86650 * b3 + white * 0.3104856;
        b4 = 0.55000 * b4 + white * 0.5329522;
        b5 = -0.7616 * b5 - white * 0.0168980;
        var ret = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
        b6 = white * 0.115926;
        return ret * 0.11;
      });
      return {
        stop: function stop() {
          noiseGenerator.disconnect(nextProvider._destination);
        }
      };
    };

    this.setValue = function () {};

    MUSIC.playablePipeExtend(this);
  };

  MUSIC.SoundLib.RedNoise = function (audio, nextProvider) {
    this.play = function (param) {
      var audioDestination;
      var lastOut = 0.0;
      var noiseGenerator = new MUSIC.Effects.Formula(audio, nextProvider, function () {
        var white = Math.random() * 2 - 1;
        var ret = (lastOut + 0.02 * white) / 1.02;
        lastOut = ret;
        return ret * 3.5;
      });
      return {
        stop: function stop() {
          noiseGenerator.disconnect(nextProvider._destination);
        }
      };
    };

    this.setValue = function () {};

    MUSIC.playablePipeExtend(this);
  };

  MUSIC.SoundLib.Noise = function (audio, nextProvider) {
    var audioContext = audio.audio;
    var bufferSize = 2 * audioContext.sampleRate,
        noiseBuffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate),
        output = noiseBuffer.getChannelData(0);

    for (var i = 0; i < bufferSize; i++) {
      output[i] = Math.random() * 2 - 1;
    }

    this.play = function (param) {
      var whiteNoise = audioContext.createBufferSource();
      whiteNoise.buffer = noiseBuffer;
      whiteNoise.loop = true;
      whiteNoise.start(0);
      whiteNoise.connect(nextProvider._destination);
      return {
        stop: function stop() {
          whiteNoise.stop();
          whiteNoise.disconnect(nextProvider._destination);
        }
      };
    };

    this.setValue = function () {};

    MUSIC.playablePipeExtend(this);
  };

  MUSIC.SoundLib.Wave = function (path, period) {
    var music = new MUSIC.Context({
      nooutput: true
    });
    var sound = music.sound(path);
    var sampleCount = Math.floor(period * music.audio.sampleRate / 1000);
    var dataArray = []; // fix race condition using callbacks

    setTimeout(function () {
      var recording = music.record();
      sound.play();
      setTimeout(function () {
        recording.stop();
        recording.getBuffer(function (data) {
          var originalDataArray = data[0];

          for (var i = 0; i < sampleCount; i++) {
            dataArray.push(originalDataArray[i]);
          }
        });
      }, period + 100);
    }, 500);

    this.f = function (t) {
      if (t < 0) return 0;
      var value1 = dataArray[Math.floor(t * sampleCount)];
      return value1;
    };
  };

  MUSIC.AudioDestinationWrapper = function (music, audioDestination) {
    this._destination = audioDestination;
    MUSIC.EffectsPipeline.bind(this)(music, this);
  };

  MUSIC.AudioDestinationWrapper.prototype = Object.create(MUSIC.EffectsPipeline.prototype);

  MUSIC.modulator = function (f) {
    var _f = function _f(modulatorFactory, f) {
      return f(modulatorFactory);
    };

    return {
      apply: function apply(currentTime, audioParam, music, combineFunc) {
        var modulatorFactory, modulator;
        modulatorFactory = new MUSIC.AudioDestinationWrapper(music, audioParam).sfxBase();
        modulatorFactory.audioParamModulation = audioParam;
        modulator = (combineFunc || _f)(modulatorFactory, f);
        return {
          dispose: function dispose() {
            modulatorFactory.prune();
          }
        };
      }
    };
  };

  (function () {
    var len = 128;
    var constantArrayBuffer = new Float32Array(len);

    for (var i = 0; i < len; i++) {
      constantArrayBuffer[i] = 1;
    }

    ;
    var buffer1;

    MUSIC.SoundLib.Constant = function (music, destination, options) {
      var constantNode;
      var bufferSource;
      var buffer;
      var audioContext = music._audio.audio;

      if (audioContext.createConstantSource) {
        constantNode = audioContext.createConstantSource();
        this._destination = constantNode;
        constantNode.offset.value = options.offset || 0.0;
        constantNode.connect(destination._destination);
        constantNode.start();
      } else {
        constantNode = audioContext.createGain();
        bufferSource = audioContext.createBufferSource();
        constantNode.gain.value = options.offset || 0.0;

        if (!buffer1) {
          buffer1 = audioContext.createBuffer(1, constantArrayBuffer.length, music._audio.audio.sampleRate);
          buffer1.getChannelData(0).set(constantArrayBuffer);
        }

        bufferSource.loop = true;
        bufferSource.buffer = buffer1;
        bufferSource.connect(constantNode);
        constantNode.connect(destination._destination);
        bufferSource.start();
      }

      var noop = function noop() {};

      this.setParam = function (paramName, value) {
        if (paramName === 'offset' && !audioContext.createConstantSource) paramName = 'gain';
        value.apply(music.audio.currentTime, constantNode[paramName]);
      };

      this.setParamTarget = function (paramName, target, timeConstant) {
        if (paramName === 'offset' && !audioContext.createConstantSource) paramName = 'gain';
        var audioParam = constantNode[paramName];
        audioParam.cancelScheduledValues(0.0);
        audioParam.setTargetAtTime(target, music.audio.currentTime, timeConstant);
      };

      this.dispose = function () {
        if (audioContext.createConstantSource) {
          constantNode.stop();
        } else {
          bufferSource.stop();
          bufferSource.disconnect(constantNode);
        }

        constantNode.disconnect(destination._destination);

        this.dispose = function () {};
      };

      this.update = function (value) {
        if (audioContext.createConstantSource) {
          constantNode.offset.value = value;
        } else {
          constantNode.gain.value = value;
        }
      };

      this.freq = function (newFreq) {
        var playable = {};
        playable.setFreq = noop;
        playable.reset = noop;

        playable.play = function () {
          return {
            stop: noop
          };
        };

        MUSIC.playablePipeExtend(playable);
        return playable;
      };
    };
  })();

  MUSIC.SoundLib.Oscillator = function (music, destination, options) {
    options = options || {};
    var effects = options.effects;
    var detune = options.detune;
    var frequency = options.frequency;
    var time_constant = options.time_constant;
    var audioDestination;
    audioDestination = destination._destination;
    if (!isFinite(time_constant) || isNaN(time_constant) || time_constant <= 0) time_constant = 0.01;
    var osc;
    osc = music.audio.createOscillator();
    osc.connect(audioDestination);
    var appliedAudioParam;

    if (frequency) {
      osc.frequency.value = frequency;
    }

    if (detune) {
      if (detune.apply) {
        appliedAudioParam = detune.apply(music.audio.currentTime, osc.detune, music);
      } else {
        osc.detune.value = detune;
      }
    }

    if (options.type === "custom") {
      var real = new Float32Array(options.terms.sin || []);
      var imag = new Float32Array(options.terms.cos || []);
      var periodicWave = music.audio.createPeriodicWave(real, imag);
      osc.setPeriodicWave(periodicWave);
    } else {
      osc.type = options.type;
    }

    this.currentTime = function () {
      return music.audio.currentTime;
    };

    this.schedule_freq = function (newFreq, start) {
      var tc;
      tc = time_constant || 0.1;

      var stop = function stop() {};

      var play = function play() {
        osc.frequency.setTargetAtTime(newFreq, start, tc);
        return {
          stop: stop
        };
      };

      return {
        play: play
      };
    };

    this.freq = function (newFreq) {
      var frequency = options.fixed_frequency ? options.fixed_frequency : newFreq;

      if (frequency) {
        osc.frequency.value = frequency;
      }

      var playable = {};

      playable.setFreq = function (frequency, noteOptions) {
        playable.setFreqOnTime(frequency, noteOptions, music.audio.currentTime);
      };

      playable.cancelScheduledValues = function () {
        osc.frequency.cancelScheduledValues(0.0);
      };

      playable.setFreqOnTime = function (frequency, noteOptions, start) {
        if (options.fixed_frequency) return;
        var tc;

        if (noteOptions && noteOptions.tc) {
          tc = noteOptions.tc;
        } else {
          tc = time_constant || 0.1;
        }

        osc.frequency.setTargetAtTime(frequency, start, tc);
      };

      playable.reset = function () {};

      playable.play = function (param) {
        var nextNode;
        var disposeNode;

        disposeNode = function disposeNode() {
          if (osc) osc.disconnect(audioDestination);
          osc = null;
        };

        osc.start(0);
        return {
          stop: function stop() {
            if (appliedAudioParam && appliedAudioParam.dispose) {
              appliedAudioParam.dispose();
            }

            if (osc) osc.stop(0);
            disposeNode();
          }
        };
      };

      MUSIC.playablePipeExtend(playable);
      return playable;
    };

    if (options.f) {
      this.play = function (param) {
        var wtPosition = options.wtPosition || 0;
        var fcn = options.f;
        var ta = 0;
        var frequency;
        var optionsFrequency = options.frequency;

        if (optionsFrequency.at) {
          frequency = optionsFrequency.at.bind(optionsFrequency);
        } else {
          frequency = function frequency(t) {
            return optionsFrequency;
          };
        }

        var deltatime = 0;
        var lastTime = 0;
        var tb;

        if (wtPosition.at) {
          var formulaGenerator = new MUSIC.Effects.Formula(music, destination, function (input, t) {
            deltatime = t - lastTime;
            ta += deltatime * frequency(t);
            ta = ta % 1;
            tb = ta + wtPosition.at(t);
            tb = tb % 1;
            if (tb < 0) tb++;
            lastTime = t;
            return fcn(tb);
          });
        } else {
          var formulaGenerator = new MUSIC.Effects.Formula(music, destination, function (input, t) {
            deltatime = t - lastTime;
            ta += deltatime * frequency(t);
            ta = ta % 1;
            tb = ta + wtPosition;
            tb = tb % 1;
            if (tb < 0) tb++;
            lastTime = t;
            return fcn(tb);
          });
        }

        return {
          stop: function stop() {
            formulaGenerator.disconnect(destination._destination);
          }
        };
      };
    } else if (options.wave) {
      var newOptions = Object.create(options);
      newOptions.f = options.wave.f;
      MUSIC.SoundLib.Oscillator.bind(this)(music, destination, newOptions);
    } else {}
  };

  MUSIC.Loop = function (playable, times) {
    var original = playable;
    var duration = playable.duration();
    return {
      play: function play() {
        var lastPlay;
        var startTime = window.performance.now();
        var lastTime = startTime;
        var currentIteration = 0;
        lastPlay = playable.play();

        var nextIteration = function nextIteration() {
          var now = window.performance.now();

          if (now - startTime > currentIteration * duration) {
            // ms
            setTimeout(function () {
              lastPlay = playable.play();
            }, (currentIteration + 1) * duration - now);
            currentIteration++;

            if (currentIteration == times - 1) {
              clearInterval(inter);
            }
          }
        };

        var inter = setInterval(nextIteration, duration);
        return {
          stop: function stop() {
            clearInterval(inter);
            if (lastPlay) lastPlay.stop();
          }
        };
      }
    };
  };

  MUSIC.Silence = function (time) {
    return {
      play: function play() {
        return {
          stop: function stop() {}
        };
      },
      duration: function duration() {
        return time;
      }
    };
  };
})();
;

MUSIC.Effects = MUSIC.Effects || {};
var effectsObject = {};

MUSIC.Effects.forEach = function (cb) {
  for (var sfx in effectsObject) {
    cb(sfx, effectsObject[sfx]);
  }
};

MUSIC.Effects.WebAudioNodeWrapper = function (music, audioNode, next, onDispose) {
  this._destination = audioNode;
  setTimeout(function () {
    // this hack prevents a bug in current version of chrome
    audioNode.connect(next._destination);
  });

  this.next = function () {
    return next;
  };

  var disconnected = false;

  this.disconnect = function () {
    if (disconnected) return;
    if (onDispose) onDispose();
    disconnected = true;
    audioNode.disconnect(next._destination);
  };

  this.dispose = this.disconnect;

  this.output = function () {
    return audioNode;
  };

  this.currentTime = function () {
    return music.audio.currentTime;
  };

  this.setParam = function (paramName, value) {
    value.apply(music.audio.currentTime, audioNode[paramName]);
  };

  this.setParamTarget = function (paramName, target, timeConstant) {
    var audioParam = audioNode[paramName];
    audioParam.cancelScheduledValues(0.0);
    audioParam.setTargetAtTime(target, music.audio.currentTime, timeConstant);
  };

  this.record = function () {
    var rec = new Recorder(audioNode, {
      workerPath: "lib/recorder/recorderWorker.js"
    });
    rec.record();
    return rec;
  };

  MUSIC.EffectsPipeline.bind(this)(music, this);
};

MUSIC.Effects.WebAudioNodeWrapper.prototype = Object.create(MUSIC.EffectsPipeline.prototype);

MUSIC.Effects.Formula = function (music, next, fcn) {
  var scriptNode = music.audio.createScriptProcessor(1024, 1, 1);
  var iteration = 0;
  var sampleRate = music.audio.sampleRate;

  scriptNode.onaudioprocess = function (audioProcessingEvent) {
    // The input buffer is the song we loaded earlier
    var inputBuffer = audioProcessingEvent.inputBuffer; // The output buffer contains the samples that will be modified and played

    var outputBuffer = audioProcessingEvent.outputBuffer; // Loop through the output channels (in this case there is only one)

    for (var channel = 0; channel < outputBuffer.numberOfChannels; channel++) {
      var inputData = inputBuffer.getChannelData(channel);
      var outputData = outputBuffer.getChannelData(channel); // Loop through the 4096 samples

      for (var sample = 0; sample < inputBuffer.length; sample++) {
        // make output equal to the same as the input
        outputData[sample] = fcn(inputData[sample], (inputBuffer.length * iteration + sample) / sampleRate);
      }
    }

    iteration++;
  };

  setTimeout(function () {
    // this hack prevents a bug in current version of chrome
    scriptNode.connect(next._destination);
  });
  this._destination = scriptNode;
  MUSIC.EffectsPipeline.bind(this)(music, this);

  this.next = function () {
    return next;
  };

  var disconnected = false;

  this.disconnect = function () {
    if (disconnected) return;
    disconnected = true;
    setTimeout(function () {
      // this hack prevents a bug in current version of chrome
      scriptNode.disconnect(next._destination);
    });
  };

  this.dispose = this.disconnect;

  this.update = function (_f) {
    fcn = _f;
    this.fcn = fcn;
  };

  this.fcn = fcn;

  this.output = function () {
    return scriptNode;
  };

  this.isFormula = true;
};

MUSIC.Effects.Formula.prototype = Object.create(MUSIC.EffectsPipeline.prototype);
MUSIC.Effects.register("formula", function (music, next, fcn) {
  return new MUSIC.Effects.Formula(music, next, fcn);
});

MUSIC.Effects.BiQuad = function (music, next, options) {
  var biquadFilter = music.audio.createBiquadFilter();
  var gainModulation = nodispose;
  var qModulation = nodispose;
  var frequencyModulation = nodispose;
  var detuneModulation = nodispose;
  var biquadType = options.type;

  this.update = function (options) {
    biquadFilter.type = biquadType;

    var assignParam = function assignParam(orig, audioParam) {
      if (orig) {
        if (orig.apply) {
          return orig.apply(music.audio.currentTime, audioParam, music);
        } else {
          audioParam.value = orig;
        }
      }

      return nodispose;
    };

    gainModulation.dispose();
    qModulation.dispose();
    frequencyModulation.dispose();
    detuneModulation.dispose();
    gainModulation = assignParam(options.gain, biquadFilter.gain);
    qModulation = assignParam(options.Q, biquadFilter.Q);
    frequencyModulation = assignParam(options.frequency, biquadFilter.frequency);
    detuneModulation = assignParam(options.detune, biquadFilter.detune);
  };

  this.update(options);
  MUSIC.Effects.WebAudioNodeWrapper.bind(this)(music, biquadFilter, next, function () {
    gainModulation.dispose();
    qModulation.dispose();
    frequencyModulation.dispose();
    detuneModulation.dispose();
  });
};

MUSIC.Effects.BiQuad.prototype = Object.create(MUSIC.Effects.WebAudioNodeWrapper.prototype);
MUSIC.Effects.register("biquad", MUSIC.Effects.BiQuad);
["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"].forEach(function (filterName) {
  MUSIC.Effects.register(filterName, function (music, next, options) {
    return new MUSIC.Effects.BiQuad(music, next, {
      type: filterName,
      frequency: options.frequency,
      Q: options.Q,
      detune: options.detune
    });
  });
});

var canMutate = function canMutate(obj, updateFcn) {
  obj.update = function (value) {
    updateFcn(value);
    return obj;
  };

  return obj;
};

var nodispose = {
  dispose: function dispose() {}
};
MUSIC.Effects.register("gain", function (music, next, value) {
  var gainNode = music.audio.createGain();
  var volumeModulation = nodispose;
  return canMutate(new MUSIC.Effects.WebAudioNodeWrapper(music, gainNode, next, function () {
    volumeModulation.dispose();
  }), function (value) {
    volumeModulation.dispose();

    if (value.apply) {
      gainNode.gain.value = 0.0;
      volumeModulation = value.apply(music.audio.currentTime, gainNode.gain, music);
    } else {
      volumeModulation = nodispose;
      gainNode.gain.value = value;
    }
  }).update(value);
});
MUSIC.Effects.register("delay", function (music, next, value) {
  var delayNode = music.audio.createDelay(60);
  var delayModulation = nodispose;
  return canMutate(new MUSIC.Effects.WebAudioNodeWrapper(music, delayNode, next, function () {
    delayModulation.dispose();
  }), function (value) {
    delayModulation.dispose();

    if (value.apply) {
      delayModulation = value.apply(music.audio.currentTime, delayNode.delayTime, music);
    } else {
      delayModulation = nodispose;
      delayNode.delayTime.value = value;
    }
  }).update(value);
});

var Echo = function Echo(music, next, options) {
  this.update = function (options) {
    delayNode.delayTime.value = options.delay || 0.02;
    att.gain.value = options.gain === 0 ? 0 : options.gain || 0.2;
    if (delayNode.delayTime.value < 0.01) delayNode.delayTime.value = 0.01;
    if (delayNode.delayTime.value > 1) delayNode.delayTime.value = 1;
    if (att.gain.value > 0.99) att.gain.value = 0.99;
    if (att.gain.value < 0) att.gain.value = 0;
  };

  var delayNode = music.audio.createDelay(60);
  var gainNode = music.audio.createGain();
  var gainNode2 = music.audio.createGain();
  gainNode.gain.value = 1.0;
  gainNode2.gain.value = 1.0;
  var att = music.audio.createGain();
  this.update(options);
  setTimeout(function () {
    gainNode.connect(gainNode2);
    gainNode.connect(delayNode);
    delayNode.connect(att);
    gainNode2.connect(next._destination);
    gainNode2.connect(delayNode);
    att.connect(gainNode2);
  });
  this._destination = gainNode;

  this.next = function () {
    return next;
  };

  var disconnected = false;

  this.disconnect = function () {
    if (disconnected) return;
    disconnected = true;
    gainNode.disconnect(gainNode2);
    gainNode.disconnect(delayNode);
    delayNode.disconnect(att);
    gainNode2.disconnect(next._destination);
    gainNode2.disconnect(delayNode);
    att.disconnect(gainNode2);
  };

  this.dispose = this.disconnect;

  this.output = function () {
    return audioNode;
  };

  this.setParam = function (paramName, value) {
    value.apply(music.audio.currentTime, audioNode[paramName]);
  };

  MUSIC.EffectsPipeline.bind(this)(music, this);
};

Echo.prototype = Object.create(MUSIC.EffectsPipeline.prototype);

var WaveShaper = function WaveShaper(music, next, options) {
  options = options || {};
  var samples = options.samples || 8192;

  var f = options.f || function (t) {
    return t;
  };

  var makeDistortionCurve = function makeDistortionCurve() {
    var array = new Float32Array(samples);

    for (var i = 0; i < samples; i++) {
      array[i] = f(i * 2 / samples - 1);
    }

    return array;
  };

  this.next = function () {
    return next;
  };

  var waveShaperNode = music.audio.createWaveShaper();
  waveShaperNode.curve = makeDistortionCurve();
  waveShaperNode.oversample = '4x';
  setTimeout(function () {
    waveShaperNode.connect(next._destination);
  });
  this._destination = waveShaperNode;
  var disconnected = false;

  this.disconnect = function () {
    if (disconnected) return;
    disconnected = true;
    waveShaperNode.disconnect(next._destination);
  };

  MUSIC.EffectsPipeline.bind(this)(music, this);
};

WaveShaper.prototype = Object.create(MUSIC.EffectsPipeline.prototype);
MUSIC.Effects.register("echo", function (music, next, options) {
  return new Echo(music, next, options);
});
MUSIC.Effects.register("wave_shaper", function (music, next, options) {
  return new WaveShaper(music, next, options);
});

MUSIC.Curve = function (array) {
  this.during = during(array);
};

MUSIC.Curve.concat = function (c1, time1, c2, time2, n) {
  var time = time1 + time2;

  if (!n) {
    n = Math.floor(time * 100) + 1;
  }

  var at = function at(t) {
    if (t < time1) {
      return c1.at(t);
    } else {
      return c2.at(t - time1);
    }
  };

  var array = new Float32Array(n + 1);

  for (var i = 0; i < n + 1; i++) {
    array[i] = at(time * (i / n));
  }

  ;
  return {
    apply: function apply(currentTime, audioParam) {
      audioParam.cancelScheduledValues(0.0);
      audioParam.setValueCurveAtTime(array, currentTime, time);
    },
    at: at
  };
};

var during = function during(fcn, n) {
  return function (time) {
    if (!n) {
      n = Math.floor(time * 100) + 1;
    }

    var array = new Float32Array(n + 1);

    for (var i = 0; i < n + 1; i++) {
      array[i] = fcn(i / n);
    }

    ;
    return {
      apply: function apply(currentTime, audioParam) {
        audioParam.cancelScheduledValues(0.0);
        audioParam.setValueCurveAtTime(array, currentTime, time);
      },
      at: function at(t) {
        return fcn(t / time);
      }
    };
  };
};

MUSIC.Curve.Formula = function (fcn, n) {
  this.during = during(fcn, n);
};

MUSIC.Curve.Ramp = function (initValue, endValue, n) {
  MUSIC.Curve.Formula.bind(this)(function (t) {
    return initValue + (endValue - initValue) * t;
  }, n);
};

MUSIC.Curve.Periodic = function (fcn, frequency) {
  var ta = 0;
  var delayTime;
  var lastTime = 0;
  var deltatime;
  var tb;
  var period = 1.0 / frequency;

  if (frequency.at) {
    this.at = function (t) {
      deltatime = t - lastTime;
      ta += deltatime * frequency.at(t);
      ta = ta % 1;
      lastTime = t;
      return fcn(ta);
    };
  } else {
    this.at = function (t) {
      ta = t % period / period;
      if (ta < 0) ta++;
      return fcn(ta);
    };
  }
};

MUSIC.Effects.register("ADSR", function (music, next, options) {
  options = options || {};
  var samples = options.samples || 100;
  var attackTime = options.attackTime;
  var decayTime = options.decayTime;
  var sustainLevel = options.sustainLevel;
  var releaseTime = options.releaseTime;
  if (attackTime === undefined) attackTime = 0.1;
  if (decayTime === undefined) decayTime = 0.1;
  if (sustainLevel === undefined) sustainLevel = 0.8;
  if (releaseTime === undefined) releaseTime = 0.1;
  var nextNodeFcn = options.node;
  var attackCurve = new MUSIC.Curve.Ramp(0.0, 1.0, samples).during(attackTime);
  var decayCurve = new MUSIC.Curve.Ramp(1.0, sustainLevel, samples).during(decayTime);
  var startCurve = MUSIC.Curve.concat(attackCurve, attackTime, decayCurve, decayTime);
  var gainNode = next.gain(sustainLevel);
  gainNode.setParam('gain', startCurve);
  return nextNodeFcn(gainNode).onStop(function () {
    gainNode.dispose();
  }) // dispose gain node
  .stopDelay(releaseTime * 1000).onStop(function () {
    var currentLevel = gainNode._destination.gain.value;
    var releaseCurve = new MUSIC.Curve.Ramp(currentLevel, 0.0, samples).during(releaseTime);
    gainNode.setParam('gain', releaseCurve);
  }); // set gain curve
});
MUSIC.Effects.register("stopCurve", function (music, next, options) {
  options = options || {};
  var samples = options.samples || 100;
  var duration = options.duration || 0.4;
  var nextNodeFcn = options.node;
  var stopCurve = new MUSIC.Curve.Ramp(1.0, 0.0, samples).during(duration);
  var gainNode = next.gain(1.0);
  return nextNodeFcn(gainNode).onStop(function () {
    gainNode.dispose();
  }) // dispose gain node
  .stopDelay(duration * 1000).onStop(function () {
    gainNode.setParam('gain', stopCurve);
  }); // set gain curve
});
;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function () {
  var frequency = function frequency(notenum) {
    return 16.35 * Math.pow(2, notenum / 12);
  };

  var noteToNumMap = {
    'C': 0,
    'D': 2,
    'E': 4,
    'F': 5,
    'G': 7,
    'A': 9,
    'B': 11
  };

  var instrumentExtend = function instrumentExtend(obj) {
    var delayedPlaying = function delayedPlaying(originalPlaying, ms) {
      return {
        stop: function stop() {
          setTimeout(originalPlaying.stop.bind(originalPlaying), ms);
        }
      };
    };

    var delayedNote = function delayedNote(originalNote, ms) {
      return {
        play: function play(param) {
          var originalPlaying = originalNote.play(param);
          return delayedPlaying(originalPlaying, ms);
        }
      };
    };

    obj.stopDelay = function (ms) {
      return instrumentExtend({
        note: function note(noteNum, options) {
          return delayedNote(obj.note(noteNum, options), ms);
        }
      });
    };

    obj.perNoteWrap = function (wrapper) {
      return instrumentExtend({
        note: function note(noteNum, options) {
          return wrapper(obj.note(noteNum, options));
        }
      });
    };

    obj.mapNote = function (fcn) {
      return instrumentExtend({
        note: function note(noteNum, options) {
          return obj.note(fcn(noteNum), options);
        }
      });
    };

    if (!obj.eventPreprocessor) {
      obj.eventPreprocessor = function (evt) {
        return evt;
      };
    }

    if (!obj.note) {
      obj.note = function (n, options) {
        return this.schedule_note(n, options, 0.0);
      };
    }

    return obj;
  };

  MUSIC.noteToNoteNum = function (noteName) {
    var notenum;
    notenum = noteToNumMap[noteName.charAt(0)];
    if (notenum === undefined) return undefined;
    if (noteName.charAt(1) === '#') notenum++;
    if (noteName.charAt(1) === 'b') notenum--;
    if (noteName.charAt(2) !== "") notenum += 12 * parseInt(noteName.charAt(2));
    return notenum;
  };

  MUSIC.PolyphonyInstrument = function (innerFactory, maxChannels) {
    var instrumentArray = [];
    var onUse = [];
    var queue = [];

    var freeIdx = function freeIdx(maxChannels) {
      for (var i = 0; i < maxChannels; i++) {
        if (!onUse[i]) return i;
      }

      return queue[0] || 0;
    };

    this.note = function (notenum, options) {
      var c = maxChannels();
      var playingIdx = freeIdx(c);
      var instrument = instrumentArray[playingIdx];

      if (!instrument) {
        instrument = innerFactory();
        instrumentArray[playingIdx] = instrument;
      }

      queue.push(playingIdx);
      if (queue.length > c) queue.shift();
      onUse[playingIdx] = true;
      return instrument.note(notenum, options).onStop(function () {
        onUse[playingIdx] = false;
      });
    };

    instrumentExtend(this);

    this.eventPreprocessor = function (event, events) {
      var instrument = instrumentArray[0];

      if (!instrument) {
        instrument = innerFactory();
        instrumentArray[0] = instrument;
      }

      return (instrument.eventPreprocessor || function (x) {
        return x;
      })(event, events);
    };
  };

  MUSIC.MonoNoteInstrument = function (inner) {
    var noteInst;
    var playingInst;
    var count = 0;

    this.note = function (notenum, options) {
      if (!noteInst) {
        noteInst = inner.note(notenum, options);
      }

      return MUSIC.playablePipeExtend({
        play: function play(param) {
          if (!playingInst) {
            playingInst = noteInst.play(param);
          }

          noteInst.setValue(notenum, options);
          count++;
          return {
            stop: function stop() {
              count--;
              if (noteInst.reset && count === 0) noteInst.reset();
            }
          };
        }
      });
    };

    this.currentTime = function () {
      return inner.currentTime();
    };

    this.schedule_note = function (notenum, options, start) {
      if (!noteInst) {
        noteInst = inner.note(notenum, options);
      }

      return MUSIC.playablePipeExtend({
        play: function play(param) {
          if (!playingInst) {
            playingInst = noteInst.play(param);
          }

          noteInst.setValueOnTime(notenum, options, start);
          return {
            stop: function stop() {
              noteInst.cancelScheduledValues();
            }
          };
        }
      });
    };

    this.dispose = function () {
      if (playingInst) {
        playingInst.stop();
      }

      if (inner.dispose) inner.dispose();
    };

    instrumentExtend(this);
  };

  MUSIC.Instrument = function (soundFactory) {
    if (soundFactory.schedule_freq) {
      this.currentTime = function () {
        return soundFactory.currentTime();
      };

      this.schedule_note = function (notenum, options, startTime, duration) {
        if (notenum === undefined) return undefined;
        var freq = frequency(notenum);
        return MUSIC.playablePipeExtend({
          play: function play(param) {
            var fr = soundFactory.schedule_freq(freq, startTime);
            var soundInstance = fr.play(param);
            return {
              stop: function stop() {
                soundInstance.stop();
              }
            };
          }
        });
      };
    }

    this.note = function (notenum) {
      if (notenum === undefined) return undefined;
      var freq = frequency(notenum);
      return MUSIC.playablePipeExtend({
        play: function play(param) {
          var fr = soundFactory.freq(freq);
          var soundInstance = fr.play(param);

          if (fr.setFreq) {
            this.setValue = function (n, options) {
              fr.setFreq(frequency(n), options);
            };

            this.reset = fr.reset.bind(fr);
          }

          if (fr.cancelScheduledValues) {
            this.cancelScheduledValues = fr.cancelScheduledValues.bind(fr);
          }

          if (fr.setFreqOnTime) {
            this.setValueOnTime = function (n, options, start) {
              fr.setFreqOnTime(frequency(n), options, start);
            };

            this.reset = fr.reset.bind(fr);
          }

          return {
            stop: function stop() {
              soundInstance.stop();
            }
          };
        }
      });
    };

    instrumentExtend(this);
  };

  MUSIC.instrumentExtend = instrumentExtend;
  MUSIC.Instrument.frequency = frequency;

  MUSIC.MultiInstrument = function (instrumentArray) {
    if (Array.isArray(instrumentArray)) return MUSIC.MultiInstrument.bind(this)(function () {
      return instrumentArray;
    });

    var notePlay = function notePlay(note) {
      return note.play();
    };

    var noteStop = function noteStop(note) {
      return note.stop();
    };

    var MultiNote = function MultiNote(noteArray) {
      this.play = function () {
        var notes = noteArray.map(notePlay);
        return {
          stop: function stop() {
            notes.forEach(noteStop);
          }
        };
      };
    };

    this.note = function (noteNum, options) {
      return MUSIC.playablePipeExtend(new MultiNote(instrumentArray().map(function (instrument) {
        return instrument.note(noteNum, options);
      })));
    };

    this.dispose = function () {
      instrumentArray().forEach(function (i) {
        if (i.dispose) i.dispose();
      });
    };

    if (instrumentArray().every(function (i) {
      return i.schedule_note;
    })) {
      this.currentTime = function () {
        var instrument = instrumentArray().filter(function (i) {
          return i.currentTime;
        })[0];
        if (!instrument) return 0;
        return instrument.currentTime();
      };

      this.schedule_note = function (noteNum, options, startTime, duration) {
        return MUSIC.playablePipeExtend(new MultiNote(instrumentArray().map(function (instrument) {
          return instrument.schedule_note(noteNum, options, startTime, duration);
        })));
      };
    }

    instrumentExtend(this);

    this.eventPreprocessor = function (event, events) {
      var array = instrumentArray();
      if (!array.length) return event;
      var processedEvents = array.map(function (instrument) {
        if (instrument.eventPreprocessor) {
          return instrument.eventPreprocessor(event, events);
        } else {
          return event;
        }
      });

      if (processedEvents.length === 1) {
        return processedEvents[0];
      } else {
        var n = 0,
            s = 0,
            l = 0;
        var options = {};

        for (var i = 0; i < processedEvents.length; i++) {
          var evt = processedEvents[i];
          n = n + evt[0];
          s = s + evt[1];
          l = l + evt[2];

          if (evt[3]) {
            for (var k in evt[3]) {
              options[k] = evt[3][k];
            }
          }
        }

        return [Math.floor(n / processedEvents.length), s / processedEvents.length, l / processedEvents.length, options];
      }
    };
  };

  var NOTES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];

  var noteNumToNoteName = function noteNumToNoteName(noteNum) {
    var noteName = NOTES[noteNum % 12];
    var octaveNum = Math.floor(noteNum / 12 + 1);
    return noteName + octaveNum;
  };

  MUSIC.PatchInstrument = function (notes) {
    var noteNum;
    var sounds = [];

    for (var noteName in notes) {
      var playable = MUSIC.Types.cast("playable", notes[noteName]);
      noteNum = MUSIC.noteToNoteNum(noteName);
      sounds[noteNum] = playable;
    }

    ;

    this.note = function (noteNum) {
      var s = sounds[noteNum];
      if (!s) return s;
      return MUSIC.playablePipeExtend({
        play: s.play
      });
    };

    instrumentExtend(this);
  };

  MUSIC.SoundfontInstrument = function (sounds, audio, audioDestination) {
    var noteAudio = [];

    function _base64ToArrayBuffer(base64) {
      var binary_string = window.atob(base64);
      var len = binary_string.length;
      var bytes = new Uint8Array(len);

      for (var i = 0; i < len; i++) {
        var ascii = binary_string.charCodeAt(i);
        bytes[i] = ascii;
      }

      return bytes.buffer;
    }

    ;
    audio = audio.audio;

    for (var i = 0; i < 72; i++) {
      (function () {
        var index = i;
        var xmlhttp = new XMLHttpRequest();
        var noteName = noteNumToNoteName(i);
        var data = sounds[noteName];
        var encoded = data.split(",")[1];
        audio.decodeAudioData(_base64ToArrayBuffer(encoded), function (buffer) {
          noteAudio[index] = buffer;
        }, function (err) {
          console.error("error " + err + " loading " + index);
        });
      })();
    }

    ;

    this.note = function (notenum) {
      var source = audio.createBufferSource();
      return MUSIC.playablePipeExtend({
        play: function play() {
          var source = audio.createBufferSource();
          source.buffer = noteAudio[notenum];
          source.connect(audioDestination._destination);
          source.start(0);
          return {
            stop: function stop() {
              source.stop(0);
              source.disconnect(audioDestination._destination);
            }
          };
        }
      });
    };

    instrumentExtend(this);
  };

  MUSIC.Types.register("instrument", function (instrument) {
    if (instrument.note) return instrument;
  });
  MUSIC.Types.register("instrument", function (soundGenerator) {
    if (soundGenerator.freq) {
      return new MUSIC.Instrument(soundGenerator);
    }
  });
  MUSIC.Types.register("instrument", function (playable) {
    if (playable.play) {
      return {
        note: function note() {
          return playable;
        }
      };
    }
  });
  var nullPlay = {
    play: function play() {
      return {
        stop: function stop() {}
      };
    }
  };
  MUSIC.Types.register("instrument", function (fcn) {
    if (typeof fcn === "function") {
      return {
        note: function note(n) {
          return fcn(n) || nullPlay;
        }
      };
    }
  });
  MUSIC.Types.register("instrument", function (array) {
    if (array instanceof Array) {
      return new MUSIC.MultiInstrument(array);
    }
  });
  MUSIC.Types.register("instrument", function (plainObject) {
    if (_typeof(plainObject) === "object" && plainObject.constructor === Object) {
      return new MUSIC.PatchInstrument(plainObject);
    }
  });

  MUSIC.StopEvent = function () {
    return function (note) {
      return MUSIC.playablePipeExtend({
        play: function play() {
          var paramObject = {
            onplay: function onplay() {},
            onstop: function onstop() {}
          };
          var originalNote = note.play(paramObject);
          paramObject.onplay();
          return {
            stop: function stop() {
              paramObject.onstop();
              originalNote.stop();
            }
          };
        }
      });
    };
  };
})();
;

MUSIC.Effects = MUSIC.Effects || {};

var LemonadePlayable = function LemonadePlayable(music, destination, outputFcn, ops) {
  this._destination = destination;
  this._music = music;
  this._ops = ops;
  this._output = outputFcn;
};

LemonadePlayable.prototype.play = function () {
  var destination = this._destination;
  var ops = this._ops;
  var opsLength = ops.length;
  var signalArray = [];
  var phaseArray = [];

  for (var i = 0; i < opsLength; i++) {
    signalArray[i] = 0;
    phaseArray[i] = 0;
    ops[i].wave = MUSIC.Types.cast("function", ops[i].wave);
  }

  var lastT = 0;
  var outputFcn = this._output;
  var formulaGenerator = new MUSIC.Effects.Formula(this._music, destination, function (input, t) {
    var deltay = t - lastT;

    for (var i = 0; i < opsLength; i++) {
      lastT = t; // EULER

      phaseArray[i] = phaseArray[i] + deltay * ops[i].frequency.apply(null, signalArray);
      var phase = phaseArray[i] % 1;
      if (phase < 0) phase++;
      signalArray[i] = ops[i].wave(phase);
    }

    ;
    return outputFcn.apply(null, signalArray);
  });
  return {
    stop: function stop() {
      formulaGenerator.disconnect(destination._destination);
    }
  };
};

MUSIC.playablePipeExtend(LemonadePlayable.prototype);
MUSIC.Effects.register("lemonade", function (music, next, options) {
  return new LemonadePlayable(music, next._audioDestination, options.output, options.ops);
});
;

(function () {
  MUSIC.Math = MUSIC.Math || {};

  MUSIC.Math.bpmToSecondTick = function (options, bpm) {
    return 60000 / bpm / options.ticks_per_beat;
  };

  var makeEvaluableInverseFunctionFromParts = function makeEvaluableInverseFunctionFromParts(array) {
    array = array.map(function (part) {
      var f = makeEvaluableFunction(part.f);
      var inverse_f = makeEvaluableInverseFunction(part.f);
      return {
        init: f(part.init),
        end: f(part.end),
        f: inverse_f
      };
    });
    return function (y) {
      var part = array.find(function (p) {
        return y >= p.init && (!p.end || y <= p.end);
      });
      if (!part) return 0;
      return part.f(y);
    };
  };

  var makeEvaluableFunctionFromParts = function makeEvaluableFunctionFromParts(array) {
    array = array.map(function (part) {
      return {
        init: part.init,
        end: part.end,
        f: makeEvaluableFunction(part.f)
      };
    });
    return function (x) {
      var part = array.find(function (p) {
        return x >= p.init && (!p.end || x <= p.end);
      });
      if (!part) return 0;
      return part.f(x);
    };
  };

  var makeEvaluableInverseFunction = function makeEvaluableInverseFunction(array) {
    if (array.length == 2) {
      var b = array[1];
      var a = array[0];
      return function (y) {
        return (y - a) / b; // y = b*x + a  ;   y - a = b*x; (y - a) / b = x;
      };
    } else if (array.length == 3) {
      var a = array[2];
      var b = array[1];
      var c = array[0];

      if (a === 0) {
        return makeEvaluableInverseFunction([c, b]);
      } else {
        return function (y) {
          return 2 * (c - y) / (-b - Math.sqrt(b * b - 4 * a * (c - y)));
        };
      }
    }
  };

  var makeEvaluableFunction = function makeEvaluableFunction(array) {
    if (array.length == 2) {
      var b = array[1];
      var a = array[0];
      return function (x) {
        return b * x + a;
      };
    } else if (array.length == 3) {
      var a = array[2];
      var b = array[1];
      var c = array[0];
      return function (x) {
        return a * x * x + b * x + c;
      };
    }
  };

  var integrate = function integrate(array, lastPointValue) {
    var x = lastPointValue[0];
    var y = lastPointValue[1];

    if (array.length == 1) {
      var c = -array[0] * x + y;
      return [c, array[0]];
    } else if (array.length == 2) {
      var c = y - x * array[0] - x * x * array[1] / 2;
      return [c, array[0], array[1] / 2];
    }
  };

  MUSIC.Math.integrateBpmEvents = function (options) {
    var cutBpmEvent = function cutBpmEvent(bpmEvent1) {
      var l = bpmEvent1.l;
      options.bpm_events.forEach(function (bpmEvent2) {
        if (bpmEvent2 !== bpmEvent1 && bpmEvent2.s >= bpmEvent1.s) {
          if (bpmEvent2.s < bpmEvent1.s + l) {
            var cutL = bpmEvent2.s - bpmEvent1.s;
            if (cutL < l) l = cutL;
          }
        }
      });
      return {
        s: bpmEvent1.s,
        l: l,
        n: Math.max(bpmEvent1.n, 1)
      };
    };

    options.bpm_events = options.bpm_events.map(cutBpmEvent);
    var firstEventStart = options.bpm_events[0].s;
    var parts = [{
      init: 0,
      end: firstEventStart,
      f: [MUSIC.Math.bpmToSecondTick(options, options.bpm)]
    }];

    for (var i = 0; i < options.bpm_events.length; i++) {
      var bpm_event = options.bpm_events[i];
      var next_bpm_event = options.bpm_events[i + 1];
      var init_second_tick = MUSIC.Math.bpmToSecondTick(options, i == 0 ? options.bpm : options.bpm_events[i - 1].n);
      var end_second_tick = MUSIC.Math.bpmToSecondTick(options, bpm_event.n);
      var b = (end_second_tick - init_second_tick) / bpm_event.l;
      var a = init_second_tick - b * bpm_event.s; // f(bpm_event.s) =  init_second_tick
      // f(bpm_event.s + bpm_event.l) =  init_second_tick - b * bpm_event.s + b * (bpm_event.s + bpm_event.l)
      // f(bpm_event.s + bpm_event.l) =  init_second_tick + b * bpm_event.l
      // f(bpm_event.s + bpm_event.l) =  end_second_tick

      if (bpm_event.l === 0) {
        parts.push({
          init: bpm_event.s,
          end: next_bpm_event && next_bpm_event.s,
          f: [end_second_tick]
        });
      } else {
        parts.push({
          init: bpm_event.s,
          end: bpm_event.s + bpm_event.l,
          f: [a, b]
        });
        parts.push({
          init: bpm_event.s + bpm_event.l,
          end: next_bpm_event && next_bpm_event.s,
          f: [end_second_tick]
        });
      }
    }

    ;
    var integratedParts = [];
    var lastPointValue = [0, 0];

    for (var i = 0; i < parts.length; i++) {
      var part = parts[i];
      var integral = integrate(part.f, lastPointValue);
      integratedParts.push({
        init: part.init,
        end: part.end,
        f: integrate(part.f, lastPointValue)
      });
      lastPointValue = [part.end, makeEvaluableFunction(integral)(part.end)];
    }

    ;
    return integratedParts;
  };

  MUSIC.Math.ticksToTime = function (options) {
    if (options.start) {
      var time = MUSIC.Math.ticksToTime({
        bpm: options.bpm,
        ticks_per_beat: options.ticks_per_beat,
        bpm_events: options.bpm_events
      });
      var startTime = time(options.start);
      return function (ticks) {
        return time(ticks) - startTime;
      };
    }

    var bpm = options.bpm;
    var ticks_per_beat = options.ticks_per_beat;

    if (options.bpm_events && options.bpm_events.length) {
      var integral = MUSIC.Math.integrateBpmEvents(options);
      return makeEvaluableFunctionFromParts(integral);
    } else {
      var scale = 60000 / bpm / ticks_per_beat;
      return function (ticks) {
        return ticks * scale;
      };
    }
  };

  MUSIC.Math.timeToTicks = function (options) {
    if (options.start) {
      var ret = MUSIC.Math.timeToTicks({
        bpm: options.bpm,
        ticks_per_beat: options.ticks_per_beat,
        bpm_events: options.bpm_events
      });
      var time = MUSIC.Math.ticksToTime({
        bpm: options.bpm,
        ticks_per_beat: options.ticks_per_beat,
        bpm_events: options.bpm_events
      });
      var startTime = time(options.start);
      return function (time) {
        return ret(time + startTime);
      };
    }

    var bpm = options.bpm;
    var ticks_per_beat = options.ticks_per_beat;

    if (options.bpm_events && options.bpm_events.length) {
      var integral = MUSIC.Math.integrateBpmEvents(options);
      return makeEvaluableInverseFunctionFromParts(integral);
    } else {
      var inverseScale = ticks_per_beat * bpm / 60000;
      return function (time) {
        return time * inverseScale;
      };
    }
  };
})();
;

(function () {
  MUSIC.NoteSequence = function (funseq, options) {
    var clock;
    var songCtx = options && options.songCtx;

    if (!funseq) {
      clock = MUSIC.Utils.Clock(window.performance.now.bind(window.performance), setInterval, clearInterval, 500);
      funseq = MUSIC.Utils.FunctionSeq(clock, setTimeout, clearTimeout);
      funseq.push({
        t: 0,
        f: function f() {
          if (songCtx.referenceInstrument) {
            songCtx.sequenceStartTime = songCtx.referenceInstrument.currentTime();
          }
        },
        externalSchedule: true
      });
    }

    this._time = options && options.time;
    this._funseq = funseq;
    this._totalduration = 0;
    this._noteid = 0;
    this._contextList = [];
  };

  MUSIC.NoteSequence.Playable = function (noteseq, instrument, duration, contextList) {
    this._noteseq = noteseq;
    this._instrument = instrument;
    this._duration = duration;
    this._contextList = contextList || [];
  };

  MUSIC.NoteSequence.Playable.prototype.loop = function (times) {
    return MUSIC.Loop(this, times);
  };

  MUSIC.NoteSequence.Playable.prototype.duration = function () {
    return this._duration;
  };

  MUSIC.NoteSequence.Playable.prototype.play = function (options) {
    var context = MUSIC.NoteSequence.context(this._instrument, this._contextList);
    this._runningFunSeq = this._noteseq._funseq.start(context);
    return new MUSIC.NoteSequence.Playing(this._runningFunSeq, context);
  };

  MUSIC.NoteSequence.Playing = function (runningFunSeq, ctx) {
    this._runningFunSeq = runningFunSeq;
    this._context = ctx;
  };

  MUSIC.NoteSequence.Playing.prototype.stop = function () {
    if (this._context.playing) this._context.playing.stop();

    this._context.stop();

    this._runningFunSeq.stop();
  };

  MUSIC.NoteSequence.prototype.paddingTo = function (ticks) {
    this._totalduration = this._time(ticks);
  };

  MUSIC.NoteSequence.prototype.padding = function (time) {
    this._totalduration = this._totalduration + time;
  };

  MUSIC.NoteSequence.prototype.pushCallback = function (array) {
    var startTime = this._time(array[0]);

    if (startTime < 0) return;
    var f = array[1];

    this._funseq.push({
      t: startTime,
      f: f
    });
  };

  MUSIC.NoteSequence.prototype.push = function (array, baseCtx) {
    var noteNum = array[0];

    var startTime = this._time(array[1]);

    var duration = this._time(array[1] + array[2]) - startTime;

    if (startTime < 0) {
      if (startTime + duration < 0) {
        return;
      } else {
        duration = duration + startTime;
        startTime = 0;
      }
    }

    var options = array[3];
    this._noteid++;
    var mynoteid = this._noteid;

    if (baseCtx) {
      if (this._contextList.indexOf(baseCtx) === -1) {
        this._contextList.push(baseCtx);
      }
    }

    if (baseCtx && baseCtx.instrument && baseCtx.instrument.schedule_note) {
      if (baseCtx.instrument.currentTime) {
        baseCtx.songCtx.referenceInstrument = baseCtx.instrument;
      }

      this._funseq.push({
        t: startTime,
        f: function f(param) {
          var playing = baseCtx.instrument.schedule_note(noteNum, options, baseCtx.sequenceStartTime() + startTime / 1000, duration / 1000);
          baseCtx.setPlaying(mynoteid, playing);
        },
        externalSchedule: true
      });
    } else {
      console.warn("UNSUPPORTED WEBAUDIO SCHEDULE FOR note n=" + noteNum + " at " + startTime + " (fallback to setTimeout)");

      this._funseq.push({
        t: startTime,
        f: function f(param) {
          var ctx = baseCtx || param;
          if (!ctx.instrument.note) return;
          var playing = ctx.instrument.note(noteNum, options);
          ctx.setPlaying(mynoteid, playing);
        }
      });

      this._funseq.push({
        t: startTime + duration,
        f: function f(param) {
          var ctx = baseCtx || param;
          ctx.unsetPlaying(mynoteid);
        }
      });
    }

    if (startTime + duration > this._totalduration) this._totalduration = startTime + duration;
  };

  MUSIC.NoteSequence.prototype.makePlayable = function (instrument) {
    return new MUSIC.NoteSequence.Playable(this, instrument, this._totalduration, this._contextList);
  };

  MUSIC.NoteSequence.context = function (instrument, subctx, songCtx) {
    var playingNotes = {};

    var setPlaying = function setPlaying(noteid, p) {
      playingNotes[noteid] = p.play();
    };

    var unsetPlaying = function unsetPlaying(noteid) {
      var playing = playingNotes[noteid];

      if (playing) {
        playing.stop();
        delete playingNotes[noteid];
      }
    };

    var stop = function stop() {
      if (subctx) {
        for (var i = 0; i < subctx.length; i++) {
          subctx[i].stop();
        }
      }

      for (var noteid in playingNotes) {
        playingNotes[noteid].stop();
      }

      playingNotes = {};
    };

    var sequenceStartTime = function sequenceStartTime() {
      if (!songCtx.sequenceStartTime) {
        songCtx.sequenceStartTime = this.instrument.currentTime();
      }

      return songCtx.sequenceStartTime;
    };

    return {
      sequenceStartTime: sequenceStartTime,
      setPlaying: setPlaying,
      unsetPlaying: unsetPlaying,
      instrument: instrument,
      stop: stop,
      songCtx: songCtx
    };
  };
})();
;

(function () {
  var playingStop = function playingStop(playing) {
    playing.stop();
  };

  MUSIC.MultiPlayable = function (playableArray) {
    this._playableArray = playableArray;
    MUSIC.playablePipeExtend(this);
  };

  MUSIC.MultiPlayable.prototype.play = function (options) {
    var playablePlay = function playablePlay(playable) {
      return playable.play(options);
    };

    var playingArray = this._playableArray.map(playablePlay);

    return {
      stop: function stop() {
        playingArray.forEach(playingStop);
      }
    };
  };

  var higher = function higher(a, b) {
    return a > b ? a : b;
  };

  var getDuration = function getDuration(playable) {
    return playable && playable.duration ? playable.duration() : 0;
  };

  MUSIC.MultiPlayable.prototype.duration = function () {
    return this._playableArray.map(getDuration).reduce(higher, 0);
  };

  MUSIC.ChangeTimeWrapper = function (noteseq, extensionTime) {
    this._noteseq = noteseq;
    this._extensionTime = extensionTime;
  };

  MUSIC.ChangeTimeWrapper.prototype.push = function (input) {
    this._noteseq.push([input[0], input[1] * this._extensionTime, input[2] * this._extensionTime]);
  };

  MUSIC.Pattern = function (input, options) {
    var playableArray = [];
    options = options || {};
    options.pulseTime = options.pulseTime || 50;
    playableArray = input.map(function (seq) {
      var code = seq[0];
      var instrument = MUSIC.Types.cast("instrument", seq[1]);
      var noteseq = new MUSIC.NoteSequence();
      MUSIC.SequenceParser.parse(code, new MUSIC.ChangeTimeWrapper(noteseq, options.pulseTime));
      return noteseq.makePlayable(instrument);
    });
    return new MUSIC.MultiPlayable(playableArray);
  };
})();
;

(function () {
  MUSIC.SequenceParser = {};
  var notes = {
    "Cb": -1,
    "C": 0,
    "C#": 1,
    "Db": 1,
    "D": 2,
    "D#": 3,
    "Eb": 3,
    "E": 4,
    "E#": 5,
    "Fb": 4,
    "F": 5,
    "F#": 6,
    "Gb": 6,
    "G": 7,
    "G#": 8,
    "Ab": 8,
    "A": 9,
    "A#": 10,
    "Bb": 10,
    "B": 11,
    "B#": 12
  };

  var isNoteStart = function isNoteStart(chr) {
    return "CDEFGAB".indexOf(chr) !== -1;
  };

  var noteSplit = function noteSplit(str) {
    var ret = [];
    var lastNote = "";

    for (var i = 0; i < str.length; i++) {
      if (isNoteStart(str[i])) {
        if (lastNote !== "") ret.push(lastNote);
        lastNote = "";
      }

      if (str[i] === " " || str[i] === ".") {
        if (lastNote !== "") ret.push(lastNote);
        lastNote = "";
      }

      lastNote += str[i];
    }

    if (lastNote !== "") ret.push(lastNote);
    return ret;
  };

  var pipeReplace = new RegExp("\\|", "g");

  MUSIC.SequenceParser.parse = function (input, noteSeq) {
    var currentNote;
    var currentCharacter;
    if (input === "") return;
    input = input.replace(pipeReplace, "");
    var noteArray = noteSplit(input);
    var currentTime = 0;

    for (var i = 0; i < noteArray.length; i++) {
      var currentNoteStr = noteArray[i];
      var noteDuration = currentNoteStr.length;
      var equalIndex = currentNoteStr.indexOf("=");
      if (equalIndex != -1) currentNoteStr = currentNoteStr.slice(0, equalIndex);
      var lastChar = currentNoteStr.slice(-1);
      var octave = parseInt(lastChar);

      if (isNaN(octave)) {
        octave = 0;
      } else {
        currentNoteStr = currentNoteStr.slice(0, currentNoteStr.length - 1);
      }

      var currentNote = notes[currentNoteStr];

      if (currentNote !== undefined) {
        noteSeq.push([currentNote + octave * 12, currentTime, noteDuration]);
      }

      ;
      currentTime += noteDuration;
    }
  };
})();
;

(function () {
  var PlayingSong = function PlayingSong(funseq, patternContexts, options) {
    this._context = {
      playing: [],
      onStop: options && options.onStop
    };
    this._patternContexts = patternContexts;
    this._funseqHandler = funseq.start(this._context);
  };

  PlayingSong.prototype.stop = function () {
    if (this._patternContexts && this._patternContexts.length) {
      this._patternContexts.forEach(function (ctx) {
        ctx.stop();
      });
    }

    this._context.playing.forEach(function (playing) {
      playing.stop();
    });

    this._funseqHandler.stop();

    if (this._context.onStop) {
      this._context.onStop();
    }
  };

  var noPlay = {
    play: function play() {
      return {
        stop: function stop() {}
      };
    }
  };

  var defaultFromPatterns = function defaultFromPatterns(patterns) {
    return function (patternOrName) {
      if (typeof patternOrName === 'string') return patterns[patternOrName];
      return patternOrName || noPlay;
    };
  };

  var nullPlay = {
    stop: function stop() {}
  };

  var hasScheduleMethod = function hasScheduleMethod(pattern) {
    return !!pattern.schedule;
  };

  var hasNotScheduleMethod = function hasNotScheduleMethod(pattern) {
    return !pattern.schedule;
  };

  MUSIC.Song = function (input, patternsOrOptions, options) {
    var patterns;
    var self = this;

    if (arguments.length === 2) {
      return MUSIC.Song.bind(this)(input, {}, patternsOrOptions);
    } else {
      patterns = patternsOrOptions;
    }

    options = options || {};
    var getFromPatterns = options.pattern || defaultFromPatterns(patterns);
    var measure = (options.measure || 500) * options.ticks_per_beat;
    var funseq;

    if (!funseq) {
      var clock = MUSIC.Utils.Clock(window.performance.now.bind(window.performance), setInterval, clearInterval, 500);
      funseq = MUSIC.Utils.FunctionSeq(clock, setTimeout, clearTimeout);
    }

    var totalMeasures = input[0].length;
    this._funseq = funseq;

    var byStart = function byStart(a, b) {
      return a.s - b.s;
    }; // tempo events 


    var bpm_events = [];

    for (var j = 0; j < totalMeasures; j++) {
      var patternArray = [];

      for (var i = 0; i < input.length; i++) {
        var pattern = getFromPatterns(input[i][j]);

        if (pattern.bpm_events) {
          var displacedBpmEvents = pattern.bpm_events.map(function (evt) {
            return {
              n: evt.n,
              s: evt.s + j * measure,
              l: evt.l
            };
          });
          bpm_events = bpm_events.concat(displacedBpmEvents);
        }
      }

      ;
    }

    bpm_events = bpm_events.sort(byStart);
    var time = MUSIC.Math.ticksToTime({
      bpm: options.bpm,
      ticks_per_beat: options.ticks_per_beat,
      bpm_events: bpm_events,
      start: options.start || 0
    });

    this.timeToTicks = function () {
      return MUSIC.Math.timeToTicks({
        bpm: options.bpm,
        ticks_per_beat: options.ticks_per_beat,
        bpm_events: bpm_events,
        start: options.start || 0
      });
    };

    var timeFunc = function timeFunc(baseTicks) {
      return function (ticks) {
        return time(baseTicks + ticks);
      };
    };

    this._duration = time(totalMeasures * measure);
    this.songCtx = {};
    funseq.push({
      t: 0,
      f: function f() {
        if (self.songCtx.referenceInstrument) {
          self.songCtx.sequenceStartTime = self.songCtx.referenceInstrument.currentTime();
        }
      },
      externalSchedule: true
    });

    for (var j = 0; j < totalMeasures; j++) {
      (function () {
        var patternArray = [];

        for (var i = 0; i < input.length; i++) {
          patternArray.push(input[i][j]);
        }

        ;
        var playableArray = patternArray.map(getFromPatterns);
        var schedulable = playableArray.filter(hasScheduleMethod);
        var notSchedulable = playableArray.filter(hasNotScheduleMethod);

        if (notSchedulable.length > 0) {
          var multiPlayable = new MUSIC.MultiPlayable(notSchedulable);
          var playing = nullPlay;
          var duration = multiPlayable.duration();
          funseq.push({
            t: j * measure,
            f: function f(context) {
              playing = multiPlayable.play();
              context.playing.push(playing);
            }
          });
          funseq.push({
            t: j * measure + duration,
            f: function f(context) {
              playing.stop();
              context.playing = context.playing.filter(function (x) {
                return x != playing;
              });
            }
          });
        }

        schedulable.forEach(function (s) {
          var scheduleContexts = s.schedule(new MUSIC.NoteSequence(funseq, {
            time: timeFunc(j * measure)
          }), self.songCtx);
          self._patternContexts = (self._patternContexts || []).concat(scheduleContexts);
        });
      })();
    }

    ;
    funseq.push({
      t: timeFunc(0)(totalMeasures * measure),
      f: function f(context) {
        if (context.onStop) {
          context.onStop();
        }
      }
    });
  };

  MUSIC.Song.prototype.duration = function () {
    return this._duration;
  };

  MUSIC.Song.prototype.play = function (options) {
    return new PlayingSong(this._funseq, this._patternContexts, options);
  };
})();
;

(function () {
  MUSIC.Utils = MUSIC.Utils || {};

  MUSIC.Utils.Scale = function (base) {
    var toneAdd;
    var v;
    toneAdd = {};
    v = [0, 2, 5, 7, 9];

    for (var i = 0; i < v.length; i++) {
      toneAdd[(base + v[i]) % 12] = true;
    }

    return {
      add: function add(notenum, notes) {
        var ret = notenum;

        while (notes > 0) {
          ret += toneAdd[ret % 12] ? 2 : 1;
          notes--;
        }

        return ret;
      }
    };
  };

  MUSIC.Utils.Clock = function (preciseTimer, setInterval, clearInterval, interval) {
    var start = function start(fcn) {
      var startTime = preciseTimer();
      fcn(0);
      var hndl = setInterval(function () {
        var t = preciseTimer();
        fcn(t - startTime);
      }, interval);
      return {
        stop: function stop() {
          clearInterval(hndl);
        }
      };
    };

    return {
      start: start
    };
  };

  MUSIC.Utils.FunctionSeq = function (clock, setTimeout, clearTimeout) {
    var eventsArray = [];

    var reject = function reject(x) {
      return function (y) {
        return x != y;
      };
    };

    var start = function start(parameter) {
      var array = eventsArray.slice(0).sort(function (e1, e2) {
        var dt = e1.t - e2.t;

        if (dt === 0) {
          return eventsArray.indexOf(e1) - eventsArray.indexOf(e2);
        }

        return dt;
      });
      var timeoutHandlers = [];
      var eventCount = array.length;
      var clockHandler = clock.start(function (t) {
        var lastEvent;

        var callingCriteria = function callingCriteria(element) {
          return element.t - t < 1000 && element.t - t >= 0;
        };

        var pending = [];

        var processPending = function processPending() {
          if (!pending.length) return;
          var currentPending = pending;
          pending = [];

          for (var i = 0; i < currentPending.length; i++) {
            if (currentPending[i].externalSchedule) {
              currentPending[i].f(parameter, currentPending[i].t - t);
            }
          }

          var timeoutHandler = setTimeout(function () {
            timeoutHandlers = timeoutHandlers.filter(reject(timeoutHandler));

            for (var i = 0; i < currentPending.length; i++) {
              if (!currentPending[i].externalSchedule) {
                currentPending[i].f(parameter, 0);
                eventCount--;
                if (eventCount === 0) clockHandler.stop();
              }
            }
          }, currentPending[0].t - t);
          timeoutHandlers.push(timeoutHandler);
        };

        var addSchedule = function addSchedule(event) {
          if (lastEvent && lastEvent.t - t !== event.t - t) {
            processPending();
          }

          pending.push(event);
          lastEvent = event;
        };

        var nextElement;

        while (1) {
          if (array.length > 0) {
            nextElement = array[0];

            if (callingCriteria(nextElement)) {
              addSchedule(nextElement);
              array.shift(); // remove first element
            } else {
              break;
            }
          } else {
            break;
          }
        }

        processPending();
      });
      return {
        stop: function stop() {
          for (var i = 0; i < timeoutHandlers.length; i++) {
            clearTimeout(timeoutHandlers[i]);
          }

          ;
          clockHandler.stop();
        }
      };
    };

    var push = eventsArray.push.bind(eventsArray);
    return {
      start: start,
      push: push
    };
  };

  MUSIC.Utils.FunctionSeq.preciseTimeout = function (fcn, ms) {
    var funseq;
    clock = MUSIC.Utils.Clock(window.performance.now.bind(window.performance), setInterval, clearInterval, 500);
    funseq = MUSIC.Utils.FunctionSeq(clock, setTimeout, clearTimeout);
    var runningFunSeq;
    funseq.push({
      f: function f() {
        if (runningFunSeq) {
          runningFunSeq.stop();
        }

        fcn();
      },
      t: ms
    });
    runningFunSeq = funseq.start();
  };

  MUSIC.Utils.DelayedFunctionSeq = function (inner, delay) {
    var start = function start(params) {
      return inner.start(params);
    };

    var push = function push(params) {
      return inner.push({
        f: params.f,
        t: params.t + delay,
        externalSchedule: params.externalSchedule
      });
    };

    return {
      start: start,
      push: push
    };
  };
})();
;

(function () {
  MUSIC = MUSIC || {};
  MUSIC.Types.register("function", function (wave) {
    if (typeof wave.at === "function") {
      return wave.at.bind(wave);
    }
  });
  MUSIC.Types.register("function", function (fcn) {
    if (typeof fcn === "function") {
      return fcn;
    }
  });
  MUSIC.Types.register("wave", function (fcn) {
    if (typeof fcn === "function") {
      return new MUSIC.Wave.FunctionWave(fcn);
    }
  });
  MUSIC.Types.register("wave", function (wave) {
    if (typeof wave.at === "function") {
      return wave;
    }
  });
  var twopi = Math.PI * 2;
  MUSIC.Wave = {};

  var waveTransform = function waveTransform(fcn) {
    return function () {
      var wave = this;
      return {
        at: function at(t) {
          wave.at(fcn(t));
        }
      };
    };
  };

  var waveOps = {
    reverse: waveTransform(function (t) {
      return t - 1;
    }),
    scale: function scale(factor) {
      var wave = this;
      return new MUSIC.Wave.FunctionWave(function (t) {
        return wave.at(t * factor);
      });
    },
    translate: function translate(disp) {
      var wave = this;
      return new MUSIC.Wave.FunctionWave(function (t) {
        return wave.at(t + disp);
      });
    },
    table: function table(options) {
      return new MUSIC.Wave.Table(this, options);
    },
    combine: function combine(otherWave, otherFactor) {
      var thisWave = this;
      otherFactor = otherFactor || 0.5;
      var thisFactor = 1 - otherFactor;
      otherWave = MUSIC.Types.cast("wave", otherWave);
      return new MUSIC.Wave.FunctionWave(function (t) {
        return otherWave.at(t) * otherFactor + thisWave.at(t) * thisFactor;
      });
    }
  };

  var defaultInterpolation = function defaultInterpolation(table) {
    var length = table.length;
    return function (t) {
      var index = Math.floor(t * table.length);
      return table[index];
    };
  };

  MUSIC.Wave.Table = function (wave, options) {
    options = options || {};
    var sampleCount = options.samples || 100;
    var interpolation = options.interpolation || defaultInterpolation;
    var sample = [];

    for (var i = 0; i < sampleCount; i++) {
      sample[i] = wave.at(i / sampleCount);
    }

    this.at = interpolation(sample);
  };

  MUSIC.Wave.Table.prototype = waveOps;

  MUSIC.Wave.FunctionWave = function (fcn) {
    this.at = fcn;
  };

  MUSIC.Wave.FunctionWave.prototype = waveOps;

  MUSIC.Wave.sine = function () {
    return new MUSIC.Wave.FunctionWave(function (t) {
      return Math.sin(twopi * t);
    });
  };

  MUSIC.Wave.square = function (options) {
    options = options || {};
    var dutyCycle = options.dutyCycle || 0.5;
    var dutyLevel = options.dutyLevel || 1;
    var offLevel = options.offLevel || -1;
    return new MUSIC.Wave.FunctionWave(function (t) {
      if (t < dutyCycle) {
        return dutyLevel;
      } else {
        return offLevel;
      }
    });
  };

  MUSIC.Wave.triangle = function () {
    return new MUSIC.Wave.FunctionWave(function (t) {
      var t2 = t - 0.25;
      if (t2 < 0) t2++;

      if (t2 < 0.5) {
        return 1 - t2 * 4;
      } else {
        return -1 + (t2 - 0.5) * 4;
      }
    });
  };

  MUSIC.Wave.sawtooth = function () {
    return new MUSIC.Wave.FunctionWave(function (t) {
      return t * 2 - 1;
    });
  };
})();
;

MUSIC = MUSIC || {};
MUSIC.Formats = MUSIC.Formats || {};

MUSIC.Formats.CachedSerializer = function (innerSerializer) {
  var lastOutput;
  var lastInput;
  var lastType;
  return {
    serialize: function serialize(type, input) {
      var jsonCurrentInput;

      if (lastType && lastInput) {
        jsonCurrentInput = JSON.stringify(input);
        if (lastType === type && lastInput === jsonCurrentInput) return lastOutput;
      }

      lastType = type;
      lastInput = jsonCurrentInput || JSON.stringify(input);
      lastOutput = innerSerializer.serialize(type, input);
      return lastOutput;
    },
    deserialize: innerSerializer.deserialize.bind(innerSerializer)
  };
};
;

MUSIC = MUSIC || {};
MUSIC.Formats = MUSIC.Formats || {};

(function () {
  MUSIC.Formats.HuffmanSerializerWrapper = function (innerSerializer) {
    var frequencies = [[",", 100], ["[]", 20], ["0123456789", 10], ["abcdef.-{}", 4], ["t+-*/()<>=? ", 1]];

    var times = function times(str, n) {
      var ret = "";

      for (var i = 0; i < n; i++) {
        ret = ret + str;
      }

      return ret;
    };

    var concat = function concat(a, b) {
      return a.concat(b);
    };

    var text = frequencies.map(function (freq) {
      return times(freq[0], freq[1]);
    }).reduce(concat);
    text = text + "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    var huffman = Huffman.treeFromText(text);

    var serialize = function serialize(type, obj) {
      var str = innerSerializer.serialize(type, obj);
      return huffman.encode(str);
    };

    var deserialize = function deserialize(type, str) {
      var decoded = huffman.decode(str);
      return innerSerializer.deserialize(type, decoded);
    };

    return {
      serialize: serialize,
      deserialize: deserialize
    };
  };
})();
;

MUSIC = MUSIC || {};
MUSIC.Formats = MUSIC.Formats || {};
MUSIC.Formats.JSONSerializer = {};

MUSIC.Formats.JSONSerializer.serialize = function (type, obj) {
  return JSON.stringify(obj);
};

MUSIC.Formats.JSONSerializer.deserialize = function (type, str) {
  return JSON.parse(str);
};
;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

MUSIC = MUSIC || {};
MUSIC.Formats = MUSIC.Formats || {};
MUSIC.Formats.MultiSerializer = {};

(function () {
  var serializerArray = [];

  var match = function match(a, b) {
    if (_typeof(a) !== _typeof(b)) return false;
    if (Array.isArray(a) && !Array.isArray(b)) return false;
    if (Array.isArray(b) && !Array.isArray(a)) return false;

    if (Array.isArray(a)) {
      if (a.length !== b.length) return false;

      for (var i = 0; i < a.length; i++) {
        if (!match(a[i], b[i])) return false;
      }

      return true;
    } else if (_typeof(a) === 'object') {
      return Object.keys(a).every(function (key) {
        return match(a[key], b[key]);
      });
    } else {
      return a === b;
    }
  };

  MUSIC.Formats.MultiSerializer.match = match;

  MUSIC.Formats.MultiSerializer.wrapSerializer = function (serializer) {
    return {
      serialize: function serialize(type, obj) {
        try {
          var output = serializer.serialize(type, obj);
          var recoveredInput = serializer.deserialize(type, output);
          return MUSIC.Formats.MultiSerializer.match(obj, recoveredInput) ? output : null;
        } catch (e) {
          return null; // failed serializations are discarded
        }
      },
      deserialize: serializer.deserialize
    };
  };

  var smallest = function smallest(a, b) {
    return a.length < b.length ? a : b;
  };

  var truthy = function truthy(a) {
    return !!a;
  };

  MUSIC.Formats.MultiSerializer.selector = function (array) {
    array = array.filter(truthy);
    if (array.length) return array.filter(truthy).reduce(smallest);
    throw new Error("serialization not found");
  };

  MUSIC.Formats.MultiSerializer.serialize = function (type, obj) {
    return MUSIC.Formats.MultiSerializer.selector(serializerArray.map(function (s) {
      var serialized = s.serializer.serialize(type, obj);
      if (!serialized) return serialized;
      return s.base.concat(serialized);
    }));
  };

  MUSIC.Formats.MultiSerializer.deserialize = function (type, obj) {
    for (var i = 0; i < serializerArray.length; i++) {
      if (obj[0] === serializerArray[i].base) return serializerArray[i].serializer.deserialize(type, obj.slice(1));
    }

    throw new Error("Unsupported format");
  };

  MUSIC.Formats.MultiSerializer.setSerializers = function (array) {
    serializerArray = array.map(function (entry) {
      return {
        serializer: MUSIC.Formats.MultiSerializer.wrapSerializer(entry.serializer),
        base: entry.base
      };
    });
  };
})();
;

MUSIC = MUSIC || {};
MUSIC.Formats = MUSIC.Formats || {};
MUSIC.Formats.PackedJSONSerializer = {};

(function () {
  var objToArrayPacker = function objToArrayPacker(keys) {
    var pack = function pack(obj) {
      var array = [];

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (Array.isArray(key)) {
          array.push(key[1].pack(obj[key[0]], obj));
        } else {
          if (obj[key] !== null && obj[key] !== undefined) array.push(obj[key]);
        }
      }

      return array;
    };

    var unpack = function unpack(array) {
      var obj = {};

      for (var i = 0; i < array.length; i++) {
        var key = keys[i];

        if (Array.isArray(key)) {
          obj[key[0]] = key[1].unpack(array[i], obj);
        } else {
          if (array[i] !== null && array[i] !== undefined) obj[key] = array[i];
        }
      }

      return obj;
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var array = function array(innerPacker) {
    var pack = function pack(obj) {
      return obj.map(innerPacker.pack);
    };

    var unpack = function unpack(array) {
      return array.map(innerPacker.unpack);
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var concat = function concat(a, b) {
    return a.concat(b);
  };

  var flatten = function flatten(innerPacker, size) {
    var pack = function pack(obj) {
      var ret = innerPacker.pack(obj);
      return ret.reduce(concat, []);
    };

    var unpack = function unpack(array) {
      var deflatted = [];

      for (var i = 0; i < array.length; i += size) {
        deflatted.push(array.slice(i, i + size));
      }

      return innerPacker.unpack(deflatted);
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var patternPacker = objToArrayPacker(["measure", "measureCount", "bpm", "selectedTrack", "scrollLeft", ["tracks", flatten(array(objToArrayPacker(["scroll", ["events", flatten(array(objToArrayPacker(["n", "s", "l"])), 3)], "instrument"])), 3)]]);

  var patternIndexPacker = function patternIndexPacker(inner) {
    var pack = function pack(obj) {
      var patterns = [];

      var convertBlocks = function convertBlocks(block) {
        if (block.id) {
          if (patterns.indexOf(block.id) === -1) patterns.push(block.id);
          return {
            id: patterns.indexOf(block.id) + 1
          };
        } else {
          return {
            id: 0
          };
        }
      };

      var convertTrack = function convertTrack(track) {
        return {
          blocks: track.blocks.map(convertBlocks)
        };
      };

      var newObject = {
        patterns: patterns,
        measure: obj.measure,
        bpm: obj.bpm,
        tracks: obj.tracks.map(convertTrack)
      };
      return inner.pack(newObject);
    };

    var unpack = function unpack(obj) {
      var ret = inner.unpack(obj);
      ret.tracks.forEach(function (track) {
        track.blocks.forEach(function (block) {
          if (block.id === 0) {
            delete block.id;
          } else {
            block.id = ret.patterns[block.id - 1];
          }
        });
      });
      return {
        measure: ret.measure,
        bpm: ret.bpm,
        tracks: ret.tracks
      };
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var substitution = function substitution(keys) {
    var pack = function pack(obj) {
      var idx = keys.indexOf(obj);
      if (idx === -1) return obj;
      return idx;
    };

    var unpack = function unpack(obj) {
      if (isNaN(obj)) return obj;
      return keys[obj];
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var switchPacker = function switchPacker(selectAttribute, packers) {
    var pack = function pack(obj, parent) {
      var innerPacker = packers[parent[selectAttribute]];

      if (!innerPacker) {
        return obj;
      }

      return innerPacker.pack(obj);
    };

    var unpack = function unpack(obj, parent) {
      var innerPacker = packers[parent[selectAttribute]];

      if (!innerPacker) {
        return obj;
      }

      return innerPacker.unpack(obj);
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var booleanPacker = {
    pack: function pack(obj) {
      if (obj === undefined) return 3;
      if (obj === null) return 4;
      return !!obj ? 1 : 0;
    },
    unpack: function unpack(obj) {
      if (obj === 3) return undefined;
      if (obj === 4) return null;
      return obj === 1 ? true : false;
    }
  };

  var nullable = function nullable(innerPacker) {
    var pack = function pack(obj) {
      if (obj === undefined) return 0;
      if (obj === null) return 1;
      return innerPacker ? innerPacker.pack(obj) : obj;
    };

    var unpack = function unpack(obj) {
      if (obj === 0) return undefined;
      if (obj === 1) return null;
      return innerPacker ? innerPacker.unpack(obj) : obj;
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var songPacker = patternIndexPacker(objToArrayPacker(["patterns", "measure", "bpm", ["tracks", flatten(array(objToArrayPacker([["blocks", flatten(array(objToArrayPacker(["id"])), 1)]])), 1)]]));
  var recursiveInstrumentPacker = {
    pack: function pack(obj) {
      return instrumentPacker.pack(obj);
    },
    unpack: function unpack(obj) {
      return instrumentPacker.unpack(obj);
    }
  };
  var stackPacker = objToArrayPacker([["array", array(recursiveInstrumentPacker)]]);
  var envelopePacker = objToArrayPacker(["attackTime", "decayTime", "sustainLevel", "releaseTime", ["reset_on_cut", booleanPacker]]);
  var oscillatorPacker = objToArrayPacker([["oscillatorType", substitution(["sine", "square", "sawtooth", "triangle", "custom"])], ["fixed_frequency", booleanPacker], ["frequency", nullable()], ["waveform", nullable()], ["serie", nullable(objToArrayPacker(["sin", "cos"]))], ["terms", nullable(objToArrayPacker(["sin", "cos"]))], ["modulation", nullable(objToArrayPacker([["detune", recursiveInstrumentPacker]]))], "time_constant"]);
  var frequencyFilterPacker = objToArrayPacker(["frequency", "detune", "Q", ["modulation", objToArrayPacker([["frequency", recursiveInstrumentPacker], ["detune", recursiveInstrumentPacker], ["Q", recursiveInstrumentPacker]])]]);
  var noParametersPacker = objToArrayPacker([]);
  var multiInstrumentPacker = objToArrayPacker([["subobjects", flatten(array(recursiveInstrumentPacker), 2)]]);
  var typeNames = ["script", "null", "oscillator", "notesplit", "rise", "adsr", "envelope", "transpose", "scale", "gain", "echo", "lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass", "reverb", "noise", "pink_noise", "red_noise", "arpeggiator", "stack", "multi_instrument", "monophoner", "polyphoner"];
  var monophonerPacker = objToArrayPacker([["force_note_cut", booleanPacker]]);
  var polyphonerPacker = objToArrayPacker(["maxChannels"]);
  var instrumentPacker = objToArrayPacker([["type", substitution(typeNames)], ["data", switchPacker('type', {
    script: objToArrayPacker(["code"]),
    'null': noParametersPacker,
    oscillator: oscillatorPacker,
    notesplit: objToArrayPacker(["delay"]),
    rise: objToArrayPacker(["time", "target"]),
    adsr: envelopePacker,
    envelope: envelopePacker,
    transpose: objToArrayPacker(["amount"]),
    scale: objToArrayPacker(["base", "top"]),
    gain: objToArrayPacker(["gain"]),
    echo: objToArrayPacker(["gain", "delay"]),
    lowpass: frequencyFilterPacker,
    highpass: frequencyFilterPacker,
    bandpass: frequencyFilterPacker,
    lowshelf: frequencyFilterPacker,
    highshelf: frequencyFilterPacker,
    peaking: frequencyFilterPacker,
    notch: frequencyFilterPacker,
    allpass: frequencyFilterPacker,
    reverb: objToArrayPacker(["room", "damp", "mix"]),
    noise: noParametersPacker,
    pink_noise: noParametersPacker,
    red_noise: noParametersPacker,
    arpeggiator: objToArrayPacker(["scale", "interval", "duration", "gap"]),
    stack: stackPacker,
    multi_instrument: multiInstrumentPacker,
    monophoner: monophonerPacker,
    polyphoner: polyphonerPacker
  })]]);
  var packer = {
    pattern: patternPacker,
    song: songPacker,
    instrument: instrumentPacker
  };

  MUSIC.Formats.PackedJSONSerializer.serialize = function (type, obj) {
    if (packer[type]) {
      var str = JSON.stringify(packer[type].pack(obj));
      str = str.slice(1, str.length - 1);
      return str;
    }

    return JSON.stringify(obj);
  };

  MUSIC.Formats.PackedJSONSerializer.deserialize = function (type, str) {
    if (packer[type]) {
      return packer[type].unpack(JSON.parse('[' + str + ']'));
    }

    return JSON.parse(str);
  };
})();
;

MUSIC = MUSIC || {};
MUSIC.Formats = MUSIC.Formats || {};
MUSIC.Formats.PackedJSONSerializerB = {};

(function () {
  var objToArrayPacker = function objToArrayPacker(keys) {
    var pack = function pack(obj) {
      var array = [];

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (Array.isArray(key)) {
          array.push(key[1].pack(obj[key[0]], obj));
        } else {
          if (obj[key] !== null && obj[key] !== undefined) array.push(obj[key]);
        }
      }

      return array;
    };

    var unpack = function unpack(array) {
      var obj = {};

      for (var i = 0; i < array.length; i++) {
        var key = keys[i];

        if (Array.isArray(key)) {
          obj[key[0]] = key[1].unpack(array[i], obj);
        } else {
          if (array[i] !== null && array[i] !== undefined) obj[key] = array[i];
        }
      }

      return obj;
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var array = function array(innerPacker) {
    var pack = function pack(obj) {
      return obj.map(innerPacker.pack);
    };

    var unpack = function unpack(array) {
      return array.map(innerPacker.unpack);
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var concat = function concat(a, b) {
    return a.concat(b);
  };

  var flatten = function flatten(innerPacker, size) {
    var pack = function pack(obj) {
      var ret = innerPacker.pack(obj);
      return ret.reduce(concat, []);
    };

    var unpack = function unpack(array) {
      var deflatted = [];

      for (var i = 0; i < array.length; i += size) {
        deflatted.push(array.slice(i, i + size));
      }

      return innerPacker.unpack(deflatted);
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var booleanPacker = {
    pack: function pack(obj) {
      if (obj === undefined) return 3;
      if (obj === null) return 4;
      return !!obj ? 1 : 0;
    },
    unpack: function unpack(obj) {
      if (obj === 3) return undefined;
      if (obj === 4) return null;
      return obj === 1 ? true : false;
    }
  };
  var patternEventPacker = {
    pack: function pack(obj) {
      var firstElement = obj.n;

      for (var k in obj) {
        if (k !== 'n' && k !== 's' && k !== 'l') {
          if (firstElement === obj.n) {
            firstElement = {
              n: obj.n
            };
          }

          firstElement[k] = obj[k];
        }
      }

      ;
      return [firstElement, obj.s, obj.l];
    },
    unpack: function unpack(array) {
      var firstElement = array[0];

      if (typeof firstElement === 'number') {
        return {
          n: array[0],
          s: array[1],
          l: array[2]
        };
      } else {
        var ret = {};

        for (var k in firstElement) {
          ret[k] = firstElement[k];
        }

        ret.s = array[1];
        ret.l = array[2];
        return ret;
      }
    }
  };
  var patternPacker = objToArrayPacker(["measure", "measureCount", "bpm", "selectedTrack", "scrollLeft", ["tracks", array(objToArrayPacker([["muted", booleanPacker], ["solo", booleanPacker], "scroll", ["events", flatten(array(patternEventPacker), 3)], "instrument"]))]]);

  var patternIndexPacker = function patternIndexPacker(inner) {
    var pack = function pack(obj) {
      var patterns = [];

      var convertBlocks = function convertBlocks(block) {
        if (block.id) {
          if (patterns.indexOf(block.id) === -1) patterns.push(block.id);
          return {
            id: patterns.indexOf(block.id) + 1
          };
        } else {
          return {
            id: 0
          };
        }
      };

      var convertTrack = function convertTrack(track) {
        return {
          blocks: track.blocks.map(convertBlocks)
        };
      };

      var newObject = {
        patterns: patterns,
        measure: obj.measure,
        bpm: obj.bpm,
        tracks: obj.tracks.map(convertTrack)
      };
      return inner.pack(newObject);
    };

    var unpack = function unpack(obj) {
      var ret = inner.unpack(obj);
      ret.tracks.forEach(function (track) {
        track.blocks.forEach(function (block) {
          if (block.id === 0) {
            delete block.id;
          } else {
            block.id = ret.patterns[block.id - 1];
          }
        });
      });
      return {
        measure: ret.measure,
        bpm: ret.bpm,
        tracks: ret.tracks
      };
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var substitution = function substitution(keys) {
    var pack = function pack(obj) {
      var idx = keys.indexOf(obj);
      if (idx === -1) return obj;
      return idx;
    };

    var unpack = function unpack(obj) {
      if (isNaN(obj)) return obj;
      return keys[obj];
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var switchPacker = function switchPacker(selectAttribute, packers) {
    var pack = function pack(obj, parent) {
      var innerPacker = packers[parent[selectAttribute]];

      if (!innerPacker) {
        return obj;
      }

      return innerPacker.pack(obj);
    };

    var unpack = function unpack(obj, parent) {
      var innerPacker = packers[parent[selectAttribute]];

      if (!innerPacker) {
        return obj;
      }

      return innerPacker.unpack(obj);
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var nullable = function nullable(innerPacker) {
    var pack = function pack(obj) {
      if (obj === undefined) return 0;
      if (obj === null) return 1;
      return innerPacker ? innerPacker.pack(obj) : obj;
    };

    var unpack = function unpack(obj) {
      if (obj === 0) return undefined;
      if (obj === 1) return null;
      return innerPacker ? innerPacker.unpack(obj) : obj;
    };

    return {
      pack: pack,
      unpack: unpack
    };
  };

  var songPacker = patternIndexPacker(objToArrayPacker(["patterns", "measure", "bpm", ["tracks", flatten(array(objToArrayPacker([["blocks", flatten(array(objToArrayPacker(["id"])), 1)]])), 1)]]));
  var recursiveInstrumentPacker = {
    pack: function pack(obj) {
      return instrumentPacker.pack(obj);
    },
    unpack: function unpack(obj) {
      return instrumentPacker.unpack(obj);
    }
  };
  var stackPacker = objToArrayPacker([["array", array(recursiveInstrumentPacker)]]);
  var envelopePacker = objToArrayPacker(["attackTime", "decayTime", "sustainLevel", "releaseTime", ["reset_on_cut", booleanPacker]]);
  var oscillatorPacker = objToArrayPacker([["oscillatorType", substitution(["sine", "square", "sawtooth", "triangle", "custom"])], ["fixed_frequency", booleanPacker], ["frequency", nullable()], ["waveform", nullable()], ["serie", nullable(objToArrayPacker(["sin", "cos"]))], ["terms", nullable(objToArrayPacker(["sin", "cos"]))], ["modulation", nullable(objToArrayPacker([["detune", recursiveInstrumentPacker], ["pulse_width", nullable(recursiveInstrumentPacker)]]))], "time_constant", "pulse_width"]);
  var frequencyFilterPacker = objToArrayPacker(["frequency", "detune", "Q", ["modulation", objToArrayPacker([["frequency", recursiveInstrumentPacker], ["detune", recursiveInstrumentPacker], ["Q", recursiveInstrumentPacker]])]]);
  var noParametersPacker = objToArrayPacker([]);
  var multiInstrumentPacker = objToArrayPacker([["subobjects", flatten(array(recursiveInstrumentPacker), 2)]]);
  var typeNames = ["script", "null", "oscillator", "notesplit", "rise", "adsr", "envelope", "transpose", "scale", "gain", "echo", "lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass", "reverb", "noise", "pink_noise", "red_noise", "arpeggiator", "stack", "multi_instrument", "monophoner", "polyphoner", "note_padding", "note_condition", "signal_monitor", "signal_constant", "note_delay", "sample_rate_reduction", "bit_crushing", "signal_scale", "signal_not", "signal_or", "signal_and", "signal_nor", "signal_nand", "delay", "note_frequency_generator", "note_time_shift", "wave_shaper"];
  var monophonerPacker = objToArrayPacker([["force_note_cut", booleanPacker]]);
  var polyphonerPacker = objToArrayPacker(["maxChannels"]);
  var notePaddingPacker = objToArrayPacker(["time"]);

  var toModl = function toModl(value) {
    return [value, recursiveInstrumentPacker];
  };

  var modl = function modl(values) {
    return nullable(objToArrayPacker(values.map(toModl)));
  };

  var instrumentPacker = objToArrayPacker([["type", substitution(typeNames)], ["data", switchPacker('type', {
    script: objToArrayPacker(["code"]),
    'null': noParametersPacker,
    oscillator: oscillatorPacker,
    notesplit: objToArrayPacker(["delay"]),
    rise: objToArrayPacker(["time", "target"]),
    adsr: envelopePacker,
    envelope: envelopePacker,
    transpose: objToArrayPacker(["amount"]),
    scale: objToArrayPacker(["base", "top"]),
    gain: objToArrayPacker(["gain", ["modulation", modl(["gain"])]]),
    echo: objToArrayPacker(["gain", "delay"]),
    lowpass: frequencyFilterPacker,
    highpass: frequencyFilterPacker,
    bandpass: frequencyFilterPacker,
    lowshelf: frequencyFilterPacker,
    highshelf: frequencyFilterPacker,
    peaking: frequencyFilterPacker,
    notch: frequencyFilterPacker,
    allpass: frequencyFilterPacker,
    reverb: objToArrayPacker(["room", "damp", "mix"]),
    noise: noParametersPacker,
    pink_noise: noParametersPacker,
    red_noise: noParametersPacker,
    arpeggiator: objToArrayPacker(["scale", "interval", "duration", "gap"]),
    stack: stackPacker,
    multi_instrument: multiInstrumentPacker,
    monophoner: monophonerPacker,
    polyphoner: polyphonerPacker,
    note_padding: notePaddingPacker,
    note_condition: objToArrayPacker(["note_on", "note_off", "enter_time_constant", "leave_time_constant"]),
    signal_monitor: noParametersPacker,
    signal_constant: objToArrayPacker(["offset"]),
    note_delay: objToArrayPacker(["delay"]),
    delay: objToArrayPacker(["delay", ["modulation", modl(["delay"])]]),
    sample_rate_reduction: objToArrayPacker(["factor"]),
    bit_crushing: objToArrayPacker(["bits"]),
    signal_scale: objToArrayPacker(["base", "top"]),
    signal_not: noParametersPacker,
    signal_or: objToArrayPacker(["second_signal", ["modulation", modl(["second_signal"])]]),
    signal_and: objToArrayPacker(["second_signal", ["modulation", modl(["second_signal"])]]),
    signal_nor: objToArrayPacker(["second_signal", ["modulation", modl(["second_signal"])]]),
    signal_nand: objToArrayPacker(["second_signal", ["modulation", modl(["second_signal"])]]),
    note_frequency_generator: objToArrayPacker(["time_constant"]),
    note_time_shift: objToArrayPacker(["time"]),
    wave_shaper: objToArrayPacker(["samples", "f"])
  })]]);
  var packer = {
    pattern: patternPacker,
    song: songPacker,
    instrument: instrumentPacker
  };

  MUSIC.Formats.PackedJSONSerializerB.serialize = function (type, obj) {
    if (packer[type]) {
      var str = JSON.stringify(packer[type].pack(obj));
      str = str.slice(1, str.length - 1);
      return str;
    }

    return JSON.stringify(obj);
  };

  MUSIC.Formats.PackedJSONSerializerB.deserialize = function (type, str) {
    if (packer[type]) {
      return packer[type].unpack(JSON.parse('[' + str + ']'));
    }

    return JSON.parse(str);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWIvaHVmZm1hbi0wLjkuMC5taW4uanMiLCJzcmMvbGliL3JlY29yZGVyLmpzIiwic3JjL2xpYi90aW1icmUuanMiLCJzcmMvbGliL3dlYmF1ZGlvYXBpLmpzIiwic3JjL2xpYi9yZWNvcmRlci9XZWJBdWRpb1JlY29yZGVyLm1pbi5qcyIsInNyYy90eXBlY2FzdC5qcyIsInNyYy9tdXNpYy5qcyIsInNyYy9tdXNpYy9lZmZlY3RzLmpzIiwic3JjL211c2ljL2luc3RydW1lbnRzLmpzIiwic3JjL211c2ljL2xlbW9uYWRlLmpzIiwic3JjL211c2ljL21hdGguanMiLCJzcmMvbXVzaWMvbm90ZVNlcXVlbmNlLmpzIiwic3JjL211c2ljL3BhdHRlcm4uanMiLCJzcmMvbXVzaWMvc2VxdWVuY2VQYXJzZXIuanMiLCJzcmMvbXVzaWMvc29uZy5qcyIsInNyYy9tdXNpYy91dGlscy5qcyIsInNyYy9tdXNpYy93YXZlLmpzIiwic3JjL2Zvcm1hdHMvc2VyaWFsaXplci9DYWNoZWRTZXJpYWxpemVyLmpzIiwic3JjL2Zvcm1hdHMvc2VyaWFsaXplci9IdWZmbWFuU2VyaWFsaXplcldyYXBwZXIuanMiLCJzcmMvZm9ybWF0cy9zZXJpYWxpemVyL0pTT05TZXJpYWxpemVyLmpzIiwic3JjL2Zvcm1hdHMvc2VyaWFsaXplci9NdWx0aVNlcmlhbGl6ZXIuanMiLCJzcmMvZm9ybWF0cy9zZXJpYWxpemVyL1BhY2tlZEpTT05TZXJpYWxpemVyLmpzIiwic3JjL2Zvcm1hdHMvc2VyaWFsaXplci9QYWNrZWRKU09OU2VyaWFsaXplckIuanMiXSwibmFtZXMiOlsiVHlwZUNvbnZlcnNvciIsInR5cGVOYW1lIiwiY29udmVyc29yQXJyYXkiLCJhZGQiLCJjb252ZXJzb3IiLCJwdXNoIiwiY2FzdCIsIm9iaiIsImkiLCJsZW5ndGgiLCJjb252ZXJ0ZWQiLCJUeXBlQ2FzdCIsInR5cGVDb252ZXJzb3JzIiwicmVnaXN0ZXIiLCJ0eXBlQ29udmVyc29yIiwid2luZG93IiwiTVVTSUMiLCJUeXBlcyIsIlNvdW5kTGliIiwiRWZmZWN0cyIsInBsYXlhYmxlUGlwZUV4dGVuZCIsImR1cmluZyIsImR1cmF0aW9uIiwib3JpZ2luYWwiLCJwbGF5Iiwic3RvcHBlZCIsInBsYXlhYmxlIiwid3JhcHBlciIsInN0b3AiLCJzZXRUaW1lb3V0Iiwic3RvcERlbGF5IiwiZGVsYXkiLCJwYXJhbSIsInBsYXlpbmciLCJiaW5kIiwib25FcnJvciIsImZjbiIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJvblN0b3AiLCJFZmZlY3RzUGlwZWxpbmUiLCJhdWRpbyIsImF1ZGlvRGVzdGluYXRpb24iLCJfYXVkaW8iLCJfYXVkaW9EZXN0aW5hdGlvbiIsImRlZmF1bHRXcmFwRmNuIiwiY29tcG9zZSIsImYiLCJnIiwicHJvdG90eXBlIiwiX3dyYXBGY24iLCJ3cmFwIiwicmV0IiwiRHVtbXlOb2RlIiwicmV0MiIsInNmeEJhc2UiLCJvYmplY3RzIiwiZGlzcG9zZSIsInNmeEJhc2VXcmFwcGVyIiwiZWxlbSIsInJlbW92ZUVsZW0iLCJ4Iiwib3JpZ2luYWxEaXNwb3NlIiwiZmlsdGVyIiwiY2FsbCIsInNmeFBydW5lIiwiZm9yRWFjaCIsImdldE9yaWdpbmFsIiwicHJ1bmUiLCJjb25zdGFudCIsIm9wdGlvbnMiLCJDb25zdGFudCIsIm9zY2lsbGF0b3IiLCJPc2NpbGxhdG9yIiwic291bmRmb250IiwiU291bmRmb250SW5zdHJ1bWVudCIsInNvdW5kIiwicGF0aCIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJyZXNwb25zZVR5cGUiLCJhdWRpb0J1ZmZlciIsIm9uZXJyb3IiLCJlcnIiLCJvbmxvYWQiLCJkZWNvZGVBdWRpb0RhdGEiLCJyZXNwb25zZSIsImJ1ZmZlciIsInNlbmQiLCJidWZmZXJTb3VyY2UiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJjb25uZWN0IiwiX2Rlc3RpbmF0aW9uIiwic3RhcnQiLCJjdXJyZW50VGltZSIsImRpc2Nvbm5lY3QiLCJmb3JtdWxhR2VuZXJhdG9yIiwiRm9ybXVsYUdlbmVyYXRvciIsInNpZ25hbF9hbmQiLCJ2YWx1ZSIsImdhaW4iLCJzaWduYWxfbmFuZCIsInNpZ25hbF9ub3QiLCJzaWduYWxfb3IiLCJzaWduYWxfbm9yIiwibmVnYXRlTW9kbCIsIm1vZGwiLCJhcHBseSIsImF1ZGlvUGFyYW0iLCJtdXNpYyIsIm1vZHVsYXRvckZhY3RvcnkiLCJhbmROb2RlIiwidXBkYXRlIiwic2lnbmFsX3NjYWxlIiwidG9wIiwiYmFzZSIsImMxIiwiZ2FpblVwZGF0ZSIsImdhaW5EaXNwb3NlIiwiY29uc3RhbnRVcGRhdGUiLCJjb25zdGFudERpc3Bvc2UiLCJhIiwiYiIsIlQiLCJhcmd1bWVudHMiLCJub2lzZSIsIk5vaXNlIiwicGlua19ub2lzZSIsIlBpbmtOb2lzZSIsInJlZF9ub2lzZSIsIlJlZE5vaXNlIiwiT2JqZWN0IiwiY3JlYXRlIiwiYXJncyIsImFwaSIsImNvbnRleHQiLCJnYWluTm9kZSIsImNyZWF0ZUdhaW4iLCJyZWN2IiwiVGFyZ3VtZW50cyIsInN5bnRoIiwib3V0cHV0IiwiZGlzY29ubmVjdGVkIiwicmVtb3ZlQWxsIiwiY2FuY2VsIiwidW5saXN0ZW4iLCJuZXh0IiwiZWZmZWN0TmFtZSIsImF1ZGlvQ29udGV4dCIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsIkNvbnRleHQiLCJub291dHB1dCIsImRlc3RpbmF0aW9uIiwicmVzdW1lIiwic3RhdGUiLCJyZWNvcmQiLCJjYWxsYmFjayIsInJlY29yZGVyIiwiV2ViQXVkaW9SZWNvcmRlciIsIndvcmtlckRpciIsImVuY29kaW5nIiwibnVtQ2hhbm5lbHMiLCJvbkNvbXBsZXRlIiwiYmxvYiIsInN0YXJ0UmVjb3JkaW5nIiwiZmluaXNoUmVjb3JkaW5nIiwibmV4dFByb3ZpZGVyIiwiRm9ybXVsYSIsImlucHV0IiwidCIsImIwIiwiYjEiLCJiMiIsImIzIiwiYjQiLCJiNSIsImI2Iiwibm9pc2VHZW5lcmF0b3IiLCJ3aGl0ZSIsIk1hdGgiLCJyYW5kb20iLCJzZXRWYWx1ZSIsImxhc3RPdXQiLCJidWZmZXJTaXplIiwic2FtcGxlUmF0ZSIsIm5vaXNlQnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiZ2V0Q2hhbm5lbERhdGEiLCJ3aGl0ZU5vaXNlIiwibG9vcCIsIldhdmUiLCJwZXJpb2QiLCJzYW1wbGVDb3VudCIsImZsb29yIiwiZGF0YUFycmF5IiwicmVjb3JkaW5nIiwiZ2V0QnVmZmVyIiwiZGF0YSIsIm9yaWdpbmFsRGF0YUFycmF5IiwidmFsdWUxIiwiQXVkaW9EZXN0aW5hdGlvbldyYXBwZXIiLCJtb2R1bGF0b3IiLCJfZiIsImNvbWJpbmVGdW5jIiwiYXVkaW9QYXJhbU1vZHVsYXRpb24iLCJsZW4iLCJjb25zdGFudEFycmF5QnVmZmVyIiwiRmxvYXQzMkFycmF5IiwiYnVmZmVyMSIsImNvbnN0YW50Tm9kZSIsImNyZWF0ZUNvbnN0YW50U291cmNlIiwib2Zmc2V0Iiwic2V0Iiwibm9vcCIsInNldFBhcmFtIiwicGFyYW1OYW1lIiwic2V0UGFyYW1UYXJnZXQiLCJ0YXJnZXQiLCJ0aW1lQ29uc3RhbnQiLCJjYW5jZWxTY2hlZHVsZWRWYWx1ZXMiLCJzZXRUYXJnZXRBdFRpbWUiLCJmcmVxIiwibmV3RnJlcSIsInNldEZyZXEiLCJyZXNldCIsImVmZmVjdHMiLCJkZXR1bmUiLCJmcmVxdWVuY3kiLCJ0aW1lX2NvbnN0YW50IiwiaXNGaW5pdGUiLCJpc05hTiIsIm9zYyIsImNyZWF0ZU9zY2lsbGF0b3IiLCJhcHBsaWVkQXVkaW9QYXJhbSIsInR5cGUiLCJyZWFsIiwidGVybXMiLCJzaW4iLCJpbWFnIiwiY29zIiwicGVyaW9kaWNXYXZlIiwiY3JlYXRlUGVyaW9kaWNXYXZlIiwic2V0UGVyaW9kaWNXYXZlIiwic2NoZWR1bGVfZnJlcSIsInRjIiwiZml4ZWRfZnJlcXVlbmN5Iiwibm90ZU9wdGlvbnMiLCJzZXRGcmVxT25UaW1lIiwibmV4dE5vZGUiLCJkaXNwb3NlTm9kZSIsInd0UG9zaXRpb24iLCJ0YSIsIm9wdGlvbnNGcmVxdWVuY3kiLCJhdCIsImRlbHRhdGltZSIsImxhc3RUaW1lIiwidGIiLCJ3YXZlIiwibmV3T3B0aW9ucyIsIkxvb3AiLCJ0aW1lcyIsImxhc3RQbGF5Iiwic3RhcnRUaW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJjdXJyZW50SXRlcmF0aW9uIiwibmV4dEl0ZXJhdGlvbiIsImNsZWFySW50ZXJ2YWwiLCJpbnRlciIsInNldEludGVydmFsIiwiU2lsZW5jZSIsInRpbWUiLCJlZmZlY3RzT2JqZWN0IiwiY2IiLCJzZngiLCJXZWJBdWRpb05vZGVXcmFwcGVyIiwiYXVkaW9Ob2RlIiwib25EaXNwb3NlIiwicmVjIiwiUmVjb3JkZXIiLCJ3b3JrZXJQYXRoIiwic2NyaXB0Tm9kZSIsImNyZWF0ZVNjcmlwdFByb2Nlc3NvciIsIml0ZXJhdGlvbiIsIm9uYXVkaW9wcm9jZXNzIiwiYXVkaW9Qcm9jZXNzaW5nRXZlbnQiLCJpbnB1dEJ1ZmZlciIsIm91dHB1dEJ1ZmZlciIsImNoYW5uZWwiLCJudW1iZXJPZkNoYW5uZWxzIiwiaW5wdXREYXRhIiwib3V0cHV0RGF0YSIsInNhbXBsZSIsImlzRm9ybXVsYSIsIkJpUXVhZCIsImJpcXVhZEZpbHRlciIsImNyZWF0ZUJpcXVhZEZpbHRlciIsImdhaW5Nb2R1bGF0aW9uIiwibm9kaXNwb3NlIiwicU1vZHVsYXRpb24iLCJmcmVxdWVuY3lNb2R1bGF0aW9uIiwiZGV0dW5lTW9kdWxhdGlvbiIsImJpcXVhZFR5cGUiLCJhc3NpZ25QYXJhbSIsIm9yaWciLCJRIiwiZmlsdGVyTmFtZSIsImNhbk11dGF0ZSIsInVwZGF0ZUZjbiIsInZvbHVtZU1vZHVsYXRpb24iLCJkZWxheU5vZGUiLCJjcmVhdGVEZWxheSIsImRlbGF5TW9kdWxhdGlvbiIsImRlbGF5VGltZSIsIkVjaG8iLCJhdHQiLCJnYWluTm9kZTIiLCJXYXZlU2hhcGVyIiwic2FtcGxlcyIsIm1ha2VEaXN0b3J0aW9uQ3VydmUiLCJhcnJheSIsIndhdmVTaGFwZXJOb2RlIiwiY3JlYXRlV2F2ZVNoYXBlciIsImN1cnZlIiwib3ZlcnNhbXBsZSIsIkN1cnZlIiwiY29uY2F0IiwidGltZTEiLCJjMiIsInRpbWUyIiwibiIsInNldFZhbHVlQ3VydmVBdFRpbWUiLCJSYW1wIiwiaW5pdFZhbHVlIiwiZW5kVmFsdWUiLCJQZXJpb2RpYyIsImF0dGFja1RpbWUiLCJkZWNheVRpbWUiLCJzdXN0YWluTGV2ZWwiLCJyZWxlYXNlVGltZSIsInVuZGVmaW5lZCIsIm5leHROb2RlRmNuIiwibm9kZSIsImF0dGFja0N1cnZlIiwiZGVjYXlDdXJ2ZSIsInN0YXJ0Q3VydmUiLCJjdXJyZW50TGV2ZWwiLCJyZWxlYXNlQ3VydmUiLCJzdG9wQ3VydmUiLCJub3RlbnVtIiwicG93Iiwibm90ZVRvTnVtTWFwIiwiaW5zdHJ1bWVudEV4dGVuZCIsImRlbGF5ZWRQbGF5aW5nIiwib3JpZ2luYWxQbGF5aW5nIiwibXMiLCJkZWxheWVkTm90ZSIsIm9yaWdpbmFsTm90ZSIsIm5vdGUiLCJub3RlTnVtIiwicGVyTm90ZVdyYXAiLCJtYXBOb3RlIiwiZXZlbnRQcmVwcm9jZXNzb3IiLCJldnQiLCJzY2hlZHVsZV9ub3RlIiwibm90ZVRvTm90ZU51bSIsIm5vdGVOYW1lIiwiY2hhckF0IiwicGFyc2VJbnQiLCJQb2x5cGhvbnlJbnN0cnVtZW50IiwiaW5uZXJGYWN0b3J5IiwibWF4Q2hhbm5lbHMiLCJpbnN0cnVtZW50QXJyYXkiLCJvblVzZSIsInF1ZXVlIiwiZnJlZUlkeCIsImMiLCJwbGF5aW5nSWR4IiwiaW5zdHJ1bWVudCIsInNoaWZ0IiwiZXZlbnQiLCJldmVudHMiLCJNb25vTm90ZUluc3RydW1lbnQiLCJpbm5lciIsIm5vdGVJbnN0IiwicGxheWluZ0luc3QiLCJjb3VudCIsInNldFZhbHVlT25UaW1lIiwiSW5zdHJ1bWVudCIsInNvdW5kRmFjdG9yeSIsImZyIiwic291bmRJbnN0YW5jZSIsIk11bHRpSW5zdHJ1bWVudCIsIkFycmF5IiwiaXNBcnJheSIsIm5vdGVQbGF5Iiwibm90ZVN0b3AiLCJNdWx0aU5vdGUiLCJub3RlQXJyYXkiLCJub3RlcyIsIm1hcCIsImV2ZXJ5IiwicHJvY2Vzc2VkRXZlbnRzIiwicyIsImwiLCJrIiwiTk9URVMiLCJub3RlTnVtVG9Ob3RlTmFtZSIsIm9jdGF2ZU51bSIsIlBhdGNoSW5zdHJ1bWVudCIsInNvdW5kcyIsIm5vdGVBdWRpbyIsIl9iYXNlNjRUb0FycmF5QnVmZmVyIiwiYmFzZTY0IiwiYmluYXJ5X3N0cmluZyIsImF0b2IiLCJieXRlcyIsIlVpbnQ4QXJyYXkiLCJhc2NpaSIsImNoYXJDb2RlQXQiLCJpbmRleCIsInhtbGh0dHAiLCJlbmNvZGVkIiwic3BsaXQiLCJzb3VyY2UiLCJzb3VuZEdlbmVyYXRvciIsIm51bGxQbGF5IiwicGxhaW5PYmplY3QiLCJjb25zdHJ1Y3RvciIsIlN0b3BFdmVudCIsInBhcmFtT2JqZWN0Iiwib25wbGF5Iiwib25zdG9wIiwiTGVtb25hZGVQbGF5YWJsZSIsIm91dHB1dEZjbiIsIm9wcyIsIl9tdXNpYyIsIl9vcHMiLCJfb3V0cHV0Iiwib3BzTGVuZ3RoIiwic2lnbmFsQXJyYXkiLCJwaGFzZUFycmF5IiwibGFzdFQiLCJkZWx0YXkiLCJwaGFzZSIsImJwbVRvU2Vjb25kVGljayIsImJwbSIsInRpY2tzX3Blcl9iZWF0IiwibWFrZUV2YWx1YWJsZUludmVyc2VGdW5jdGlvbkZyb21QYXJ0cyIsInBhcnQiLCJtYWtlRXZhbHVhYmxlRnVuY3Rpb24iLCJpbnZlcnNlX2YiLCJtYWtlRXZhbHVhYmxlSW52ZXJzZUZ1bmN0aW9uIiwiaW5pdCIsImVuZCIsInkiLCJmaW5kIiwicCIsIm1ha2VFdmFsdWFibGVGdW5jdGlvbkZyb21QYXJ0cyIsInNxcnQiLCJpbnRlZ3JhdGUiLCJsYXN0UG9pbnRWYWx1ZSIsImludGVncmF0ZUJwbUV2ZW50cyIsImN1dEJwbUV2ZW50IiwiYnBtRXZlbnQxIiwiYnBtX2V2ZW50cyIsImJwbUV2ZW50MiIsImN1dEwiLCJtYXgiLCJmaXJzdEV2ZW50U3RhcnQiLCJwYXJ0cyIsImJwbV9ldmVudCIsIm5leHRfYnBtX2V2ZW50IiwiaW5pdF9zZWNvbmRfdGljayIsImVuZF9zZWNvbmRfdGljayIsImludGVncmF0ZWRQYXJ0cyIsImludGVncmFsIiwidGlja3NUb1RpbWUiLCJ0aWNrcyIsInNjYWxlIiwidGltZVRvVGlja3MiLCJpbnZlcnNlU2NhbGUiLCJOb3RlU2VxdWVuY2UiLCJmdW5zZXEiLCJjbG9jayIsInNvbmdDdHgiLCJVdGlscyIsIkNsb2NrIiwiRnVuY3Rpb25TZXEiLCJjbGVhclRpbWVvdXQiLCJyZWZlcmVuY2VJbnN0cnVtZW50Iiwic2VxdWVuY2VTdGFydFRpbWUiLCJleHRlcm5hbFNjaGVkdWxlIiwiX3RpbWUiLCJfZnVuc2VxIiwiX3RvdGFsZHVyYXRpb24iLCJfbm90ZWlkIiwiX2NvbnRleHRMaXN0IiwiUGxheWFibGUiLCJub3Rlc2VxIiwiY29udGV4dExpc3QiLCJfbm90ZXNlcSIsIl9pbnN0cnVtZW50IiwiX2R1cmF0aW9uIiwiX3J1bm5pbmdGdW5TZXEiLCJQbGF5aW5nIiwicnVubmluZ0Z1blNlcSIsImN0eCIsIl9jb250ZXh0IiwicGFkZGluZ1RvIiwicGFkZGluZyIsInB1c2hDYWxsYmFjayIsImJhc2VDdHgiLCJteW5vdGVpZCIsImluZGV4T2YiLCJzZXRQbGF5aW5nIiwid2FybiIsInVuc2V0UGxheWluZyIsIm1ha2VQbGF5YWJsZSIsInN1YmN0eCIsInBsYXlpbmdOb3RlcyIsIm5vdGVpZCIsInBsYXlpbmdTdG9wIiwiTXVsdGlQbGF5YWJsZSIsInBsYXlhYmxlQXJyYXkiLCJfcGxheWFibGVBcnJheSIsInBsYXlhYmxlUGxheSIsInBsYXlpbmdBcnJheSIsImhpZ2hlciIsImdldER1cmF0aW9uIiwicmVkdWNlIiwiQ2hhbmdlVGltZVdyYXBwZXIiLCJleHRlbnNpb25UaW1lIiwiX2V4dGVuc2lvblRpbWUiLCJQYXR0ZXJuIiwicHVsc2VUaW1lIiwic2VxIiwiY29kZSIsIlNlcXVlbmNlUGFyc2VyIiwicGFyc2UiLCJpc05vdGVTdGFydCIsImNociIsIm5vdGVTcGxpdCIsInN0ciIsImxhc3ROb3RlIiwicGlwZVJlcGxhY2UiLCJSZWdFeHAiLCJub3RlU2VxIiwiY3VycmVudE5vdGUiLCJjdXJyZW50Q2hhcmFjdGVyIiwicmVwbGFjZSIsImN1cnJlbnROb3RlU3RyIiwibm90ZUR1cmF0aW9uIiwiZXF1YWxJbmRleCIsInNsaWNlIiwibGFzdENoYXIiLCJvY3RhdmUiLCJQbGF5aW5nU29uZyIsInBhdHRlcm5Db250ZXh0cyIsIl9wYXR0ZXJuQ29udGV4dHMiLCJfZnVuc2VxSGFuZGxlciIsIm5vUGxheSIsImRlZmF1bHRGcm9tUGF0dGVybnMiLCJwYXR0ZXJucyIsInBhdHRlcm5Pck5hbWUiLCJoYXNTY2hlZHVsZU1ldGhvZCIsInBhdHRlcm4iLCJzY2hlZHVsZSIsImhhc05vdFNjaGVkdWxlTWV0aG9kIiwiU29uZyIsInBhdHRlcm5zT3JPcHRpb25zIiwic2VsZiIsImdldEZyb21QYXR0ZXJucyIsIm1lYXN1cmUiLCJ0b3RhbE1lYXN1cmVzIiwiYnlTdGFydCIsImoiLCJwYXR0ZXJuQXJyYXkiLCJkaXNwbGFjZWRCcG1FdmVudHMiLCJzb3J0IiwidGltZUZ1bmMiLCJiYXNlVGlja3MiLCJzY2hlZHVsYWJsZSIsIm5vdFNjaGVkdWxhYmxlIiwibXVsdGlQbGF5YWJsZSIsInNjaGVkdWxlQ29udGV4dHMiLCJTY2FsZSIsInRvbmVBZGQiLCJ2IiwicHJlY2lzZVRpbWVyIiwiaW50ZXJ2YWwiLCJobmRsIiwiZXZlbnRzQXJyYXkiLCJyZWplY3QiLCJwYXJhbWV0ZXIiLCJlMSIsImUyIiwiZHQiLCJ0aW1lb3V0SGFuZGxlcnMiLCJldmVudENvdW50IiwiY2xvY2tIYW5kbGVyIiwibGFzdEV2ZW50IiwiY2FsbGluZ0NyaXRlcmlhIiwiZWxlbWVudCIsInBlbmRpbmciLCJwcm9jZXNzUGVuZGluZyIsImN1cnJlbnRQZW5kaW5nIiwidGltZW91dEhhbmRsZXIiLCJhZGRTY2hlZHVsZSIsIm5leHRFbGVtZW50IiwicHJlY2lzZVRpbWVvdXQiLCJEZWxheWVkRnVuY3Rpb25TZXEiLCJwYXJhbXMiLCJGdW5jdGlvbldhdmUiLCJ0d29waSIsIlBJIiwid2F2ZVRyYW5zZm9ybSIsIndhdmVPcHMiLCJyZXZlcnNlIiwiZmFjdG9yIiwidHJhbnNsYXRlIiwiZGlzcCIsInRhYmxlIiwiVGFibGUiLCJjb21iaW5lIiwib3RoZXJXYXZlIiwib3RoZXJGYWN0b3IiLCJ0aGlzV2F2ZSIsInRoaXNGYWN0b3IiLCJkZWZhdWx0SW50ZXJwb2xhdGlvbiIsImludGVycG9sYXRpb24iLCJzaW5lIiwic3F1YXJlIiwiZHV0eUN5Y2xlIiwiZHV0eUxldmVsIiwib2ZmTGV2ZWwiLCJ0cmlhbmdsZSIsInQyIiwic2F3dG9vdGgiLCJGb3JtYXRzIiwiQ2FjaGVkU2VyaWFsaXplciIsImlubmVyU2VyaWFsaXplciIsImxhc3RPdXRwdXQiLCJsYXN0SW5wdXQiLCJsYXN0VHlwZSIsInNlcmlhbGl6ZSIsImpzb25DdXJyZW50SW5wdXQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGVzZXJpYWxpemUiLCJIdWZmbWFuU2VyaWFsaXplcldyYXBwZXIiLCJmcmVxdWVuY2llcyIsInRleHQiLCJodWZmbWFuIiwiSHVmZm1hbiIsInRyZWVGcm9tVGV4dCIsImVuY29kZSIsImRlY29kZWQiLCJkZWNvZGUiLCJKU09OU2VyaWFsaXplciIsIk11bHRpU2VyaWFsaXplciIsInNlcmlhbGl6ZXJBcnJheSIsIm1hdGNoIiwia2V5cyIsImtleSIsIndyYXBTZXJpYWxpemVyIiwic2VyaWFsaXplciIsInJlY292ZXJlZElucHV0Iiwic21hbGxlc3QiLCJ0cnV0aHkiLCJzZWxlY3RvciIsIkVycm9yIiwic2VyaWFsaXplZCIsInNldFNlcmlhbGl6ZXJzIiwiZW50cnkiLCJQYWNrZWRKU09OU2VyaWFsaXplciIsIm9ialRvQXJyYXlQYWNrZXIiLCJwYWNrIiwidW5wYWNrIiwiaW5uZXJQYWNrZXIiLCJmbGF0dGVuIiwic2l6ZSIsImRlZmxhdHRlZCIsInBhdHRlcm5QYWNrZXIiLCJwYXR0ZXJuSW5kZXhQYWNrZXIiLCJjb252ZXJ0QmxvY2tzIiwiYmxvY2siLCJpZCIsImNvbnZlcnRUcmFjayIsInRyYWNrIiwiYmxvY2tzIiwibmV3T2JqZWN0IiwidHJhY2tzIiwic3Vic3RpdHV0aW9uIiwiaWR4Iiwic3dpdGNoUGFja2VyIiwic2VsZWN0QXR0cmlidXRlIiwicGFja2VycyIsInBhcmVudCIsImJvb2xlYW5QYWNrZXIiLCJudWxsYWJsZSIsInNvbmdQYWNrZXIiLCJyZWN1cnNpdmVJbnN0cnVtZW50UGFja2VyIiwiaW5zdHJ1bWVudFBhY2tlciIsInN0YWNrUGFja2VyIiwiZW52ZWxvcGVQYWNrZXIiLCJvc2NpbGxhdG9yUGFja2VyIiwiZnJlcXVlbmN5RmlsdGVyUGFja2VyIiwibm9QYXJhbWV0ZXJzUGFja2VyIiwibXVsdGlJbnN0cnVtZW50UGFja2VyIiwidHlwZU5hbWVzIiwibW9ub3Bob25lclBhY2tlciIsInBvbHlwaG9uZXJQYWNrZXIiLCJzY3JpcHQiLCJub3Rlc3BsaXQiLCJyaXNlIiwiYWRzciIsImVudmVsb3BlIiwidHJhbnNwb3NlIiwiZWNobyIsImxvd3Bhc3MiLCJoaWdocGFzcyIsImJhbmRwYXNzIiwibG93c2hlbGYiLCJoaWdoc2hlbGYiLCJwZWFraW5nIiwibm90Y2giLCJhbGxwYXNzIiwicmV2ZXJiIiwiYXJwZWdnaWF0b3IiLCJzdGFjayIsIm11bHRpX2luc3RydW1lbnQiLCJtb25vcGhvbmVyIiwicG9seXBob25lciIsInBhY2tlciIsInNvbmciLCJQYWNrZWRKU09OU2VyaWFsaXplckIiLCJwYXR0ZXJuRXZlbnRQYWNrZXIiLCJmaXJzdEVsZW1lbnQiLCJub3RlUGFkZGluZ1BhY2tlciIsInRvTW9kbCIsInZhbHVlcyIsIm5vdGVfcGFkZGluZyIsIm5vdGVfY29uZGl0aW9uIiwic2lnbmFsX21vbml0b3IiLCJzaWduYWxfY29uc3RhbnQiLCJub3RlX2RlbGF5Iiwic2FtcGxlX3JhdGVfcmVkdWN0aW9uIiwiYml0X2NydXNoaW5nIiwibm90ZV9mcmVxdWVuY3lfZ2VuZXJhdG9yIiwibm90ZV90aW1lX3NoaWZ0Iiwid2F2ZV9zaGFwZXIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDekZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNydFhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzVPQTtBQUNBOzs7QUNEQSxDQUFDLFlBQVU7QUFFWCxNQUFJQSxhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLENBQVNDLFFBQVQsRUFBbUI7QUFDckMsUUFBSUMsY0FBYyxHQUFHLEVBQXJCOztBQUVBLFNBQUtDLEdBQUwsR0FBVyxVQUFTQyxTQUFULEVBQW1CO0FBQzVCRixNQUFBQSxjQUFjLENBQUNHLElBQWYsQ0FBb0JELFNBQXBCO0FBQ0QsS0FGRDs7QUFJQSxTQUFLRSxJQUFMLEdBQVksVUFBU0MsR0FBVCxFQUFjO0FBQ3hCLFdBQUssSUFBSUMsQ0FBQyxHQUFDLENBQVgsRUFBY0EsQ0FBQyxHQUFDTixjQUFjLENBQUNPLE1BQS9CLEVBQXNDRCxDQUFDLEVBQXZDLEVBQTJDO0FBQ3pDLFlBQUlKLFNBQVMsR0FBR0YsY0FBYyxDQUFDTSxDQUFELENBQTlCO0FBQ0EsWUFBSUUsU0FBUyxHQUFHTixTQUFTLENBQUNHLEdBQUQsQ0FBekI7QUFFQSxZQUFJRyxTQUFKLEVBQWUsT0FBT0EsU0FBUDtBQUNoQjs7QUFFRCxZQUFNLG1CQUFtQkgsR0FBbkIsR0FBeUIsTUFBekIsR0FBa0NOLFFBQXhDO0FBQ0QsS0FURDtBQVVELEdBakJEOztBQW1CQSxNQUFJVSxRQUFRLEdBQUcsU0FBWEEsUUFBVyxHQUFVO0FBQ3ZCLFFBQUlDLGNBQWMsR0FBRyxFQUFyQjs7QUFFQSxTQUFLQyxRQUFMLEdBQWdCLFVBQVNaLFFBQVQsRUFBbUJHLFNBQW5CLEVBQTZCO0FBQzNDLFVBQUlVLGFBQUo7O0FBQ0EsVUFBSSxDQUFDRixjQUFjLENBQUNYLFFBQUQsQ0FBbkIsRUFBK0I7QUFDN0JXLFFBQUFBLGNBQWMsQ0FBQ1gsUUFBRCxDQUFkLEdBQTJCLElBQUlELGFBQUosQ0FBa0JDLFFBQWxCLENBQTNCO0FBQ0Q7O0FBRURhLE1BQUFBLGFBQWEsR0FBR0YsY0FBYyxDQUFDWCxRQUFELENBQTlCO0FBQ0FhLE1BQUFBLGFBQWEsQ0FBQ1gsR0FBZCxDQUFrQkMsU0FBbEI7QUFDRCxLQVJEOztBQVVBLFNBQUtFLElBQUwsR0FBWSxVQUFTTCxRQUFULEVBQW1CTSxHQUFuQixFQUF3QjtBQUNsQyxVQUFJTyxhQUFhLEdBQUdGLGNBQWMsQ0FBQ1gsUUFBRCxDQUFsQztBQUNBLFVBQUksQ0FBQ2EsYUFBTCxFQUFvQixNQUFNLGlCQUFpQmIsUUFBdkI7QUFFcEIsYUFBT2EsYUFBYSxDQUFDUixJQUFkLENBQW1CQyxHQUFuQixDQUFQO0FBQ0QsS0FMRDtBQU1ELEdBbkJEOztBQXFCQVEsRUFBQUEsTUFBTSxDQUFDQyxLQUFQLEdBQWVELE1BQU0sQ0FBQ0MsS0FBUCxJQUFnQixFQUEvQjtBQUNBRCxFQUFBQSxNQUFNLENBQUNDLEtBQVAsQ0FBYUMsS0FBYixHQUFxQixJQUFJTixRQUFKLEVBQXJCO0FBRUMsQ0E3Q0Q7OztBQ0FBSSxNQUFNLENBQUNDLEtBQVAsR0FBZUQsTUFBTSxDQUFDQyxLQUFQLElBQWdCLEVBQS9COztBQUVBLENBQUMsWUFBVztBQUNaQSxFQUFBQSxLQUFLLENBQUNFLFFBQU4sR0FBaUJGLEtBQUssQ0FBQ0UsUUFBTixJQUFrQixFQUFuQztBQUNBRixFQUFBQSxLQUFLLENBQUNHLE9BQU4sR0FBZ0JILEtBQUssQ0FBQ0csT0FBTixJQUFpQixFQUFqQzs7QUFFQUgsRUFBQUEsS0FBSyxDQUFDSSxrQkFBTixHQUEyQixVQUFTYixHQUFULEVBQWM7QUFDdkNBLElBQUFBLEdBQUcsQ0FBQ2MsTUFBSixHQUFhLFVBQVNDLFNBQVQsRUFBbUI7QUFDOUIsVUFBSUMsUUFBUSxHQUFHLElBQWY7QUFDQSxhQUFPUCxLQUFLLENBQUNJLGtCQUFOLENBQXlCO0FBQzlCSSxRQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDZixjQUFJQyxPQUFPLEdBQUcsS0FBZDtBQUNBLGNBQUlDLFFBQVEsR0FBR0gsUUFBUSxDQUFDQyxJQUFULEVBQWY7QUFDQSxjQUFJRyxPQUFPLEdBQUc7QUFDWkMsWUFBQUEsSUFBSSxFQUFFLGdCQUFXO0FBQ2Ysa0JBQUksQ0FBQ0gsT0FBTCxFQUFjQyxRQUFRLENBQUNFLElBQVQ7QUFDZEgsY0FBQUEsT0FBTyxHQUFHLElBQVY7QUFDRDtBQUpXLFdBQWQ7QUFNQUksVUFBQUEsVUFBVSxDQUFDRixPQUFPLENBQUNDLElBQVQsRUFBZU4sU0FBZixDQUFWO0FBQ0EsaUJBQU9LLE9BQVA7QUFDRCxTQVo2QjtBQWM5QkwsUUFBQUEsUUFBUSxFQUFFLG9CQUFXO0FBQUUsaUJBQU9BLFNBQVA7QUFBa0I7QUFkWCxPQUF6QixDQUFQO0FBZ0JELEtBbEJEOztBQW9CQWYsSUFBQUEsR0FBRyxDQUFDdUIsU0FBSixHQUFnQixVQUFTQyxLQUFULEVBQWdCO0FBQzlCLFVBQUlSLFFBQVEsR0FBRyxJQUFmO0FBQ0EsYUFBT1AsS0FBSyxDQUFDSSxrQkFBTixDQUNMO0FBQ0VJLFFBQUFBLElBQUksRUFBRSxjQUFTUSxLQUFULEVBQWdCO0FBQ3BCLGNBQUlDLE9BQU8sR0FBR1YsUUFBUSxDQUFDQyxJQUFULENBQWNRLEtBQWQsQ0FBZDtBQUNBLGlCQUFPO0FBQ0xKLFlBQUFBLElBQUksRUFBRSxnQkFBVztBQUNmQyxjQUFBQSxVQUFVLENBQUNJLE9BQU8sQ0FBQ0wsSUFBUixDQUFhTSxJQUFiLENBQWtCRCxPQUFsQixDQUFELEVBQTZCRixLQUE3QixDQUFWO0FBQ0Q7QUFISSxXQUFQO0FBS0Q7QUFSSCxPQURLLENBQVA7QUFZRCxLQWREOztBQWdCQXhCLElBQUFBLEdBQUcsQ0FBQzRCLE9BQUosR0FBYyxVQUFTQyxHQUFULEVBQWM7QUFDMUIsVUFBSWIsUUFBUSxHQUFHLElBQWY7QUFDQSxhQUFPUCxLQUFLLENBQUNJLGtCQUFOLENBQ0w7QUFDRUksUUFBQUEsSUFBSSxFQUFFLGNBQVNRLEtBQVQsRUFBZ0I7QUFDcEIsY0FBSTtBQUNGLGdCQUFJQyxPQUFPLEdBQUdWLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjUSxLQUFkLENBQWQ7QUFDQSxtQkFBTztBQUNMSixjQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDZixvQkFBSTtBQUNGSyxrQkFBQUEsT0FBTyxDQUFDTCxJQUFSO0FBQ0QsaUJBRkQsQ0FFRSxPQUFNUyxDQUFOLEVBQVM7QUFDVEMsa0JBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjRixDQUFkO0FBQ0FELGtCQUFBQSxHQUFHLENBQUNDLENBQUQsQ0FBSDtBQUNEO0FBQ0Y7QUFSSSxhQUFQO0FBVUQsV0FaRCxDQVlFLE9BQU1BLENBQU4sRUFBUztBQUNUQyxZQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBY0YsQ0FBZDtBQUNBRCxZQUFBQSxHQUFHLENBQUNDLENBQUQsQ0FBSDtBQUNBLGtCQUFNQSxDQUFOO0FBQ0Q7QUFDRjtBQW5CSCxPQURLLENBQVA7QUF1QkQsS0F6QkQ7O0FBMkJBOUIsSUFBQUEsR0FBRyxDQUFDaUMsTUFBSixHQUFhLFVBQVNKLEdBQVQsRUFBYztBQUN6QixVQUFJYixRQUFRLEdBQUcsSUFBZjtBQUNBLGFBQU9QLEtBQUssQ0FBQ0ksa0JBQU4sQ0FDTDtBQUNFSSxRQUFBQSxJQUFJLEVBQUUsY0FBU1EsS0FBVCxFQUFnQjtBQUNwQixjQUFJQyxPQUFPLEdBQUdWLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjUSxLQUFkLENBQWQ7QUFDQSxpQkFBTztBQUNMSixZQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDZkssY0FBQUEsT0FBTyxDQUFDTCxJQUFSO0FBQ0FRLGNBQUFBLEdBQUcsQ0FBQ0osS0FBRCxDQUFIO0FBQ0Q7QUFKSSxXQUFQO0FBTUQ7QUFUSCxPQURLLENBQVA7QUFhRCxLQWZEOztBQWlCQSxXQUFPekIsR0FBUDtBQUNELEdBbEZEOztBQW9GQVMsRUFBQUEsS0FBSyxDQUFDQyxLQUFOLENBQVlKLFFBQVosQ0FBcUIsVUFBckIsRUFBaUMsVUFBU2EsUUFBVCxFQUFtQjtBQUNsRCxRQUFJQSxRQUFRLENBQUNGLElBQWIsRUFBbUI7QUFDakIsYUFBT0UsUUFBUDtBQUNEO0FBQ0YsR0FKRDtBQU1BVixFQUFBQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUosUUFBWixDQUFxQixVQUFyQixFQUFpQyxVQUFTdUIsR0FBVCxFQUFjO0FBQzdDLFFBQUksT0FBT0EsR0FBUCxLQUFlLFVBQW5CLEVBQStCO0FBQzdCLGFBQU87QUFDTFosUUFBQUEsSUFBSSxFQUFFWTtBQURELE9BQVA7QUFHRDtBQUNGLEdBTkQ7O0FBUUFwQixFQUFBQSxLQUFLLENBQUN5QixlQUFOLEdBQXdCLFVBQVNDLEtBQVQsRUFBZ0JDLGdCQUFoQixFQUFrQztBQUN4RCxTQUFLQyxNQUFMLEdBQWNGLEtBQWQ7QUFDQSxTQUFLRyxpQkFBTCxHQUF5QkYsZ0JBQXpCO0FBQ0QsR0FIRDs7QUFLQSxNQUFJRyxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQVN2QyxHQUFULEVBQWE7QUFDaEMsV0FBT0EsR0FBUDtBQUNELEdBRkQ7O0FBR0EsTUFBSXdDLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVNDLENBQVQsRUFBV0MsQ0FBWCxFQUFjO0FBQzFCLFdBQU8sVUFBUzFDLEdBQVQsRUFBYztBQUNuQixhQUFPMEMsQ0FBQyxDQUFDRCxDQUFDLENBQUN6QyxHQUFELENBQUYsQ0FBUjtBQUNELEtBRkQ7QUFHRCxHQUpEOztBQU1BUyxFQUFBQSxLQUFLLENBQUN5QixlQUFOLENBQXNCUyxTQUF0QixHQUFrQztBQUVoQ0MsSUFBQUEsUUFBUSxFQUFFTCxjQUZzQjtBQUloQ00sSUFBQUEsSUFBSSxFQUFFLGNBQVNKLENBQVQsRUFBWTtBQUNoQixVQUFJSyxHQUFHLEdBQUcsSUFBSXJDLEtBQUssQ0FBQ3NDLFNBQVYsQ0FBb0IsSUFBcEIsQ0FBVjs7QUFDQSxVQUFJLEtBQUtILFFBQUwsS0FBa0JMLGNBQXRCLEVBQXNDO0FBQ3BDRSxRQUFBQSxDQUFDLEdBQUdELE9BQU8sQ0FBQ0MsQ0FBRCxFQUFJLEtBQUtHLFFBQVQsQ0FBWDtBQUNEOztBQUNERSxNQUFBQSxHQUFHLENBQUNGLFFBQUosR0FBZSxVQUFTNUMsR0FBVCxFQUFjO0FBQzNCLFlBQUlnRCxJQUFJLEdBQUdQLENBQUMsQ0FBQ3pDLEdBQUQsQ0FBWjtBQUNBZ0QsUUFBQUEsSUFBSSxDQUFDSixRQUFMLEdBQWdCRSxHQUFHLENBQUNGLFFBQXBCO0FBQ0EsZUFBT0ksSUFBUDtBQUNELE9BSkQ7O0FBS0EsYUFBT0YsR0FBUDtBQUNELEtBZitCO0FBaUJoQ0csSUFBQUEsT0FBTyxFQUFFLG1CQUFXO0FBQ2xCLFVBQUlDLE9BQU8sR0FBRyxFQUFkOztBQUNBLFVBQUlDLE9BQU8sR0FBRyxTQUFWQSxPQUFVLENBQVNuRCxHQUFULEVBQWM7QUFDMUJBLFFBQUFBLEdBQUcsQ0FBQ21ELE9BQUo7QUFDRCxPQUZEOztBQUlBLFVBQUlDLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsQ0FBU0MsSUFBVCxFQUFlO0FBQ2xDLFlBQUksQ0FBQ0EsSUFBSSxDQUFDRixPQUFWLEVBQW1CLE9BQU9FLElBQVA7O0FBRW5CLFlBQUlDLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVNDLENBQVQsRUFBWTtBQUMzQixpQkFBT0EsQ0FBQyxJQUFJRixJQUFaO0FBQ0QsU0FGRDs7QUFHQSxZQUFJRyxlQUFlLEdBQUdILElBQUksQ0FBQ0YsT0FBM0I7QUFDQUQsUUFBQUEsT0FBTyxDQUFDcEQsSUFBUixDQUFhdUQsSUFBYjs7QUFDQUEsUUFBQUEsSUFBSSxDQUFDRixPQUFMLEdBQWUsWUFBVztBQUN4QkQsVUFBQUEsT0FBTyxHQUFHQSxPQUFPLENBQUNPLE1BQVIsQ0FBZUgsVUFBZixDQUFWO0FBQ0FFLFVBQUFBLGVBQWUsQ0FBQ0UsSUFBaEIsQ0FBcUJMLElBQXJCO0FBQ0QsU0FIRDs7QUFLQSxlQUFPQSxJQUFQO0FBQ0QsT0FkRDs7QUFnQkEsVUFBSU0sUUFBUSxHQUFHLFNBQVhBLFFBQVcsR0FBVztBQUN4QlQsUUFBQUEsT0FBTyxDQUFDVSxPQUFSLENBQWdCVCxPQUFoQjtBQUNELE9BRkQ7O0FBSUEsVUFBSUwsR0FBRyxHQUFHLEtBQUtELElBQUwsQ0FBVU8sY0FBVixDQUFWO0FBQ0EsVUFBSXBDLFFBQVEsR0FBRyxJQUFmOztBQUNBOEIsTUFBQUEsR0FBRyxDQUFDZSxXQUFKLEdBQWtCLFlBQVc7QUFDM0IsWUFBSTdDLFFBQVEsQ0FBQzZDLFdBQWIsRUFBMEIsT0FBTzdDLFFBQVEsQ0FBQzZDLFdBQVQsRUFBUDtBQUMxQixlQUFPN0MsUUFBUDtBQUNELE9BSEQ7O0FBS0E4QixNQUFBQSxHQUFHLENBQUNnQixLQUFKLEdBQVlILFFBQVo7QUFDQSxhQUFPYixHQUFQO0FBQ0QsS0FwRCtCO0FBc0RoQ2lCLElBQUFBLFFBQVEsRUFBRSxrQkFBU0MsT0FBVCxFQUFrQjtBQUMxQixhQUFPLEtBQUtwQixRQUFMLENBQWMsSUFBSW5DLEtBQUssQ0FBQ0UsUUFBTixDQUFlc0QsUUFBbkIsQ0FBNEIsS0FBSzVCLE1BQWpDLEVBQXlDLEtBQUtDLGlCQUE5QyxFQUFpRTBCLE9BQWpFLENBQWQsQ0FBUDtBQUNELEtBeEQrQjtBQTBEaENFLElBQUFBLFVBQVUsRUFBRSxvQkFBU0YsT0FBVCxFQUFrQjtBQUM1QixhQUFPLEtBQUtwQixRQUFMLENBQWMsSUFBSW5DLEtBQUssQ0FBQ0UsUUFBTixDQUFld0QsVUFBbkIsQ0FBOEIsS0FBSzlCLE1BQW5DLEVBQTJDLEtBQUtDLGlCQUFoRCxFQUFtRTBCLE9BQW5FLENBQWQsQ0FBUDtBQUNELEtBNUQrQjtBQThEaENJLElBQUFBLFNBQVMsRUFBRSxtQkFBUzNDLEtBQVQsRUFBZ0I7QUFDekIsYUFBTyxLQUFLbUIsUUFBTCxDQUFjLElBQUluQyxLQUFLLENBQUM0RCxtQkFBVixDQUE4QjVDLEtBQTlCLEVBQXFDLEtBQUtZLE1BQTFDLEVBQWtELEtBQUtDLGlCQUF2RCxDQUFkLENBQVA7QUFDRCxLQWhFK0I7QUFrRWhDZ0MsSUFBQUEsS0FBSyxFQUFFLGVBQVNDLElBQVQsRUFBZTtBQUNwQixVQUFJcEMsS0FBSyxHQUFHLEtBQUtFLE1BQWpCO0FBQ0EsVUFBSUQsZ0JBQWdCLEdBQUcsS0FBS0UsaUJBQTVCO0FBRUEsVUFBSWtDLE9BQU8sR0FBRyxJQUFJQyxjQUFKLEVBQWQ7QUFDQUQsTUFBQUEsT0FBTyxDQUFDRSxJQUFSLENBQWEsS0FBYixFQUFvQkgsSUFBcEIsRUFBMEIsSUFBMUI7QUFDQUMsTUFBQUEsT0FBTyxDQUFDRyxZQUFSLEdBQXVCLGFBQXZCO0FBQ0EsVUFBSUMsV0FBSjs7QUFFQUosTUFBQUEsT0FBTyxDQUFDSyxPQUFSLEdBQWtCLFVBQVNDLEdBQVQsRUFBYztBQUM5Qi9DLFFBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjOEMsR0FBZDtBQUNELE9BRkQ7O0FBSUFOLE1BQUFBLE9BQU8sQ0FBQ08sTUFBUixHQUFpQixVQUFTakQsQ0FBVCxFQUFZO0FBQzNCSyxRQUFBQSxLQUFLLENBQUNBLEtBQU4sQ0FBWTZDLGVBQVosQ0FBNEJSLE9BQU8sQ0FBQ1MsUUFBcEMsRUFBOEMsVUFBVUMsTUFBVixFQUFrQjtBQUM5RE4sVUFBQUEsV0FBVyxHQUFHTSxNQUFkO0FBQ0QsU0FGRDtBQUdELE9BSkQ7O0FBTUFWLE1BQUFBLE9BQU8sQ0FBQ1csSUFBUjtBQUNBLGFBQU8xRSxLQUFLLENBQUNJLGtCQUFOLENBQXlCO0FBQzlCSSxRQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDZixjQUFJbUUsWUFBWSxHQUFHakQsS0FBSyxDQUFDQSxLQUFOLENBQVlrRCxrQkFBWixFQUFuQjtBQUNBRCxVQUFBQSxZQUFZLENBQUNGLE1BQWIsR0FBc0JOLFdBQXRCO0FBQ0FRLFVBQUFBLFlBQVksQ0FBQ0UsT0FBYixDQUFxQmxELGdCQUFnQixDQUFDbUQsWUFBdEM7QUFDQUgsVUFBQUEsWUFBWSxDQUFDSSxLQUFiLENBQW1CckQsS0FBSyxDQUFDQSxLQUFOLENBQVlzRCxXQUEvQjtBQUVBLGlCQUFPO0FBQ0xwRSxZQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDZitELGNBQUFBLFlBQVksQ0FBQy9ELElBQWI7QUFDQStELGNBQUFBLFlBQVksQ0FBQ00sVUFBYixDQUF3QnRELGdCQUFnQixDQUFDbUQsWUFBekM7QUFDRDtBQUpJLFdBQVA7QUFNRDtBQWI2QixPQUF6QixDQUFQO0FBZUQsS0FyRytCO0FBdUdoQ0ksSUFBQUEsZ0JBQWdCLEVBQUUsMEJBQVM5RCxHQUFULEVBQWM7QUFDOUIsYUFBTyxLQUFLZSxRQUFMLENBQWMsSUFBSW5DLEtBQUssQ0FBQ0UsUUFBTixDQUFlaUYsZ0JBQW5CLENBQW9DLEtBQUt2RCxNQUF6QyxFQUFpRCxLQUFLQyxpQkFBdEQsRUFBeUVULEdBQXpFLENBQWQsQ0FBUDtBQUNELEtBekcrQjtBQTJHaENnRSxJQUFBQSxVQUFVLEVBQUUsb0JBQVNDLEtBQVQsRUFBZ0I7QUFDMUIsYUFBTyxLQUFLQyxJQUFMLENBQVVELEtBQUssSUFBRSxDQUFqQixDQUFQO0FBQ0QsS0E3RytCO0FBK0doQ0UsSUFBQUEsV0FBVyxFQUFFLHFCQUFTRixLQUFULEVBQWdCO0FBQzNCLGFBQU8sS0FBS0csVUFBTCxHQUFrQkosVUFBbEIsQ0FBNkJDLEtBQUssSUFBRSxDQUFwQyxDQUFQO0FBQ0QsS0FqSCtCO0FBbUhoQ0ksSUFBQUEsU0FBUyxFQUFFLG1CQUFTSixLQUFULEVBQWdCO0FBQ3pCLGFBQU8sS0FBS0csVUFBTCxHQUFrQkUsVUFBbEIsQ0FBNkJMLEtBQUssSUFBRSxDQUFwQyxDQUFQO0FBQ0QsS0FySCtCO0FBdUhoQ0ssSUFBQUEsVUFBVSxFQUFFLG9CQUFTTCxLQUFULEVBQWdCO0FBQzFCLFVBQUlNLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVNDLElBQVQsRUFBZTtBQUM5QixZQUFJLENBQUNBLElBQUksQ0FBQ0MsS0FBVixFQUFpQixPQUFPRCxJQUFQO0FBRWpCLGVBQU87QUFDTEMsVUFBQUEsS0FBSyxFQUFFLGVBQVNiLFdBQVQsRUFBc0JjLFVBQXRCLEVBQWtDQyxLQUFsQyxFQUF5QztBQUM5QyxtQkFBT0gsSUFBSSxDQUFDQyxLQUFMLENBQVdiLFdBQVgsRUFBd0JjLFVBQXhCLEVBQW9DQyxLQUFwQyxFQUEyQyxVQUFTQyxnQkFBVCxFQUEyQmhFLENBQTNCLEVBQThCO0FBQzlFLHFCQUFPQSxDQUFDLENBQUNnRSxnQkFBZ0IsQ0FBQ1IsVUFBakIsRUFBRCxDQUFSO0FBQ0QsYUFGTSxDQUFQO0FBR0Q7QUFMSSxTQUFQO0FBT0QsT0FWRDs7QUFZQSxVQUFJUyxPQUFPLEdBQUcsS0FBS2IsVUFBTCxDQUFnQixDQUFoQixDQUFkOztBQUNBLFVBQUljLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVNiLEtBQVQsRUFBZ0I7QUFDM0JZLFFBQUFBLE9BQU8sQ0FBQ0MsTUFBUixDQUFlUCxVQUFVLENBQUNOLEtBQUQsQ0FBekI7QUFDRCxPQUZEOztBQUdBYSxNQUFBQSxNQUFNLENBQUNiLEtBQUQsQ0FBTjtBQUVBLFVBQUloRCxHQUFHLEdBQUc0RCxPQUFPLENBQUNULFVBQVIsRUFBVjtBQUNBbkQsTUFBQUEsR0FBRyxDQUFDNkQsTUFBSixHQUFhQSxNQUFiO0FBQ0EsYUFBTzdELEdBQVA7QUFDRCxLQTdJK0I7QUErSWhDbUQsSUFBQUEsVUFBVSxFQUFFLHNCQUFXO0FBQ3JCLGFBQU8sS0FBS1csWUFBTCxDQUFrQjtBQUFDQyxRQUFBQSxHQUFHLEVBQUUsQ0FBTjtBQUFTQyxRQUFBQSxJQUFJLEVBQUU7QUFBZixPQUFsQixDQUFQO0FBQ0QsS0FqSitCO0FBbUpoQ0YsSUFBQUEsWUFBWSxFQUFFLHNCQUFTNUMsT0FBVCxFQUFrQjtBQUM5QixVQUFJK0IsSUFBSSxHQUFHLEtBQUtBLElBQUwsQ0FBVSxHQUFWLENBQVg7QUFDQSxVQUFJZ0IsRUFBRSxHQUFHLEtBQUtoRCxRQUFMLENBQWMsR0FBZCxDQUFUO0FBRUEsVUFBSWlELFVBQVUsR0FBR2pCLElBQUksQ0FBQ1ksTUFBTCxDQUFZaEYsSUFBWixDQUFpQm9FLElBQWpCLENBQWpCO0FBQ0EsVUFBSWtCLFdBQVcsR0FBR2xCLElBQUksQ0FBQzVDLE9BQUwsQ0FBYXhCLElBQWIsQ0FBa0JvRSxJQUFsQixDQUFsQjtBQUNBLFVBQUltQixjQUFjLEdBQUdILEVBQUUsQ0FBQ0osTUFBSCxDQUFVaEYsSUFBVixDQUFlb0YsRUFBZixDQUFyQjtBQUNBLFVBQUlJLGVBQWUsR0FBR0osRUFBRSxDQUFDNUQsT0FBSCxDQUFXeEIsSUFBWCxDQUFnQm9GLEVBQWhCLENBQXRCOztBQUVBLFVBQUk1RCxPQUFPLEdBQUcsU0FBVkEsT0FBVSxHQUFXO0FBQ3ZCOEQsUUFBQUEsV0FBVztBQUNYRSxRQUFBQSxlQUFlO0FBQ2hCLE9BSEQ7O0FBS0EsVUFBSVIsTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBUzNDLE9BQVQsRUFBa0I7QUFDN0IsWUFBSW9ELENBQUosRUFBT0MsQ0FBUDtBQUNBRCxRQUFBQSxDQUFDLEdBQUcsQ0FBQ3BELE9BQU8sQ0FBQzZDLEdBQVIsR0FBYzdDLE9BQU8sQ0FBQzhDLElBQXZCLElBQTZCLENBQWpDO0FBQ0FPLFFBQUFBLENBQUMsR0FBR3JELE9BQU8sQ0FBQzhDLElBQVIsR0FBZU0sQ0FBbkI7QUFFQUosUUFBQUEsVUFBVSxDQUFDSSxDQUFELENBQVY7QUFDQUYsUUFBQUEsY0FBYyxDQUFDRyxDQUFELENBQWQ7QUFDRCxPQVBEOztBQVNBVixNQUFBQSxNQUFNLENBQUMzQyxPQUFELENBQU47QUFDQStCLE1BQUFBLElBQUksQ0FBQ1ksTUFBTCxHQUFjQSxNQUFkO0FBQ0FaLE1BQUFBLElBQUksQ0FBQzVDLE9BQUwsR0FBZUEsT0FBZjtBQUVBLGFBQU80QyxJQUFQO0FBQ0QsS0EvSytCO0FBa0xoQ3VCLElBQUFBLENBQUMsRUFBRSxhQUFXO0FBQ1osYUFBTyxLQUFLMUUsUUFBTCxDQUFjLElBQUluQyxLQUFLLENBQUM2RyxDQUFWLENBQVlDLFNBQVosRUFBdUIsS0FBS2xGLE1BQTVCLEVBQW9DLEtBQUtDLGlCQUF6QyxDQUFkLENBQVA7QUFDRCxLQXBMK0I7QUFzTGhDa0YsSUFBQUEsS0FBSyxFQUFFLGlCQUFXO0FBQ2hCLGFBQU8sS0FBSzVFLFFBQUwsQ0FBYyxJQUFJbkMsS0FBSyxDQUFDRSxRQUFOLENBQWU4RyxLQUFuQixDQUF5QixLQUFLcEYsTUFBOUIsRUFBc0MsS0FBS0MsaUJBQTNDLENBQWQsQ0FBUDtBQUNELEtBeEwrQjtBQTBMaENvRixJQUFBQSxVQUFVLEVBQUUsc0JBQVc7QUFDckIsYUFBTyxLQUFLOUUsUUFBTCxDQUFjLElBQUluQyxLQUFLLENBQUNFLFFBQU4sQ0FBZWdILFNBQW5CLENBQTZCLEtBQUt0RixNQUFsQyxFQUEwQyxLQUFLQyxpQkFBL0MsQ0FBZCxDQUFQO0FBQ0QsS0E1TCtCO0FBOExoQ3NGLElBQUFBLFNBQVMsRUFBRSxxQkFBVztBQUNwQixhQUFPLEtBQUtoRixRQUFMLENBQWMsSUFBSW5DLEtBQUssQ0FBQ0UsUUFBTixDQUFla0gsUUFBbkIsQ0FBNEIsS0FBS3hGLE1BQWpDLEVBQXlDLEtBQUtDLGlCQUE5QyxDQUFkLENBQVA7QUFDRDtBQWhNK0IsR0FBbEM7O0FBbU1BN0IsRUFBQUEsS0FBSyxDQUFDc0MsU0FBTixHQUFrQixVQUFTeUQsS0FBVCxFQUFnQjtBQUNoQy9GLElBQUFBLEtBQUssQ0FBQ3lCLGVBQU4sQ0FBc0JvRSxLQUF0QixDQUE0QixJQUE1QixFQUFrQyxDQUFDRSxLQUFLLENBQUNuRSxNQUFQLEVBQWVtRSxLQUFLLENBQUNsRSxpQkFBckIsQ0FBbEM7QUFDRCxHQUZEOztBQUdBN0IsRUFBQUEsS0FBSyxDQUFDc0MsU0FBTixDQUFnQkosU0FBaEIsR0FBNEJtRixNQUFNLENBQUNDLE1BQVAsQ0FBY3RILEtBQUssQ0FBQ3lCLGVBQU4sQ0FBc0JTLFNBQXBDLENBQTVCOztBQUVBbEMsRUFBQUEsS0FBSyxDQUFDNkcsQ0FBTixHQUFVLFVBQVNVLElBQVQsRUFBZXhCLEtBQWYsRUFBc0JwRSxnQkFBdEIsRUFBd0M7QUFDaEQsUUFBSTZGLEdBQUcsR0FBR1gsQ0FBQyxDQUFDLGtCQUFELEVBQXFCZCxLQUFLLENBQUNyRTtBQUFNO0FBQWpDLEtBQVg7QUFDQSxRQUFJK0YsT0FBTyxHQUFHRCxHQUFHLENBQUNDLE9BQWxCO0FBQ0EsUUFBSUMsUUFBUSxHQUFHRCxPQUFPLENBQUNFLFVBQVIsQ0FBbUIsR0FBbkIsQ0FBZjtBQUVBSCxJQUFBQSxHQUFHLENBQUNJLElBQUosQ0FBU0YsUUFBVDtBQUNBN0csSUFBQUEsVUFBVSxDQUFDLFlBQVc7QUFBRTtBQUN0QjZHLE1BQUFBLFFBQVEsQ0FBQzdDLE9BQVQsQ0FBaUJsRCxnQkFBZ0IsQ0FBQ21ELFlBQWxDO0FBQ0QsS0FGUyxDQUFWO0FBSUEsUUFBSStDLFVBQVUsR0FBRyxFQUFqQjs7QUFDQSxTQUFLLElBQUlySSxDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUMrSCxJQUFJLENBQUM5SCxNQUFyQixFQUE2QkQsQ0FBQyxFQUE5QixFQUFrQztBQUNoQ3FJLE1BQUFBLFVBQVUsQ0FBQ3hJLElBQVgsQ0FBZ0JrSSxJQUFJLENBQUMvSCxDQUFELENBQXBCO0FBQ0Q7O0FBQUE7QUFFRHFJLElBQUFBLFVBQVUsQ0FBQ3hJLElBQVgsQ0FBZ0JtSSxHQUFoQjtBQUNBLFFBQUlNLEtBQUssR0FBR2pCLENBQUMsQ0FBQ2hCLEtBQUYsQ0FBUSxJQUFSLEVBQWNnQyxVQUFkLENBQVosQ0FoQmdELENBZ0JWOztBQUN0QyxRQUFJbkQsSUFBSSxHQUFHbUMsQ0FBQyxDQUFDLGtCQUFELEVBQXFCaUIsS0FBckIsRUFBNEIvQixLQUFLLENBQUNyRTtBQUFNO0FBQXhDLEtBQUQsQ0FBNkRnRCxJQUE3RCxDQUFrRS9DLGdCQUFnQixDQUFDbUQsWUFBbkYsQ0FBWDs7QUFFQSxTQUFLaUQsTUFBTCxHQUFjLFlBQVc7QUFDdkIsYUFBT0wsUUFBUDtBQUNELEtBRkQ7O0FBSUEsUUFBSU0sWUFBWSxHQUFHLEtBQW5COztBQUNBLFNBQUsvQyxVQUFMLEdBQWtCLFlBQVc7QUFDM0IsVUFBSStDLFlBQUosRUFBa0I7QUFDbEJBLE1BQUFBLFlBQVksR0FBRyxJQUFmO0FBRUFOLE1BQUFBLFFBQVEsQ0FBQ3pDLFVBQVQsQ0FBb0J0RCxnQkFBZ0IsQ0FBQ21ELFlBQXJDO0FBQ0FKLE1BQUFBLElBQUksQ0FBQ3VELFNBQUw7QUFDQVQsTUFBQUEsR0FBRyxDQUFDVSxNQUFKO0FBQ0F4RCxNQUFBQSxJQUFJLENBQUN3RCxNQUFMO0FBQ0FKLE1BQUFBLEtBQUssQ0FBQ0ssUUFBTjtBQUNELEtBVEQ7O0FBV0EsU0FBS3pGLE9BQUwsR0FBZSxLQUFLdUMsVUFBcEI7QUFFQSxTQUFLSCxZQUFMLEdBQW9CNEMsUUFBcEI7O0FBQ0EsU0FBS1UsSUFBTCxHQUFZLFlBQVc7QUFDckIsYUFBT3pHLGdCQUFQO0FBQ0QsS0FGRDs7QUFJQTNCLElBQUFBLEtBQUssQ0FBQ3lCLGVBQU4sQ0FBc0JQLElBQXRCLENBQTJCLElBQTNCLEVBQWlDNkUsS0FBakMsRUFBd0MsSUFBeEM7QUFDRCxHQTNDRDs7QUE0Q0EvRixFQUFBQSxLQUFLLENBQUM2RyxDQUFOLENBQVEzRSxTQUFSLEdBQW9CbUYsTUFBTSxDQUFDQyxNQUFQLENBQWN0SCxLQUFLLENBQUN5QixlQUFOLENBQXNCUyxTQUFwQyxDQUFwQjs7QUFFQWxDLEVBQUFBLEtBQUssQ0FBQ0csT0FBTixDQUFjTixRQUFkLEdBQXlCLFVBQVN3SSxVQUFULEVBQXFCakgsR0FBckIsRUFBMEI7QUFDakRwQixJQUFBQSxLQUFLLENBQUN5QixlQUFOLENBQXNCUyxTQUF0QixDQUFnQ21HLFVBQWhDLElBQThDLFVBQVNoRCxLQUFULEVBQWdCO0FBQzVELGFBQU8sS0FBS2xELFFBQUwsQ0FBY2YsR0FBRyxDQUFDLEtBQUtRLE1BQU4sRUFBYyxLQUFLQyxpQkFBbkIsRUFBc0N3RCxLQUF0QyxDQUFqQixDQUFQO0FBQ0QsS0FGRDtBQUdELEdBSkQ7O0FBTUEsTUFBSWlELFlBQVksR0FBRyxLQUFLdkksTUFBTSxDQUFDd0ksWUFBUCxJQUF1QnhJLE1BQU0sQ0FBQ3lJLGtCQUFuQyxHQUFuQjs7QUFFQXhJLEVBQUFBLEtBQUssQ0FBQ3lJLE9BQU4sR0FBZ0IsVUFBU2xGLE9BQVQsRUFBa0I7QUFDaEMsUUFBSTdCLEtBQUssR0FBRzRHLFlBQVo7QUFDQSxRQUFJdkMsS0FBSyxHQUFHLElBQVo7QUFDQSxRQUFJMkIsUUFBUSxHQUFHaEcsS0FBSyxDQUFDaUcsVUFBTixFQUFmO0FBRUFwRSxJQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjtBQUNBbUUsSUFBQUEsUUFBUSxDQUFDcEMsSUFBVCxDQUFjRCxLQUFkLEdBQXNCLEdBQXRCO0FBQ0EsUUFBSSxDQUFDOUIsT0FBTyxDQUFDbUYsUUFBYixFQUF1QmhCLFFBQVEsQ0FBQzdDLE9BQVQsQ0FBaUJuRCxLQUFLLENBQUNpSCxXQUF2QjtBQUV2QjVDLElBQUFBLEtBQUssQ0FBQ3JFLEtBQU4sR0FBY0EsS0FBZDtBQUNBcUUsSUFBQUEsS0FBSyxDQUFDakIsWUFBTixHQUFxQjRDLFFBQXJCOztBQUVBLFNBQUtrQixNQUFMLEdBQWMsWUFBVztBQUN2QixVQUFJTixZQUFZLENBQUNPLEtBQWIsS0FBdUIsU0FBM0IsRUFBc0M7QUFDcENQLFFBQUFBLFlBQVksQ0FBQ00sTUFBYjtBQUNEO0FBQ0YsS0FKRDs7QUFNQSxTQUFLRSxNQUFMLEdBQWMsVUFBU3ZGLE9BQVQsRUFBa0J3RixRQUFsQixFQUE0QjtBQUN4QyxVQUFJQyxRQUFRLEdBQUcsSUFBSUMsZ0JBQUosQ0FBcUJ2QixRQUFyQixFQUErQjtBQUM1Q3dCLFFBQUFBLFNBQVMsRUFBRSwwQkFEaUM7QUFFNUNDLFFBQUFBLFFBQVEsRUFBRTVGLE9BQU8sQ0FBQzRGLFFBRjBCO0FBRzVDQyxRQUFBQSxXQUFXLEVBQUU3RixPQUFPLENBQUM2RjtBQUh1QixPQUEvQixDQUFmOztBQUtBSixNQUFBQSxRQUFRLENBQUNLLFVBQVQsR0FBc0IsVUFBU0wsUUFBVCxFQUFtQk0sSUFBbkIsRUFBeUI7QUFDN0NQLFFBQUFBLFFBQVEsQ0FBQ08sSUFBRCxDQUFSO0FBQ0QsT0FGRDs7QUFJQU4sTUFBQUEsUUFBUSxDQUFDTyxjQUFULEdBVndDLENBV3hDOztBQUNBLGFBQU87QUFDTDNJLFFBQUFBLElBQUksRUFBRSxnQkFBVztBQUNmb0ksVUFBQUEsUUFBUSxDQUFDUSxlQUFUO0FBQ0Q7QUFISSxPQUFQO0FBS0QsS0FqQkQ7O0FBbUJBLFNBQUs5SCxLQUFMLEdBQWFBLEtBQWI7QUFFQTFCLElBQUFBLEtBQUssQ0FBQ3lCLGVBQU4sQ0FBc0JQLElBQXRCLENBQTJCLElBQTNCLEVBQWlDNkUsS0FBakMsRUFBd0MsSUFBeEM7QUFDRCxHQXhDRDs7QUEwQ0EvRixFQUFBQSxLQUFLLENBQUN5SSxPQUFOLENBQWN2RyxTQUFkLEdBQTBCLElBQUlsQyxLQUFLLENBQUN5QixlQUFWLEVBQTFCOztBQUVBekIsRUFBQUEsS0FBSyxDQUFDRSxRQUFOLENBQWVpRixnQkFBZixHQUFrQyxVQUFTekQsS0FBVCxFQUFnQitILFlBQWhCLEVBQThCckksR0FBOUIsRUFBbUM7QUFDbkUsU0FBS1osSUFBTCxHQUFZLFVBQVNRLEtBQVQsRUFBZ0I7QUFDMUIsVUFBSVcsZ0JBQUo7QUFDQSxVQUFJdUQsZ0JBQWdCLEdBQUcsSUFBSWxGLEtBQUssQ0FBQ0csT0FBTixDQUFjdUosT0FBbEIsQ0FBMEJoSSxLQUExQixFQUFpQytILFlBQWpDLEVBQStDLFVBQVNFLEtBQVQsRUFBZ0JDLENBQWhCLEVBQW1CO0FBQ3ZGLGVBQU94SSxHQUFHLENBQUN3SSxDQUFELENBQVY7QUFDRCxPQUZzQixDQUF2QjtBQUlBLGFBQU87QUFDTGhKLFFBQUFBLElBQUksRUFBRSxnQkFBVztBQUNmc0UsVUFBQUEsZ0JBQWdCLENBQUNELFVBQWpCLENBQTRCd0UsWUFBWSxDQUFDM0UsWUFBekM7QUFDRDtBQUhJLE9BQVA7QUFLRCxLQVhEOztBQWFBOUUsSUFBQUEsS0FBSyxDQUFDSSxrQkFBTixDQUF5QixJQUF6QjtBQUNELEdBZkQ7O0FBaUJBSixFQUFBQSxLQUFLLENBQUNFLFFBQU4sQ0FBZWdILFNBQWYsR0FBMkIsVUFBU3hGLEtBQVQsRUFBZ0IrSCxZQUFoQixFQUE4QjtBQUN2RCxTQUFLakosSUFBTCxHQUFZLFVBQVNRLEtBQVQsRUFBZ0I7QUFDMUIsVUFBSVcsZ0JBQUo7QUFDQSxVQUFJa0ksRUFBSixFQUFRQyxFQUFSLEVBQVlDLEVBQVosRUFBZ0JDLEVBQWhCLEVBQW9CQyxFQUFwQixFQUF3QkMsRUFBeEIsRUFBNEJDLEVBQTVCO0FBQ0FOLE1BQUFBLEVBQUUsR0FBR0MsRUFBRSxHQUFHQyxFQUFFLEdBQUdDLEVBQUUsR0FBR0MsRUFBRSxHQUFHQyxFQUFFLEdBQUdDLEVBQUUsR0FBRyxHQUFuQztBQUVBLFVBQUlDLGNBQWMsR0FBRyxJQUFJcEssS0FBSyxDQUFDRyxPQUFOLENBQWN1SixPQUFsQixDQUEwQmhJLEtBQTFCLEVBQWlDK0gsWUFBakMsRUFBK0MsWUFBVztBQUM3RSxZQUFJWSxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsTUFBTCxLQUFnQixDQUFoQixHQUFvQixDQUFoQztBQUNBVixRQUFBQSxFQUFFLEdBQUcsVUFBVUEsRUFBVixHQUFlUSxLQUFLLEdBQUcsU0FBNUI7QUFDQVAsUUFBQUEsRUFBRSxHQUFHLFVBQVVBLEVBQVYsR0FBZU8sS0FBSyxHQUFHLFNBQTVCO0FBQ0FOLFFBQUFBLEVBQUUsR0FBRyxVQUFVQSxFQUFWLEdBQWVNLEtBQUssR0FBRyxTQUE1QjtBQUNBTCxRQUFBQSxFQUFFLEdBQUcsVUFBVUEsRUFBVixHQUFlSyxLQUFLLEdBQUcsU0FBNUI7QUFDQUosUUFBQUEsRUFBRSxHQUFHLFVBQVVBLEVBQVYsR0FBZUksS0FBSyxHQUFHLFNBQTVCO0FBQ0FILFFBQUFBLEVBQUUsR0FBRyxDQUFDLE1BQUQsR0FBVUEsRUFBVixHQUFlRyxLQUFLLEdBQUcsU0FBNUI7QUFDQSxZQUFJaEksR0FBRyxHQUFHd0gsRUFBRSxHQUFHQyxFQUFMLEdBQVVDLEVBQVYsR0FBZUMsRUFBZixHQUFvQkMsRUFBcEIsR0FBeUJDLEVBQXpCLEdBQThCQyxFQUE5QixHQUFtQ0UsS0FBSyxHQUFHLE1BQXJEO0FBQ0FGLFFBQUFBLEVBQUUsR0FBR0UsS0FBSyxHQUFHLFFBQWI7QUFDQSxlQUFPaEksR0FBRyxHQUFHLElBQWI7QUFDRCxPQVhvQixDQUFyQjtBQWFBLGFBQU87QUFDTHpCLFFBQUFBLElBQUksRUFBRSxnQkFBVztBQUNmd0osVUFBQUEsY0FBYyxDQUFDbkYsVUFBZixDQUEwQndFLFlBQVksQ0FBQzNFLFlBQXZDO0FBQ0Q7QUFISSxPQUFQO0FBS0QsS0F2QkQ7O0FBeUJBLFNBQUswRixRQUFMLEdBQWdCLFlBQVcsQ0FDMUIsQ0FERDs7QUFHQXhLLElBQUFBLEtBQUssQ0FBQ0ksa0JBQU4sQ0FBeUIsSUFBekI7QUFDRCxHQTlCRDs7QUFnQ0FKLEVBQUFBLEtBQUssQ0FBQ0UsUUFBTixDQUFla0gsUUFBZixHQUEwQixVQUFTMUYsS0FBVCxFQUFnQitILFlBQWhCLEVBQThCO0FBQ3RELFNBQUtqSixJQUFMLEdBQVksVUFBU1EsS0FBVCxFQUFnQjtBQUMxQixVQUFJVyxnQkFBSjtBQUNBLFVBQUk4SSxPQUFPLEdBQUcsR0FBZDtBQUVBLFVBQUlMLGNBQWMsR0FBRyxJQUFJcEssS0FBSyxDQUFDRyxPQUFOLENBQWN1SixPQUFsQixDQUEwQmhJLEtBQTFCLEVBQWlDK0gsWUFBakMsRUFBK0MsWUFBVztBQUM3RSxZQUFJWSxLQUFLLEdBQUdDLElBQUksQ0FBQ0MsTUFBTCxLQUFnQixDQUFoQixHQUFvQixDQUFoQztBQUNBLFlBQUlsSSxHQUFHLEdBQUcsQ0FBQ29JLE9BQU8sR0FBSSxPQUFPSixLQUFuQixJQUE2QixJQUF2QztBQUNBSSxRQUFBQSxPQUFPLEdBQUdwSSxHQUFWO0FBQ0EsZUFBT0EsR0FBRyxHQUFHLEdBQWI7QUFDRCxPQUxvQixDQUFyQjtBQU9BLGFBQU87QUFDTHpCLFFBQUFBLElBQUksRUFBRSxnQkFBVztBQUNmd0osVUFBQUEsY0FBYyxDQUFDbkYsVUFBZixDQUEwQndFLFlBQVksQ0FBQzNFLFlBQXZDO0FBQ0Q7QUFISSxPQUFQO0FBS0QsS0FoQkQ7O0FBa0JBLFNBQUswRixRQUFMLEdBQWdCLFlBQVcsQ0FDMUIsQ0FERDs7QUFHQXhLLElBQUFBLEtBQUssQ0FBQ0ksa0JBQU4sQ0FBeUIsSUFBekI7QUFDRCxHQXZCRDs7QUF5QkFKLEVBQUFBLEtBQUssQ0FBQ0UsUUFBTixDQUFlOEcsS0FBZixHQUF1QixVQUFTdEYsS0FBVCxFQUFnQitILFlBQWhCLEVBQThCO0FBQ25ELFFBQUluQixZQUFZLEdBQUc1RyxLQUFLLENBQUNBLEtBQXpCO0FBRUEsUUFBSWdKLFVBQVUsR0FBRyxJQUFJcEMsWUFBWSxDQUFDcUMsVUFBbEM7QUFBQSxRQUNJQyxXQUFXLEdBQUd0QyxZQUFZLENBQUN1QyxZQUFiLENBQTBCLENBQTFCLEVBQTZCSCxVQUE3QixFQUF5Q3BDLFlBQVksQ0FBQ3FDLFVBQXRELENBRGxCO0FBQUEsUUFFSTVDLE1BQU0sR0FBRzZDLFdBQVcsQ0FBQ0UsY0FBWixDQUEyQixDQUEzQixDQUZiOztBQUdBLFNBQUssSUFBSXRMLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdrTCxVQUFwQixFQUFnQ2xMLENBQUMsRUFBakMsRUFBcUM7QUFDakN1SSxNQUFBQSxNQUFNLENBQUN2SSxDQUFELENBQU4sR0FBWThLLElBQUksQ0FBQ0MsTUFBTCxLQUFnQixDQUFoQixHQUFvQixDQUFoQztBQUNIOztBQUVELFNBQUsvSixJQUFMLEdBQVksVUFBU1EsS0FBVCxFQUFnQjtBQUMxQixVQUFJK0osVUFBVSxHQUFHekMsWUFBWSxDQUFDMUQsa0JBQWIsRUFBakI7QUFDQW1HLE1BQUFBLFVBQVUsQ0FBQ3RHLE1BQVgsR0FBb0JtRyxXQUFwQjtBQUNBRyxNQUFBQSxVQUFVLENBQUNDLElBQVgsR0FBa0IsSUFBbEI7QUFDQUQsTUFBQUEsVUFBVSxDQUFDaEcsS0FBWCxDQUFpQixDQUFqQjtBQUVBZ0csTUFBQUEsVUFBVSxDQUFDbEcsT0FBWCxDQUFtQjRFLFlBQVksQ0FBQzNFLFlBQWhDO0FBRUEsYUFBTztBQUNMbEUsUUFBQUEsSUFBSSxFQUFFLGdCQUFXO0FBQ2ZtSyxVQUFBQSxVQUFVLENBQUNuSyxJQUFYO0FBQ0FtSyxVQUFBQSxVQUFVLENBQUM5RixVQUFYLENBQXNCd0UsWUFBWSxDQUFDM0UsWUFBbkM7QUFDRDtBQUpJLE9BQVA7QUFNRCxLQWREOztBQWdCQSxTQUFLMEYsUUFBTCxHQUFnQixZQUFXLENBQzFCLENBREQ7O0FBR0F4SyxJQUFBQSxLQUFLLENBQUNJLGtCQUFOLENBQXlCLElBQXpCO0FBQ0QsR0E5QkQ7O0FBZ0NBSixFQUFBQSxLQUFLLENBQUNFLFFBQU4sQ0FBZStLLElBQWYsR0FBc0IsVUFBU25ILElBQVQsRUFBZW9ILE1BQWYsRUFBdUI7QUFFM0MsUUFBSW5GLEtBQUssR0FBRyxJQUFJL0YsS0FBSyxDQUFDeUksT0FBVixDQUFrQjtBQUFDQyxNQUFBQSxRQUFRLEVBQUU7QUFBWCxLQUFsQixDQUFaO0FBQ0EsUUFBSTdFLEtBQUssR0FBR2tDLEtBQUssQ0FBQ2xDLEtBQU4sQ0FBWUMsSUFBWixDQUFaO0FBQ0EsUUFBSXFILFdBQVcsR0FBR2IsSUFBSSxDQUFDYyxLQUFMLENBQVdGLE1BQU0sR0FBR25GLEtBQUssQ0FBQ3JFLEtBQU4sQ0FBWWlKLFVBQXJCLEdBQWtDLElBQTdDLENBQWxCO0FBQ0EsUUFBSVUsU0FBUyxHQUFHLEVBQWhCLENBTDJDLENBTzNDOztBQUNBeEssSUFBQUEsVUFBVSxDQUFDLFlBQVc7QUFDcEIsVUFBSXlLLFNBQVMsR0FBR3ZGLEtBQUssQ0FBQytDLE1BQU4sRUFBaEI7QUFDQWpGLE1BQUFBLEtBQUssQ0FBQ3JELElBQU47QUFFQUssTUFBQUEsVUFBVSxDQUFDLFlBQVU7QUFDbkJ5SyxRQUFBQSxTQUFTLENBQUMxSyxJQUFWO0FBQ0EwSyxRQUFBQSxTQUFTLENBQUNDLFNBQVYsQ0FBb0IsVUFBU0MsSUFBVCxFQUFlO0FBQ2pDLGNBQUlDLGlCQUFpQixHQUFHRCxJQUFJLENBQUMsQ0FBRCxDQUE1Qjs7QUFDQSxlQUFLLElBQUloTSxDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUMyTCxXQUFoQixFQUE2QjNMLENBQUMsRUFBOUIsRUFBa0M7QUFDaEM2TCxZQUFBQSxTQUFTLENBQUNoTSxJQUFWLENBQWVvTSxpQkFBaUIsQ0FBQ2pNLENBQUQsQ0FBaEM7QUFDRDtBQUNGLFNBTEQ7QUFNRCxPQVJTLEVBUVAwTCxNQUFNLEdBQUMsR0FSQSxDQUFWO0FBU0QsS0FiUyxFQWFQLEdBYk8sQ0FBVjs7QUFlQSxTQUFLbEosQ0FBTCxHQUFTLFVBQVM0SCxDQUFULEVBQVk7QUFDbkIsVUFBSUEsQ0FBQyxHQUFDLENBQU4sRUFBUSxPQUFPLENBQVA7QUFDUixVQUFJOEIsTUFBTSxHQUFHTCxTQUFTLENBQUNmLElBQUksQ0FBQ2MsS0FBTCxDQUFXeEIsQ0FBQyxHQUFDdUIsV0FBYixDQUFELENBQXRCO0FBQ0EsYUFBT08sTUFBUDtBQUNELEtBSkQ7QUFLRCxHQTVCRDs7QUE4QkExTCxFQUFBQSxLQUFLLENBQUMyTCx1QkFBTixHQUFnQyxVQUFTNUYsS0FBVCxFQUFnQnBFLGdCQUFoQixFQUFrQztBQUM5RCxTQUFLbUQsWUFBTCxHQUFvQm5ELGdCQUFwQjtBQUNBM0IsSUFBQUEsS0FBSyxDQUFDeUIsZUFBTixDQUFzQlAsSUFBdEIsQ0FBMkIsSUFBM0IsRUFBaUM2RSxLQUFqQyxFQUF3QyxJQUF4QztBQUNILEdBSEQ7O0FBSUEvRixFQUFBQSxLQUFLLENBQUMyTCx1QkFBTixDQUE4QnpKLFNBQTlCLEdBQTBDbUYsTUFBTSxDQUFDQyxNQUFQLENBQWN0SCxLQUFLLENBQUN5QixlQUFOLENBQXNCUyxTQUFwQyxDQUExQzs7QUFFQWxDLEVBQUFBLEtBQUssQ0FBQzRMLFNBQU4sR0FBa0IsVUFBUzVKLENBQVQsRUFBWTtBQUM1QixRQUFJNkosRUFBRSxHQUFHLFNBQUxBLEVBQUssQ0FBUzdGLGdCQUFULEVBQTJCaEUsQ0FBM0IsRUFBOEI7QUFDckMsYUFBT0EsQ0FBQyxDQUFDZ0UsZ0JBQUQsQ0FBUjtBQUNELEtBRkQ7O0FBSUEsV0FBTztBQUNMSCxNQUFBQSxLQUFLLEVBQUUsZUFBU2IsV0FBVCxFQUFzQmMsVUFBdEIsRUFBa0NDLEtBQWxDLEVBQXlDK0YsV0FBekMsRUFBc0Q7QUFDM0QsWUFBSTlGLGdCQUFKLEVBQXNCNEYsU0FBdEI7QUFDQTVGLFFBQUFBLGdCQUFnQixHQUFJLElBQUloRyxLQUFLLENBQUMyTCx1QkFBVixDQUFrQzVGLEtBQWxDLEVBQXlDRCxVQUF6QyxDQUFELENBQXVEdEQsT0FBdkQsRUFBbkI7QUFDQXdELFFBQUFBLGdCQUFnQixDQUFDK0Ysb0JBQWpCLEdBQXdDakcsVUFBeEM7QUFDQThGLFFBQUFBLFNBQVMsR0FBRyxDQUFDRSxXQUFXLElBQUVELEVBQWQsRUFBa0I3RixnQkFBbEIsRUFBb0NoRSxDQUFwQyxDQUFaO0FBRUEsZUFBTztBQUNMVSxVQUFBQSxPQUFPLEVBQUUsbUJBQVc7QUFDbEJzRCxZQUFBQSxnQkFBZ0IsQ0FBQzNDLEtBQWpCO0FBQ0Q7QUFISSxTQUFQO0FBS0Q7QUFaSSxLQUFQO0FBY0QsR0FuQkQ7O0FBcUJBLEdBQUMsWUFBVztBQUVaLFFBQUkySSxHQUFHLEdBQUcsR0FBVjtBQUNBLFFBQUlDLG1CQUFtQixHQUFHLElBQUlDLFlBQUosQ0FBaUJGLEdBQWpCLENBQTFCOztBQUNBLFNBQUssSUFBSXhNLENBQUMsR0FBQyxDQUFYLEVBQWNBLENBQUMsR0FBQ3dNLEdBQWhCLEVBQXFCeE0sQ0FBQyxFQUF0QixFQUEwQjtBQUN4QnlNLE1BQUFBLG1CQUFtQixDQUFDek0sQ0FBRCxDQUFuQixHQUF1QixDQUF2QjtBQUNEOztBQUFBO0FBQ0QsUUFBSTJNLE9BQUo7O0FBRUFuTSxJQUFBQSxLQUFLLENBQUNFLFFBQU4sQ0FBZXNELFFBQWYsR0FBMEIsVUFBU3VDLEtBQVQsRUFBZ0I0QyxXQUFoQixFQUE2QnBGLE9BQTdCLEVBQXNDO0FBRTlELFVBQUk2SSxZQUFKO0FBQ0EsVUFBSXpILFlBQUo7QUFDQSxVQUFJRixNQUFKO0FBQ0EsVUFBSTZELFlBQVksR0FBR3ZDLEtBQUssQ0FBQ25FLE1BQU4sQ0FBYUYsS0FBaEM7O0FBRUEsVUFBSTRHLFlBQVksQ0FBQytELG9CQUFqQixFQUF1QztBQUNyQ0QsUUFBQUEsWUFBWSxHQUFHOUQsWUFBWSxDQUFDK0Qsb0JBQWIsRUFBZjtBQUNBLGFBQUt2SCxZQUFMLEdBQW9Cc0gsWUFBcEI7QUFFQUEsUUFBQUEsWUFBWSxDQUFDRSxNQUFiLENBQW9CakgsS0FBcEIsR0FBNEI5QixPQUFPLENBQUMrSSxNQUFSLElBQWtCLEdBQTlDO0FBQ0FGLFFBQUFBLFlBQVksQ0FBQ3ZILE9BQWIsQ0FBcUI4RCxXQUFXLENBQUM3RCxZQUFqQztBQUNBc0gsUUFBQUEsWUFBWSxDQUFDckgsS0FBYjtBQUNELE9BUEQsTUFPTztBQUNMcUgsUUFBQUEsWUFBWSxHQUFHOUQsWUFBWSxDQUFDWCxVQUFiLEVBQWY7QUFDQWhELFFBQUFBLFlBQVksR0FBRzJELFlBQVksQ0FBQzFELGtCQUFiLEVBQWY7QUFFQXdILFFBQUFBLFlBQVksQ0FBQzlHLElBQWIsQ0FBa0JELEtBQWxCLEdBQTBCOUIsT0FBTyxDQUFDK0ksTUFBUixJQUFrQixHQUE1Qzs7QUFFQSxZQUFJLENBQUNILE9BQUwsRUFBYztBQUNaQSxVQUFBQSxPQUFPLEdBQUc3RCxZQUFZLENBQUN1QyxZQUFiLENBQTBCLENBQTFCLEVBQTZCb0IsbUJBQW1CLENBQUN4TSxNQUFqRCxFQUF5RHNHLEtBQUssQ0FBQ25FLE1BQU4sQ0FBYUYsS0FBYixDQUFtQmlKLFVBQTVFLENBQVY7QUFDQXdCLFVBQUFBLE9BQU8sQ0FBQ3JCLGNBQVIsQ0FBdUIsQ0FBdkIsRUFBMEJ5QixHQUExQixDQUE4Qk4sbUJBQTlCO0FBQ0Q7O0FBRUR0SCxRQUFBQSxZQUFZLENBQUNxRyxJQUFiLEdBQW9CLElBQXBCO0FBQ0FyRyxRQUFBQSxZQUFZLENBQUNGLE1BQWIsR0FBc0IwSCxPQUF0QjtBQUNBeEgsUUFBQUEsWUFBWSxDQUFDRSxPQUFiLENBQXFCdUgsWUFBckI7QUFFQUEsUUFBQUEsWUFBWSxDQUFDdkgsT0FBYixDQUFxQjhELFdBQVcsQ0FBQzdELFlBQWpDO0FBRUFILFFBQUFBLFlBQVksQ0FBQ0ksS0FBYjtBQUNEOztBQUVELFVBQUl5SCxJQUFJLEdBQUcsU0FBUEEsSUFBTyxHQUFXLENBQUUsQ0FBeEI7O0FBRUEsV0FBS0MsUUFBTCxHQUFnQixVQUFTQyxTQUFULEVBQW9CckgsS0FBcEIsRUFBMkI7QUFDekMsWUFBSXFILFNBQVMsS0FBSyxRQUFkLElBQTBCLENBQUNwRSxZQUFZLENBQUMrRCxvQkFBNUMsRUFBa0VLLFNBQVMsR0FBRyxNQUFaO0FBQ2xFckgsUUFBQUEsS0FBSyxDQUFDUSxLQUFOLENBQVlFLEtBQUssQ0FBQ3JFLEtBQU4sQ0FBWXNELFdBQXhCLEVBQXFDb0gsWUFBWSxDQUFDTSxTQUFELENBQWpEO0FBQ0QsT0FIRDs7QUFLQSxXQUFLQyxjQUFMLEdBQXNCLFVBQVNELFNBQVQsRUFBb0JFLE1BQXBCLEVBQTRCQyxZQUE1QixFQUEwQztBQUM5RCxZQUFJSCxTQUFTLEtBQUssUUFBZCxJQUEwQixDQUFDcEUsWUFBWSxDQUFDK0Qsb0JBQTVDLEVBQWtFSyxTQUFTLEdBQUcsTUFBWjtBQUNsRSxZQUFJNUcsVUFBVSxHQUFHc0csWUFBWSxDQUFDTSxTQUFELENBQTdCO0FBQ0E1RyxRQUFBQSxVQUFVLENBQUNnSCxxQkFBWCxDQUFpQyxHQUFqQztBQUNBaEgsUUFBQUEsVUFBVSxDQUFDaUgsZUFBWCxDQUEyQkgsTUFBM0IsRUFBbUM3RyxLQUFLLENBQUNyRSxLQUFOLENBQVlzRCxXQUEvQyxFQUE0RDZILFlBQTVEO0FBQ0QsT0FMRDs7QUFPQSxXQUFLbkssT0FBTCxHQUFlLFlBQVc7QUFDeEIsWUFBSTRGLFlBQVksQ0FBQytELG9CQUFqQixFQUF1QztBQUNyQ0QsVUFBQUEsWUFBWSxDQUFDeEwsSUFBYjtBQUNELFNBRkQsTUFFTztBQUNMK0QsVUFBQUEsWUFBWSxDQUFDL0QsSUFBYjtBQUNBK0QsVUFBQUEsWUFBWSxDQUFDTSxVQUFiLENBQXdCbUgsWUFBeEI7QUFDRDs7QUFDREEsUUFBQUEsWUFBWSxDQUFDbkgsVUFBYixDQUF3QjBELFdBQVcsQ0FBQzdELFlBQXBDOztBQUVBLGFBQUtwQyxPQUFMLEdBQWUsWUFBVyxDQUFFLENBQTVCO0FBQ0QsT0FWRDs7QUFZQSxXQUFLd0QsTUFBTCxHQUFjLFVBQVNiLEtBQVQsRUFBZ0I7QUFDNUIsWUFBSWlELFlBQVksQ0FBQytELG9CQUFqQixFQUF1QztBQUNyQ0QsVUFBQUEsWUFBWSxDQUFDRSxNQUFiLENBQW9CakgsS0FBcEIsR0FBNEJBLEtBQTVCO0FBQ0QsU0FGRCxNQUVPO0FBQ0wrRyxVQUFBQSxZQUFZLENBQUM5RyxJQUFiLENBQWtCRCxLQUFsQixHQUEwQkEsS0FBMUI7QUFDRDtBQUNGLE9BTkQ7O0FBUUEsV0FBSzJILElBQUwsR0FBWSxVQUFTQyxPQUFULEVBQWtCO0FBQzVCLFlBQUl2TSxRQUFRLEdBQUcsRUFBZjtBQUVBQSxRQUFBQSxRQUFRLENBQUN3TSxPQUFULEdBQW1CVixJQUFuQjtBQUNBOUwsUUFBQUEsUUFBUSxDQUFDeU0sS0FBVCxHQUFpQlgsSUFBakI7O0FBQ0E5TCxRQUFBQSxRQUFRLENBQUNGLElBQVQsR0FBZ0IsWUFBVztBQUN6QixpQkFBTztBQUFDSSxZQUFBQSxJQUFJLEVBQUU0TDtBQUFQLFdBQVA7QUFDRCxTQUZEOztBQUlBeE0sUUFBQUEsS0FBSyxDQUFDSSxrQkFBTixDQUF5Qk0sUUFBekI7QUFDQSxlQUFPQSxRQUFQO0FBQ0QsT0FYRDtBQVlELEtBaEZEO0FBa0ZDLEdBM0ZEOztBQTZGQVYsRUFBQUEsS0FBSyxDQUFDRSxRQUFOLENBQWV3RCxVQUFmLEdBQTRCLFVBQVNxQyxLQUFULEVBQWdCNEMsV0FBaEIsRUFBNkJwRixPQUE3QixFQUFzQztBQUNoRUEsSUFBQUEsT0FBTyxHQUFHQSxPQUFPLElBQUksRUFBckI7QUFDQSxRQUFJNkosT0FBTyxHQUFHN0osT0FBTyxDQUFDNkosT0FBdEI7QUFDQSxRQUFJQyxNQUFNLEdBQUc5SixPQUFPLENBQUM4SixNQUFyQjtBQUNBLFFBQUlDLFNBQVMsR0FBRy9KLE9BQU8sQ0FBQytKLFNBQXhCO0FBQ0EsUUFBSUMsYUFBYSxHQUFHaEssT0FBTyxDQUFDZ0ssYUFBNUI7QUFDQSxRQUFJNUwsZ0JBQUo7QUFFQUEsSUFBQUEsZ0JBQWdCLEdBQUdnSCxXQUFXLENBQUM3RCxZQUEvQjtBQUVBLFFBQUksQ0FBQzBJLFFBQVEsQ0FBQ0QsYUFBRCxDQUFULElBQTRCRSxLQUFLLENBQUNGLGFBQUQsQ0FBakMsSUFBb0RBLGFBQWEsSUFBSSxDQUF6RSxFQUE0RUEsYUFBYSxHQUFHLElBQWhCO0FBRTVFLFFBQUlHLEdBQUo7QUFFQUEsSUFBQUEsR0FBRyxHQUFHM0gsS0FBSyxDQUFDckUsS0FBTixDQUFZaU0sZ0JBQVosRUFBTjtBQUNBRCxJQUFBQSxHQUFHLENBQUM3SSxPQUFKLENBQVlsRCxnQkFBWjtBQUVBLFFBQUlpTSxpQkFBSjs7QUFFQSxRQUFJTixTQUFKLEVBQWU7QUFDYkksTUFBQUEsR0FBRyxDQUFDSixTQUFKLENBQWNqSSxLQUFkLEdBQXNCaUksU0FBdEI7QUFDRDs7QUFFRCxRQUFJRCxNQUFKLEVBQVk7QUFDVixVQUFJQSxNQUFNLENBQUN4SCxLQUFYLEVBQWtCO0FBQ2hCK0gsUUFBQUEsaUJBQWlCLEdBQUdQLE1BQU0sQ0FBQ3hILEtBQVAsQ0FBYUUsS0FBSyxDQUFDckUsS0FBTixDQUFZc0QsV0FBekIsRUFBc0MwSSxHQUFHLENBQUNMLE1BQTFDLEVBQWtEdEgsS0FBbEQsQ0FBcEI7QUFDRCxPQUZELE1BRU87QUFDTDJILFFBQUFBLEdBQUcsQ0FBQ0wsTUFBSixDQUFXaEksS0FBWCxHQUFtQmdJLE1BQW5CO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJOUosT0FBTyxDQUFDc0ssSUFBUixLQUFpQixRQUFyQixFQUErQjtBQUM3QixVQUFJQyxJQUFJLEdBQUcsSUFBSTVCLFlBQUosQ0FBaUIzSSxPQUFPLENBQUN3SyxLQUFSLENBQWNDLEdBQWQsSUFBcUIsRUFBdEMsQ0FBWDtBQUNBLFVBQUlDLElBQUksR0FBRyxJQUFJL0IsWUFBSixDQUFpQjNJLE9BQU8sQ0FBQ3dLLEtBQVIsQ0FBY0csR0FBZCxJQUFxQixFQUF0QyxDQUFYO0FBRUEsVUFBSUMsWUFBWSxHQUFHcEksS0FBSyxDQUFDckUsS0FBTixDQUFZME0sa0JBQVosQ0FBK0JOLElBQS9CLEVBQXFDRyxJQUFyQyxDQUFuQjtBQUNBUCxNQUFBQSxHQUFHLENBQUNXLGVBQUosQ0FBb0JGLFlBQXBCO0FBQ0QsS0FORCxNQU1PO0FBQ0xULE1BQUFBLEdBQUcsQ0FBQ0csSUFBSixHQUFXdEssT0FBTyxDQUFDc0ssSUFBbkI7QUFDRDs7QUFFRCxTQUFLN0ksV0FBTCxHQUFtQixZQUFXO0FBQzVCLGFBQU9lLEtBQUssQ0FBQ3JFLEtBQU4sQ0FBWXNELFdBQW5CO0FBQ0QsS0FGRDs7QUFJQSxTQUFLc0osYUFBTCxHQUFxQixVQUFTckIsT0FBVCxFQUFrQmxJLEtBQWxCLEVBQXlCO0FBQzVDLFVBQUl3SixFQUFKO0FBQ0FBLE1BQUFBLEVBQUUsR0FBR2hCLGFBQWEsSUFBRSxHQUFwQjs7QUFFQSxVQUFJM00sSUFBSSxHQUFHLFNBQVBBLElBQU8sR0FBVyxDQUFFLENBQXhCOztBQUNBLFVBQUlKLElBQUksR0FBRyxTQUFQQSxJQUFPLEdBQVc7QUFDcEJrTixRQUFBQSxHQUFHLENBQUNKLFNBQUosQ0FBY1AsZUFBZCxDQUE4QkUsT0FBOUIsRUFBdUNsSSxLQUF2QyxFQUE4Q3dKLEVBQTlDO0FBQ0EsZUFBTztBQUNMM04sVUFBQUEsSUFBSSxFQUFFQTtBQURELFNBQVA7QUFHRCxPQUxEOztBQU9BLGFBQU87QUFDTEosUUFBQUEsSUFBSSxFQUFFQTtBQURELE9BQVA7QUFHRCxLQWZEOztBQWlCQSxTQUFLd00sSUFBTCxHQUFZLFVBQVNDLE9BQVQsRUFBa0I7QUFDNUIsVUFBSUssU0FBUyxHQUFHL0osT0FBTyxDQUFDaUwsZUFBUixHQUEwQmpMLE9BQU8sQ0FBQ2lMLGVBQWxDLEdBQW9EdkIsT0FBcEU7O0FBRUEsVUFBSUssU0FBSixFQUFlO0FBQ2JJLFFBQUFBLEdBQUcsQ0FBQ0osU0FBSixDQUFjakksS0FBZCxHQUFzQmlJLFNBQXRCO0FBQ0Q7O0FBRUQsVUFBSTVNLFFBQVEsR0FBRyxFQUFmOztBQUVBQSxNQUFBQSxRQUFRLENBQUN3TSxPQUFULEdBQW1CLFVBQVNJLFNBQVQsRUFBb0JtQixXQUFwQixFQUFpQztBQUNsRC9OLFFBQUFBLFFBQVEsQ0FBQ2dPLGFBQVQsQ0FBdUJwQixTQUF2QixFQUFrQ21CLFdBQWxDLEVBQStDMUksS0FBSyxDQUFDckUsS0FBTixDQUFZc0QsV0FBM0Q7QUFDRCxPQUZEOztBQUlBdEUsTUFBQUEsUUFBUSxDQUFDb00scUJBQVQsR0FBaUMsWUFBVztBQUMxQ1ksUUFBQUEsR0FBRyxDQUFDSixTQUFKLENBQWNSLHFCQUFkLENBQW9DLEdBQXBDO0FBQ0QsT0FGRDs7QUFJQXBNLE1BQUFBLFFBQVEsQ0FBQ2dPLGFBQVQsR0FBeUIsVUFBU3BCLFNBQVQsRUFBb0JtQixXQUFwQixFQUFpQzFKLEtBQWpDLEVBQXdDO0FBQy9ELFlBQUl4QixPQUFPLENBQUNpTCxlQUFaLEVBQTZCO0FBRTdCLFlBQUlELEVBQUo7O0FBRUEsWUFBSUUsV0FBVyxJQUFJQSxXQUFXLENBQUNGLEVBQS9CLEVBQW1DO0FBQ2pDQSxVQUFBQSxFQUFFLEdBQUdFLFdBQVcsQ0FBQ0YsRUFBakI7QUFDRCxTQUZELE1BRU87QUFDTEEsVUFBQUEsRUFBRSxHQUFHaEIsYUFBYSxJQUFFLEdBQXBCO0FBQ0Q7O0FBRURHLFFBQUFBLEdBQUcsQ0FBQ0osU0FBSixDQUFjUCxlQUFkLENBQThCTyxTQUE5QixFQUF5Q3ZJLEtBQXpDLEVBQWdEd0osRUFBaEQ7QUFDRCxPQVpEOztBQWNBN04sTUFBQUEsUUFBUSxDQUFDeU0sS0FBVCxHQUFpQixZQUFXLENBQzNCLENBREQ7O0FBR0F6TSxNQUFBQSxRQUFRLENBQUNGLElBQVQsR0FBZ0IsVUFBU1EsS0FBVCxFQUFnQjtBQUM5QixZQUFJMk4sUUFBSjtBQUNBLFlBQUlDLFdBQUo7O0FBRUFBLFFBQUFBLFdBQVcsR0FBRyx1QkFBVztBQUN2QixjQUFJbEIsR0FBSixFQUFTQSxHQUFHLENBQUN6SSxVQUFKLENBQWV0RCxnQkFBZjtBQUNUK0wsVUFBQUEsR0FBRyxHQUFHLElBQU47QUFDRCxTQUhEOztBQUtBQSxRQUFBQSxHQUFHLENBQUMzSSxLQUFKLENBQVUsQ0FBVjtBQUVBLGVBQU87QUFDTG5FLFVBQUFBLElBQUksRUFBRyxnQkFBVztBQUNoQixnQkFBSWdOLGlCQUFpQixJQUFJQSxpQkFBaUIsQ0FBQ2xMLE9BQTNDLEVBQW9EO0FBQ2xEa0wsY0FBQUEsaUJBQWlCLENBQUNsTCxPQUFsQjtBQUNEOztBQUVELGdCQUFJZ0wsR0FBSixFQUFTQSxHQUFHLENBQUM5TSxJQUFKLENBQVMsQ0FBVDtBQUNUZ08sWUFBQUEsV0FBVztBQUNaO0FBUkksU0FBUDtBQVVELE9BckJEOztBQXVCQTVPLE1BQUFBLEtBQUssQ0FBQ0ksa0JBQU4sQ0FBeUJNLFFBQXpCO0FBQ0EsYUFBT0EsUUFBUDtBQUNELEtBM0REOztBQTZEQSxRQUFJNkMsT0FBTyxDQUFDdkIsQ0FBWixFQUFlO0FBQ2IsV0FBS3hCLElBQUwsR0FBWSxVQUFTUSxLQUFULEVBQWdCO0FBQzFCLFlBQUk2TixVQUFVLEdBQUd0TCxPQUFPLENBQUNzTCxVQUFSLElBQXNCLENBQXZDO0FBQ0EsWUFBSXpOLEdBQUcsR0FBR21DLE9BQU8sQ0FBQ3ZCLENBQWxCO0FBQ0EsWUFBSThNLEVBQUUsR0FBRyxDQUFUO0FBQ0EsWUFBSXhCLFNBQUo7QUFDQSxZQUFJeUIsZ0JBQWdCLEdBQUd4TCxPQUFPLENBQUMrSixTQUEvQjs7QUFFQSxZQUFJeUIsZ0JBQWdCLENBQUNDLEVBQXJCLEVBQXlCO0FBQ3ZCMUIsVUFBQUEsU0FBUyxHQUFHeUIsZ0JBQWdCLENBQUNDLEVBQWpCLENBQW9COU4sSUFBcEIsQ0FBeUI2TixnQkFBekIsQ0FBWjtBQUNELFNBRkQsTUFFTztBQUNMekIsVUFBQUEsU0FBUyxHQUFHLG1CQUFTMUQsQ0FBVCxFQUFXO0FBQUUsbUJBQU9tRixnQkFBUDtBQUF5QixXQUFsRDtBQUNEOztBQUNELFlBQUlFLFNBQVMsR0FBRyxDQUFoQjtBQUNBLFlBQUlDLFFBQVEsR0FBRyxDQUFmO0FBQ0EsWUFBSUMsRUFBSjs7QUFFQSxZQUFJTixVQUFVLENBQUNHLEVBQWYsRUFBbUI7QUFDakIsY0FBSTlKLGdCQUFnQixHQUFHLElBQUlsRixLQUFLLENBQUNHLE9BQU4sQ0FBY3VKLE9BQWxCLENBQTBCM0QsS0FBMUIsRUFBaUM0QyxXQUFqQyxFQUE4QyxVQUFTZ0IsS0FBVCxFQUFnQkMsQ0FBaEIsRUFBbUI7QUFDdEZxRixZQUFBQSxTQUFTLEdBQUdyRixDQUFDLEdBQUdzRixRQUFoQjtBQUNBSixZQUFBQSxFQUFFLElBQUlHLFNBQVMsR0FBRzNCLFNBQVMsQ0FBQzFELENBQUQsQ0FBM0I7QUFDQWtGLFlBQUFBLEVBQUUsR0FBR0EsRUFBRSxHQUFHLENBQVY7QUFFQUssWUFBQUEsRUFBRSxHQUFHTCxFQUFFLEdBQUdELFVBQVUsQ0FBQ0csRUFBWCxDQUFjcEYsQ0FBZCxDQUFWO0FBQ0F1RixZQUFBQSxFQUFFLEdBQUdBLEVBQUUsR0FBRyxDQUFWO0FBRUEsZ0JBQUlBLEVBQUUsR0FBRyxDQUFULEVBQVlBLEVBQUU7QUFDZEQsWUFBQUEsUUFBUSxHQUFHdEYsQ0FBWDtBQUNBLG1CQUFPeEksR0FBRyxDQUFDK04sRUFBRCxDQUFWO0FBQ0QsV0FYc0IsQ0FBdkI7QUFZRCxTQWJELE1BYU87QUFDTCxjQUFJakssZ0JBQWdCLEdBQUcsSUFBSWxGLEtBQUssQ0FBQ0csT0FBTixDQUFjdUosT0FBbEIsQ0FBMEIzRCxLQUExQixFQUFpQzRDLFdBQWpDLEVBQThDLFVBQVNnQixLQUFULEVBQWdCQyxDQUFoQixFQUFtQjtBQUN0RnFGLFlBQUFBLFNBQVMsR0FBR3JGLENBQUMsR0FBR3NGLFFBQWhCO0FBQ0FKLFlBQUFBLEVBQUUsSUFBSUcsU0FBUyxHQUFHM0IsU0FBUyxDQUFDMUQsQ0FBRCxDQUEzQjtBQUNBa0YsWUFBQUEsRUFBRSxHQUFHQSxFQUFFLEdBQUcsQ0FBVjtBQUVBSyxZQUFBQSxFQUFFLEdBQUdMLEVBQUUsR0FBR0QsVUFBVjtBQUNBTSxZQUFBQSxFQUFFLEdBQUdBLEVBQUUsR0FBRyxDQUFWO0FBRUEsZ0JBQUlBLEVBQUUsR0FBRyxDQUFULEVBQVlBLEVBQUU7QUFDZEQsWUFBQUEsUUFBUSxHQUFHdEYsQ0FBWDtBQUNBLG1CQUFPeEksR0FBRyxDQUFDK04sRUFBRCxDQUFWO0FBQ0QsV0FYc0IsQ0FBdkI7QUFZRDs7QUFFRCxlQUFPO0FBQ0x2TyxVQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDZnNFLFlBQUFBLGdCQUFnQixDQUFDRCxVQUFqQixDQUE0QjBELFdBQVcsQ0FBQzdELFlBQXhDO0FBQ0Q7QUFISSxTQUFQO0FBS0QsT0FqREQ7QUFrREQsS0FuREQsTUFtRE8sSUFBSXZCLE9BQU8sQ0FBQzZMLElBQVosRUFBa0I7QUFDdkIsVUFBSUMsVUFBVSxHQUFHaEksTUFBTSxDQUFDQyxNQUFQLENBQWMvRCxPQUFkLENBQWpCO0FBQ0E4TCxNQUFBQSxVQUFVLENBQUNyTixDQUFYLEdBQWV1QixPQUFPLENBQUM2TCxJQUFSLENBQWFwTixDQUE1QjtBQUNBaEMsTUFBQUEsS0FBSyxDQUFDRSxRQUFOLENBQWV3RCxVQUFmLENBQTBCeEMsSUFBMUIsQ0FBK0IsSUFBL0IsRUFBcUM2RSxLQUFyQyxFQUE0QzRDLFdBQTVDLEVBQXlEMEcsVUFBekQ7QUFDRCxLQUpNLE1BSUEsQ0FFTjtBQUVGLEdBdExEOztBQXdMQXJQLEVBQUFBLEtBQUssQ0FBQ3NQLElBQU4sR0FBYSxVQUFTNU8sUUFBVCxFQUFtQjZPLEtBQW5CLEVBQTBCO0FBQ3JDLFFBQUloUCxRQUFRLEdBQUdHLFFBQWY7QUFDQSxRQUFJSixRQUFRLEdBQUdJLFFBQVEsQ0FBQ0osUUFBVCxFQUFmO0FBQ0EsV0FBTztBQUNMRSxNQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDZixZQUFJZ1AsUUFBSjtBQUNBLFlBQUlDLFNBQVMsR0FBRzFQLE1BQU0sQ0FBQzJQLFdBQVAsQ0FBbUJDLEdBQW5CLEVBQWhCO0FBQ0EsWUFBSVQsUUFBUSxHQUFHTyxTQUFmO0FBQ0EsWUFBSUcsZ0JBQWdCLEdBQUcsQ0FBdkI7QUFFQUosUUFBQUEsUUFBUSxHQUFHOU8sUUFBUSxDQUFDRixJQUFULEVBQVg7O0FBRUEsWUFBSXFQLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsR0FBVztBQUM3QixjQUFJRixHQUFHLEdBQUc1UCxNQUFNLENBQUMyUCxXQUFQLENBQW1CQyxHQUFuQixFQUFWOztBQUNBLGNBQUlBLEdBQUcsR0FBR0YsU0FBTixHQUFrQkcsZ0JBQWdCLEdBQUd0UCxRQUF6QyxFQUFtRDtBQUFFO0FBQ25ETyxZQUFBQSxVQUFVLENBQUMsWUFBVTtBQUNqQjJPLGNBQUFBLFFBQVEsR0FBRzlPLFFBQVEsQ0FBQ0YsSUFBVCxFQUFYO0FBQ0gsYUFGUyxFQUVQLENBQUNvUCxnQkFBZ0IsR0FBQyxDQUFsQixJQUF1QnRQLFFBQXZCLEdBQWtDcVAsR0FGM0IsQ0FBVjtBQUdBQyxZQUFBQSxnQkFBZ0I7O0FBQ2hCLGdCQUFJQSxnQkFBZ0IsSUFBSUwsS0FBSyxHQUFDLENBQTlCLEVBQWlDO0FBQy9CTyxjQUFBQSxhQUFhLENBQUNDLEtBQUQsQ0FBYjtBQUNEO0FBQ0Y7QUFDRixTQVhEOztBQWFBLFlBQUlBLEtBQUssR0FBR0MsV0FBVyxDQUFDSCxhQUFELEVBQWdCdlAsUUFBaEIsQ0FBdkI7QUFDQSxlQUFPO0FBQ0xNLFVBQUFBLElBQUksRUFBRSxnQkFBVztBQUNma1AsWUFBQUEsYUFBYSxDQUFDQyxLQUFELENBQWI7QUFDQSxnQkFBSVAsUUFBSixFQUFjQSxRQUFRLENBQUM1TyxJQUFUO0FBQ2Y7QUFKSSxTQUFQO0FBTUQ7QUE3QkksS0FBUDtBQStCRCxHQWxDRDs7QUFvQ0FaLEVBQUFBLEtBQUssQ0FBQ2lRLE9BQU4sR0FBZ0IsVUFBU0MsSUFBVCxFQUFlO0FBQzdCLFdBQU87QUFDTDFQLE1BQUFBLElBQUksRUFBRyxnQkFBVztBQUNoQixlQUFPO0FBQ0xJLFVBQUFBLElBQUksRUFBRSxnQkFBVSxDQUVmO0FBSEksU0FBUDtBQUtELE9BUEk7QUFTTE4sTUFBQUEsUUFBUSxFQUFFLG9CQUFVO0FBQUMsZUFBTzRQLElBQVA7QUFBWTtBQVQ1QixLQUFQO0FBV0QsR0FaRDtBQWNDLENBeDRCRDs7O0FDRkFsUSxLQUFLLENBQUNHLE9BQU4sR0FBZ0JILEtBQUssQ0FBQ0csT0FBTixJQUFpQixFQUFqQztBQUVBLElBQUlnUSxhQUFhLEdBQUcsRUFBcEI7O0FBQ0FuUSxLQUFLLENBQUNHLE9BQU4sQ0FBY2dELE9BQWQsR0FBd0IsVUFBU2lOLEVBQVQsRUFBYTtBQUNuQyxPQUFLLElBQUlDLEdBQVQsSUFBZ0JGLGFBQWhCLEVBQStCO0FBQzdCQyxJQUFBQSxFQUFFLENBQUNDLEdBQUQsRUFBTUYsYUFBYSxDQUFDRSxHQUFELENBQW5CLENBQUY7QUFDRDtBQUNGLENBSkQ7O0FBTUFyUSxLQUFLLENBQUNHLE9BQU4sQ0FBY21RLG1CQUFkLEdBQW9DLFVBQVV2SyxLQUFWLEVBQWlCd0ssU0FBakIsRUFBNEJuSSxJQUE1QixFQUFrQ29JLFNBQWxDLEVBQTZDO0FBRS9FLE9BQUsxTCxZQUFMLEdBQW9CeUwsU0FBcEI7QUFDQTFQLEVBQUFBLFVBQVUsQ0FBQyxZQUFXO0FBQUU7QUFDdEIwUCxJQUFBQSxTQUFTLENBQUMxTCxPQUFWLENBQWtCdUQsSUFBSSxDQUFDdEQsWUFBdkI7QUFDRCxHQUZTLENBQVY7O0FBSUEsT0FBS3NELElBQUwsR0FBWSxZQUFXO0FBQ3JCLFdBQU9BLElBQVA7QUFDRCxHQUZEOztBQUlBLE1BQUlKLFlBQVksR0FBRyxLQUFuQjs7QUFDQSxPQUFLL0MsVUFBTCxHQUFrQixZQUFXO0FBQzNCLFFBQUkrQyxZQUFKLEVBQWtCO0FBQ2xCLFFBQUl3SSxTQUFKLEVBQWVBLFNBQVM7QUFDeEJ4SSxJQUFBQSxZQUFZLEdBQUcsSUFBZjtBQUNBdUksSUFBQUEsU0FBUyxDQUFDdEwsVUFBVixDQUFxQm1ELElBQUksQ0FBQ3RELFlBQTFCO0FBQ0QsR0FMRDs7QUFPQSxPQUFLcEMsT0FBTCxHQUFlLEtBQUt1QyxVQUFwQjs7QUFFQSxPQUFLOEMsTUFBTCxHQUFjLFlBQVc7QUFDdkIsV0FBT3dJLFNBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUt2TCxXQUFMLEdBQW1CLFlBQVc7QUFDNUIsV0FBT2UsS0FBSyxDQUFDckUsS0FBTixDQUFZc0QsV0FBbkI7QUFDRCxHQUZEOztBQUlBLE9BQUt5SCxRQUFMLEdBQWdCLFVBQVNDLFNBQVQsRUFBb0JySCxLQUFwQixFQUEyQjtBQUN6Q0EsSUFBQUEsS0FBSyxDQUFDUSxLQUFOLENBQVlFLEtBQUssQ0FBQ3JFLEtBQU4sQ0FBWXNELFdBQXhCLEVBQXFDdUwsU0FBUyxDQUFDN0QsU0FBRCxDQUE5QztBQUNELEdBRkQ7O0FBSUEsT0FBS0MsY0FBTCxHQUFzQixVQUFTRCxTQUFULEVBQW9CRSxNQUFwQixFQUE0QkMsWUFBNUIsRUFBMEM7QUFDOUQsUUFBSS9HLFVBQVUsR0FBR3lLLFNBQVMsQ0FBQzdELFNBQUQsQ0FBMUI7QUFDQTVHLElBQUFBLFVBQVUsQ0FBQ2dILHFCQUFYLENBQWlDLEdBQWpDO0FBQ0FoSCxJQUFBQSxVQUFVLENBQUNpSCxlQUFYLENBQTJCSCxNQUEzQixFQUFtQzdHLEtBQUssQ0FBQ3JFLEtBQU4sQ0FBWXNELFdBQS9DLEVBQTRENkgsWUFBNUQ7QUFDRCxHQUpEOztBQU1BLE9BQUsvRCxNQUFMLEdBQWMsWUFBVztBQUN2QixRQUFJMkgsR0FBRyxHQUFHLElBQUlDLFFBQUosQ0FBYUgsU0FBYixFQUF3QjtBQUFDSSxNQUFBQSxVQUFVLEVBQUU7QUFBYixLQUF4QixDQUFWO0FBRUFGLElBQUFBLEdBQUcsQ0FBQzNILE1BQUo7QUFDQSxXQUFPMkgsR0FBUDtBQUNELEdBTEQ7O0FBT0F6USxFQUFBQSxLQUFLLENBQUN5QixlQUFOLENBQXNCUCxJQUF0QixDQUEyQixJQUEzQixFQUFpQzZFLEtBQWpDLEVBQXdDLElBQXhDO0FBQ0QsQ0EvQ0Q7O0FBZ0RBL0YsS0FBSyxDQUFDRyxPQUFOLENBQWNtUSxtQkFBZCxDQUFrQ3BPLFNBQWxDLEdBQThDbUYsTUFBTSxDQUFDQyxNQUFQLENBQWN0SCxLQUFLLENBQUN5QixlQUFOLENBQXNCUyxTQUFwQyxDQUE5Qzs7QUFFQWxDLEtBQUssQ0FBQ0csT0FBTixDQUFjdUosT0FBZCxHQUF3QixVQUFTM0QsS0FBVCxFQUFnQnFDLElBQWhCLEVBQXNCaEgsR0FBdEIsRUFBMkI7QUFDakQsTUFBSXdQLFVBQVUsR0FBRzdLLEtBQUssQ0FBQ3JFLEtBQU4sQ0FBWW1QLHFCQUFaLENBQWtDLElBQWxDLEVBQXdDLENBQXhDLEVBQTJDLENBQTNDLENBQWpCO0FBQ0EsTUFBSUMsU0FBUyxHQUFHLENBQWhCO0FBQ0EsTUFBSW5HLFVBQVUsR0FBRzVFLEtBQUssQ0FBQ3JFLEtBQU4sQ0FBWWlKLFVBQTdCOztBQUVBaUcsRUFBQUEsVUFBVSxDQUFDRyxjQUFYLEdBQTRCLFVBQVNDLG9CQUFULEVBQStCO0FBQ3pEO0FBQ0EsUUFBSUMsV0FBVyxHQUFHRCxvQkFBb0IsQ0FBQ0MsV0FBdkMsQ0FGeUQsQ0FJekQ7O0FBQ0EsUUFBSUMsWUFBWSxHQUFHRixvQkFBb0IsQ0FBQ0UsWUFBeEMsQ0FMeUQsQ0FPekQ7O0FBQ0EsU0FBSyxJQUFJQyxPQUFPLEdBQUcsQ0FBbkIsRUFBc0JBLE9BQU8sR0FBR0QsWUFBWSxDQUFDRSxnQkFBN0MsRUFBK0RELE9BQU8sRUFBdEUsRUFBMEU7QUFDeEUsVUFBSUUsU0FBUyxHQUFHSixXQUFXLENBQUNuRyxjQUFaLENBQTJCcUcsT0FBM0IsQ0FBaEI7QUFDQSxVQUFJRyxVQUFVLEdBQUdKLFlBQVksQ0FBQ3BHLGNBQWIsQ0FBNEJxRyxPQUE1QixDQUFqQixDQUZ3RSxDQUl4RTs7QUFDQSxXQUFLLElBQUlJLE1BQU0sR0FBRyxDQUFsQixFQUFxQkEsTUFBTSxHQUFHTixXQUFXLENBQUN4UixNQUExQyxFQUFrRDhSLE1BQU0sRUFBeEQsRUFBNEQ7QUFDMUQ7QUFDQUQsUUFBQUEsVUFBVSxDQUFDQyxNQUFELENBQVYsR0FBcUJuUSxHQUFHLENBQUNpUSxTQUFTLENBQUNFLE1BQUQsQ0FBVixFQUFvQixDQUFDTixXQUFXLENBQUN4UixNQUFaLEdBQXFCcVIsU0FBckIsR0FBaUNTLE1BQWxDLElBQTRDNUcsVUFBaEUsQ0FBeEI7QUFDRDtBQUNGOztBQUVEbUcsSUFBQUEsU0FBUztBQUNWLEdBcEJEOztBQXNCQWpRLEVBQUFBLFVBQVUsQ0FBQyxZQUFXO0FBQUU7QUFDdEIrUCxJQUFBQSxVQUFVLENBQUMvTCxPQUFYLENBQW1CdUQsSUFBSSxDQUFDdEQsWUFBeEI7QUFDRCxHQUZTLENBQVY7QUFJQSxPQUFLQSxZQUFMLEdBQW9COEwsVUFBcEI7QUFFQTVRLEVBQUFBLEtBQUssQ0FBQ3lCLGVBQU4sQ0FBc0JQLElBQXRCLENBQTJCLElBQTNCLEVBQWlDNkUsS0FBakMsRUFBd0MsSUFBeEM7O0FBRUEsT0FBS3FDLElBQUwsR0FBWSxZQUFXO0FBQ3JCLFdBQU9BLElBQVA7QUFDRCxHQUZEOztBQUlBLE1BQUlKLFlBQVksR0FBRyxLQUFuQjs7QUFDQSxPQUFLL0MsVUFBTCxHQUFrQixZQUFXO0FBQzNCLFFBQUkrQyxZQUFKLEVBQWtCO0FBQ2xCQSxJQUFBQSxZQUFZLEdBQUcsSUFBZjtBQUVBbkgsSUFBQUEsVUFBVSxDQUFDLFlBQVc7QUFBRTtBQUN0QitQLE1BQUFBLFVBQVUsQ0FBQzNMLFVBQVgsQ0FBc0JtRCxJQUFJLENBQUN0RCxZQUEzQjtBQUNELEtBRlMsQ0FBVjtBQUdELEdBUEQ7O0FBU0EsT0FBS3BDLE9BQUwsR0FBZSxLQUFLdUMsVUFBcEI7O0FBRUEsT0FBS2lCLE1BQUwsR0FBYyxVQUFTMkYsRUFBVCxFQUFhO0FBQ3pCekssSUFBQUEsR0FBRyxHQUFHeUssRUFBTjtBQUNBLFNBQUt6SyxHQUFMLEdBQVdBLEdBQVg7QUFDRCxHQUhEOztBQUtBLE9BQUtBLEdBQUwsR0FBV0EsR0FBWDs7QUFFQSxPQUFLMkcsTUFBTCxHQUFjLFlBQVc7QUFDdkIsV0FBTzZJLFVBQVA7QUFDRCxHQUZEOztBQUlBLE9BQUtZLFNBQUwsR0FBaUIsSUFBakI7QUFDRCxDQS9ERDs7QUFnRUF4UixLQUFLLENBQUNHLE9BQU4sQ0FBY3VKLE9BQWQsQ0FBc0J4SCxTQUF0QixHQUFrQ21GLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjdEgsS0FBSyxDQUFDeUIsZUFBTixDQUFzQlMsU0FBcEMsQ0FBbEM7QUFHQWxDLEtBQUssQ0FBQ0csT0FBTixDQUFjTixRQUFkLENBQXVCLFNBQXZCLEVBQWtDLFVBQVNrRyxLQUFULEVBQWdCcUMsSUFBaEIsRUFBc0JoSCxHQUF0QixFQUEyQjtBQUMzRCxTQUFPLElBQUlwQixLQUFLLENBQUNHLE9BQU4sQ0FBY3VKLE9BQWxCLENBQTBCM0QsS0FBMUIsRUFBaUNxQyxJQUFqQyxFQUF1Q2hILEdBQXZDLENBQVA7QUFDRCxDQUZEOztBQUtBcEIsS0FBSyxDQUFDRyxPQUFOLENBQWNzUixNQUFkLEdBQXVCLFVBQVMxTCxLQUFULEVBQWdCcUMsSUFBaEIsRUFBc0I3RSxPQUF0QixFQUErQjtBQUNwRCxNQUFJbU8sWUFBWSxHQUFHM0wsS0FBSyxDQUFDckUsS0FBTixDQUFZaVEsa0JBQVosRUFBbkI7QUFDQSxNQUFJQyxjQUFjLEdBQUdDLFNBQXJCO0FBQ0EsTUFBSUMsV0FBVyxHQUFHRCxTQUFsQjtBQUNBLE1BQUlFLG1CQUFtQixHQUFHRixTQUExQjtBQUNBLE1BQUlHLGdCQUFnQixHQUFHSCxTQUF2QjtBQUVBLE1BQUlJLFVBQVUsR0FBRzFPLE9BQU8sQ0FBQ3NLLElBQXpCOztBQUVBLE9BQUszSCxNQUFMLEdBQWMsVUFBUzNDLE9BQVQsRUFBa0I7QUFDOUJtTyxJQUFBQSxZQUFZLENBQUM3RCxJQUFiLEdBQW9Cb0UsVUFBcEI7O0FBRUEsUUFBSUMsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBU0MsSUFBVCxFQUFlck0sVUFBZixFQUEyQjtBQUMzQyxVQUFJcU0sSUFBSixFQUFVO0FBQ1IsWUFBSUEsSUFBSSxDQUFDdE0sS0FBVCxFQUFnQjtBQUNkLGlCQUFPc00sSUFBSSxDQUFDdE0sS0FBTCxDQUFXRSxLQUFLLENBQUNyRSxLQUFOLENBQVlzRCxXQUF2QixFQUFvQ2MsVUFBcEMsRUFBZ0RDLEtBQWhELENBQVA7QUFDRCxTQUZELE1BRU87QUFDTEQsVUFBQUEsVUFBVSxDQUFDVCxLQUFYLEdBQW1COE0sSUFBbkI7QUFDRDtBQUNGOztBQUVELGFBQU9OLFNBQVA7QUFDRCxLQVZEOztBQVlBRCxJQUFBQSxjQUFjLENBQUNsUCxPQUFmO0FBQ0FvUCxJQUFBQSxXQUFXLENBQUNwUCxPQUFaO0FBQ0FxUCxJQUFBQSxtQkFBbUIsQ0FBQ3JQLE9BQXBCO0FBQ0FzUCxJQUFBQSxnQkFBZ0IsQ0FBQ3RQLE9BQWpCO0FBRUFrUCxJQUFBQSxjQUFjLEdBQUdNLFdBQVcsQ0FBQzNPLE9BQU8sQ0FBQytCLElBQVQsRUFBZW9NLFlBQVksQ0FBQ3BNLElBQTVCLENBQTVCO0FBQ0F3TSxJQUFBQSxXQUFXLEdBQUdJLFdBQVcsQ0FBQzNPLE9BQU8sQ0FBQzZPLENBQVQsRUFBWVYsWUFBWSxDQUFDVSxDQUF6QixDQUF6QjtBQUNBTCxJQUFBQSxtQkFBbUIsR0FBR0csV0FBVyxDQUFDM08sT0FBTyxDQUFDK0osU0FBVCxFQUFvQm9FLFlBQVksQ0FBQ3BFLFNBQWpDLENBQWpDO0FBQ0EwRSxJQUFBQSxnQkFBZ0IsR0FBR0UsV0FBVyxDQUFDM08sT0FBTyxDQUFDOEosTUFBVCxFQUFpQnFFLFlBQVksQ0FBQ3JFLE1BQTlCLENBQTlCO0FBQ0QsR0F4QkQ7O0FBMEJBLE9BQUtuSCxNQUFMLENBQVkzQyxPQUFaO0FBRUF2RCxFQUFBQSxLQUFLLENBQUNHLE9BQU4sQ0FBY21RLG1CQUFkLENBQWtDcFAsSUFBbEMsQ0FBdUMsSUFBdkMsRUFBNkM2RSxLQUE3QyxFQUFvRDJMLFlBQXBELEVBQWtFdEosSUFBbEUsRUFBd0UsWUFBVztBQUNqRndKLElBQUFBLGNBQWMsQ0FBQ2xQLE9BQWY7QUFDQW9QLElBQUFBLFdBQVcsQ0FBQ3BQLE9BQVo7QUFDQXFQLElBQUFBLG1CQUFtQixDQUFDclAsT0FBcEI7QUFDQXNQLElBQUFBLGdCQUFnQixDQUFDdFAsT0FBakI7QUFDRCxHQUxEO0FBTUQsQ0EzQ0Q7O0FBNENBMUMsS0FBSyxDQUFDRyxPQUFOLENBQWNzUixNQUFkLENBQXFCdlAsU0FBckIsR0FBaUNtRixNQUFNLENBQUNDLE1BQVAsQ0FBY3RILEtBQUssQ0FBQ0csT0FBTixDQUFjbVEsbUJBQWQsQ0FBa0NwTyxTQUFoRCxDQUFqQztBQUVBbEMsS0FBSyxDQUFDRyxPQUFOLENBQWNOLFFBQWQsQ0FBdUIsUUFBdkIsRUFBaUNHLEtBQUssQ0FBQ0csT0FBTixDQUFjc1IsTUFBL0M7QUFDQSxDQUFDLFNBQUQsRUFBWSxVQUFaLEVBQXdCLFVBQXhCLEVBQW9DLFVBQXBDLEVBQWdELFdBQWhELEVBQTZELFNBQTdELEVBQXdFLE9BQXhFLEVBQWlGLFNBQWpGLEVBQ0d0TyxPQURILENBQ1csVUFBU2tQLFVBQVQsRUFBcUI7QUFDNUJyUyxFQUFBQSxLQUFLLENBQUNHLE9BQU4sQ0FBY04sUUFBZCxDQUF1QndTLFVBQXZCLEVBQW1DLFVBQVN0TSxLQUFULEVBQWdCcUMsSUFBaEIsRUFBc0I3RSxPQUF0QixFQUErQjtBQUNoRSxXQUFPLElBQUl2RCxLQUFLLENBQUNHLE9BQU4sQ0FBY3NSLE1BQWxCLENBQXlCMUwsS0FBekIsRUFBZ0NxQyxJQUFoQyxFQUFzQztBQUFDeUYsTUFBQUEsSUFBSSxFQUFFd0UsVUFBUDtBQUFtQi9FLE1BQUFBLFNBQVMsRUFBRS9KLE9BQU8sQ0FBQytKLFNBQXRDO0FBQWlEOEUsTUFBQUEsQ0FBQyxFQUFFN08sT0FBTyxDQUFDNk8sQ0FBNUQ7QUFBK0QvRSxNQUFBQSxNQUFNLEVBQUU5SixPQUFPLENBQUM4SjtBQUEvRSxLQUF0QyxDQUFQO0FBQ0QsR0FGRDtBQUdELENBTEg7O0FBT0EsSUFBSWlGLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVMvUyxHQUFULEVBQWNnVCxTQUFkLEVBQXlCO0FBQ3ZDaFQsRUFBQUEsR0FBRyxDQUFDMkcsTUFBSixHQUFhLFVBQVNiLEtBQVQsRUFBZ0I7QUFDM0JrTixJQUFBQSxTQUFTLENBQUNsTixLQUFELENBQVQ7QUFDQSxXQUFPOUYsR0FBUDtBQUNELEdBSEQ7O0FBSUEsU0FBT0EsR0FBUDtBQUNELENBTkQ7O0FBUUEsSUFBSXNTLFNBQVMsR0FBRztBQUNkblAsRUFBQUEsT0FBTyxFQUFFLG1CQUFVLENBQUU7QUFEUCxDQUFoQjtBQUlBMUMsS0FBSyxDQUFDRyxPQUFOLENBQWNOLFFBQWQsQ0FBdUIsTUFBdkIsRUFBK0IsVUFBU2tHLEtBQVQsRUFBZ0JxQyxJQUFoQixFQUFzQi9DLEtBQXRCLEVBQTZCO0FBQzFELE1BQUlxQyxRQUFRLEdBQUczQixLQUFLLENBQUNyRSxLQUFOLENBQVlpRyxVQUFaLEVBQWY7QUFDQSxNQUFJNkssZ0JBQWdCLEdBQUdYLFNBQXZCO0FBRUEsU0FBT1MsU0FBUyxDQUNkLElBQUl0UyxLQUFLLENBQUNHLE9BQU4sQ0FBY21RLG1CQUFsQixDQUFzQ3ZLLEtBQXRDLEVBQTZDMkIsUUFBN0MsRUFBdURVLElBQXZELEVBQTZELFlBQVc7QUFDdEVvSyxJQUFBQSxnQkFBZ0IsQ0FBQzlQLE9BQWpCO0FBQ0QsR0FGRCxDQURjLEVBSWQsVUFBUzJDLEtBQVQsRUFBZ0I7QUFDZG1OLElBQUFBLGdCQUFnQixDQUFDOVAsT0FBakI7O0FBRUEsUUFBSTJDLEtBQUssQ0FBQ1EsS0FBVixFQUFpQjtBQUNmNkIsTUFBQUEsUUFBUSxDQUFDcEMsSUFBVCxDQUFjRCxLQUFkLEdBQXNCLEdBQXRCO0FBQ0FtTixNQUFBQSxnQkFBZ0IsR0FBR25OLEtBQUssQ0FBQ1EsS0FBTixDQUFZRSxLQUFLLENBQUNyRSxLQUFOLENBQVlzRCxXQUF4QixFQUFxQzBDLFFBQVEsQ0FBQ3BDLElBQTlDLEVBQW9EUyxLQUFwRCxDQUFuQjtBQUNELEtBSEQsTUFHTztBQUNMeU0sTUFBQUEsZ0JBQWdCLEdBQUdYLFNBQW5CO0FBQ0FuSyxNQUFBQSxRQUFRLENBQUNwQyxJQUFULENBQWNELEtBQWQsR0FBc0JBLEtBQXRCO0FBQ0Q7QUFDRixHQWRhLENBQVQsQ0FlTGEsTUFmSyxDQWVFYixLQWZGLENBQVA7QUFnQkQsQ0FwQkQ7QUFzQkFyRixLQUFLLENBQUNHLE9BQU4sQ0FBY04sUUFBZCxDQUF1QixPQUF2QixFQUFnQyxVQUFTa0csS0FBVCxFQUFnQnFDLElBQWhCLEVBQXNCL0MsS0FBdEIsRUFBNkI7QUFDM0QsTUFBSW9OLFNBQVMsR0FBRzFNLEtBQUssQ0FBQ3JFLEtBQU4sQ0FBWWdSLFdBQVosQ0FBd0IsRUFBeEIsQ0FBaEI7QUFDQSxNQUFJQyxlQUFlLEdBQUdkLFNBQXRCO0FBRUEsU0FBT1MsU0FBUyxDQUNkLElBQUl0UyxLQUFLLENBQUNHLE9BQU4sQ0FBY21RLG1CQUFsQixDQUFzQ3ZLLEtBQXRDLEVBQTZDME0sU0FBN0MsRUFBd0RySyxJQUF4RCxFQUE4RCxZQUFXO0FBQ3ZFdUssSUFBQUEsZUFBZSxDQUFDalEsT0FBaEI7QUFDRCxHQUZELENBRGMsRUFJZCxVQUFTMkMsS0FBVCxFQUFnQjtBQUNkc04sSUFBQUEsZUFBZSxDQUFDalEsT0FBaEI7O0FBRUEsUUFBSTJDLEtBQUssQ0FBQ1EsS0FBVixFQUFpQjtBQUNmOE0sTUFBQUEsZUFBZSxHQUFHdE4sS0FBSyxDQUFDUSxLQUFOLENBQVlFLEtBQUssQ0FBQ3JFLEtBQU4sQ0FBWXNELFdBQXhCLEVBQXFDeU4sU0FBUyxDQUFDRyxTQUEvQyxFQUEwRDdNLEtBQTFELENBQWxCO0FBQ0QsS0FGRCxNQUVPO0FBQ0w0TSxNQUFBQSxlQUFlLEdBQUdkLFNBQWxCO0FBQ0FZLE1BQUFBLFNBQVMsQ0FBQ0csU0FBVixDQUFvQnZOLEtBQXBCLEdBQTRCQSxLQUE1QjtBQUNEO0FBQ0YsR0FiYSxDQUFULENBY0xhLE1BZEssQ0FjRWIsS0FkRixDQUFQO0FBZUQsQ0FuQkQ7O0FBcUJBLElBQUl3TixJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFTOU0sS0FBVCxFQUFnQnFDLElBQWhCLEVBQXNCN0UsT0FBdEIsRUFBK0I7QUFDeEMsT0FBSzJDLE1BQUwsR0FBYyxVQUFTM0MsT0FBVCxFQUFrQjtBQUM5QmtQLElBQUFBLFNBQVMsQ0FBQ0csU0FBVixDQUFvQnZOLEtBQXBCLEdBQTRCOUIsT0FBTyxDQUFDeEMsS0FBUixJQUFpQixJQUE3QztBQUNBK1IsSUFBQUEsR0FBRyxDQUFDeE4sSUFBSixDQUFTRCxLQUFULEdBQWlCOUIsT0FBTyxDQUFDK0IsSUFBUixLQUFpQixDQUFqQixHQUFzQixDQUF0QixHQUEyQi9CLE9BQU8sQ0FBQytCLElBQVIsSUFBYyxHQUExRDtBQUVBLFFBQUltTixTQUFTLENBQUNHLFNBQVYsQ0FBb0J2TixLQUFwQixHQUE0QixJQUFoQyxFQUFzQ29OLFNBQVMsQ0FBQ0csU0FBVixDQUFvQnZOLEtBQXBCLEdBQTRCLElBQTVCO0FBQ3RDLFFBQUlvTixTQUFTLENBQUNHLFNBQVYsQ0FBb0J2TixLQUFwQixHQUE0QixDQUFoQyxFQUFtQ29OLFNBQVMsQ0FBQ0csU0FBVixDQUFvQnZOLEtBQXBCLEdBQTRCLENBQTVCO0FBQ25DLFFBQUl5TixHQUFHLENBQUN4TixJQUFKLENBQVNELEtBQVQsR0FBaUIsSUFBckIsRUFBMkJ5TixHQUFHLENBQUN4TixJQUFKLENBQVNELEtBQVQsR0FBaUIsSUFBakI7QUFDM0IsUUFBSXlOLEdBQUcsQ0FBQ3hOLElBQUosQ0FBU0QsS0FBVCxHQUFpQixDQUFyQixFQUF3QnlOLEdBQUcsQ0FBQ3hOLElBQUosQ0FBU0QsS0FBVCxHQUFpQixDQUFqQjtBQUN6QixHQVJEOztBQVVBLE1BQUlvTixTQUFTLEdBQUcxTSxLQUFLLENBQUNyRSxLQUFOLENBQVlnUixXQUFaLENBQXdCLEVBQXhCLENBQWhCO0FBRUEsTUFBSWhMLFFBQVEsR0FBRzNCLEtBQUssQ0FBQ3JFLEtBQU4sQ0FBWWlHLFVBQVosRUFBZjtBQUNBLE1BQUlvTCxTQUFTLEdBQUdoTixLQUFLLENBQUNyRSxLQUFOLENBQVlpRyxVQUFaLEVBQWhCO0FBQ0FELEVBQUFBLFFBQVEsQ0FBQ3BDLElBQVQsQ0FBY0QsS0FBZCxHQUFzQixHQUF0QjtBQUNBME4sRUFBQUEsU0FBUyxDQUFDek4sSUFBVixDQUFlRCxLQUFmLEdBQXVCLEdBQXZCO0FBRUEsTUFBSXlOLEdBQUcsR0FBRy9NLEtBQUssQ0FBQ3JFLEtBQU4sQ0FBWWlHLFVBQVosRUFBVjtBQUVBLE9BQUt6QixNQUFMLENBQVkzQyxPQUFaO0FBRUExQyxFQUFBQSxVQUFVLENBQUMsWUFBVztBQUNwQjZHLElBQUFBLFFBQVEsQ0FBQzdDLE9BQVQsQ0FBaUJrTyxTQUFqQjtBQUNBckwsSUFBQUEsUUFBUSxDQUFDN0MsT0FBVCxDQUFpQjROLFNBQWpCO0FBQ0FBLElBQUFBLFNBQVMsQ0FBQzVOLE9BQVYsQ0FBa0JpTyxHQUFsQjtBQUNBQyxJQUFBQSxTQUFTLENBQUNsTyxPQUFWLENBQWtCdUQsSUFBSSxDQUFDdEQsWUFBdkI7QUFDQWlPLElBQUFBLFNBQVMsQ0FBQ2xPLE9BQVYsQ0FBa0I0TixTQUFsQjtBQUNBSyxJQUFBQSxHQUFHLENBQUNqTyxPQUFKLENBQVlrTyxTQUFaO0FBQ0QsR0FQUyxDQUFWO0FBU0EsT0FBS2pPLFlBQUwsR0FBb0I0QyxRQUFwQjs7QUFHQSxPQUFLVSxJQUFMLEdBQVksWUFBVztBQUNyQixXQUFPQSxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxNQUFJSixZQUFZLEdBQUcsS0FBbkI7O0FBQ0EsT0FBSy9DLFVBQUwsR0FBa0IsWUFBVztBQUMzQixRQUFJK0MsWUFBSixFQUFrQjtBQUNsQkEsSUFBQUEsWUFBWSxHQUFHLElBQWY7QUFDQU4sSUFBQUEsUUFBUSxDQUFDekMsVUFBVCxDQUFvQjhOLFNBQXBCO0FBQ0FyTCxJQUFBQSxRQUFRLENBQUN6QyxVQUFULENBQW9Cd04sU0FBcEI7QUFDQUEsSUFBQUEsU0FBUyxDQUFDeE4sVUFBVixDQUFxQjZOLEdBQXJCO0FBQ0FDLElBQUFBLFNBQVMsQ0FBQzlOLFVBQVYsQ0FBcUJtRCxJQUFJLENBQUN0RCxZQUExQjtBQUNBaU8sSUFBQUEsU0FBUyxDQUFDOU4sVUFBVixDQUFxQndOLFNBQXJCO0FBQ0FLLElBQUFBLEdBQUcsQ0FBQzdOLFVBQUosQ0FBZThOLFNBQWY7QUFDRCxHQVREOztBQVdBLE9BQUtyUSxPQUFMLEdBQWUsS0FBS3VDLFVBQXBCOztBQUVBLE9BQUs4QyxNQUFMLEdBQWMsWUFBVztBQUN2QixXQUFPd0ksU0FBUDtBQUNELEdBRkQ7O0FBSUEsT0FBSzlELFFBQUwsR0FBZ0IsVUFBU0MsU0FBVCxFQUFvQnJILEtBQXBCLEVBQTJCO0FBQ3pDQSxJQUFBQSxLQUFLLENBQUNRLEtBQU4sQ0FBWUUsS0FBSyxDQUFDckUsS0FBTixDQUFZc0QsV0FBeEIsRUFBcUN1TCxTQUFTLENBQUM3RCxTQUFELENBQTlDO0FBQ0QsR0FGRDs7QUFJQTFNLEVBQUFBLEtBQUssQ0FBQ3lCLGVBQU4sQ0FBc0JQLElBQXRCLENBQTJCLElBQTNCLEVBQWlDNkUsS0FBakMsRUFBd0MsSUFBeEM7QUFDRCxDQTdERDs7QUE4REE4TSxJQUFJLENBQUMzUSxTQUFMLEdBQWlCbUYsTUFBTSxDQUFDQyxNQUFQLENBQWN0SCxLQUFLLENBQUN5QixlQUFOLENBQXNCUyxTQUFwQyxDQUFqQjs7QUFFQSxJQUFJOFEsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBU2pOLEtBQVQsRUFBZ0JxQyxJQUFoQixFQUFzQjdFLE9BQXRCLEVBQStCO0FBQzlDQSxFQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBRyxFQUFwQjtBQUNBLE1BQUkwUCxPQUFPLEdBQUcxUCxPQUFPLENBQUMwUCxPQUFSLElBQW1CLElBQWpDOztBQUNBLE1BQUlqUixDQUFDLEdBQUd1QixPQUFPLENBQUN2QixDQUFSLElBQWEsVUFBUzRILENBQVQsRUFBVztBQUFDLFdBQU9BLENBQVA7QUFBVyxHQUE1Qzs7QUFFQSxNQUFJc0osbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixHQUFXO0FBQ25DLFFBQUlDLEtBQUssR0FBRyxJQUFJakgsWUFBSixDQUFpQitHLE9BQWpCLENBQVo7O0FBQ0EsU0FBSyxJQUFJelQsQ0FBQyxHQUFDLENBQVgsRUFBY0EsQ0FBQyxHQUFDeVQsT0FBaEIsRUFBeUJ6VCxDQUFDLEVBQTFCLEVBQThCO0FBQzVCMlQsTUFBQUEsS0FBSyxDQUFDM1QsQ0FBRCxDQUFMLEdBQVd3QyxDQUFDLENBQUN4QyxDQUFDLEdBQUMsQ0FBRixHQUFNeVQsT0FBTixHQUFnQixDQUFqQixDQUFaO0FBQ0Q7O0FBRUQsV0FBT0UsS0FBUDtBQUNELEdBUEQ7O0FBU0EsT0FBSy9LLElBQUwsR0FBWSxZQUFXO0FBQ3JCLFdBQU9BLElBQVA7QUFDRCxHQUZEOztBQUlBLE1BQUlnTCxjQUFjLEdBQUdyTixLQUFLLENBQUNyRSxLQUFOLENBQVkyUixnQkFBWixFQUFyQjtBQUNBRCxFQUFBQSxjQUFjLENBQUNFLEtBQWYsR0FBdUJKLG1CQUFtQixFQUExQztBQUNBRSxFQUFBQSxjQUFjLENBQUNHLFVBQWYsR0FBNEIsSUFBNUI7QUFFQTFTLEVBQUFBLFVBQVUsQ0FBQyxZQUFXO0FBQ3BCdVMsSUFBQUEsY0FBYyxDQUFDdk8sT0FBZixDQUF1QnVELElBQUksQ0FBQ3RELFlBQTVCO0FBQ0QsR0FGUyxDQUFWO0FBR0EsT0FBS0EsWUFBTCxHQUFvQnNPLGNBQXBCO0FBQ0EsTUFBSXBMLFlBQVksR0FBRyxLQUFuQjs7QUFFQSxPQUFLL0MsVUFBTCxHQUFrQixZQUFXO0FBQzNCLFFBQUkrQyxZQUFKLEVBQWtCO0FBQ2xCQSxJQUFBQSxZQUFZLEdBQUcsSUFBZjtBQUNBb0wsSUFBQUEsY0FBYyxDQUFDbk8sVUFBZixDQUEwQm1ELElBQUksQ0FBQ3RELFlBQS9CO0FBQ0QsR0FKRDs7QUFNQTlFLEVBQUFBLEtBQUssQ0FBQ3lCLGVBQU4sQ0FBc0JQLElBQXRCLENBQTJCLElBQTNCLEVBQWlDNkUsS0FBakMsRUFBd0MsSUFBeEM7QUFDRCxDQW5DRDs7QUFvQ0FpTixVQUFVLENBQUM5USxTQUFYLEdBQXVCbUYsTUFBTSxDQUFDQyxNQUFQLENBQWN0SCxLQUFLLENBQUN5QixlQUFOLENBQXNCUyxTQUFwQyxDQUF2QjtBQUVBbEMsS0FBSyxDQUFDRyxPQUFOLENBQWNOLFFBQWQsQ0FBdUIsTUFBdkIsRUFBK0IsVUFBU2tHLEtBQVQsRUFBZ0JxQyxJQUFoQixFQUFzQjdFLE9BQXRCLEVBQStCO0FBQzVELFNBQU8sSUFBSXNQLElBQUosQ0FBUzlNLEtBQVQsRUFBZ0JxQyxJQUFoQixFQUFzQjdFLE9BQXRCLENBQVA7QUFDRCxDQUZEO0FBSUF2RCxLQUFLLENBQUNHLE9BQU4sQ0FBY04sUUFBZCxDQUF1QixhQUF2QixFQUFzQyxVQUFTa0csS0FBVCxFQUFnQnFDLElBQWhCLEVBQXNCN0UsT0FBdEIsRUFBK0I7QUFDbkUsU0FBTyxJQUFJeVAsVUFBSixDQUFlak4sS0FBZixFQUFzQnFDLElBQXRCLEVBQTRCN0UsT0FBNUIsQ0FBUDtBQUNELENBRkQ7O0FBSUF2RCxLQUFLLENBQUN3VCxLQUFOLEdBQWMsVUFBU0wsS0FBVCxFQUFnQjtBQUM1QixPQUFLOVMsTUFBTCxHQUFjQSxNQUFNLENBQUM4UyxLQUFELENBQXBCO0FBQ0QsQ0FGRDs7QUFJQW5ULEtBQUssQ0FBQ3dULEtBQU4sQ0FBWUMsTUFBWixHQUFxQixVQUFTbk4sRUFBVCxFQUFhb04sS0FBYixFQUFvQkMsRUFBcEIsRUFBd0JDLEtBQXhCLEVBQStCQyxDQUEvQixFQUFrQztBQUNyRCxNQUFJM0QsSUFBSSxHQUFHd0QsS0FBSyxHQUFHRSxLQUFuQjs7QUFDQSxNQUFJLENBQUNDLENBQUwsRUFBUTtBQUNOQSxJQUFBQSxDQUFDLEdBQUN2SixJQUFJLENBQUNjLEtBQUwsQ0FBVzhFLElBQUksR0FBQyxHQUFoQixJQUFxQixDQUF2QjtBQUNEOztBQUVELE1BQUlsQixFQUFFLEdBQUcsU0FBTEEsRUFBSyxDQUFTcEYsQ0FBVCxFQUFZO0FBQ25CLFFBQUlBLENBQUMsR0FBRzhKLEtBQVIsRUFBYztBQUNaLGFBQU9wTixFQUFFLENBQUMwSSxFQUFILENBQU1wRixDQUFOLENBQVA7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPK0osRUFBRSxDQUFDM0UsRUFBSCxDQUFNcEYsQ0FBQyxHQUFDOEosS0FBUixDQUFQO0FBQ0Q7QUFDRixHQU5EOztBQVFBLE1BQUlQLEtBQUssR0FBRyxJQUFJakgsWUFBSixDQUFpQjJILENBQUMsR0FBQyxDQUFuQixDQUFaOztBQUNBLE9BQUssSUFBSXJVLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdxVSxDQUFDLEdBQUMsQ0FBdEIsRUFBeUJyVSxDQUFDLEVBQTFCLEVBQStCO0FBQzdCMlQsSUFBQUEsS0FBSyxDQUFDM1QsQ0FBRCxDQUFMLEdBQVd3UCxFQUFFLENBQUNrQixJQUFJLElBQUkxUSxDQUFDLEdBQUdxVSxDQUFSLENBQUwsQ0FBYjtBQUNEOztBQUFBO0FBRUQsU0FBTztBQUNMaE8sSUFBQUEsS0FBSyxFQUFFLGVBQVNiLFdBQVQsRUFBc0JjLFVBQXRCLEVBQWtDO0FBQ3ZDQSxNQUFBQSxVQUFVLENBQUNnSCxxQkFBWCxDQUFpQyxHQUFqQztBQUNBaEgsTUFBQUEsVUFBVSxDQUFDZ08sbUJBQVgsQ0FBK0JYLEtBQS9CLEVBQXNDbk8sV0FBdEMsRUFBbURrTCxJQUFuRDtBQUNELEtBSkk7QUFNTGxCLElBQUFBLEVBQUUsRUFBRUE7QUFOQyxHQUFQO0FBUUQsQ0EzQkQ7O0FBNkJBLElBQUkzTyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFTZSxHQUFULEVBQWN5UyxDQUFkLEVBQWlCO0FBQzVCLFNBQU8sVUFBUzNELElBQVQsRUFBZTtBQUNwQixRQUFJLENBQUMyRCxDQUFMLEVBQVE7QUFDTkEsTUFBQUEsQ0FBQyxHQUFDdkosSUFBSSxDQUFDYyxLQUFMLENBQVc4RSxJQUFJLEdBQUMsR0FBaEIsSUFBcUIsQ0FBdkI7QUFDRDs7QUFFRCxRQUFJaUQsS0FBSyxHQUFHLElBQUlqSCxZQUFKLENBQWlCMkgsQ0FBQyxHQUFDLENBQW5CLENBQVo7O0FBQ0EsU0FBSyxJQUFJclUsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3FVLENBQUMsR0FBQyxDQUF0QixFQUF5QnJVLENBQUMsRUFBMUIsRUFBK0I7QUFDN0IyVCxNQUFBQSxLQUFLLENBQUMzVCxDQUFELENBQUwsR0FBVzRCLEdBQUcsQ0FBQzVCLENBQUMsR0FBR3FVLENBQUwsQ0FBZDtBQUNEOztBQUFBO0FBRUQsV0FBTztBQUNMaE8sTUFBQUEsS0FBSyxFQUFFLGVBQVNiLFdBQVQsRUFBc0JjLFVBQXRCLEVBQWtDO0FBQ3ZDQSxRQUFBQSxVQUFVLENBQUNnSCxxQkFBWCxDQUFpQyxHQUFqQztBQUNBaEgsUUFBQUEsVUFBVSxDQUFDZ08sbUJBQVgsQ0FBK0JYLEtBQS9CLEVBQXNDbk8sV0FBdEMsRUFBbURrTCxJQUFuRDtBQUNELE9BSkk7QUFNTGxCLE1BQUFBLEVBQUUsRUFBRSxZQUFTcEYsQ0FBVCxFQUFZO0FBQ2QsZUFBT3hJLEdBQUcsQ0FBQ3dJLENBQUMsR0FBQ3NHLElBQUgsQ0FBVjtBQUNEO0FBUkksS0FBUDtBQVVELEdBcEJEO0FBcUJELENBdEJEOztBQXlCQWxRLEtBQUssQ0FBQ3dULEtBQU4sQ0FBWTlKLE9BQVosR0FBc0IsVUFBU3RJLEdBQVQsRUFBY3lTLENBQWQsRUFBaUI7QUFDckMsT0FBS3hULE1BQUwsR0FBY0EsTUFBTSxDQUFDZSxHQUFELEVBQU15UyxDQUFOLENBQXBCO0FBQ0QsQ0FGRDs7QUFJQTdULEtBQUssQ0FBQ3dULEtBQU4sQ0FBWU8sSUFBWixHQUFtQixVQUFTQyxTQUFULEVBQW9CQyxRQUFwQixFQUE4QkosQ0FBOUIsRUFBaUM7QUFDbEQ3VCxFQUFBQSxLQUFLLENBQUN3VCxLQUFOLENBQVk5SixPQUFaLENBQW9CeEksSUFBcEIsQ0FBeUIsSUFBekIsRUFBK0IsVUFBUzBJLENBQVQsRUFBVztBQUFDLFdBQU9vSyxTQUFTLEdBQUcsQ0FBQ0MsUUFBUSxHQUFHRCxTQUFaLElBQXVCcEssQ0FBMUM7QUFBNkMsR0FBeEYsRUFBMEZpSyxDQUExRjtBQUNELENBRkQ7O0FBSUE3VCxLQUFLLENBQUN3VCxLQUFOLENBQVlVLFFBQVosR0FBdUIsVUFBUzlTLEdBQVQsRUFBY2tNLFNBQWQsRUFBeUI7QUFDOUMsTUFBSXdCLEVBQUUsR0FBRyxDQUFUO0FBQ0EsTUFBSThELFNBQUo7QUFDQSxNQUFJMUQsUUFBUSxHQUFHLENBQWY7QUFDQSxNQUFJRCxTQUFKO0FBQ0EsTUFBSUUsRUFBSjtBQUNBLE1BQUlqRSxNQUFNLEdBQUcsTUFBTW9DLFNBQW5COztBQUNBLE1BQUlBLFNBQVMsQ0FBQzBCLEVBQWQsRUFBa0I7QUFDaEIsU0FBS0EsRUFBTCxHQUFVLFVBQVNwRixDQUFULEVBQVk7QUFDcEJxRixNQUFBQSxTQUFTLEdBQUdyRixDQUFDLEdBQUdzRixRQUFoQjtBQUNBSixNQUFBQSxFQUFFLElBQUlHLFNBQVMsR0FBRzNCLFNBQVMsQ0FBQzBCLEVBQVYsQ0FBYXBGLENBQWIsQ0FBbEI7QUFDQWtGLE1BQUFBLEVBQUUsR0FBR0EsRUFBRSxHQUFHLENBQVY7QUFFQUksTUFBQUEsUUFBUSxHQUFHdEYsQ0FBWDtBQUNBLGFBQU94SSxHQUFHLENBQUMwTixFQUFELENBQVY7QUFDRCxLQVBEO0FBUUQsR0FURCxNQVNPO0FBQ0wsU0FBS0UsRUFBTCxHQUFVLFVBQVNwRixDQUFULEVBQVk7QUFDcEJrRixNQUFBQSxFQUFFLEdBQUlsRixDQUFDLEdBQUdzQixNQUFMLEdBQWVBLE1BQXBCO0FBQ0EsVUFBSTRELEVBQUUsR0FBRyxDQUFULEVBQVlBLEVBQUU7QUFDZCxhQUFPMU4sR0FBRyxDQUFDME4sRUFBRCxDQUFWO0FBQ0QsS0FKRDtBQUtEO0FBQ0YsQ0F2QkQ7O0FBeUJBOU8sS0FBSyxDQUFDRyxPQUFOLENBQWNOLFFBQWQsQ0FBdUIsTUFBdkIsRUFBK0IsVUFBU2tHLEtBQVQsRUFBZ0JxQyxJQUFoQixFQUFzQjdFLE9BQXRCLEVBQStCO0FBQzVEQSxFQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjtBQUNBLE1BQUkwUCxPQUFPLEdBQUcxUCxPQUFPLENBQUMwUCxPQUFSLElBQW1CLEdBQWpDO0FBQ0EsTUFBSWtCLFVBQVUsR0FBRzVRLE9BQU8sQ0FBQzRRLFVBQXpCO0FBQ0EsTUFBSUMsU0FBUyxHQUFHN1EsT0FBTyxDQUFDNlEsU0FBeEI7QUFDQSxNQUFJQyxZQUFZLEdBQUc5USxPQUFPLENBQUM4USxZQUEzQjtBQUNBLE1BQUlDLFdBQVcsR0FBRy9RLE9BQU8sQ0FBQytRLFdBQTFCO0FBRUEsTUFBSUgsVUFBVSxLQUFLSSxTQUFuQixFQUE4QkosVUFBVSxHQUFHLEdBQWI7QUFDOUIsTUFBSUMsU0FBUyxLQUFLRyxTQUFsQixFQUE2QkgsU0FBUyxHQUFHLEdBQVo7QUFDN0IsTUFBSUMsWUFBWSxLQUFLRSxTQUFyQixFQUFnQ0YsWUFBWSxHQUFHLEdBQWY7QUFDaEMsTUFBSUMsV0FBVyxLQUFLQyxTQUFwQixFQUErQkQsV0FBVyxHQUFHLEdBQWQ7QUFFL0IsTUFBSUUsV0FBVyxHQUFHalIsT0FBTyxDQUFDa1IsSUFBMUI7QUFDQSxNQUFJQyxXQUFXLEdBQUcsSUFBSTFVLEtBQUssQ0FBQ3dULEtBQU4sQ0FBWU8sSUFBaEIsQ0FBcUIsR0FBckIsRUFBMEIsR0FBMUIsRUFBK0JkLE9BQS9CLEVBQXdDNVMsTUFBeEMsQ0FBK0M4VCxVQUEvQyxDQUFsQjtBQUNBLE1BQUlRLFVBQVUsR0FBRyxJQUFJM1UsS0FBSyxDQUFDd1QsS0FBTixDQUFZTyxJQUFoQixDQUFxQixHQUFyQixFQUEwQk0sWUFBMUIsRUFBd0NwQixPQUF4QyxFQUFpRDVTLE1BQWpELENBQXdEK1QsU0FBeEQsQ0FBakI7QUFDQSxNQUFJUSxVQUFVLEdBQUc1VSxLQUFLLENBQUN3VCxLQUFOLENBQVlDLE1BQVosQ0FBbUJpQixXQUFuQixFQUFnQ1AsVUFBaEMsRUFBNENRLFVBQTVDLEVBQXdEUCxTQUF4RCxDQUFqQjtBQUVBLE1BQUkxTSxRQUFRLEdBQUdVLElBQUksQ0FDTjlDLElBREUsQ0FDRytPLFlBREgsQ0FBZjtBQUdBM00sRUFBQUEsUUFBUSxDQUFDK0UsUUFBVCxDQUFrQixNQUFsQixFQUEwQm1JLFVBQTFCO0FBRUEsU0FBT0osV0FBVyxDQUFDOU0sUUFBRCxDQUFYLENBQ0psRyxNQURJLENBQ0csWUFBVTtBQUFFa0csSUFBQUEsUUFBUSxDQUFDaEYsT0FBVDtBQUFxQixHQURwQyxFQUNzQztBQUR0QyxHQUVKNUIsU0FGSSxDQUVNd1QsV0FBVyxHQUFHLElBRnBCLEVBR0o5UyxNQUhJLENBR0csWUFBVTtBQUNoQixRQUFJcVQsWUFBWSxHQUFHbk4sUUFBUSxDQUFDNUMsWUFBVCxDQUFzQlEsSUFBdEIsQ0FBMkJELEtBQTlDO0FBQ0EsUUFBSXlQLFlBQVksR0FBRyxJQUFJOVUsS0FBSyxDQUFDd1QsS0FBTixDQUFZTyxJQUFoQixDQUFxQmMsWUFBckIsRUFBbUMsR0FBbkMsRUFBd0M1QixPQUF4QyxFQUFpRDVTLE1BQWpELENBQXdEaVUsV0FBeEQsQ0FBbkI7QUFDQTVNLElBQUFBLFFBQVEsQ0FBQytFLFFBQVQsQ0FBa0IsTUFBbEIsRUFBMEJxSSxZQUExQjtBQUNELEdBUEksQ0FBUCxDQXZCNEQsQ0E4QnREO0FBRVAsQ0FoQ0Q7QUFrQ0E5VSxLQUFLLENBQUNHLE9BQU4sQ0FBY04sUUFBZCxDQUF1QixXQUF2QixFQUFvQyxVQUFTa0csS0FBVCxFQUFnQnFDLElBQWhCLEVBQXNCN0UsT0FBdEIsRUFBK0I7QUFDakVBLEVBQUFBLE9BQU8sR0FBR0EsT0FBTyxJQUFJLEVBQXJCO0FBQ0EsTUFBSTBQLE9BQU8sR0FBRzFQLE9BQU8sQ0FBQzBQLE9BQVIsSUFBbUIsR0FBakM7QUFDQSxNQUFJM1MsUUFBUSxHQUFHaUQsT0FBTyxDQUFDakQsUUFBUixJQUFvQixHQUFuQztBQUNBLE1BQUlrVSxXQUFXLEdBQUdqUixPQUFPLENBQUNrUixJQUExQjtBQUNBLE1BQUlNLFNBQVMsR0FBRyxJQUFJL1UsS0FBSyxDQUFDd1QsS0FBTixDQUFZTyxJQUFoQixDQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQmQsT0FBL0IsRUFBd0M1UyxNQUF4QyxDQUErQ0MsUUFBL0MsQ0FBaEI7QUFDQSxNQUFJb0gsUUFBUSxHQUFHVSxJQUFJLENBQ045QyxJQURFLENBQ0csR0FESCxDQUFmO0FBR0EsU0FBT2tQLFdBQVcsQ0FBQzlNLFFBQUQsQ0FBWCxDQUNKbEcsTUFESSxDQUNHLFlBQVU7QUFBRWtHLElBQUFBLFFBQVEsQ0FBQ2hGLE9BQVQ7QUFBcUIsR0FEcEMsRUFDc0M7QUFEdEMsR0FFSjVCLFNBRkksQ0FFTVIsUUFBUSxHQUFHLElBRmpCLEVBR0prQixNQUhJLENBR0csWUFBVTtBQUFFa0csSUFBQUEsUUFBUSxDQUFDK0UsUUFBVCxDQUFrQixNQUFsQixFQUEwQnNJLFNBQTFCO0FBQXVDLEdBSHRELENBQVAsQ0FUaUUsQ0FZRDtBQUVqRSxDQWREOzs7OztBQzNkQSxDQUFDLFlBQVc7QUFFWixNQUFJekgsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBUzBILE9BQVQsRUFBa0I7QUFDOUIsV0FBTyxRQUFRMUssSUFBSSxDQUFDMkssR0FBTCxDQUFTLENBQVQsRUFBWUQsT0FBTyxHQUFDLEVBQXBCLENBQWY7QUFDSCxHQUZEOztBQUdBLE1BQUlFLFlBQVksR0FBRztBQUNqQixTQUFLLENBRFk7QUFFakIsU0FBSyxDQUZZO0FBR2pCLFNBQUssQ0FIWTtBQUlqQixTQUFLLENBSlk7QUFLakIsU0FBSyxDQUxZO0FBTWpCLFNBQUssQ0FOWTtBQU9qQixTQUFLO0FBUFksR0FBbkI7O0FBVUEsTUFBSUMsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFTNVYsR0FBVCxFQUFjO0FBQ25DLFFBQUk2VixjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQVNDLGVBQVQsRUFBMEJDLEVBQTFCLEVBQThCO0FBQ2pELGFBQU87QUFDTDFVLFFBQUFBLElBQUksRUFBRSxnQkFBVztBQUNmQyxVQUFBQSxVQUFVLENBQUN3VSxlQUFlLENBQUN6VSxJQUFoQixDQUFxQk0sSUFBckIsQ0FBMEJtVSxlQUExQixDQUFELEVBQTZDQyxFQUE3QyxDQUFWO0FBQ0Q7QUFISSxPQUFQO0FBS0QsS0FORDs7QUFRQSxRQUFJQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFTQyxZQUFULEVBQXVCRixFQUF2QixFQUEyQjtBQUMzQyxhQUFPO0FBQ0w5VSxRQUFBQSxJQUFJLEVBQUUsY0FBU1EsS0FBVCxFQUFnQjtBQUNwQixjQUFJcVUsZUFBZSxHQUFHRyxZQUFZLENBQUNoVixJQUFiLENBQWtCUSxLQUFsQixDQUF0QjtBQUNBLGlCQUFPb1UsY0FBYyxDQUFDQyxlQUFELEVBQWtCQyxFQUFsQixDQUFyQjtBQUNEO0FBSkksT0FBUDtBQU1ELEtBUEQ7O0FBU0EvVixJQUFBQSxHQUFHLENBQUN1QixTQUFKLEdBQWdCLFVBQVN3VSxFQUFULEVBQWE7QUFDM0IsYUFBT0gsZ0JBQWdCLENBQUM7QUFDdEJNLFFBQUFBLElBQUksRUFBRSxjQUFTQyxPQUFULEVBQWtCblMsT0FBbEIsRUFBMkI7QUFDL0IsaUJBQU9nUyxXQUFXLENBQUNoVyxHQUFHLENBQUNrVyxJQUFKLENBQVNDLE9BQVQsRUFBa0JuUyxPQUFsQixDQUFELEVBQTZCK1IsRUFBN0IsQ0FBbEI7QUFDRDtBQUhxQixPQUFELENBQXZCO0FBS0QsS0FORDs7QUFRQS9WLElBQUFBLEdBQUcsQ0FBQ29XLFdBQUosR0FBa0IsVUFBU2hWLE9BQVQsRUFBa0I7QUFDbEMsYUFBT3dVLGdCQUFnQixDQUFDO0FBQ3RCTSxRQUFBQSxJQUFJLEVBQUUsY0FBU0MsT0FBVCxFQUFrQm5TLE9BQWxCLEVBQTJCO0FBQy9CLGlCQUFPNUMsT0FBTyxDQUFDcEIsR0FBRyxDQUFDa1csSUFBSixDQUFTQyxPQUFULEVBQWtCblMsT0FBbEIsQ0FBRCxDQUFkO0FBQ0Q7QUFIcUIsT0FBRCxDQUF2QjtBQUtELEtBTkQ7O0FBUUFoRSxJQUFBQSxHQUFHLENBQUNxVyxPQUFKLEdBQWMsVUFBU3hVLEdBQVQsRUFBYztBQUMxQixhQUFPK1QsZ0JBQWdCLENBQUM7QUFDdEJNLFFBQUFBLElBQUksRUFBRSxjQUFTQyxPQUFULEVBQWtCblMsT0FBbEIsRUFBMkI7QUFDL0IsaUJBQU9oRSxHQUFHLENBQUNrVyxJQUFKLENBQVNyVSxHQUFHLENBQUNzVSxPQUFELENBQVosRUFBdUJuUyxPQUF2QixDQUFQO0FBQ0Q7QUFIcUIsT0FBRCxDQUF2QjtBQUtELEtBTkQ7O0FBUUEsUUFBSSxDQUFDaEUsR0FBRyxDQUFDc1csaUJBQVQsRUFBNEI7QUFDMUJ0VyxNQUFBQSxHQUFHLENBQUNzVyxpQkFBSixHQUF3QixVQUFTQyxHQUFULEVBQWM7QUFDcEMsZUFBT0EsR0FBUDtBQUNELE9BRkQ7QUFHRDs7QUFFRCxRQUFJLENBQUN2VyxHQUFHLENBQUNrVyxJQUFULEVBQWU7QUFDYmxXLE1BQUFBLEdBQUcsQ0FBQ2tXLElBQUosR0FBVyxVQUFTNUIsQ0FBVCxFQUFZdFEsT0FBWixFQUFxQjtBQUM5QixlQUFPLEtBQUt3UyxhQUFMLENBQW1CbEMsQ0FBbkIsRUFBc0J0USxPQUF0QixFQUErQixHQUEvQixDQUFQO0FBQ0QsT0FGRDtBQUdEOztBQUVELFdBQU9oRSxHQUFQO0FBQ0QsR0F2REQ7O0FBeURBUyxFQUFBQSxLQUFLLENBQUNnVyxhQUFOLEdBQXNCLFVBQVNDLFFBQVQsRUFBbUI7QUFDdkMsUUFBSWpCLE9BQUo7QUFFQUEsSUFBQUEsT0FBTyxHQUFHRSxZQUFZLENBQUNlLFFBQVEsQ0FBQ0MsTUFBVCxDQUFnQixDQUFoQixDQUFELENBQXRCO0FBQ0EsUUFBSWxCLE9BQU8sS0FBS1QsU0FBaEIsRUFBMkIsT0FBT0EsU0FBUDtBQUMzQixRQUFJMEIsUUFBUSxDQUFDQyxNQUFULENBQWdCLENBQWhCLE1BQXVCLEdBQTNCLEVBQWdDbEIsT0FBTztBQUN2QyxRQUFJaUIsUUFBUSxDQUFDQyxNQUFULENBQWdCLENBQWhCLE1BQXVCLEdBQTNCLEVBQWdDbEIsT0FBTztBQUN2QyxRQUFJaUIsUUFBUSxDQUFDQyxNQUFULENBQWdCLENBQWhCLE1BQXVCLEVBQTNCLEVBQStCbEIsT0FBTyxJQUFLLEtBQUttQixRQUFRLENBQUNGLFFBQVEsQ0FBQ0MsTUFBVCxDQUFnQixDQUFoQixDQUFELENBQXpCO0FBQy9CLFdBQU9sQixPQUFQO0FBQ0QsR0FURDs7QUFXQWhWLEVBQUFBLEtBQUssQ0FBQ29XLG1CQUFOLEdBQTRCLFVBQVNDLFlBQVQsRUFBdUJDLFdBQXZCLEVBQW9DO0FBQzlELFFBQUlDLGVBQWUsR0FBRyxFQUF0QjtBQUNBLFFBQUlDLEtBQUssR0FBRyxFQUFaO0FBQ0EsUUFBSUMsS0FBSyxHQUFHLEVBQVo7O0FBRUEsUUFBSUMsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBU0osV0FBVCxFQUFzQjtBQUNsQyxXQUFLLElBQUk5VyxDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUM4VyxXQUFoQixFQUE2QjlXLENBQUMsRUFBOUIsRUFBa0M7QUFDaEMsWUFBSSxDQUFDZ1gsS0FBSyxDQUFDaFgsQ0FBRCxDQUFWLEVBQWUsT0FBT0EsQ0FBUDtBQUNoQjs7QUFDRCxhQUFPaVgsS0FBSyxDQUFDLENBQUQsQ0FBTCxJQUFVLENBQWpCO0FBQ0QsS0FMRDs7QUFPQSxTQUFLaEIsSUFBTCxHQUFZLFVBQVNULE9BQVQsRUFBa0J6UixPQUFsQixFQUEyQjtBQUNyQyxVQUFJb1QsQ0FBQyxHQUFHTCxXQUFXLEVBQW5CO0FBQ0EsVUFBSU0sVUFBVSxHQUFHRixPQUFPLENBQUNDLENBQUQsQ0FBeEI7QUFDQSxVQUFJRSxVQUFVLEdBQUdOLGVBQWUsQ0FBQ0ssVUFBRCxDQUFoQzs7QUFFQSxVQUFJLENBQUNDLFVBQUwsRUFBaUI7QUFDZkEsUUFBQUEsVUFBVSxHQUFHUixZQUFZLEVBQXpCO0FBQ0FFLFFBQUFBLGVBQWUsQ0FBQ0ssVUFBRCxDQUFmLEdBQThCQyxVQUE5QjtBQUNEOztBQUVESixNQUFBQSxLQUFLLENBQUNwWCxJQUFOLENBQVd1WCxVQUFYO0FBQ0EsVUFBSUgsS0FBSyxDQUFDaFgsTUFBTixHQUFla1gsQ0FBbkIsRUFBc0JGLEtBQUssQ0FBQ0ssS0FBTjtBQUV0Qk4sTUFBQUEsS0FBSyxDQUFDSSxVQUFELENBQUwsR0FBb0IsSUFBcEI7QUFDQSxhQUFPQyxVQUFVLENBQUNwQixJQUFYLENBQWdCVCxPQUFoQixFQUF5QnpSLE9BQXpCLEVBQ0ovQixNQURJLENBQ0csWUFBVztBQUNqQmdWLFFBQUFBLEtBQUssQ0FBQ0ksVUFBRCxDQUFMLEdBQW9CLEtBQXBCO0FBQ0QsT0FISSxDQUFQO0FBSUQsS0FsQkQ7O0FBb0JBekIsSUFBQUEsZ0JBQWdCLENBQUMsSUFBRCxDQUFoQjs7QUFFQSxTQUFLVSxpQkFBTCxHQUF5QixVQUFTa0IsS0FBVCxFQUFnQkMsTUFBaEIsRUFBd0I7QUFDL0MsVUFBSUgsVUFBVSxHQUFHTixlQUFlLENBQUMsQ0FBRCxDQUFoQzs7QUFDQSxVQUFJLENBQUNNLFVBQUwsRUFBaUI7QUFDZkEsUUFBQUEsVUFBVSxHQUFHUixZQUFZLEVBQXpCO0FBQ0FFLFFBQUFBLGVBQWUsQ0FBQyxDQUFELENBQWYsR0FBcUJNLFVBQXJCO0FBQ0Q7O0FBRUQsYUFBTyxDQUFDQSxVQUFVLENBQUNoQixpQkFBWCxJQUE4QixVQUFTL1MsQ0FBVCxFQUFXO0FBQUMsZUFBT0EsQ0FBUDtBQUFXLE9BQXRELEVBQXdEaVUsS0FBeEQsRUFBK0RDLE1BQS9ELENBQVA7QUFDRCxLQVJEO0FBU0QsR0EzQ0Q7O0FBNkNBaFgsRUFBQUEsS0FBSyxDQUFDaVgsa0JBQU4sR0FBMkIsVUFBU0MsS0FBVCxFQUFnQjtBQUN6QyxRQUFJQyxRQUFKO0FBQ0EsUUFBSUMsV0FBSjtBQUNBLFFBQUlDLEtBQUssR0FBRyxDQUFaOztBQUVBLFNBQUs1QixJQUFMLEdBQVksVUFBU1QsT0FBVCxFQUFrQnpSLE9BQWxCLEVBQTJCO0FBQ3JDLFVBQUksQ0FBQzRULFFBQUwsRUFBZTtBQUNiQSxRQUFBQSxRQUFRLEdBQUdELEtBQUssQ0FBQ3pCLElBQU4sQ0FBV1QsT0FBWCxFQUFvQnpSLE9BQXBCLENBQVg7QUFDRDs7QUFFRCxhQUFPdkQsS0FBSyxDQUFDSSxrQkFBTixDQUF5QjtBQUM5QkksUUFBQUEsSUFBSSxFQUFFLGNBQVNRLEtBQVQsRUFBZ0I7QUFDcEIsY0FBSSxDQUFDb1csV0FBTCxFQUFrQjtBQUNoQkEsWUFBQUEsV0FBVyxHQUFHRCxRQUFRLENBQUMzVyxJQUFULENBQWNRLEtBQWQsQ0FBZDtBQUNEOztBQUVEbVcsVUFBQUEsUUFBUSxDQUFDM00sUUFBVCxDQUFrQndLLE9BQWxCLEVBQTJCelIsT0FBM0I7QUFFQThULFVBQUFBLEtBQUs7QUFDTCxpQkFBTztBQUFDelcsWUFBQUEsSUFBSSxFQUFFLGdCQUFXO0FBQ3ZCeVcsY0FBQUEsS0FBSztBQUNMLGtCQUFJRixRQUFRLENBQUNoSyxLQUFULElBQWtCa0ssS0FBSyxLQUFLLENBQWhDLEVBQW1DRixRQUFRLENBQUNoSyxLQUFUO0FBQ3BDO0FBSE0sV0FBUDtBQUlEO0FBYjZCLE9BQXpCLENBQVA7QUFlRCxLQXBCRDs7QUFzQkEsU0FBS25JLFdBQUwsR0FBbUIsWUFBVztBQUM1QixhQUFPa1MsS0FBSyxDQUFDbFMsV0FBTixFQUFQO0FBQ0QsS0FGRDs7QUFJQSxTQUFLK1EsYUFBTCxHQUFxQixVQUFTZixPQUFULEVBQWtCelIsT0FBbEIsRUFBMkJ3QixLQUEzQixFQUFrQztBQUNyRCxVQUFJLENBQUNvUyxRQUFMLEVBQWU7QUFDYkEsUUFBQUEsUUFBUSxHQUFHRCxLQUFLLENBQUN6QixJQUFOLENBQVdULE9BQVgsRUFBb0J6UixPQUFwQixDQUFYO0FBQ0Q7O0FBRUQsYUFBT3ZELEtBQUssQ0FBQ0ksa0JBQU4sQ0FBeUI7QUFDOUJJLFFBQUFBLElBQUksRUFBRSxjQUFTUSxLQUFULEVBQWdCO0FBQ3BCLGNBQUksQ0FBQ29XLFdBQUwsRUFBa0I7QUFDaEJBLFlBQUFBLFdBQVcsR0FBR0QsUUFBUSxDQUFDM1csSUFBVCxDQUFjUSxLQUFkLENBQWQ7QUFDRDs7QUFFRG1XLFVBQUFBLFFBQVEsQ0FBQ0csY0FBVCxDQUF3QnRDLE9BQXhCLEVBQWlDelIsT0FBakMsRUFBMEN3QixLQUExQztBQUVBLGlCQUFPO0FBQUNuRSxZQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDdkJ1VyxjQUFBQSxRQUFRLENBQUNySyxxQkFBVDtBQUNEO0FBRk0sV0FBUDtBQUdEO0FBWDZCLE9BQXpCLENBQVA7QUFhRCxLQWxCRDs7QUFvQkEsU0FBS3BLLE9BQUwsR0FBZSxZQUFXO0FBQ3hCLFVBQUkwVSxXQUFKLEVBQWlCO0FBQ2ZBLFFBQUFBLFdBQVcsQ0FBQ3hXLElBQVo7QUFDRDs7QUFFRCxVQUFJc1csS0FBSyxDQUFDeFUsT0FBVixFQUFtQndVLEtBQUssQ0FBQ3hVLE9BQU47QUFDcEIsS0FORDs7QUFRQXlTLElBQUFBLGdCQUFnQixDQUFDLElBQUQsQ0FBaEI7QUFDRCxHQTVERDs7QUE4REFuVixFQUFBQSxLQUFLLENBQUN1WCxVQUFOLEdBQW1CLFVBQVNDLFlBQVQsRUFBdUI7QUFDeEMsUUFBSUEsWUFBWSxDQUFDbEosYUFBakIsRUFBZ0M7QUFDOUIsV0FBS3RKLFdBQUwsR0FBbUIsWUFBVztBQUM1QixlQUFPd1MsWUFBWSxDQUFDeFMsV0FBYixFQUFQO0FBQ0QsT0FGRDs7QUFJQSxXQUFLK1EsYUFBTCxHQUFxQixVQUFTZixPQUFULEVBQWtCelIsT0FBbEIsRUFBMkJrTSxTQUEzQixFQUFzQ25QLFFBQXRDLEVBQWdEO0FBQ25FLFlBQUkwVSxPQUFPLEtBQUtULFNBQWhCLEVBQTJCLE9BQU9BLFNBQVA7QUFDM0IsWUFBSXZILElBQUksR0FBR00sU0FBUyxDQUFDMEgsT0FBRCxDQUFwQjtBQUVBLGVBQU9oVixLQUFLLENBQUNJLGtCQUFOLENBQXlCO0FBQzlCSSxVQUFBQSxJQUFJLEVBQUUsY0FBU1EsS0FBVCxFQUFnQjtBQUNwQixnQkFBSXlXLEVBQUUsR0FBR0QsWUFBWSxDQUFDbEosYUFBYixDQUEyQnRCLElBQTNCLEVBQWlDeUMsU0FBakMsQ0FBVDtBQUNBLGdCQUFJaUksYUFBYSxHQUFHRCxFQUFFLENBQUNqWCxJQUFILENBQVFRLEtBQVIsQ0FBcEI7QUFDQSxtQkFBTztBQUNMSixjQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDZjhXLGdCQUFBQSxhQUFhLENBQUM5VyxJQUFkO0FBQ0Q7QUFISSxhQUFQO0FBS0Q7QUFUNkIsU0FBekIsQ0FBUDtBQVdELE9BZkQ7QUFnQkQ7O0FBRUQsU0FBSzZVLElBQUwsR0FBWSxVQUFTVCxPQUFULEVBQWtCO0FBQzVCLFVBQUlBLE9BQU8sS0FBS1QsU0FBaEIsRUFBMkIsT0FBT0EsU0FBUDtBQUUzQixVQUFJdkgsSUFBSSxHQUFHTSxTQUFTLENBQUMwSCxPQUFELENBQXBCO0FBQ0EsYUFBT2hWLEtBQUssQ0FBQ0ksa0JBQU4sQ0FBeUI7QUFDOUJJLFFBQUFBLElBQUksRUFBRSxjQUFTUSxLQUFULEVBQWdCO0FBQ3BCLGNBQUl5VyxFQUFFLEdBQUdELFlBQVksQ0FBQ3hLLElBQWIsQ0FBa0JBLElBQWxCLENBQVQ7QUFDQSxjQUFJMEssYUFBYSxHQUFHRCxFQUFFLENBQUNqWCxJQUFILENBQVFRLEtBQVIsQ0FBcEI7O0FBRUEsY0FBSXlXLEVBQUUsQ0FBQ3ZLLE9BQVAsRUFBZ0I7QUFDZCxpQkFBSzFDLFFBQUwsR0FBZ0IsVUFBU3FKLENBQVQsRUFBWXRRLE9BQVosRUFBcUI7QUFDbkNrVSxjQUFBQSxFQUFFLENBQUN2SyxPQUFILENBQVdJLFNBQVMsQ0FBQ3VHLENBQUQsQ0FBcEIsRUFBeUJ0USxPQUF6QjtBQUNELGFBRkQ7O0FBSUEsaUJBQUs0SixLQUFMLEdBQWFzSyxFQUFFLENBQUN0SyxLQUFILENBQVNqTSxJQUFULENBQWN1VyxFQUFkLENBQWI7QUFDRDs7QUFFRCxjQUFJQSxFQUFFLENBQUMzSyxxQkFBUCxFQUE4QjtBQUM1QixpQkFBS0EscUJBQUwsR0FBNkIySyxFQUFFLENBQUMzSyxxQkFBSCxDQUF5QjVMLElBQXpCLENBQThCdVcsRUFBOUIsQ0FBN0I7QUFDRDs7QUFFRCxjQUFJQSxFQUFFLENBQUMvSSxhQUFQLEVBQXNCO0FBQ3BCLGlCQUFLNEksY0FBTCxHQUFzQixVQUFTekQsQ0FBVCxFQUFZdFEsT0FBWixFQUFxQndCLEtBQXJCLEVBQTRCO0FBQ2hEMFMsY0FBQUEsRUFBRSxDQUFDL0ksYUFBSCxDQUFpQnBCLFNBQVMsQ0FBQ3VHLENBQUQsQ0FBMUIsRUFBK0J0USxPQUEvQixFQUF3Q3dCLEtBQXhDO0FBQ0QsYUFGRDs7QUFJQSxpQkFBS29JLEtBQUwsR0FBYXNLLEVBQUUsQ0FBQ3RLLEtBQUgsQ0FBU2pNLElBQVQsQ0FBY3VXLEVBQWQsQ0FBYjtBQUNEOztBQUVELGlCQUFPO0FBQ0w3VyxZQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDZjhXLGNBQUFBLGFBQWEsQ0FBQzlXLElBQWQ7QUFDRDtBQUhJLFdBQVA7QUFLRDtBQTlCNkIsT0FBekIsQ0FBUDtBQWdDRCxLQXBDRDs7QUFzQ0F1VSxJQUFBQSxnQkFBZ0IsQ0FBQyxJQUFELENBQWhCO0FBQ0QsR0EvREQ7O0FBaUVBblYsRUFBQUEsS0FBSyxDQUFDbVYsZ0JBQU4sR0FBeUJBLGdCQUF6QjtBQUNBblYsRUFBQUEsS0FBSyxDQUFDdVgsVUFBTixDQUFpQmpLLFNBQWpCLEdBQTZCQSxTQUE3Qjs7QUFFQXROLEVBQUFBLEtBQUssQ0FBQzJYLGVBQU4sR0FBd0IsVUFBU3BCLGVBQVQsRUFBMEI7QUFDaEQsUUFBSXFCLEtBQUssQ0FBQ0MsT0FBTixDQUFjdEIsZUFBZCxDQUFKLEVBQW9DLE9BQU92VyxLQUFLLENBQUMyWCxlQUFOLENBQXNCelcsSUFBdEIsQ0FBMkIsSUFBM0IsRUFBaUMsWUFBVztBQUNyRixhQUFPcVYsZUFBUDtBQUNELEtBRjBDLENBQVA7O0FBSXBDLFFBQUl1QixRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFTckMsSUFBVCxFQUFlO0FBQUUsYUFBT0EsSUFBSSxDQUFDalYsSUFBTCxFQUFQO0FBQXFCLEtBQXJEOztBQUNBLFFBQUl1WCxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFTdEMsSUFBVCxFQUFlO0FBQUUsYUFBT0EsSUFBSSxDQUFDN1UsSUFBTCxFQUFQO0FBQXFCLEtBQXJEOztBQUVBLFFBQUlvWCxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFTQyxTQUFULEVBQW9CO0FBQ2xDLFdBQUt6WCxJQUFMLEdBQVksWUFBVztBQUNyQixZQUFJMFgsS0FBSyxHQUFHRCxTQUFTLENBQUNFLEdBQVYsQ0FBY0wsUUFBZCxDQUFaO0FBQ0EsZUFBTztBQUNMbFgsVUFBQUEsSUFBSSxFQUFFLGdCQUFXO0FBQ2ZzWCxZQUFBQSxLQUFLLENBQUMvVSxPQUFOLENBQWM0VSxRQUFkO0FBQ0Q7QUFISSxTQUFQO0FBS0QsT0FQRDtBQVFELEtBVEQ7O0FBV0EsU0FBS3RDLElBQUwsR0FBWSxVQUFTQyxPQUFULEVBQWtCblMsT0FBbEIsRUFBMkI7QUFDckMsYUFBT3ZELEtBQUssQ0FBQ0ksa0JBQU4sQ0FBeUIsSUFBSTRYLFNBQUosQ0FBY3pCLGVBQWUsR0FBRzRCLEdBQWxCLENBQXNCLFVBQVN0QixVQUFULEVBQW9CO0FBQ3RGLGVBQU9BLFVBQVUsQ0FBQ3BCLElBQVgsQ0FBZ0JDLE9BQWhCLEVBQXlCblMsT0FBekIsQ0FBUDtBQUNELE9BRjZDLENBQWQsQ0FBekIsQ0FBUDtBQUdELEtBSkQ7O0FBTUEsU0FBS2IsT0FBTCxHQUFlLFlBQVc7QUFDeEI2VCxNQUFBQSxlQUFlLEdBQUdwVCxPQUFsQixDQUEwQixVQUFTM0QsQ0FBVCxFQUFZO0FBQ3BDLFlBQUlBLENBQUMsQ0FBQ2tELE9BQU4sRUFBZWxELENBQUMsQ0FBQ2tELE9BQUY7QUFDaEIsT0FGRDtBQUdELEtBSkQ7O0FBTUEsUUFBSTZULGVBQWUsR0FBRzZCLEtBQWxCLENBQXdCLFVBQVM1WSxDQUFULEVBQVk7QUFBRSxhQUFPQSxDQUFDLENBQUN1VyxhQUFUO0FBQXlCLEtBQS9ELENBQUosRUFBc0U7QUFDcEUsV0FBSy9RLFdBQUwsR0FBbUIsWUFBVztBQUU1QixZQUFJNlIsVUFBVSxHQUFHTixlQUFlLEdBQUd2VCxNQUFsQixDQUF5QixVQUFTeEQsQ0FBVCxFQUFZO0FBQUUsaUJBQU9BLENBQUMsQ0FBQ3dGLFdBQVQ7QUFBdUIsU0FBOUQsRUFBZ0UsQ0FBaEUsQ0FBakI7QUFDQSxZQUFJLENBQUM2UixVQUFMLEVBQWlCLE9BQU8sQ0FBUDtBQUVqQixlQUFPQSxVQUFVLENBQUM3UixXQUFYLEVBQVA7QUFDRCxPQU5EOztBQVFBLFdBQUsrUSxhQUFMLEdBQXFCLFVBQVNMLE9BQVQsRUFBa0JuUyxPQUFsQixFQUEyQmtNLFNBQTNCLEVBQXNDblAsUUFBdEMsRUFBZ0Q7QUFDbkUsZUFBT04sS0FBSyxDQUFDSSxrQkFBTixDQUF5QixJQUFJNFgsU0FBSixDQUFjekIsZUFBZSxHQUFHNEIsR0FBbEIsQ0FBc0IsVUFBU3RCLFVBQVQsRUFBb0I7QUFDdEYsaUJBQU9BLFVBQVUsQ0FBQ2QsYUFBWCxDQUF5QkwsT0FBekIsRUFBa0NuUyxPQUFsQyxFQUEyQ2tNLFNBQTNDLEVBQXNEblAsUUFBdEQsQ0FBUDtBQUNELFNBRjZDLENBQWQsQ0FBekIsQ0FBUDtBQUdELE9BSkQ7QUFLRDs7QUFFRDZVLElBQUFBLGdCQUFnQixDQUFDLElBQUQsQ0FBaEI7O0FBRUEsU0FBS1UsaUJBQUwsR0FBeUIsVUFBU2tCLEtBQVQsRUFBZ0JDLE1BQWhCLEVBQXdCO0FBQy9DLFVBQUk3RCxLQUFLLEdBQUdvRCxlQUFlLEVBQTNCO0FBQ0EsVUFBSSxDQUFDcEQsS0FBSyxDQUFDMVQsTUFBWCxFQUFtQixPQUFPc1gsS0FBUDtBQUVuQixVQUFJc0IsZUFBZSxHQUFHbEYsS0FBSyxDQUFDZ0YsR0FBTixDQUFVLFVBQVN0QixVQUFULEVBQXFCO0FBQ25ELFlBQUlBLFVBQVUsQ0FBQ2hCLGlCQUFmLEVBQWtDO0FBQ2hDLGlCQUFPZ0IsVUFBVSxDQUFDaEIsaUJBQVgsQ0FBNkJrQixLQUE3QixFQUFvQ0MsTUFBcEMsQ0FBUDtBQUNELFNBRkQsTUFFTztBQUNMLGlCQUFPRCxLQUFQO0FBQ0Q7QUFDRixPQU5xQixDQUF0Qjs7QUFRQSxVQUFJc0IsZUFBZSxDQUFDNVksTUFBaEIsS0FBMkIsQ0FBL0IsRUFBa0M7QUFDaEMsZUFBTzRZLGVBQWUsQ0FBQyxDQUFELENBQXRCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsWUFBSXhFLENBQUMsR0FBRyxDQUFSO0FBQUEsWUFBV3lFLENBQUMsR0FBRyxDQUFmO0FBQUEsWUFBa0JDLENBQUMsR0FBRyxDQUF0QjtBQUNBLFlBQUloVixPQUFPLEdBQUcsRUFBZDs7QUFFQSxhQUFLLElBQUkvRCxDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUM2WSxlQUFlLENBQUM1WSxNQUFoQyxFQUF3Q0QsQ0FBQyxFQUF6QyxFQUE2QztBQUMzQyxjQUFJc1csR0FBRyxHQUFHdUMsZUFBZSxDQUFDN1ksQ0FBRCxDQUF6QjtBQUNBcVUsVUFBQUEsQ0FBQyxHQUFHQSxDQUFDLEdBQUdpQyxHQUFHLENBQUMsQ0FBRCxDQUFYO0FBQ0F3QyxVQUFBQSxDQUFDLEdBQUdBLENBQUMsR0FBR3hDLEdBQUcsQ0FBQyxDQUFELENBQVg7QUFDQXlDLFVBQUFBLENBQUMsR0FBR0EsQ0FBQyxHQUFHekMsR0FBRyxDQUFDLENBQUQsQ0FBWDs7QUFFQSxjQUFJQSxHQUFHLENBQUMsQ0FBRCxDQUFQLEVBQVk7QUFDVixpQkFBSyxJQUFJMEMsQ0FBVCxJQUFjMUMsR0FBRyxDQUFDLENBQUQsQ0FBakIsRUFBc0I7QUFDcEJ2UyxjQUFBQSxPQUFPLENBQUNpVixDQUFELENBQVAsR0FBYTFDLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBTzBDLENBQVAsQ0FBYjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxlQUFPLENBQ0xsTyxJQUFJLENBQUNjLEtBQUwsQ0FBV3lJLENBQUMsR0FBQ3dFLGVBQWUsQ0FBQzVZLE1BQTdCLENBREssRUFFTDZZLENBQUMsR0FBQ0QsZUFBZSxDQUFDNVksTUFGYixFQUdMOFksQ0FBQyxHQUFDRixlQUFlLENBQUM1WSxNQUhiLEVBSUw4RCxPQUpLLENBQVA7QUFNRDtBQUNGLEtBdENEO0FBdUNELEdBeEZEOztBQTBGQSxNQUFJa1YsS0FBSyxHQUFHLENBQUMsR0FBRCxFQUFNLElBQU4sRUFBWSxHQUFaLEVBQWlCLElBQWpCLEVBQXVCLEdBQXZCLEVBQTRCLEdBQTVCLEVBQWlDLElBQWpDLEVBQXVDLEdBQXZDLEVBQTRDLElBQTVDLEVBQWtELEdBQWxELEVBQXVELElBQXZELEVBQTZELEdBQTdELENBQVo7O0FBQ0EsTUFBSUMsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFTaEQsT0FBVCxFQUFrQjtBQUN4QyxRQUFJTyxRQUFRLEdBQUd3QyxLQUFLLENBQUMvQyxPQUFPLEdBQUcsRUFBWCxDQUFwQjtBQUNBLFFBQUlpRCxTQUFTLEdBQUlyTyxJQUFJLENBQUNjLEtBQUwsQ0FBV3NLLE9BQU8sR0FBRyxFQUFWLEdBQWUsQ0FBMUIsQ0FBakI7QUFFQSxXQUFPTyxRQUFRLEdBQUcwQyxTQUFsQjtBQUNELEdBTEQ7O0FBT0EzWSxFQUFBQSxLQUFLLENBQUM0WSxlQUFOLEdBQXdCLFVBQVNWLEtBQVQsRUFBZ0I7QUFDdEMsUUFBSXhDLE9BQUo7QUFDQSxRQUFJbUQsTUFBTSxHQUFHLEVBQWI7O0FBRUEsU0FBSyxJQUFJNUMsUUFBVCxJQUFxQmlDLEtBQXJCLEVBQTRCO0FBQzFCLFVBQUl4WCxRQUFRLEdBQUdWLEtBQUssQ0FBQ0MsS0FBTixDQUFZWCxJQUFaLENBQWlCLFVBQWpCLEVBQTZCNFksS0FBSyxDQUFDakMsUUFBRCxDQUFsQyxDQUFmO0FBQ0FQLE1BQUFBLE9BQU8sR0FBRzFWLEtBQUssQ0FBQ2dXLGFBQU4sQ0FBb0JDLFFBQXBCLENBQVY7QUFDQTRDLE1BQUFBLE1BQU0sQ0FBQ25ELE9BQUQsQ0FBTixHQUFrQmhWLFFBQWxCO0FBQ0Q7O0FBQUE7O0FBRUQsU0FBSytVLElBQUwsR0FBWSxVQUFTQyxPQUFULEVBQWtCO0FBQzVCLFVBQUk0QyxDQUFDLEdBQUdPLE1BQU0sQ0FBQ25ELE9BQUQsQ0FBZDtBQUNBLFVBQUksQ0FBQzRDLENBQUwsRUFBUSxPQUFPQSxDQUFQO0FBQ1IsYUFBT3RZLEtBQUssQ0FBQ0ksa0JBQU4sQ0FBeUI7QUFDOUJJLFFBQUFBLElBQUksRUFBRThYLENBQUMsQ0FBQzlYO0FBRHNCLE9BQXpCLENBQVA7QUFHRCxLQU5EOztBQVFBMlUsSUFBQUEsZ0JBQWdCLENBQUMsSUFBRCxDQUFoQjtBQUNELEdBbkJEOztBQXFCQW5WLEVBQUFBLEtBQUssQ0FBQzRELG1CQUFOLEdBQTRCLFVBQVNpVixNQUFULEVBQWlCblgsS0FBakIsRUFBd0JDLGdCQUF4QixFQUEwQztBQUVwRSxRQUFJbVgsU0FBUyxHQUFHLEVBQWhCOztBQUVGLGFBQVNDLG9CQUFULENBQThCQyxNQUE5QixFQUFzQztBQUNsQyxVQUFJQyxhQUFhLEdBQUlsWixNQUFNLENBQUNtWixJQUFQLENBQVlGLE1BQVosQ0FBckI7QUFDQSxVQUFJaE4sR0FBRyxHQUFHaU4sYUFBYSxDQUFDeFosTUFBeEI7QUFDQSxVQUFJMFosS0FBSyxHQUFHLElBQUlDLFVBQUosQ0FBZ0JwTixHQUFoQixDQUFaOztBQUNBLFdBQUssSUFBSXhNLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUd3TSxHQUFwQixFQUF5QnhNLENBQUMsRUFBMUIsRUFBcUM7QUFDakMsWUFBSTZaLEtBQUssR0FBR0osYUFBYSxDQUFDSyxVQUFkLENBQXlCOVosQ0FBekIsQ0FBWjtBQUNBMlosUUFBQUEsS0FBSyxDQUFDM1osQ0FBRCxDQUFMLEdBQVc2WixLQUFYO0FBQ0g7O0FBQ0QsYUFBT0YsS0FBSyxDQUFDMVUsTUFBYjtBQUNIOztBQUFBO0FBQ0MvQyxJQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0EsS0FBZDs7QUFFQSxTQUFLLElBQUlsQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFDLEVBQWxCLEVBQXNCQSxDQUFDLEVBQXZCLEVBQTJCO0FBQ3pCLE9BQUMsWUFBVztBQUNWLFlBQUkrWixLQUFLLEdBQUcvWixDQUFaO0FBQ0EsWUFBSWdhLE9BQU8sR0FBQyxJQUFJeFYsY0FBSixFQUFaO0FBQ0EsWUFBSWlTLFFBQVEsR0FBR3lDLGlCQUFpQixDQUFDbFosQ0FBRCxDQUFoQztBQUNBLFlBQUlnTSxJQUFJLEdBQUdxTixNQUFNLENBQUM1QyxRQUFELENBQWpCO0FBQ0EsWUFBSXdELE9BQU8sR0FBR2pPLElBQUksQ0FBQ2tPLEtBQUwsQ0FBVyxHQUFYLEVBQWdCLENBQWhCLENBQWQ7QUFFQWhZLFFBQUFBLEtBQUssQ0FBQzZDLGVBQU4sQ0FBc0J3VSxvQkFBb0IsQ0FBQ1UsT0FBRCxDQUExQyxFQUFxRCxVQUFTaFYsTUFBVCxFQUFpQjtBQUNwRXFVLFVBQUFBLFNBQVMsQ0FBQ1MsS0FBRCxDQUFULEdBQW1COVUsTUFBbkI7QUFDRCxTQUZELEVBRUcsVUFBU0osR0FBVCxFQUFjO0FBQ2YvQyxVQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBYyxXQUFXOEMsR0FBWCxHQUFpQixXQUFqQixHQUErQmtWLEtBQTdDO0FBQ0QsU0FKRDtBQU1ELE9BYkQ7QUFjRDs7QUFBQTs7QUFFRCxTQUFLOUQsSUFBTCxHQUFZLFVBQVNULE9BQVQsRUFBa0I7QUFDNUIsVUFBSTJFLE1BQU0sR0FBR2pZLEtBQUssQ0FBQ2tELGtCQUFOLEVBQWI7QUFDQSxhQUFPNUUsS0FBSyxDQUFDSSxrQkFBTixDQUF5QjtBQUM5QkksUUFBQUEsSUFBSSxFQUFFLGdCQUFXO0FBQ2YsY0FBSW1aLE1BQU0sR0FBR2pZLEtBQUssQ0FBQ2tELGtCQUFOLEVBQWI7QUFDQStVLFVBQUFBLE1BQU0sQ0FBQ2xWLE1BQVAsR0FBZ0JxVSxTQUFTLENBQUM5RCxPQUFELENBQXpCO0FBQ0EyRSxVQUFBQSxNQUFNLENBQUM5VSxPQUFQLENBQWVsRCxnQkFBZ0IsQ0FBQ21ELFlBQWhDO0FBQ0E2VSxVQUFBQSxNQUFNLENBQUM1VSxLQUFQLENBQWEsQ0FBYjtBQUNBLGlCQUFPO0FBQ0xuRSxZQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDZitZLGNBQUFBLE1BQU0sQ0FBQy9ZLElBQVAsQ0FBWSxDQUFaO0FBQ0ErWSxjQUFBQSxNQUFNLENBQUMxVSxVQUFQLENBQWtCdEQsZ0JBQWdCLENBQUNtRCxZQUFuQztBQUNEO0FBSkksV0FBUDtBQU1EO0FBWjZCLE9BQXpCLENBQVA7QUFjRCxLQWhCRDs7QUFrQkFxUSxJQUFBQSxnQkFBZ0IsQ0FBQyxJQUFELENBQWhCO0FBRUQsR0FyREQ7O0FBdURBblYsRUFBQUEsS0FBSyxDQUFDQyxLQUFOLENBQVlKLFFBQVosQ0FBcUIsWUFBckIsRUFBbUMsVUFBU2dYLFVBQVQsRUFBcUI7QUFDdEQsUUFBSUEsVUFBVSxDQUFDcEIsSUFBZixFQUFxQixPQUFPb0IsVUFBUDtBQUN0QixHQUZEO0FBSUE3VyxFQUFBQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUosUUFBWixDQUFxQixZQUFyQixFQUFtQyxVQUFTK1osY0FBVCxFQUF5QjtBQUMxRCxRQUFJQSxjQUFjLENBQUM1TSxJQUFuQixFQUF5QjtBQUN2QixhQUFPLElBQUloTixLQUFLLENBQUN1WCxVQUFWLENBQXFCcUMsY0FBckIsQ0FBUDtBQUNEO0FBQ0YsR0FKRDtBQU1BNVosRUFBQUEsS0FBSyxDQUFDQyxLQUFOLENBQVlKLFFBQVosQ0FBcUIsWUFBckIsRUFBbUMsVUFBU2EsUUFBVCxFQUFtQjtBQUNwRCxRQUFJQSxRQUFRLENBQUNGLElBQWIsRUFBbUI7QUFDakIsYUFBTztBQUNMaVYsUUFBQUEsSUFBSSxFQUFFLGdCQUFVO0FBQ2QsaUJBQU8vVSxRQUFQO0FBQ0Q7QUFISSxPQUFQO0FBS0Q7QUFDRixHQVJEO0FBVUEsTUFBSW1aLFFBQVEsR0FBRztBQUNiclosSUFBQUEsSUFBSSxFQUFFLGdCQUFVO0FBQ2QsYUFBTztBQUFDSSxRQUFBQSxJQUFJLEVBQUUsZ0JBQVUsQ0FBRTtBQUFuQixPQUFQO0FBQ0Q7QUFIWSxHQUFmO0FBTUFaLEVBQUFBLEtBQUssQ0FBQ0MsS0FBTixDQUFZSixRQUFaLENBQXFCLFlBQXJCLEVBQW1DLFVBQVN1QixHQUFULEVBQWM7QUFDL0MsUUFBSSxPQUFPQSxHQUFQLEtBQWUsVUFBbkIsRUFBK0I7QUFDN0IsYUFBTztBQUNMcVUsUUFBQUEsSUFBSSxFQUFFLGNBQVM1QixDQUFULEVBQVk7QUFDaEIsaUJBQU96UyxHQUFHLENBQUN5UyxDQUFELENBQUgsSUFBVWdHLFFBQWpCO0FBQ0Q7QUFISSxPQUFQO0FBS0Q7QUFDRixHQVJEO0FBVUE3WixFQUFBQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUosUUFBWixDQUFxQixZQUFyQixFQUFtQyxVQUFTc1QsS0FBVCxFQUFnQjtBQUNqRCxRQUFJQSxLQUFLLFlBQVl5RSxLQUFyQixFQUE0QjtBQUMxQixhQUFPLElBQUk1WCxLQUFLLENBQUMyWCxlQUFWLENBQTBCeEUsS0FBMUIsQ0FBUDtBQUNEO0FBQ0YsR0FKRDtBQU1BblQsRUFBQUEsS0FBSyxDQUFDQyxLQUFOLENBQVlKLFFBQVosQ0FBcUIsWUFBckIsRUFBbUMsVUFBU2lhLFdBQVQsRUFBc0I7QUFDdkQsUUFBSSxRQUFPQSxXQUFQLE1BQXVCLFFBQXZCLElBQW1DQSxXQUFXLENBQUNDLFdBQVosS0FBNEIxUyxNQUFuRSxFQUEyRTtBQUN6RSxhQUFPLElBQUlySCxLQUFLLENBQUM0WSxlQUFWLENBQTBCa0IsV0FBMUIsQ0FBUDtBQUNEO0FBQ0YsR0FKRDs7QUFNQTlaLEVBQUFBLEtBQUssQ0FBQ2dhLFNBQU4sR0FBa0IsWUFBVztBQUMzQixXQUFPLFVBQVN2RSxJQUFULEVBQWU7QUFDbEIsYUFBT3pWLEtBQUssQ0FBQ0ksa0JBQU4sQ0FBeUI7QUFDNUJJLFFBQUFBLElBQUksRUFBRSxnQkFBVztBQUNiLGNBQUl5WixXQUFXLEdBQUc7QUFDZEMsWUFBQUEsTUFBTSxFQUFFLGtCQUFXLENBQUUsQ0FEUDtBQUVkQyxZQUFBQSxNQUFNLEVBQUUsa0JBQVcsQ0FBRTtBQUZQLFdBQWxCO0FBS0EsY0FBSTNFLFlBQVksR0FBR0MsSUFBSSxDQUFDalYsSUFBTCxDQUFVeVosV0FBVixDQUFuQjtBQUNBQSxVQUFBQSxXQUFXLENBQUNDLE1BQVo7QUFDQSxpQkFBTztBQUNIdFosWUFBQUEsSUFBSSxFQUFFLGdCQUFXO0FBQ2JxWixjQUFBQSxXQUFXLENBQUNFLE1BQVo7QUFDQTNFLGNBQUFBLFlBQVksQ0FBQzVVLElBQWI7QUFDSDtBQUpFLFdBQVA7QUFNSDtBQWYyQixPQUF6QixDQUFQO0FBaUJILEtBbEJEO0FBbUJELEdBcEJEO0FBc0JDLENBdGZEOzs7QUNBQVosS0FBSyxDQUFDRyxPQUFOLEdBQWdCSCxLQUFLLENBQUNHLE9BQU4sSUFBaUIsRUFBakM7O0FBRUEsSUFBSWlhLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBU3JVLEtBQVQsRUFBZ0I0QyxXQUFoQixFQUE2QjBSLFNBQTdCLEVBQXdDQyxHQUF4QyxFQUE2QztBQUNsRSxPQUFLeFYsWUFBTCxHQUFvQjZELFdBQXBCO0FBQ0EsT0FBSzRSLE1BQUwsR0FBY3hVLEtBQWQ7QUFDQSxPQUFLeVUsSUFBTCxHQUFZRixHQUFaO0FBQ0EsT0FBS0csT0FBTCxHQUFlSixTQUFmO0FBQ0QsQ0FMRDs7QUFPQUQsZ0JBQWdCLENBQUNsWSxTQUFqQixDQUEyQjFCLElBQTNCLEdBQWtDLFlBQVc7QUFDM0MsTUFBSW1JLFdBQVcsR0FBRyxLQUFLN0QsWUFBdkI7QUFDQSxNQUFJd1YsR0FBRyxHQUFHLEtBQUtFLElBQWY7QUFDQSxNQUFJRSxTQUFTLEdBQUdKLEdBQUcsQ0FBQzdhLE1BQXBCO0FBQ0EsTUFBSWtiLFdBQVcsR0FBRyxFQUFsQjtBQUNBLE1BQUlDLFVBQVUsR0FBRyxFQUFqQjs7QUFHQSxPQUFLLElBQUlwYixDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUNrYixTQUFoQixFQUEyQmxiLENBQUMsRUFBNUIsRUFBZ0M7QUFDOUJtYixJQUFBQSxXQUFXLENBQUNuYixDQUFELENBQVgsR0FBaUIsQ0FBakI7QUFDQW9iLElBQUFBLFVBQVUsQ0FBQ3BiLENBQUQsQ0FBVixHQUFnQixDQUFoQjtBQUNBOGEsSUFBQUEsR0FBRyxDQUFDOWEsQ0FBRCxDQUFILENBQU80UCxJQUFQLEdBQWNwUCxLQUFLLENBQUNDLEtBQU4sQ0FBWVgsSUFBWixDQUFpQixVQUFqQixFQUE2QmdiLEdBQUcsQ0FBQzlhLENBQUQsQ0FBSCxDQUFPNFAsSUFBcEMsQ0FBZDtBQUNEOztBQUVELE1BQUl5TCxLQUFLLEdBQUcsQ0FBWjtBQUNBLE1BQUlSLFNBQVMsR0FBRyxLQUFLSSxPQUFyQjtBQUNBLE1BQUl2VixnQkFBZ0IsR0FBRyxJQUFJbEYsS0FBSyxDQUFDRyxPQUFOLENBQWN1SixPQUFsQixDQUEwQixLQUFLNlEsTUFBL0IsRUFBdUM1UixXQUF2QyxFQUFvRCxVQUFTZ0IsS0FBVCxFQUFnQkMsQ0FBaEIsRUFBbUI7QUFDNUYsUUFBSWtSLE1BQU0sR0FBR2xSLENBQUMsR0FBQ2lSLEtBQWY7O0FBQ0EsU0FBSyxJQUFJcmIsQ0FBQyxHQUFDLENBQVgsRUFBY0EsQ0FBQyxHQUFDa2IsU0FBaEIsRUFBMkJsYixDQUFDLEVBQTVCLEVBQWdDO0FBQzlCcWIsTUFBQUEsS0FBSyxHQUFHalIsQ0FBUixDQUQ4QixDQUU5Qjs7QUFDQWdSLE1BQUFBLFVBQVUsQ0FBQ3BiLENBQUQsQ0FBVixHQUFnQm9iLFVBQVUsQ0FBQ3BiLENBQUQsQ0FBVixHQUFnQnNiLE1BQU0sR0FBR1IsR0FBRyxDQUFDOWEsQ0FBRCxDQUFILENBQU84TixTQUFQLENBQWlCekgsS0FBakIsQ0FBdUIsSUFBdkIsRUFBNkI4VSxXQUE3QixDQUF6QztBQUVBLFVBQUlJLEtBQUssR0FBR0gsVUFBVSxDQUFDcGIsQ0FBRCxDQUFWLEdBQWdCLENBQTVCO0FBQ0EsVUFBSXViLEtBQUssR0FBRyxDQUFaLEVBQWVBLEtBQUs7QUFDcEJKLE1BQUFBLFdBQVcsQ0FBQ25iLENBQUQsQ0FBWCxHQUFpQjhhLEdBQUcsQ0FBQzlhLENBQUQsQ0FBSCxDQUFPNFAsSUFBUCxDQUFZMkwsS0FBWixDQUFqQjtBQUNEOztBQUFBO0FBRUQsV0FBT1YsU0FBUyxDQUFDeFUsS0FBVixDQUFnQixJQUFoQixFQUFzQjhVLFdBQXRCLENBQVA7QUFDRCxHQWJzQixDQUF2QjtBQWNBLFNBQU87QUFDTC9aLElBQUFBLElBQUksRUFBRSxnQkFBVztBQUNmc0UsTUFBQUEsZ0JBQWdCLENBQUNELFVBQWpCLENBQTRCMEQsV0FBVyxDQUFDN0QsWUFBeEM7QUFDRDtBQUhJLEdBQVA7QUFLRCxDQW5DRDs7QUFxQ0E5RSxLQUFLLENBQUNJLGtCQUFOLENBQXlCZ2EsZ0JBQWdCLENBQUNsWSxTQUExQztBQUVBbEMsS0FBSyxDQUFDRyxPQUFOLENBQWNOLFFBQWQsQ0FBdUIsVUFBdkIsRUFBbUMsVUFBU2tHLEtBQVQsRUFBZ0JxQyxJQUFoQixFQUFzQjdFLE9BQXRCLEVBQStCO0FBQ2hFLFNBQU8sSUFBSTZXLGdCQUFKLENBQXFCclUsS0FBckIsRUFBNEJxQyxJQUFJLENBQUN2RyxpQkFBakMsRUFBb0QwQixPQUFPLENBQUN3RSxNQUE1RCxFQUFvRXhFLE9BQU8sQ0FBQytXLEdBQTVFLENBQVA7QUFDRCxDQUZEOzs7QUNoREEsQ0FBQyxZQUFXO0FBQ1p0YSxFQUFBQSxLQUFLLENBQUNzSyxJQUFOLEdBQWF0SyxLQUFLLENBQUNzSyxJQUFOLElBQWMsRUFBM0I7O0FBRUF0SyxFQUFBQSxLQUFLLENBQUNzSyxJQUFOLENBQVcwUSxlQUFYLEdBQTZCLFVBQVN6WCxPQUFULEVBQWtCMFgsR0FBbEIsRUFBdUI7QUFDbEQsV0FBTyxRQUFRQSxHQUFSLEdBQWMxWCxPQUFPLENBQUMyWCxjQUE3QjtBQUNELEdBRkQ7O0FBSUEsTUFBSUMscUNBQXFDLEdBQUcsU0FBeENBLHFDQUF3QyxDQUFTaEksS0FBVCxFQUFnQjtBQUMxREEsSUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNnRixHQUFOLENBQVUsVUFBU2lELElBQVQsRUFBZTtBQUMvQixVQUFJcFosQ0FBQyxHQUFHcVoscUJBQXFCLENBQUNELElBQUksQ0FBQ3BaLENBQU4sQ0FBN0I7QUFDQSxVQUFJc1osU0FBUyxHQUFHQyw0QkFBNEIsQ0FBQ0gsSUFBSSxDQUFDcFosQ0FBTixDQUE1QztBQUNBLGFBQU87QUFDTHdaLFFBQUFBLElBQUksRUFBRXhaLENBQUMsQ0FBQ29aLElBQUksQ0FBQ0ksSUFBTixDQURGO0FBRUxDLFFBQUFBLEdBQUcsRUFBRXpaLENBQUMsQ0FBQ29aLElBQUksQ0FBQ0ssR0FBTixDQUZEO0FBR0x6WixRQUFBQSxDQUFDLEVBQUVzWjtBQUhFLE9BQVA7QUFLRCxLQVJPLENBQVI7QUFVQSxXQUFPLFVBQVNJLENBQVQsRUFBWTtBQUNqQixVQUFJTixJQUFJLEdBQUdqSSxLQUFLLENBQUN3SSxJQUFOLENBQVcsVUFBU0MsQ0FBVCxFQUFZO0FBQ2hDLGVBQU9GLENBQUMsSUFBSUUsQ0FBQyxDQUFDSixJQUFQLEtBQWdCLENBQUNJLENBQUMsQ0FBQ0gsR0FBSCxJQUFVQyxDQUFDLElBQUlFLENBQUMsQ0FBQ0gsR0FBakMsQ0FBUDtBQUNELE9BRlUsQ0FBWDtBQUlBLFVBQUksQ0FBQ0wsSUFBTCxFQUFXLE9BQU8sQ0FBUDtBQUNYLGFBQU9BLElBQUksQ0FBQ3BaLENBQUwsQ0FBTzBaLENBQVAsQ0FBUDtBQUNELEtBUEQ7QUFRRCxHQW5CRDs7QUFxQkEsTUFBSUcsOEJBQThCLEdBQUcsU0FBakNBLDhCQUFpQyxDQUFTMUksS0FBVCxFQUFnQjtBQUNuREEsSUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNnRixHQUFOLENBQVUsVUFBU2lELElBQVQsRUFBZTtBQUMvQixhQUFPO0FBQ0xJLFFBQUFBLElBQUksRUFBRUosSUFBSSxDQUFDSSxJQUROO0FBRUxDLFFBQUFBLEdBQUcsRUFBRUwsSUFBSSxDQUFDSyxHQUZMO0FBR0x6WixRQUFBQSxDQUFDLEVBQUVxWixxQkFBcUIsQ0FBQ0QsSUFBSSxDQUFDcFosQ0FBTjtBQUhuQixPQUFQO0FBS0QsS0FOTyxDQUFSO0FBUUEsV0FBTyxVQUFTYyxDQUFULEVBQVk7QUFDakIsVUFBSXNZLElBQUksR0FBR2pJLEtBQUssQ0FBQ3dJLElBQU4sQ0FBVyxVQUFTQyxDQUFULEVBQVk7QUFDaEMsZUFBTzlZLENBQUMsSUFBSThZLENBQUMsQ0FBQ0osSUFBUCxLQUFnQixDQUFDSSxDQUFDLENBQUNILEdBQUgsSUFBVTNZLENBQUMsSUFBSThZLENBQUMsQ0FBQ0gsR0FBakMsQ0FBUDtBQUNELE9BRlUsQ0FBWDtBQUlBLFVBQUksQ0FBQ0wsSUFBTCxFQUFXLE9BQU8sQ0FBUDtBQUNYLGFBQU9BLElBQUksQ0FBQ3BaLENBQUwsQ0FBT2MsQ0FBUCxDQUFQO0FBQ0QsS0FQRDtBQVFELEdBakJEOztBQW1CQSxNQUFJeVksNEJBQTRCLEdBQUcsU0FBL0JBLDRCQUErQixDQUFTcEksS0FBVCxFQUFnQjtBQUNqRCxRQUFJQSxLQUFLLENBQUMxVCxNQUFOLElBQWdCLENBQXBCLEVBQXVCO0FBQ3JCLFVBQUltSCxDQUFDLEdBQUd1TSxLQUFLLENBQUMsQ0FBRCxDQUFiO0FBQ0EsVUFBSXhNLENBQUMsR0FBR3dNLEtBQUssQ0FBQyxDQUFELENBQWI7QUFDQSxhQUFPLFVBQVN1SSxDQUFULEVBQVk7QUFDakIsZUFBTyxDQUFDQSxDQUFDLEdBQUcvVSxDQUFMLElBQVFDLENBQWYsQ0FEaUIsQ0FDRTtBQUNwQixPQUZEO0FBR0QsS0FORCxNQU1PLElBQUl1TSxLQUFLLENBQUMxVCxNQUFOLElBQWdCLENBQXBCLEVBQXVCO0FBQzVCLFVBQUlrSCxDQUFDLEdBQUd3TSxLQUFLLENBQUMsQ0FBRCxDQUFiO0FBQ0EsVUFBSXZNLENBQUMsR0FBR3VNLEtBQUssQ0FBQyxDQUFELENBQWI7QUFDQSxVQUFJd0QsQ0FBQyxHQUFHeEQsS0FBSyxDQUFDLENBQUQsQ0FBYjs7QUFFQSxVQUFJeE0sQ0FBQyxLQUFLLENBQVYsRUFBYTtBQUNYLGVBQU80VSw0QkFBNEIsQ0FBQyxDQUFDNUUsQ0FBRCxFQUFHL1AsQ0FBSCxDQUFELENBQW5DO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBTyxVQUFTOFUsQ0FBVCxFQUFZO0FBQ2pCLGlCQUFPLEtBQUcvRSxDQUFDLEdBQUMrRSxDQUFMLEtBQVcsQ0FBQzlVLENBQUQsR0FBSzBELElBQUksQ0FBQ3dSLElBQUwsQ0FBVWxWLENBQUMsR0FBQ0EsQ0FBRixHQUFNLElBQUVELENBQUYsSUFBS2dRLENBQUMsR0FBQytFLENBQVAsQ0FBaEIsQ0FBaEIsQ0FBUDtBQUNELFNBRkQ7QUFHRDtBQUNGO0FBQ0YsR0FwQkQ7O0FBdUJBLE1BQUlMLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBd0IsQ0FBU2xJLEtBQVQsRUFBZ0I7QUFDMUMsUUFBSUEsS0FBSyxDQUFDMVQsTUFBTixJQUFnQixDQUFwQixFQUF1QjtBQUNyQixVQUFJbUgsQ0FBQyxHQUFHdU0sS0FBSyxDQUFDLENBQUQsQ0FBYjtBQUNBLFVBQUl4TSxDQUFDLEdBQUd3TSxLQUFLLENBQUMsQ0FBRCxDQUFiO0FBQ0EsYUFBTyxVQUFTclEsQ0FBVCxFQUFZO0FBQ2pCLGVBQU84RCxDQUFDLEdBQUM5RCxDQUFGLEdBQU02RCxDQUFiO0FBQ0QsT0FGRDtBQUdELEtBTkQsTUFNTyxJQUFJd00sS0FBSyxDQUFDMVQsTUFBTixJQUFnQixDQUFwQixFQUF1QjtBQUM1QixVQUFJa0gsQ0FBQyxHQUFHd00sS0FBSyxDQUFDLENBQUQsQ0FBYjtBQUNBLFVBQUl2TSxDQUFDLEdBQUd1TSxLQUFLLENBQUMsQ0FBRCxDQUFiO0FBQ0EsVUFBSXdELENBQUMsR0FBR3hELEtBQUssQ0FBQyxDQUFELENBQWI7QUFDQSxhQUFPLFVBQVNyUSxDQUFULEVBQVk7QUFDakIsZUFBTzZELENBQUMsR0FBQzdELENBQUYsR0FBSUEsQ0FBSixHQUFROEQsQ0FBQyxHQUFDOUQsQ0FBVixHQUFjNlQsQ0FBckI7QUFDRCxPQUZEO0FBR0Q7QUFDRixHQWZEOztBQWlCQSxNQUFJb0YsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBUzVJLEtBQVQsRUFBZ0I2SSxjQUFoQixFQUFnQztBQUM5QyxRQUFJbFosQ0FBQyxHQUFHa1osY0FBYyxDQUFDLENBQUQsQ0FBdEI7QUFDQSxRQUFJTixDQUFDLEdBQUdNLGNBQWMsQ0FBQyxDQUFELENBQXRCOztBQUVBLFFBQUk3SSxLQUFLLENBQUMxVCxNQUFOLElBQWdCLENBQXBCLEVBQXVCO0FBQ3JCLFVBQUlrWCxDQUFDLEdBQUcsQ0FBQ3hELEtBQUssQ0FBQyxDQUFELENBQU4sR0FBVXJRLENBQVYsR0FBYzRZLENBQXRCO0FBQ0EsYUFBTyxDQUFDL0UsQ0FBRCxFQUFJeEQsS0FBSyxDQUFDLENBQUQsQ0FBVCxDQUFQO0FBQ0QsS0FIRCxNQUdPLElBQUlBLEtBQUssQ0FBQzFULE1BQU4sSUFBZ0IsQ0FBcEIsRUFBdUI7QUFDNUIsVUFBSWtYLENBQUMsR0FBRytFLENBQUMsR0FBRzVZLENBQUMsR0FBQ3FRLEtBQUssQ0FBQyxDQUFELENBQVgsR0FBaUJyUSxDQUFDLEdBQUNBLENBQUYsR0FBSXFRLEtBQUssQ0FBQyxDQUFELENBQVQsR0FBYSxDQUF0QztBQUNBLGFBQU8sQ0FBQ3dELENBQUQsRUFBSXhELEtBQUssQ0FBQyxDQUFELENBQVQsRUFBY0EsS0FBSyxDQUFDLENBQUQsQ0FBTCxHQUFTLENBQXZCLENBQVA7QUFDRDtBQUNGLEdBWEQ7O0FBYUFuVCxFQUFBQSxLQUFLLENBQUNzSyxJQUFOLENBQVcyUixrQkFBWCxHQUFnQyxVQUFTMVksT0FBVCxFQUFrQjtBQUNoRCxRQUFJMlksV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBU0MsU0FBVCxFQUFvQjtBQUNwQyxVQUFJNUQsQ0FBQyxHQUFHNEQsU0FBUyxDQUFDNUQsQ0FBbEI7QUFDQWhWLE1BQUFBLE9BQU8sQ0FBQzZZLFVBQVIsQ0FBbUJqWixPQUFuQixDQUEyQixVQUFTa1osU0FBVCxFQUFvQjtBQUM3QyxZQUFJQSxTQUFTLEtBQUtGLFNBQWQsSUFBMkJFLFNBQVMsQ0FBQy9ELENBQVYsSUFBZTZELFNBQVMsQ0FBQzdELENBQXhELEVBQTJEO0FBQ3pELGNBQUkrRCxTQUFTLENBQUMvRCxDQUFWLEdBQWM2RCxTQUFTLENBQUM3RCxDQUFWLEdBQWNDLENBQWhDLEVBQW1DO0FBQ2pDLGdCQUFJK0QsSUFBSSxHQUFHRCxTQUFTLENBQUMvRCxDQUFWLEdBQWM2RCxTQUFTLENBQUM3RCxDQUFuQztBQUNBLGdCQUFJZ0UsSUFBSSxHQUFHL0QsQ0FBWCxFQUFjQSxDQUFDLEdBQUcrRCxJQUFKO0FBQ2Y7QUFDRjtBQUNGLE9BUEQ7QUFTQSxhQUFPO0FBQ0xoRSxRQUFBQSxDQUFDLEVBQUU2RCxTQUFTLENBQUM3RCxDQURSO0FBRUxDLFFBQUFBLENBQUMsRUFBRUEsQ0FGRTtBQUdMMUUsUUFBQUEsQ0FBQyxFQUFFdkosSUFBSSxDQUFDaVMsR0FBTCxDQUFTSixTQUFTLENBQUN0SSxDQUFuQixFQUFzQixDQUF0QjtBQUhFLE9BQVA7QUFLRCxLQWhCRDs7QUFrQkF0USxJQUFBQSxPQUFPLENBQUM2WSxVQUFSLEdBQXFCN1ksT0FBTyxDQUFDNlksVUFBUixDQUFtQmpFLEdBQW5CLENBQXVCK0QsV0FBdkIsQ0FBckI7QUFFQSxRQUFJTSxlQUFlLEdBQUdqWixPQUFPLENBQUM2WSxVQUFSLENBQW1CLENBQW5CLEVBQXNCOUQsQ0FBNUM7QUFDQSxRQUFJbUUsS0FBSyxHQUFHLENBQUM7QUFDWGpCLE1BQUFBLElBQUksRUFBRSxDQURLO0FBRVhDLE1BQUFBLEdBQUcsRUFBRWUsZUFGTTtBQUdYeGEsTUFBQUEsQ0FBQyxFQUFFLENBQUNoQyxLQUFLLENBQUNzSyxJQUFOLENBQVcwUSxlQUFYLENBQTJCelgsT0FBM0IsRUFBb0NBLE9BQU8sQ0FBQzBYLEdBQTVDLENBQUQ7QUFIUSxLQUFELENBQVo7O0FBTUEsU0FBSyxJQUFJemIsQ0FBQyxHQUFDLENBQVgsRUFBY0EsQ0FBQyxHQUFDK0QsT0FBTyxDQUFDNlksVUFBUixDQUFtQjNjLE1BQW5DLEVBQTJDRCxDQUFDLEVBQTVDLEVBQWdEO0FBQzlDLFVBQUlrZCxTQUFTLEdBQUduWixPQUFPLENBQUM2WSxVQUFSLENBQW1CNWMsQ0FBbkIsQ0FBaEI7QUFDQSxVQUFJbWQsY0FBYyxHQUFHcFosT0FBTyxDQUFDNlksVUFBUixDQUFtQjVjLENBQUMsR0FBQyxDQUFyQixDQUFyQjtBQUVBLFVBQUlvZCxnQkFBZ0IsR0FBRzVjLEtBQUssQ0FBQ3NLLElBQU4sQ0FBVzBRLGVBQVgsQ0FBMkJ6WCxPQUEzQixFQUNyQi9ELENBQUMsSUFBSSxDQUFMLEdBQVMrRCxPQUFPLENBQUMwWCxHQUFqQixHQUF1QjFYLE9BQU8sQ0FBQzZZLFVBQVIsQ0FBbUI1YyxDQUFDLEdBQUMsQ0FBckIsRUFBd0JxVSxDQUQxQixDQUF2QjtBQUVBLFVBQUlnSixlQUFlLEdBQUc3YyxLQUFLLENBQUNzSyxJQUFOLENBQVcwUSxlQUFYLENBQTJCelgsT0FBM0IsRUFBb0NtWixTQUFTLENBQUM3SSxDQUE5QyxDQUF0QjtBQUVBLFVBQUlqTixDQUFDLEdBQUcsQ0FBQ2lXLGVBQWUsR0FBR0QsZ0JBQW5CLElBQXVDRixTQUFTLENBQUNuRSxDQUF6RDtBQUNBLFVBQUk1UixDQUFDLEdBQUdpVyxnQkFBZ0IsR0FBR2hXLENBQUMsR0FBRzhWLFNBQVMsQ0FBQ3BFLENBQXpDLENBVDhDLENBVzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQUlvRSxTQUFTLENBQUNuRSxDQUFWLEtBQWdCLENBQXBCLEVBQXVCO0FBQ3JCa0UsUUFBQUEsS0FBSyxDQUFDcGQsSUFBTixDQUFXO0FBQ1RtYyxVQUFBQSxJQUFJLEVBQUVrQixTQUFTLENBQUNwRSxDQURQO0FBRVRtRCxVQUFBQSxHQUFHLEVBQUVrQixjQUFjLElBQUlBLGNBQWMsQ0FBQ3JFLENBRjdCO0FBR1R0VyxVQUFBQSxDQUFDLEVBQUUsQ0FBQzZhLGVBQUQ7QUFITSxTQUFYO0FBS0QsT0FORCxNQU1PO0FBQ0xKLFFBQUFBLEtBQUssQ0FBQ3BkLElBQU4sQ0FBVztBQUNUbWMsVUFBQUEsSUFBSSxFQUFFa0IsU0FBUyxDQUFDcEUsQ0FEUDtBQUVUbUQsVUFBQUEsR0FBRyxFQUFFaUIsU0FBUyxDQUFDcEUsQ0FBVixHQUFjb0UsU0FBUyxDQUFDbkUsQ0FGcEI7QUFHVHZXLFVBQUFBLENBQUMsRUFBRSxDQUFDMkUsQ0FBRCxFQUFJQyxDQUFKO0FBSE0sU0FBWDtBQU1BNlYsUUFBQUEsS0FBSyxDQUFDcGQsSUFBTixDQUFXO0FBQ1RtYyxVQUFBQSxJQUFJLEVBQUVrQixTQUFTLENBQUNwRSxDQUFWLEdBQWNvRSxTQUFTLENBQUNuRSxDQURyQjtBQUVUa0QsVUFBQUEsR0FBRyxFQUFFa0IsY0FBYyxJQUFJQSxjQUFjLENBQUNyRSxDQUY3QjtBQUdUdFcsVUFBQUEsQ0FBQyxFQUFFLENBQUM2YSxlQUFEO0FBSE0sU0FBWDtBQUtEO0FBQ0Y7O0FBQUE7QUFFRCxRQUFJQyxlQUFlLEdBQUcsRUFBdEI7QUFDQSxRQUFJZCxjQUFjLEdBQUcsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFyQjs7QUFFQSxTQUFLLElBQUl4YyxDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUNpZCxLQUFLLENBQUNoZCxNQUF0QixFQUE4QkQsQ0FBQyxFQUEvQixFQUFtQztBQUNqQyxVQUFJNGIsSUFBSSxHQUFHcUIsS0FBSyxDQUFDamQsQ0FBRCxDQUFoQjtBQUNBLFVBQUl1ZCxRQUFRLEdBQUdoQixTQUFTLENBQUNYLElBQUksQ0FBQ3BaLENBQU4sRUFBU2dhLGNBQVQsQ0FBeEI7QUFFQWMsTUFBQUEsZUFBZSxDQUFDemQsSUFBaEIsQ0FBcUI7QUFDbkJtYyxRQUFBQSxJQUFJLEVBQUVKLElBQUksQ0FBQ0ksSUFEUTtBQUVuQkMsUUFBQUEsR0FBRyxFQUFFTCxJQUFJLENBQUNLLEdBRlM7QUFHbkJ6WixRQUFBQSxDQUFDLEVBQUUrWixTQUFTLENBQUNYLElBQUksQ0FBQ3BaLENBQU4sRUFBU2dhLGNBQVQ7QUFITyxPQUFyQjtBQU1BQSxNQUFBQSxjQUFjLEdBQUcsQ0FBQ1osSUFBSSxDQUFDSyxHQUFOLEVBQVdKLHFCQUFxQixDQUFDMEIsUUFBRCxDQUFyQixDQUFnQzNCLElBQUksQ0FBQ0ssR0FBckMsQ0FBWCxDQUFqQjtBQUNEOztBQUFBO0FBRUQsV0FBT3FCLGVBQVA7QUFDRCxHQWxGRDs7QUFvRkE5YyxFQUFBQSxLQUFLLENBQUNzSyxJQUFOLENBQVcwUyxXQUFYLEdBQXlCLFVBQVN6WixPQUFULEVBQWtCO0FBQ3pDLFFBQUlBLE9BQU8sQ0FBQ3dCLEtBQVosRUFBbUI7QUFDakIsVUFBSW1MLElBQUksR0FBR2xRLEtBQUssQ0FBQ3NLLElBQU4sQ0FBVzBTLFdBQVgsQ0FBdUI7QUFDaEMvQixRQUFBQSxHQUFHLEVBQUUxWCxPQUFPLENBQUMwWCxHQURtQjtBQUVoQ0MsUUFBQUEsY0FBYyxFQUFFM1gsT0FBTyxDQUFDMlgsY0FGUTtBQUdoQ2tCLFFBQUFBLFVBQVUsRUFBRTdZLE9BQU8sQ0FBQzZZO0FBSFksT0FBdkIsQ0FBWDtBQU1BLFVBQUkzTSxTQUFTLEdBQUdTLElBQUksQ0FBQzNNLE9BQU8sQ0FBQ3dCLEtBQVQsQ0FBcEI7QUFDQSxhQUFPLFVBQVNrWSxLQUFULEVBQWdCO0FBQ3JCLGVBQU8vTSxJQUFJLENBQUMrTSxLQUFELENBQUosR0FBY3hOLFNBQXJCO0FBQ0QsT0FGRDtBQUdEOztBQUVELFFBQUl3TCxHQUFHLEdBQUcxWCxPQUFPLENBQUMwWCxHQUFsQjtBQUNBLFFBQUlDLGNBQWMsR0FBRzNYLE9BQU8sQ0FBQzJYLGNBQTdCOztBQUVBLFFBQUkzWCxPQUFPLENBQUM2WSxVQUFSLElBQXNCN1ksT0FBTyxDQUFDNlksVUFBUixDQUFtQjNjLE1BQTdDLEVBQXFEO0FBQ25ELFVBQUlzZCxRQUFRLEdBQUcvYyxLQUFLLENBQUNzSyxJQUFOLENBQVcyUixrQkFBWCxDQUE4QjFZLE9BQTlCLENBQWY7QUFDQSxhQUFPc1ksOEJBQThCLENBQUNrQixRQUFELENBQXJDO0FBQ0QsS0FIRCxNQUdPO0FBQ0wsVUFBSUcsS0FBSyxHQUFHLFFBQVFqQyxHQUFSLEdBQWNDLGNBQTFCO0FBQ0EsYUFBTyxVQUFTK0IsS0FBVCxFQUFnQjtBQUNyQixlQUFPQSxLQUFLLEdBQUNDLEtBQWI7QUFDRCxPQUZEO0FBR0Q7QUFDRixHQTFCRDs7QUE0QkFsZCxFQUFBQSxLQUFLLENBQUNzSyxJQUFOLENBQVc2UyxXQUFYLEdBQXlCLFVBQVM1WixPQUFULEVBQWtCO0FBQ3pDLFFBQUlBLE9BQU8sQ0FBQ3dCLEtBQVosRUFBbUI7QUFDakIsVUFBSTFDLEdBQUcsR0FBR3JDLEtBQUssQ0FBQ3NLLElBQU4sQ0FBVzZTLFdBQVgsQ0FBdUI7QUFDL0JsQyxRQUFBQSxHQUFHLEVBQUUxWCxPQUFPLENBQUMwWCxHQURrQjtBQUUvQkMsUUFBQUEsY0FBYyxFQUFFM1gsT0FBTyxDQUFDMlgsY0FGTztBQUcvQmtCLFFBQUFBLFVBQVUsRUFBRTdZLE9BQU8sQ0FBQzZZO0FBSFcsT0FBdkIsQ0FBVjtBQU1BLFVBQUlsTSxJQUFJLEdBQUdsUSxLQUFLLENBQUNzSyxJQUFOLENBQVcwUyxXQUFYLENBQXVCO0FBQ2hDL0IsUUFBQUEsR0FBRyxFQUFFMVgsT0FBTyxDQUFDMFgsR0FEbUI7QUFFaENDLFFBQUFBLGNBQWMsRUFBRTNYLE9BQU8sQ0FBQzJYLGNBRlE7QUFHaENrQixRQUFBQSxVQUFVLEVBQUU3WSxPQUFPLENBQUM2WTtBQUhZLE9BQXZCLENBQVg7QUFNQSxVQUFJM00sU0FBUyxHQUFHUyxJQUFJLENBQUMzTSxPQUFPLENBQUN3QixLQUFULENBQXBCO0FBQ0EsYUFBTyxVQUFTbUwsSUFBVCxFQUFlO0FBQ3BCLGVBQU83TixHQUFHLENBQUM2TixJQUFJLEdBQUdULFNBQVIsQ0FBVjtBQUNELE9BRkQ7QUFHRDs7QUFFRCxRQUFJd0wsR0FBRyxHQUFHMVgsT0FBTyxDQUFDMFgsR0FBbEI7QUFDQSxRQUFJQyxjQUFjLEdBQUczWCxPQUFPLENBQUMyWCxjQUE3Qjs7QUFFQSxRQUFJM1gsT0FBTyxDQUFDNlksVUFBUixJQUFzQjdZLE9BQU8sQ0FBQzZZLFVBQVIsQ0FBbUIzYyxNQUE3QyxFQUFxRDtBQUNuRCxVQUFJc2QsUUFBUSxHQUFHL2MsS0FBSyxDQUFDc0ssSUFBTixDQUFXMlIsa0JBQVgsQ0FBOEIxWSxPQUE5QixDQUFmO0FBQ0EsYUFBTzRYLHFDQUFxQyxDQUFDNEIsUUFBRCxDQUE1QztBQUNELEtBSEQsTUFHTztBQUNMLFVBQUlLLFlBQVksR0FBR2xDLGNBQWMsR0FBR0QsR0FBakIsR0FBdUIsS0FBMUM7QUFDQSxhQUFPLFVBQVMvSyxJQUFULEVBQWU7QUFDcEIsZUFBT0EsSUFBSSxHQUFDa04sWUFBWjtBQUNELE9BRkQ7QUFHRDtBQUNGLEdBaENEO0FBa0NDLENBdFBEOzs7QUNBQSxDQUFDLFlBQVc7QUFFWnBkLEVBQUFBLEtBQUssQ0FBQ3FkLFlBQU4sR0FBcUIsVUFBU0MsTUFBVCxFQUFpQi9aLE9BQWpCLEVBQTBCO0FBQzdDLFFBQUlnYSxLQUFKO0FBQ0EsUUFBSUMsT0FBTyxHQUFHamEsT0FBTyxJQUFJQSxPQUFPLENBQUNpYSxPQUFqQzs7QUFFQSxRQUFJLENBQUNGLE1BQUwsRUFBWTtBQUNWQyxNQUFBQSxLQUFLLEdBQUd2ZCxLQUFLLENBQUN5ZCxLQUFOLENBQVlDLEtBQVosQ0FDTjNkLE1BQU0sQ0FBQzJQLFdBQVAsQ0FBbUJDLEdBQW5CLENBQXVCek8sSUFBdkIsQ0FBNEJuQixNQUFNLENBQUMyUCxXQUFuQyxDQURNLEVBRU5NLFdBRk0sRUFHTkYsYUFITSxFQUlOLEdBSk0sQ0FBUjtBQUtBd04sTUFBQUEsTUFBTSxHQUFHdGQsS0FBSyxDQUFDeWQsS0FBTixDQUFZRSxXQUFaLENBQXdCSixLQUF4QixFQUErQjFjLFVBQS9CLEVBQTJDK2MsWUFBM0MsQ0FBVDtBQUNBTixNQUFBQSxNQUFNLENBQUNqZSxJQUFQLENBQVk7QUFBQ3VLLFFBQUFBLENBQUMsRUFBRSxDQUFKO0FBQU81SCxRQUFBQSxDQUFDLEVBQUUsYUFBVztBQUMvQixjQUFJd2IsT0FBTyxDQUFDSyxtQkFBWixFQUFpQztBQUMvQkwsWUFBQUEsT0FBTyxDQUFDTSxpQkFBUixHQUE0Qk4sT0FBTyxDQUFDSyxtQkFBUixDQUE0QjdZLFdBQTVCLEVBQTVCO0FBQ0Q7QUFDRixTQUpXO0FBSVQrWSxRQUFBQSxnQkFBZ0IsRUFBRTtBQUpULE9BQVo7QUFLRDs7QUFFRCxTQUFLQyxLQUFMLEdBQWF6YSxPQUFPLElBQUlBLE9BQU8sQ0FBQzJNLElBQWhDO0FBQ0EsU0FBSytOLE9BQUwsR0FBZVgsTUFBZjtBQUNBLFNBQUtZLGNBQUwsR0FBc0IsQ0FBdEI7QUFDQSxTQUFLQyxPQUFMLEdBQWUsQ0FBZjtBQUNBLFNBQUtDLFlBQUwsR0FBb0IsRUFBcEI7QUFDRCxHQXZCRDs7QUF5QkFwZSxFQUFBQSxLQUFLLENBQUNxZCxZQUFOLENBQW1CZ0IsUUFBbkIsR0FBOEIsVUFBU0MsT0FBVCxFQUFrQnpILFVBQWxCLEVBQThCdlcsUUFBOUIsRUFBd0NpZSxXQUF4QyxFQUFxRDtBQUNqRixTQUFLQyxRQUFMLEdBQWdCRixPQUFoQjtBQUNBLFNBQUtHLFdBQUwsR0FBbUI1SCxVQUFuQjtBQUNBLFNBQUs2SCxTQUFMLEdBQWlCcGUsUUFBakI7QUFDQSxTQUFLOGQsWUFBTCxHQUFvQkcsV0FBVyxJQUFJLEVBQW5DO0FBQ0QsR0FMRDs7QUFPQXZlLEVBQUFBLEtBQUssQ0FBQ3FkLFlBQU4sQ0FBbUJnQixRQUFuQixDQUE0Qm5jLFNBQTVCLENBQXNDOEksSUFBdEMsR0FBNkMsVUFBU3VFLEtBQVQsRUFBZ0I7QUFDM0QsV0FBT3ZQLEtBQUssQ0FBQ3NQLElBQU4sQ0FBVyxJQUFYLEVBQWlCQyxLQUFqQixDQUFQO0FBQ0QsR0FGRDs7QUFJQXZQLEVBQUFBLEtBQUssQ0FBQ3FkLFlBQU4sQ0FBbUJnQixRQUFuQixDQUE0Qm5jLFNBQTVCLENBQXNDNUIsUUFBdEMsR0FBaUQsWUFBVztBQUMxRCxXQUFPLEtBQUtvZSxTQUFaO0FBQ0QsR0FGRDs7QUFJQTFlLEVBQUFBLEtBQUssQ0FBQ3FkLFlBQU4sQ0FBbUJnQixRQUFuQixDQUE0Qm5jLFNBQTVCLENBQXNDMUIsSUFBdEMsR0FBNkMsVUFBUytDLE9BQVQsRUFBa0I7QUFDN0QsUUFBSWtFLE9BQU8sR0FBR3pILEtBQUssQ0FBQ3FkLFlBQU4sQ0FBbUI1VixPQUFuQixDQUEyQixLQUFLZ1gsV0FBaEMsRUFBNkMsS0FBS0wsWUFBbEQsQ0FBZDtBQUNBLFNBQUtPLGNBQUwsR0FBc0IsS0FBS0gsUUFBTCxDQUFjUCxPQUFkLENBQXNCbFosS0FBdEIsQ0FBNEIwQyxPQUE1QixDQUF0QjtBQUNBLFdBQU8sSUFBSXpILEtBQUssQ0FBQ3FkLFlBQU4sQ0FBbUJ1QixPQUF2QixDQUErQixLQUFLRCxjQUFwQyxFQUFvRGxYLE9BQXBELENBQVA7QUFDRCxHQUpEOztBQU1BekgsRUFBQUEsS0FBSyxDQUFDcWQsWUFBTixDQUFtQnVCLE9BQW5CLEdBQTZCLFVBQVNDLGFBQVQsRUFBd0JDLEdBQXhCLEVBQTZCO0FBQ3hELFNBQUtILGNBQUwsR0FBc0JFLGFBQXRCO0FBQ0EsU0FBS0UsUUFBTCxHQUFnQkQsR0FBaEI7QUFDRCxHQUhEOztBQUtBOWUsRUFBQUEsS0FBSyxDQUFDcWQsWUFBTixDQUFtQnVCLE9BQW5CLENBQTJCMWMsU0FBM0IsQ0FBcUN0QixJQUFyQyxHQUE0QyxZQUFXO0FBQ3JELFFBQUksS0FBS21lLFFBQUwsQ0FBYzlkLE9BQWxCLEVBQTJCLEtBQUs4ZCxRQUFMLENBQWM5ZCxPQUFkLENBQXNCTCxJQUF0Qjs7QUFDM0IsU0FBS21lLFFBQUwsQ0FBY25lLElBQWQ7O0FBQ0EsU0FBSytkLGNBQUwsQ0FBb0IvZCxJQUFwQjtBQUNELEdBSkQ7O0FBTUFaLEVBQUFBLEtBQUssQ0FBQ3FkLFlBQU4sQ0FBbUJuYixTQUFuQixDQUE2QjhjLFNBQTdCLEdBQXlDLFVBQVMvQixLQUFULEVBQWU7QUFDdEQsU0FBS2lCLGNBQUwsR0FBc0IsS0FBS0YsS0FBTCxDQUFXZixLQUFYLENBQXRCO0FBQ0QsR0FGRDs7QUFJQWpkLEVBQUFBLEtBQUssQ0FBQ3FkLFlBQU4sQ0FBbUJuYixTQUFuQixDQUE2QitjLE9BQTdCLEdBQXVDLFVBQVMvTyxJQUFULEVBQWM7QUFDbkQsU0FBS2dPLGNBQUwsR0FBc0IsS0FBS0EsY0FBTCxHQUFzQmhPLElBQTVDO0FBQ0QsR0FGRDs7QUFJQWxRLEVBQUFBLEtBQUssQ0FBQ3FkLFlBQU4sQ0FBbUJuYixTQUFuQixDQUE2QmdkLFlBQTdCLEdBQTRDLFVBQVMvTCxLQUFULEVBQWU7QUFDekQsUUFBSTFELFNBQVMsR0FBRyxLQUFLdU8sS0FBTCxDQUFXN0ssS0FBSyxDQUFDLENBQUQsQ0FBaEIsQ0FBaEI7O0FBQ0EsUUFBSTFELFNBQVMsR0FBRyxDQUFoQixFQUFtQjtBQUVuQixRQUFJek4sQ0FBQyxHQUFHbVIsS0FBSyxDQUFDLENBQUQsQ0FBYjs7QUFDQSxTQUFLOEssT0FBTCxDQUFhNWUsSUFBYixDQUFrQjtBQUFDdUssTUFBQUEsQ0FBQyxFQUFDNkYsU0FBSDtBQUFjek4sTUFBQUEsQ0FBQyxFQUFFQTtBQUFqQixLQUFsQjtBQUNELEdBTkQ7O0FBUUFoQyxFQUFBQSxLQUFLLENBQUNxZCxZQUFOLENBQW1CbmIsU0FBbkIsQ0FBNkI3QyxJQUE3QixHQUFvQyxVQUFTOFQsS0FBVCxFQUFnQmdNLE9BQWhCLEVBQXdCO0FBQzFELFFBQUl6SixPQUFPLEdBQUd2QyxLQUFLLENBQUMsQ0FBRCxDQUFuQjs7QUFDQSxRQUFJMUQsU0FBUyxHQUFHLEtBQUt1TyxLQUFMLENBQVc3SyxLQUFLLENBQUMsQ0FBRCxDQUFoQixDQUFoQjs7QUFDQSxRQUFJN1MsUUFBUSxHQUFHLEtBQUswZCxLQUFMLENBQVc3SyxLQUFLLENBQUMsQ0FBRCxDQUFMLEdBQVNBLEtBQUssQ0FBQyxDQUFELENBQXpCLElBQWdDMUQsU0FBL0M7O0FBRUEsUUFBSUEsU0FBUyxHQUFHLENBQWhCLEVBQW1CO0FBQ2pCLFVBQUlBLFNBQVMsR0FBR25QLFFBQVosR0FBdUIsQ0FBM0IsRUFBOEI7QUFDNUI7QUFDRCxPQUZELE1BRU87QUFDTEEsUUFBQUEsUUFBUSxHQUFHQSxRQUFRLEdBQUdtUCxTQUF0QjtBQUNBQSxRQUFBQSxTQUFTLEdBQUcsQ0FBWjtBQUNEO0FBQ0Y7O0FBRUQsUUFBSWxNLE9BQU8sR0FBRzRQLEtBQUssQ0FBQyxDQUFELENBQW5CO0FBRUEsU0FBS2dMLE9BQUw7QUFDQSxRQUFJaUIsUUFBUSxHQUFHLEtBQUtqQixPQUFwQjs7QUFFQSxRQUFJZ0IsT0FBSixFQUFhO0FBQ1gsVUFBSSxLQUFLZixZQUFMLENBQWtCaUIsT0FBbEIsQ0FBMEJGLE9BQTFCLE1BQXFDLENBQUMsQ0FBMUMsRUFBNkM7QUFDM0MsYUFBS2YsWUFBTCxDQUFrQi9lLElBQWxCLENBQXVCOGYsT0FBdkI7QUFDRDtBQUNGOztBQUVELFFBQUlBLE9BQU8sSUFBSUEsT0FBTyxDQUFDdEksVUFBbkIsSUFBaUNzSSxPQUFPLENBQUN0SSxVQUFSLENBQW1CZCxhQUF4RCxFQUF1RTtBQUNyRSxVQUFJb0osT0FBTyxDQUFDdEksVUFBUixDQUFtQjdSLFdBQXZCLEVBQW9DO0FBQ2xDbWEsUUFBQUEsT0FBTyxDQUFDM0IsT0FBUixDQUFnQkssbUJBQWhCLEdBQXNDc0IsT0FBTyxDQUFDdEksVUFBOUM7QUFDRDs7QUFFRCxXQUFLb0gsT0FBTCxDQUFhNWUsSUFBYixDQUFrQjtBQUFDdUssUUFBQUEsQ0FBQyxFQUFDNkYsU0FBSDtBQUFjek4sUUFBQUEsQ0FBQyxFQUFFLFdBQVNoQixLQUFULEVBQWdCO0FBQ2pELGNBQUlDLE9BQU8sR0FBR2tlLE9BQU8sQ0FBQ3RJLFVBQVIsQ0FBbUJkLGFBQW5CLENBQ1pMLE9BRFksRUFFWm5TLE9BRlksRUFHWjRiLE9BQU8sQ0FBQ3JCLGlCQUFSLEtBQThCck8sU0FBUyxHQUFDLElBSDVCLEVBSVpuUCxRQUFRLEdBQUMsSUFKRyxDQUFkO0FBTUE2ZSxVQUFBQSxPQUFPLENBQUNHLFVBQVIsQ0FBbUJGLFFBQW5CLEVBQTZCbmUsT0FBN0I7QUFDRCxTQVJpQjtBQVFmOGMsUUFBQUEsZ0JBQWdCLEVBQUU7QUFSSCxPQUFsQjtBQVNELEtBZEQsTUFjTztBQUVMemMsTUFBQUEsT0FBTyxDQUFDaWUsSUFBUixDQUFhLDhDQUE4QzdKLE9BQTlDLEdBQXdELE1BQXhELEdBQWlFakcsU0FBakUsR0FBNkUsMkJBQTFGOztBQUVBLFdBQUt3TyxPQUFMLENBQWE1ZSxJQUFiLENBQWtCO0FBQUN1SyxRQUFBQSxDQUFDLEVBQUM2RixTQUFIO0FBQWN6TixRQUFBQSxDQUFDLEVBQUUsV0FBU2hCLEtBQVQsRUFBZTtBQUNoRCxjQUFJOGQsR0FBRyxHQUFHSyxPQUFPLElBQUluZSxLQUFyQjtBQUNBLGNBQUksQ0FBQzhkLEdBQUcsQ0FBQ2pJLFVBQUosQ0FBZXBCLElBQXBCLEVBQTBCO0FBQzFCLGNBQUl4VSxPQUFPLEdBQUc2ZCxHQUFHLENBQUNqSSxVQUFKLENBQWVwQixJQUFmLENBQW9CQyxPQUFwQixFQUE2Qm5TLE9BQTdCLENBQWQ7QUFDQXViLFVBQUFBLEdBQUcsQ0FBQ1EsVUFBSixDQUFlRixRQUFmLEVBQXlCbmUsT0FBekI7QUFDRDtBQUxpQixPQUFsQjs7QUFNQSxXQUFLZ2QsT0FBTCxDQUFhNWUsSUFBYixDQUFrQjtBQUFDdUssUUFBQUEsQ0FBQyxFQUFDNkYsU0FBUyxHQUFHblAsUUFBZjtBQUF5QjBCLFFBQUFBLENBQUMsRUFBRSxXQUFTaEIsS0FBVCxFQUFlO0FBQzNELGNBQUk4ZCxHQUFHLEdBQUdLLE9BQU8sSUFBSW5lLEtBQXJCO0FBQ0E4ZCxVQUFBQSxHQUFHLENBQUNVLFlBQUosQ0FBaUJKLFFBQWpCO0FBQ0Q7QUFIaUIsT0FBbEI7QUFJRDs7QUFFRCxRQUFJM1AsU0FBUyxHQUFHblAsUUFBWixHQUF1QixLQUFLNGQsY0FBaEMsRUFBZ0QsS0FBS0EsY0FBTCxHQUFzQnpPLFNBQVMsR0FBR25QLFFBQWxDO0FBQ2pELEdBeEREOztBQTBEQU4sRUFBQUEsS0FBSyxDQUFDcWQsWUFBTixDQUFtQm5iLFNBQW5CLENBQTZCdWQsWUFBN0IsR0FBNEMsVUFBUzVJLFVBQVQsRUFBcUI7QUFDL0QsV0FBTyxJQUFJN1csS0FBSyxDQUFDcWQsWUFBTixDQUFtQmdCLFFBQXZCLENBQWdDLElBQWhDLEVBQXNDeEgsVUFBdEMsRUFBa0QsS0FBS3FILGNBQXZELEVBQXVFLEtBQUtFLFlBQTVFLENBQVA7QUFDRCxHQUZEOztBQUlBcGUsRUFBQUEsS0FBSyxDQUFDcWQsWUFBTixDQUFtQjVWLE9BQW5CLEdBQTZCLFVBQVNvUCxVQUFULEVBQXFCNkksTUFBckIsRUFBNkJsQyxPQUE3QixFQUFzQztBQUNqRSxRQUFJbUMsWUFBWSxHQUFHLEVBQW5COztBQUNBLFFBQUlMLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVNNLE1BQVQsRUFBaUJoRSxDQUFqQixFQUFvQjtBQUNuQytELE1BQUFBLFlBQVksQ0FBQ0MsTUFBRCxDQUFaLEdBQXVCaEUsQ0FBQyxDQUFDcGIsSUFBRixFQUF2QjtBQUNELEtBRkQ7O0FBR0EsUUFBSWdmLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVNJLE1BQVQsRUFBaUI7QUFDbEMsVUFBSTNlLE9BQU8sR0FBRzBlLFlBQVksQ0FBQ0MsTUFBRCxDQUExQjs7QUFDQSxVQUFJM2UsT0FBSixFQUFhO0FBQ1hBLFFBQUFBLE9BQU8sQ0FBQ0wsSUFBUjtBQUNBLGVBQU8rZSxZQUFZLENBQUNDLE1BQUQsQ0FBbkI7QUFDRDtBQUNGLEtBTkQ7O0FBUUEsUUFBSWhmLElBQUksR0FBRyxTQUFQQSxJQUFPLEdBQVc7QUFDcEIsVUFBSThlLE1BQUosRUFBWTtBQUNWLGFBQUssSUFBSWxnQixDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUNrZ0IsTUFBTSxDQUFDamdCLE1BQXZCLEVBQStCRCxDQUFDLEVBQWhDLEVBQW9DO0FBQ2xDa2dCLFVBQUFBLE1BQU0sQ0FBQ2xnQixDQUFELENBQU4sQ0FBVW9CLElBQVY7QUFDRDtBQUNGOztBQUVELFdBQUssSUFBSWdmLE1BQVQsSUFBbUJELFlBQW5CLEVBQWlDO0FBQy9CQSxRQUFBQSxZQUFZLENBQUNDLE1BQUQsQ0FBWixDQUFxQmhmLElBQXJCO0FBQ0Q7O0FBRUQrZSxNQUFBQSxZQUFZLEdBQUcsRUFBZjtBQUNELEtBWkQ7O0FBY0EsUUFBSTdCLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsR0FBVztBQUNqQyxVQUFJLENBQUNOLE9BQU8sQ0FBQ00saUJBQWIsRUFBZ0M7QUFDOUJOLFFBQUFBLE9BQU8sQ0FBQ00saUJBQVIsR0FBNEIsS0FBS2pILFVBQUwsQ0FBZ0I3UixXQUFoQixFQUE1QjtBQUNEOztBQUVELGFBQU93WSxPQUFPLENBQUNNLGlCQUFmO0FBQ0QsS0FORDs7QUFRQSxXQUFPO0FBQ0xBLE1BQUFBLGlCQUFpQixFQUFFQSxpQkFEZDtBQUVMd0IsTUFBQUEsVUFBVSxFQUFFQSxVQUZQO0FBR0xFLE1BQUFBLFlBQVksRUFBRUEsWUFIVDtBQUlMM0ksTUFBQUEsVUFBVSxFQUFFQSxVQUpQO0FBS0xqVyxNQUFBQSxJQUFJLEVBQUVBLElBTEQ7QUFNTDRjLE1BQUFBLE9BQU8sRUFBRUE7QUFOSixLQUFQO0FBUUQsR0EzQ0Q7QUE2Q0MsQ0F0TEQ7OztBQ0FBLENBQUMsWUFBVztBQUNaLE1BQUlxQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFTNWUsT0FBVCxFQUFrQjtBQUFFQSxJQUFBQSxPQUFPLENBQUNMLElBQVI7QUFBaUIsR0FBdkQ7O0FBRUFaLEVBQUFBLEtBQUssQ0FBQzhmLGFBQU4sR0FBc0IsVUFBU0MsYUFBVCxFQUF3QjtBQUM1QyxTQUFLQyxjQUFMLEdBQXNCRCxhQUF0QjtBQUVBL2YsSUFBQUEsS0FBSyxDQUFDSSxrQkFBTixDQUF5QixJQUF6QjtBQUNELEdBSkQ7O0FBTUFKLEVBQUFBLEtBQUssQ0FBQzhmLGFBQU4sQ0FBb0I1ZCxTQUFwQixDQUE4QjFCLElBQTlCLEdBQXFDLFVBQVMrQyxPQUFULEVBQWtCO0FBQ3JELFFBQUkwYyxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFTdmYsUUFBVCxFQUFtQjtBQUFFLGFBQU9BLFFBQVEsQ0FBQ0YsSUFBVCxDQUFjK0MsT0FBZCxDQUFQO0FBQWdDLEtBQXhFOztBQUNBLFFBQUkyYyxZQUFZLEdBQUcsS0FBS0YsY0FBTCxDQUFvQjdILEdBQXBCLENBQXdCOEgsWUFBeEIsQ0FBbkI7O0FBRUEsV0FBTztBQUNMcmYsTUFBQUEsSUFBSSxFQUFFLGdCQUFXO0FBQ2ZzZixRQUFBQSxZQUFZLENBQUMvYyxPQUFiLENBQXFCMGMsV0FBckI7QUFDRDtBQUhJLEtBQVA7QUFLRCxHQVREOztBQVdBLE1BQUlNLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVN4WixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFFLFdBQU9ELENBQUMsR0FBR0MsQ0FBSixHQUFRRCxDQUFSLEdBQVlDLENBQW5CO0FBQXVCLEdBQW5EOztBQUNBLE1BQUl3WixXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFTMWYsUUFBVCxFQUFtQjtBQUFFLFdBQU9BLFFBQVEsSUFBSUEsUUFBUSxDQUFDSixRQUFyQixHQUFnQ0ksUUFBUSxDQUFDSixRQUFULEVBQWhDLEdBQXNELENBQTdEO0FBQWlFLEdBQXhHOztBQUNBTixFQUFBQSxLQUFLLENBQUM4ZixhQUFOLENBQW9CNWQsU0FBcEIsQ0FBOEI1QixRQUE5QixHQUF5QyxZQUFXO0FBQ2xELFdBQU8sS0FBSzBmLGNBQUwsQ0FBb0I3SCxHQUFwQixDQUF3QmlJLFdBQXhCLEVBQXFDQyxNQUFyQyxDQUE0Q0YsTUFBNUMsRUFBb0QsQ0FBcEQsQ0FBUDtBQUNELEdBRkQ7O0FBSUFuZ0IsRUFBQUEsS0FBSyxDQUFDc2dCLGlCQUFOLEdBQTBCLFVBQVNoQyxPQUFULEVBQWtCaUMsYUFBbEIsRUFBaUM7QUFDekQsU0FBSy9CLFFBQUwsR0FBY0YsT0FBZDtBQUNBLFNBQUtrQyxjQUFMLEdBQW9CRCxhQUFwQjtBQUNELEdBSEQ7O0FBS0F2Z0IsRUFBQUEsS0FBSyxDQUFDc2dCLGlCQUFOLENBQXdCcGUsU0FBeEIsQ0FBa0M3QyxJQUFsQyxHQUF5QyxVQUFTc0ssS0FBVCxFQUFnQjtBQUN2RCxTQUFLNlUsUUFBTCxDQUFjbmYsSUFBZCxDQUFtQixDQUFDc0ssS0FBSyxDQUFDLENBQUQsQ0FBTixFQUFXQSxLQUFLLENBQUMsQ0FBRCxDQUFMLEdBQVMsS0FBSzZXLGNBQXpCLEVBQXlDN1csS0FBSyxDQUFDLENBQUQsQ0FBTCxHQUFTLEtBQUs2VyxjQUF2RCxDQUFuQjtBQUNELEdBRkQ7O0FBSUF4Z0IsRUFBQUEsS0FBSyxDQUFDeWdCLE9BQU4sR0FBZ0IsVUFBUzlXLEtBQVQsRUFBZ0JwRyxPQUFoQixFQUF5QjtBQUN2QyxRQUFJd2MsYUFBYSxHQUFHLEVBQXBCO0FBQ0F4YyxJQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjtBQUNBQSxJQUFBQSxPQUFPLENBQUNtZCxTQUFSLEdBQW9CbmQsT0FBTyxDQUFDbWQsU0FBUixJQUFxQixFQUF6QztBQUVBWCxJQUFBQSxhQUFhLEdBQUdwVyxLQUFLLENBQUN3TyxHQUFOLENBQVUsVUFBU3dJLEdBQVQsRUFBYztBQUN0QyxVQUFJQyxJQUFJLEdBQUdELEdBQUcsQ0FBQyxDQUFELENBQWQ7QUFDQSxVQUFJOUosVUFBVSxHQUFHN1csS0FBSyxDQUFDQyxLQUFOLENBQVlYLElBQVosQ0FBaUIsWUFBakIsRUFBK0JxaEIsR0FBRyxDQUFDLENBQUQsQ0FBbEMsQ0FBakI7QUFFQSxVQUFJckMsT0FBTyxHQUFHLElBQUl0ZSxLQUFLLENBQUNxZCxZQUFWLEVBQWQ7QUFDQXJkLE1BQUFBLEtBQUssQ0FBQzZnQixjQUFOLENBQXFCQyxLQUFyQixDQUEyQkYsSUFBM0IsRUFBaUMsSUFBSTVnQixLQUFLLENBQUNzZ0IsaUJBQVYsQ0FBNEJoQyxPQUE1QixFQUFvQy9hLE9BQU8sQ0FBQ21kLFNBQTVDLENBQWpDO0FBQ0EsYUFBT3BDLE9BQU8sQ0FBQ21CLFlBQVIsQ0FBcUI1SSxVQUFyQixDQUFQO0FBQ0QsS0FQZSxDQUFoQjtBQVNBLFdBQU8sSUFBSTdXLEtBQUssQ0FBQzhmLGFBQVYsQ0FBd0JDLGFBQXhCLENBQVA7QUFFRCxHQWhCRDtBQWtCQyxDQXJERDs7O0FDQUEsQ0FBQyxZQUFXO0FBQ1ovZixFQUFBQSxLQUFLLENBQUM2Z0IsY0FBTixHQUF1QixFQUF2QjtBQUNBLE1BQUkzSSxLQUFLLEdBQUc7QUFDVixVQUFNLENBQUMsQ0FERztBQUVWLFNBQUssQ0FGSztBQUdWLFVBQU0sQ0FISTtBQUlWLFVBQU0sQ0FKSTtBQUtWLFNBQUssQ0FMSztBQU1WLFVBQU0sQ0FOSTtBQU9WLFVBQU0sQ0FQSTtBQVFWLFNBQUssQ0FSSztBQVNWLFVBQU0sQ0FUSTtBQVVWLFVBQU0sQ0FWSTtBQVdWLFNBQUssQ0FYSztBQVlWLFVBQU0sQ0FaSTtBQWFWLFVBQU0sQ0FiSTtBQWNWLFNBQUssQ0FkSztBQWVWLFVBQU0sQ0FmSTtBQWdCVixVQUFNLENBaEJJO0FBaUJWLFNBQUssQ0FqQks7QUFrQlYsVUFBTSxFQWxCSTtBQW1CVixVQUFNLEVBbkJJO0FBb0JWLFNBQUssRUFwQks7QUFxQlYsVUFBTTtBQXJCSSxHQUFaOztBQXdCQSxNQUFJNkksV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBU0MsR0FBVCxFQUFjO0FBQzlCLFdBQU8sVUFBVTNCLE9BQVYsQ0FBa0IyQixHQUFsQixNQUEyQixDQUFDLENBQW5DO0FBQ0QsR0FGRDs7QUFJQSxNQUFJQyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFTQyxHQUFULEVBQWM7QUFDNUIsUUFBSTdlLEdBQUcsR0FBRyxFQUFWO0FBQ0EsUUFBSThlLFFBQVEsR0FBRyxFQUFmOztBQUNBLFNBQUssSUFBSTNoQixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHMGhCLEdBQUcsQ0FBQ3poQixNQUF4QixFQUFnQ0QsQ0FBQyxFQUFqQyxFQUFxQztBQUNuQyxVQUFJdWhCLFdBQVcsQ0FBQ0csR0FBRyxDQUFDMWhCLENBQUQsQ0FBSixDQUFmLEVBQXlCO0FBQ3ZCLFlBQUkyaEIsUUFBUSxLQUFLLEVBQWpCLEVBQXFCOWUsR0FBRyxDQUFDaEQsSUFBSixDQUFTOGhCLFFBQVQ7QUFDckJBLFFBQUFBLFFBQVEsR0FBRyxFQUFYO0FBQ0Q7O0FBRUQsVUFBSUQsR0FBRyxDQUFDMWhCLENBQUQsQ0FBSCxLQUFXLEdBQVgsSUFBa0IwaEIsR0FBRyxDQUFDMWhCLENBQUQsQ0FBSCxLQUFXLEdBQWpDLEVBQXNDO0FBQ3BDLFlBQUkyaEIsUUFBUSxLQUFLLEVBQWpCLEVBQXFCOWUsR0FBRyxDQUFDaEQsSUFBSixDQUFTOGhCLFFBQVQ7QUFDckJBLFFBQUFBLFFBQVEsR0FBRyxFQUFYO0FBQ0Q7O0FBRURBLE1BQUFBLFFBQVEsSUFBSUQsR0FBRyxDQUFDMWhCLENBQUQsQ0FBZjtBQUNEOztBQUNELFFBQUkyaEIsUUFBUSxLQUFLLEVBQWpCLEVBQXFCOWUsR0FBRyxDQUFDaEQsSUFBSixDQUFTOGhCLFFBQVQ7QUFDckIsV0FBTzllLEdBQVA7QUFDRCxHQWxCRDs7QUFvQkEsTUFBSStlLFdBQVcsR0FBRyxJQUFJQyxNQUFKLENBQVcsS0FBWCxFQUFrQixHQUFsQixDQUFsQjs7QUFDQXJoQixFQUFBQSxLQUFLLENBQUM2Z0IsY0FBTixDQUFxQkMsS0FBckIsR0FBNkIsVUFBU25YLEtBQVQsRUFBZ0IyWCxPQUFoQixFQUF5QjtBQUNwRCxRQUFJQyxXQUFKO0FBQ0EsUUFBSUMsZ0JBQUo7QUFDQSxRQUFJN1gsS0FBSyxLQUFLLEVBQWQsRUFBa0I7QUFDbEJBLElBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDOFgsT0FBTixDQUFjTCxXQUFkLEVBQTJCLEVBQTNCLENBQVI7QUFFQSxRQUFJbkosU0FBUyxHQUFHZ0osU0FBUyxDQUFDdFgsS0FBRCxDQUF6QjtBQUNBLFFBQUkzRSxXQUFXLEdBQUcsQ0FBbEI7O0FBQ0EsU0FBSyxJQUFJeEYsQ0FBQyxHQUFDLENBQVgsRUFBY0EsQ0FBQyxHQUFDeVksU0FBUyxDQUFDeFksTUFBMUIsRUFBa0NELENBQUMsRUFBbkMsRUFBdUM7QUFDckMsVUFBSWtpQixjQUFjLEdBQUd6SixTQUFTLENBQUN6WSxDQUFELENBQTlCO0FBQ0EsVUFBSW1pQixZQUFZLEdBQUdELGNBQWMsQ0FBQ2ppQixNQUFsQztBQUNBLFVBQUltaUIsVUFBVSxHQUFHRixjQUFjLENBQUNyQyxPQUFmLENBQXVCLEdBQXZCLENBQWpCO0FBQ0EsVUFBSXVDLFVBQVUsSUFBSSxDQUFDLENBQW5CLEVBQXNCRixjQUFjLEdBQUdBLGNBQWMsQ0FBQ0csS0FBZixDQUFxQixDQUFyQixFQUF3QkQsVUFBeEIsQ0FBakI7QUFFdEIsVUFBSUUsUUFBUSxHQUFHSixjQUFjLENBQUNHLEtBQWYsQ0FBcUIsQ0FBQyxDQUF0QixDQUFmO0FBQ0EsVUFBSUUsTUFBTSxHQUFHNUwsUUFBUSxDQUFDMkwsUUFBRCxDQUFyQjs7QUFDQSxVQUFJclUsS0FBSyxDQUFDc1UsTUFBRCxDQUFULEVBQW1CO0FBQ2pCQSxRQUFBQSxNQUFNLEdBQUcsQ0FBVDtBQUNELE9BRkQsTUFFTztBQUNMTCxRQUFBQSxjQUFjLEdBQUdBLGNBQWMsQ0FBQ0csS0FBZixDQUFxQixDQUFyQixFQUF3QkgsY0FBYyxDQUFDamlCLE1BQWYsR0FBc0IsQ0FBOUMsQ0FBakI7QUFDRDs7QUFFRCxVQUFJOGhCLFdBQVcsR0FBR3JKLEtBQUssQ0FBQ3dKLGNBQUQsQ0FBdkI7O0FBQ0EsVUFBSUgsV0FBVyxLQUFLaE4sU0FBcEIsRUFBOEI7QUFDNUIrTSxRQUFBQSxPQUFPLENBQUNqaUIsSUFBUixDQUFhLENBQUNraUIsV0FBVyxHQUFHUSxNQUFNLEdBQUMsRUFBdEIsRUFBMEIvYyxXQUExQixFQUF1QzJjLFlBQXZDLENBQWI7QUFDRDs7QUFBQTtBQUNEM2MsTUFBQUEsV0FBVyxJQUFJMmMsWUFBZjtBQUNEO0FBQ0YsR0E1QkQ7QUE4QkMsQ0FqRkQ7OztBQ0FBLENBQUMsWUFBVztBQUVaLE1BQUlLLFdBQVcsR0FBRyxTQUFkQSxXQUFjLENBQVMxRSxNQUFULEVBQWlCMkUsZUFBakIsRUFBa0MxZSxPQUFsQyxFQUEyQztBQUMzRCxTQUFLd2IsUUFBTCxHQUFnQjtBQUFDOWQsTUFBQUEsT0FBTyxFQUFFLEVBQVY7QUFBY08sTUFBQUEsTUFBTSxFQUFFK0IsT0FBTyxJQUFJQSxPQUFPLENBQUMvQjtBQUF6QyxLQUFoQjtBQUNBLFNBQUswZ0IsZ0JBQUwsR0FBd0JELGVBQXhCO0FBQ0EsU0FBS0UsY0FBTCxHQUFzQjdFLE1BQU0sQ0FBQ3ZZLEtBQVAsQ0FBYSxLQUFLZ2EsUUFBbEIsQ0FBdEI7QUFDRCxHQUpEOztBQU1BaUQsRUFBQUEsV0FBVyxDQUFDOWYsU0FBWixDQUFzQnRCLElBQXRCLEdBQTZCLFlBQVc7QUFDdEMsUUFBSSxLQUFLc2hCLGdCQUFMLElBQXlCLEtBQUtBLGdCQUFMLENBQXNCemlCLE1BQW5ELEVBQTJEO0FBQ3pELFdBQUt5aUIsZ0JBQUwsQ0FBc0IvZSxPQUF0QixDQUE4QixVQUFTMmIsR0FBVCxFQUFjO0FBQzFDQSxRQUFBQSxHQUFHLENBQUNsZSxJQUFKO0FBQ0QsT0FGRDtBQUdEOztBQUVELFNBQUttZSxRQUFMLENBQWM5ZCxPQUFkLENBQXNCa0MsT0FBdEIsQ0FBOEIsVUFBU2xDLE9BQVQsRUFBa0I7QUFDOUNBLE1BQUFBLE9BQU8sQ0FBQ0wsSUFBUjtBQUNELEtBRkQ7O0FBSUEsU0FBS3VoQixjQUFMLENBQW9CdmhCLElBQXBCOztBQUVBLFFBQUksS0FBS21lLFFBQUwsQ0FBY3ZkLE1BQWxCLEVBQXlCO0FBQ3ZCLFdBQUt1ZCxRQUFMLENBQWN2ZCxNQUFkO0FBQ0Q7QUFDRixHQWhCRDs7QUFrQkEsTUFBSTRnQixNQUFNLEdBQUc7QUFDWDVoQixJQUFBQSxJQUFJLEVBQUUsZ0JBQVc7QUFDZixhQUFPO0FBQ0xJLFFBQUFBLElBQUksRUFBRSxnQkFBVyxDQUFFO0FBRGQsT0FBUDtBQUdEO0FBTFUsR0FBYjs7QUFRQSxNQUFJeWhCLG1CQUFtQixHQUFHLFNBQXRCQSxtQkFBc0IsQ0FBU0MsUUFBVCxFQUFtQjtBQUMzQyxXQUFPLFVBQVNDLGFBQVQsRUFBd0I7QUFDN0IsVUFBSSxPQUFPQSxhQUFQLEtBQXlCLFFBQTdCLEVBQXVDLE9BQU9ELFFBQVEsQ0FBQ0MsYUFBRCxDQUFmO0FBQ3ZDLGFBQU9BLGFBQWEsSUFBSUgsTUFBeEI7QUFDRCxLQUhEO0FBSUQsR0FMRDs7QUFPQSxNQUFJdkksUUFBUSxHQUFHO0FBQUNqWixJQUFBQSxJQUFJLEVBQUUsZ0JBQVUsQ0FBRTtBQUFuQixHQUFmOztBQUNBLE1BQUk0aEIsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFTQyxPQUFULEVBQWtCO0FBQ3hDLFdBQU8sQ0FBQyxDQUFDQSxPQUFPLENBQUNDLFFBQWpCO0FBQ0QsR0FGRDs7QUFJQSxNQUFJQyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLENBQVNGLE9BQVQsRUFBa0I7QUFDM0MsV0FBTyxDQUFDQSxPQUFPLENBQUNDLFFBQWhCO0FBQ0QsR0FGRDs7QUFJQTFpQixFQUFBQSxLQUFLLENBQUM0aUIsSUFBTixHQUFhLFVBQVNqWixLQUFULEVBQWdCa1osaUJBQWhCLEVBQW1DdGYsT0FBbkMsRUFBMkM7QUFDdEQsUUFBSStlLFFBQUo7QUFDQSxRQUFJUSxJQUFJLEdBQUcsSUFBWDs7QUFFQSxRQUFJaGMsU0FBUyxDQUFDckgsTUFBVixLQUFxQixDQUF6QixFQUE0QjtBQUMxQixhQUFPTyxLQUFLLENBQUM0aUIsSUFBTixDQUFXMWhCLElBQVgsQ0FBZ0IsSUFBaEIsRUFBc0J5SSxLQUF0QixFQUE2QixFQUE3QixFQUFpQ2taLGlCQUFqQyxDQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0xQLE1BQUFBLFFBQVEsR0FBR08saUJBQVg7QUFDRDs7QUFFRHRmLElBQUFBLE9BQU8sR0FBR0EsT0FBTyxJQUFJLEVBQXJCO0FBQ0EsUUFBSXdmLGVBQWUsR0FBR3hmLE9BQU8sQ0FBQ2tmLE9BQVIsSUFBa0JKLG1CQUFtQixDQUFDQyxRQUFELENBQTNEO0FBQ0EsUUFBSVUsT0FBTyxHQUFHLENBQUN6ZixPQUFPLENBQUN5ZixPQUFSLElBQW1CLEdBQXBCLElBQTJCemYsT0FBTyxDQUFDMlgsY0FBakQ7QUFDQSxRQUFJb0MsTUFBSjs7QUFDQSxRQUFJLENBQUNBLE1BQUwsRUFBWTtBQUNWLFVBQUlDLEtBQUssR0FBR3ZkLEtBQUssQ0FBQ3lkLEtBQU4sQ0FBWUMsS0FBWixDQUNWM2QsTUFBTSxDQUFDMlAsV0FBUCxDQUFtQkMsR0FBbkIsQ0FBdUJ6TyxJQUF2QixDQUE0Qm5CLE1BQU0sQ0FBQzJQLFdBQW5DLENBRFUsRUFFVk0sV0FGVSxFQUdWRixhQUhVLEVBSVYsR0FKVSxDQUFaO0FBS0F3TixNQUFBQSxNQUFNLEdBQUd0ZCxLQUFLLENBQUN5ZCxLQUFOLENBQVlFLFdBQVosQ0FBd0JKLEtBQXhCLEVBQStCMWMsVUFBL0IsRUFBMkMrYyxZQUEzQyxDQUFUO0FBQ0Q7O0FBR0QsUUFBSXFGLGFBQWEsR0FBR3RaLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU2xLLE1BQTdCO0FBRUEsU0FBS3dlLE9BQUwsR0FBZVgsTUFBZjs7QUFFQSxRQUFJNEYsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBU3ZjLENBQVQsRUFBWUMsQ0FBWixFQUFlO0FBQzNCLGFBQU9ELENBQUMsQ0FBQzJSLENBQUYsR0FBSTFSLENBQUMsQ0FBQzBSLENBQWI7QUFDRCxLQUZELENBNUJzRCxDQWdDdEQ7OztBQUNBLFFBQUk4RCxVQUFVLEdBQUcsRUFBakI7O0FBQ0EsU0FBSyxJQUFJK0csQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsYUFBcEIsRUFBbUNFLENBQUMsRUFBcEMsRUFBd0M7QUFDdEMsVUFBSUMsWUFBWSxHQUFHLEVBQW5COztBQUNBLFdBQUssSUFBSTVqQixDQUFDLEdBQUcsQ0FBYixFQUFpQkEsQ0FBQyxHQUFHbUssS0FBSyxDQUFDbEssTUFBM0IsRUFBbUNELENBQUMsRUFBcEMsRUFBd0M7QUFDdEMsWUFBSWlqQixPQUFPLEdBQUdNLGVBQWUsQ0FBQ3BaLEtBQUssQ0FBQ25LLENBQUQsQ0FBTCxDQUFTMmpCLENBQVQsQ0FBRCxDQUE3Qjs7QUFDQSxZQUFJVixPQUFPLENBQUNyRyxVQUFaLEVBQXdCO0FBQ3RCLGNBQUlpSCxrQkFBa0IsR0FBR1osT0FBTyxDQUFDckcsVUFBUixDQUFtQmpFLEdBQW5CLENBQXVCLFVBQVNyQyxHQUFULEVBQWM7QUFDNUQsbUJBQU87QUFBQ2pDLGNBQUFBLENBQUMsRUFBRWlDLEdBQUcsQ0FBQ2pDLENBQVI7QUFBV3lFLGNBQUFBLENBQUMsRUFBRXhDLEdBQUcsQ0FBQ3dDLENBQUosR0FBUTZLLENBQUMsR0FBQ0gsT0FBeEI7QUFBaUN6SyxjQUFBQSxDQUFDLEVBQUV6QyxHQUFHLENBQUN5QztBQUF4QyxhQUFQO0FBQ0QsV0FGd0IsQ0FBekI7QUFHQTZELFVBQUFBLFVBQVUsR0FBR0EsVUFBVSxDQUFDM0ksTUFBWCxDQUFrQjRQLGtCQUFsQixDQUFiO0FBQ0Q7QUFDRjs7QUFBQTtBQUNGOztBQUVEakgsSUFBQUEsVUFBVSxHQUFHQSxVQUFVLENBQUNrSCxJQUFYLENBQWdCSixPQUFoQixDQUFiO0FBRUEsUUFBSWhULElBQUksR0FBR2xRLEtBQUssQ0FBQ3NLLElBQU4sQ0FBVzBTLFdBQVgsQ0FBdUI7QUFDaEMvQixNQUFBQSxHQUFHLEVBQUUxWCxPQUFPLENBQUMwWCxHQURtQjtBQUVoQ0MsTUFBQUEsY0FBYyxFQUFFM1gsT0FBTyxDQUFDMlgsY0FGUTtBQUdoQ2tCLE1BQUFBLFVBQVUsRUFBRUEsVUFIb0I7QUFJaENyWCxNQUFBQSxLQUFLLEVBQUV4QixPQUFPLENBQUN3QixLQUFSLElBQWlCO0FBSlEsS0FBdkIsQ0FBWDs7QUFPQSxTQUFLb1ksV0FBTCxHQUFtQixZQUFXO0FBQzVCLGFBQU9uZCxLQUFLLENBQUNzSyxJQUFOLENBQVc2UyxXQUFYLENBQXVCO0FBQzVCbEMsUUFBQUEsR0FBRyxFQUFFMVgsT0FBTyxDQUFDMFgsR0FEZTtBQUU1QkMsUUFBQUEsY0FBYyxFQUFFM1gsT0FBTyxDQUFDMlgsY0FGSTtBQUc1QmtCLFFBQUFBLFVBQVUsRUFBRUEsVUFIZ0I7QUFJNUJyWCxRQUFBQSxLQUFLLEVBQUV4QixPQUFPLENBQUN3QixLQUFSLElBQWlCO0FBSkksT0FBdkIsQ0FBUDtBQU1ELEtBUEQ7O0FBU0EsUUFBSXdlLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVNDLFNBQVQsRUFBb0I7QUFDakMsYUFBTyxVQUFTdkcsS0FBVCxFQUFnQjtBQUNyQixlQUFPL00sSUFBSSxDQUFDc1QsU0FBUyxHQUFDdkcsS0FBWCxDQUFYO0FBQ0QsT0FGRDtBQUdELEtBSkQ7O0FBTUEsU0FBS3lCLFNBQUwsR0FBaUJ4TyxJQUFJLENBQUMrUyxhQUFhLEdBQUdELE9BQWpCLENBQXJCO0FBQ0EsU0FBS3hGLE9BQUwsR0FBZSxFQUFmO0FBRUFGLElBQUFBLE1BQU0sQ0FBQ2plLElBQVAsQ0FBWTtBQUFDdUssTUFBQUEsQ0FBQyxFQUFFLENBQUo7QUFBTzVILE1BQUFBLENBQUMsRUFBRSxhQUFXO0FBQy9CLFlBQUk4Z0IsSUFBSSxDQUFDdEYsT0FBTCxDQUFhSyxtQkFBakIsRUFBc0M7QUFDcENpRixVQUFBQSxJQUFJLENBQUN0RixPQUFMLENBQWFNLGlCQUFiLEdBQWlDZ0YsSUFBSSxDQUFDdEYsT0FBTCxDQUFhSyxtQkFBYixDQUFpQzdZLFdBQWpDLEVBQWpDO0FBQ0Q7QUFDRixPQUpXO0FBSVQrWSxNQUFBQSxnQkFBZ0IsRUFBRTtBQUpULEtBQVo7O0FBTUEsU0FBSyxJQUFJb0YsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0YsYUFBcEIsRUFBbUNFLENBQUMsRUFBcEMsRUFBd0M7QUFDdEMsT0FBQyxZQUFXO0FBQ1YsWUFBSUMsWUFBWSxHQUFHLEVBQW5COztBQUNBLGFBQUssSUFBSTVqQixDQUFDLEdBQUcsQ0FBYixFQUFpQkEsQ0FBQyxHQUFHbUssS0FBSyxDQUFDbEssTUFBM0IsRUFBbUNELENBQUMsRUFBcEMsRUFBd0M7QUFDdEM0akIsVUFBQUEsWUFBWSxDQUFDL2pCLElBQWIsQ0FBa0JzSyxLQUFLLENBQUNuSyxDQUFELENBQUwsQ0FBUzJqQixDQUFULENBQWxCO0FBQ0Q7O0FBQUE7QUFDRCxZQUFJcEQsYUFBYSxHQUFHcUQsWUFBWSxDQUFDakwsR0FBYixDQUFpQjRLLGVBQWpCLENBQXBCO0FBRUEsWUFBSVUsV0FBVyxHQUFHMUQsYUFBYSxDQUFDL2MsTUFBZCxDQUFxQndmLGlCQUFyQixDQUFsQjtBQUNBLFlBQUlrQixjQUFjLEdBQUczRCxhQUFhLENBQUMvYyxNQUFkLENBQXFCMmYsb0JBQXJCLENBQXJCOztBQUVBLFlBQUllLGNBQWMsQ0FBQ2prQixNQUFmLEdBQXdCLENBQTVCLEVBQStCO0FBQzdCLGNBQUlra0IsYUFBYSxHQUFHLElBQUkzakIsS0FBSyxDQUFDOGYsYUFBVixDQUF3QjRELGNBQXhCLENBQXBCO0FBQ0EsY0FBSXppQixPQUFPLEdBQUc0WSxRQUFkO0FBQ0EsY0FBSXZaLFFBQVEsR0FBR3FqQixhQUFhLENBQUNyakIsUUFBZCxFQUFmO0FBRUFnZCxVQUFBQSxNQUFNLENBQUNqZSxJQUFQLENBQVk7QUFBQ3VLLFlBQUFBLENBQUMsRUFBRXVaLENBQUMsR0FBQ0gsT0FBTjtBQUFlaGhCLFlBQUFBLENBQUMsRUFBRSxXQUFTeUYsT0FBVCxFQUFrQjtBQUM5Q3hHLGNBQUFBLE9BQU8sR0FBRzBpQixhQUFhLENBQUNuakIsSUFBZCxFQUFWO0FBQ0FpSCxjQUFBQSxPQUFPLENBQUN4RyxPQUFSLENBQWdCNUIsSUFBaEIsQ0FBcUI0QixPQUFyQjtBQUNEO0FBSFcsV0FBWjtBQUlBcWMsVUFBQUEsTUFBTSxDQUFDamUsSUFBUCxDQUFZO0FBQUN1SyxZQUFBQSxDQUFDLEVBQUV1WixDQUFDLEdBQUNILE9BQUYsR0FBVTFpQixRQUFkO0FBQXdCMEIsWUFBQUEsQ0FBQyxFQUFFLFdBQVN5RixPQUFULEVBQWtCO0FBQ3ZEeEcsY0FBQUEsT0FBTyxDQUFDTCxJQUFSO0FBQ0E2RyxjQUFBQSxPQUFPLENBQUN4RyxPQUFSLEdBQWtCd0csT0FBTyxDQUFDeEcsT0FBUixDQUFnQitCLE1BQWhCLENBQXVCLFVBQVNGLENBQVQsRUFBVztBQUFFLHVCQUFPQSxDQUFDLElBQUk3QixPQUFaO0FBQXNCLGVBQTFELENBQWxCO0FBQ0Q7QUFIVyxXQUFaO0FBSUQ7O0FBRUR3aUIsUUFBQUEsV0FBVyxDQUFDdGdCLE9BQVosQ0FBb0IsVUFBU21WLENBQVQsRUFBWTtBQUM5QixjQUFJc0wsZ0JBQWdCLEdBQUd0TCxDQUFDLENBQUNvSyxRQUFGLENBQVcsSUFBSTFpQixLQUFLLENBQUNxZCxZQUFWLENBQXVCQyxNQUF2QixFQUErQjtBQUMvRHBOLFlBQUFBLElBQUksRUFBRXFULFFBQVEsQ0FBQ0osQ0FBQyxHQUFDSCxPQUFIO0FBRGlELFdBQS9CLENBQVgsRUFFbkJGLElBQUksQ0FBQ3RGLE9BRmMsQ0FBdkI7QUFHQXNGLFVBQUFBLElBQUksQ0FBQ1osZ0JBQUwsR0FBd0IsQ0FBQ1ksSUFBSSxDQUFDWixnQkFBTCxJQUF1QixFQUF4QixFQUE0QnpPLE1BQTVCLENBQW1DbVEsZ0JBQW5DLENBQXhCO0FBQ0QsU0FMRDtBQU9ELE9BaENEO0FBaUNEOztBQUFBO0FBRUR0RyxJQUFBQSxNQUFNLENBQUNqZSxJQUFQLENBQVk7QUFBQ3VLLE1BQUFBLENBQUMsRUFBRTJaLFFBQVEsQ0FBQyxDQUFELENBQVIsQ0FBWU4sYUFBYSxHQUFDRCxPQUExQixDQUFKO0FBQXdDaGhCLE1BQUFBLENBQUMsRUFBRSxXQUFTeUYsT0FBVCxFQUFrQjtBQUN2RSxZQUFJQSxPQUFPLENBQUNqRyxNQUFaLEVBQW9CO0FBQ2xCaUcsVUFBQUEsT0FBTyxDQUFDakcsTUFBUjtBQUNEO0FBQ0Y7QUFKVyxLQUFaO0FBTUQsR0ExSEQ7O0FBNEhBeEIsRUFBQUEsS0FBSyxDQUFDNGlCLElBQU4sQ0FBVzFnQixTQUFYLENBQXFCNUIsUUFBckIsR0FBZ0MsWUFBVztBQUN6QyxXQUFPLEtBQUtvZSxTQUFaO0FBQ0QsR0FGRDs7QUFJQTFlLEVBQUFBLEtBQUssQ0FBQzRpQixJQUFOLENBQVcxZ0IsU0FBWCxDQUFxQjFCLElBQXJCLEdBQTRCLFVBQVMrQyxPQUFULEVBQWtCO0FBQzVDLFdBQU8sSUFBSXllLFdBQUosQ0FBZ0IsS0FBSy9ELE9BQXJCLEVBQStCLEtBQUtpRSxnQkFBcEMsRUFBc0QzZSxPQUF0RCxDQUFQO0FBQ0QsR0FGRDtBQUlDLENBdExEOzs7QUNBQSxDQUFDLFlBQVc7QUFDWnZELEVBQUFBLEtBQUssQ0FBQ3lkLEtBQU4sR0FBY3pkLEtBQUssQ0FBQ3lkLEtBQU4sSUFBZSxFQUE3Qjs7QUFDQXpkLEVBQUFBLEtBQUssQ0FBQ3lkLEtBQU4sQ0FBWW9HLEtBQVosR0FBb0IsVUFBU3hkLElBQVQsRUFBZTtBQUNqQyxRQUFJeWQsT0FBSjtBQUNBLFFBQUlDLENBQUo7QUFFQUQsSUFBQUEsT0FBTyxHQUFHLEVBQVY7QUFDQUMsSUFBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMLEVBQU8sQ0FBUCxFQUFTLENBQVQsQ0FBSjs7QUFDQSxTQUFLLElBQUl2a0IsQ0FBQyxHQUFDLENBQVgsRUFBY0EsQ0FBQyxHQUFDdWtCLENBQUMsQ0FBQ3RrQixNQUFsQixFQUEwQkQsQ0FBQyxFQUEzQixFQUErQjtBQUM3QnNrQixNQUFBQSxPQUFPLENBQUMsQ0FBQ3pkLElBQUksR0FBQzBkLENBQUMsQ0FBQ3ZrQixDQUFELENBQVAsSUFBYyxFQUFmLENBQVAsR0FBNkIsSUFBN0I7QUFDRDs7QUFFRCxXQUFPO0FBQ0xMLE1BQUFBLEdBQUcsRUFBRSxhQUFTNlYsT0FBVCxFQUFrQmtELEtBQWxCLEVBQXlCO0FBQzVCLFlBQUk3VixHQUFHLEdBQUcyUyxPQUFWOztBQUNBLGVBQU9rRCxLQUFLLEdBQUcsQ0FBZixFQUFrQjtBQUNoQjdWLFVBQUFBLEdBQUcsSUFBR3loQixPQUFPLENBQUN6aEIsR0FBRyxHQUFHLEVBQVAsQ0FBUCxHQUFvQixDQUFwQixHQUF3QixDQUE5QjtBQUNBNlYsVUFBQUEsS0FBSztBQUNOOztBQUNELGVBQU83VixHQUFQO0FBQ0Q7QUFSSSxLQUFQO0FBVUQsR0FwQkQ7O0FBc0JBckMsRUFBQUEsS0FBSyxDQUFDeWQsS0FBTixDQUFZQyxLQUFaLEdBQW9CLFVBQVNzRyxZQUFULEVBQXVCaFUsV0FBdkIsRUFBb0NGLGFBQXBDLEVBQW1EbVUsUUFBbkQsRUFBNkQ7QUFDL0UsUUFBSWxmLEtBQUssR0FBRyxTQUFSQSxLQUFRLENBQVMzRCxHQUFULEVBQWM7QUFDeEIsVUFBSXFPLFNBQVMsR0FBR3VVLFlBQVksRUFBNUI7QUFDQTVpQixNQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFIO0FBQ0EsVUFBSThpQixJQUFJLEdBQUdsVSxXQUFXLENBQUMsWUFBVTtBQUMvQixZQUFJcEcsQ0FBQyxHQUFHb2EsWUFBWSxFQUFwQjtBQUNBNWlCLFFBQUFBLEdBQUcsQ0FBQ3dJLENBQUMsR0FBRzZGLFNBQUwsQ0FBSDtBQUNELE9BSHFCLEVBR25Cd1UsUUFIbUIsQ0FBdEI7QUFLQSxhQUFPO0FBQ0xyakIsUUFBQUEsSUFBSSxFQUFFLGdCQUFXO0FBQ2ZrUCxVQUFBQSxhQUFhLENBQUNvVSxJQUFELENBQWI7QUFDRDtBQUhJLE9BQVA7QUFLRCxLQWJEOztBQWVBLFdBQU87QUFDTG5mLE1BQUFBLEtBQUssRUFBRUE7QUFERixLQUFQO0FBR0QsR0FuQkQ7O0FBcUJBL0UsRUFBQUEsS0FBSyxDQUFDeWQsS0FBTixDQUFZRSxXQUFaLEdBQTBCLFVBQVNKLEtBQVQsRUFBZ0IxYyxVQUFoQixFQUE0QitjLFlBQTVCLEVBQTBDO0FBQ2xFLFFBQUl1RyxXQUFXLEdBQUcsRUFBbEI7O0FBRUEsUUFBSUMsTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBU3RoQixDQUFULEVBQVk7QUFDdkIsYUFBTyxVQUFTNFksQ0FBVCxFQUFZO0FBQ2pCLGVBQU81WSxDQUFDLElBQUU0WSxDQUFWO0FBQ0QsT0FGRDtBQUdELEtBSkQ7O0FBTUEsUUFBSTNXLEtBQUssR0FBRyxTQUFSQSxLQUFRLENBQVNzZixTQUFULEVBQW9CO0FBQzlCLFVBQUlsUixLQUFLLEdBQUdnUixXQUFXLENBQUN0QyxLQUFaLENBQWtCLENBQWxCLEVBQXFCeUIsSUFBckIsQ0FBMEIsVUFBU2dCLEVBQVQsRUFBYUMsRUFBYixFQUFpQjtBQUNyRCxZQUFJQyxFQUFFLEdBQUdGLEVBQUUsQ0FBQzFhLENBQUgsR0FBTzJhLEVBQUUsQ0FBQzNhLENBQW5COztBQUNBLFlBQUk0YSxFQUFFLEtBQUcsQ0FBVCxFQUFZO0FBQ1YsaUJBQU9MLFdBQVcsQ0FBQzlFLE9BQVosQ0FBb0JpRixFQUFwQixJQUEwQkgsV0FBVyxDQUFDOUUsT0FBWixDQUFvQmtGLEVBQXBCLENBQWpDO0FBQ0Q7O0FBRUQsZUFBT0MsRUFBUDtBQUNELE9BUFcsQ0FBWjtBQVNBLFVBQUlDLGVBQWUsR0FBRyxFQUF0QjtBQUNBLFVBQUlDLFVBQVUsR0FBR3ZSLEtBQUssQ0FBQzFULE1BQXZCO0FBRUEsVUFBSWtsQixZQUFZLEdBQUdwSCxLQUFLLENBQUN4WSxLQUFOLENBQVksVUFBUzZFLENBQVQsRUFBWTtBQUN6QyxZQUFJZ2IsU0FBSjs7QUFDQSxZQUFJQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLENBQVNDLE9BQVQsRUFBa0I7QUFDdEMsaUJBQU9BLE9BQU8sQ0FBQ2xiLENBQVIsR0FBWUEsQ0FBWixHQUFnQixJQUFoQixJQUF3QmtiLE9BQU8sQ0FBQ2xiLENBQVIsR0FBWUEsQ0FBWixJQUFpQixDQUFoRDtBQUNELFNBRkQ7O0FBSUEsWUFBSW1iLE9BQU8sR0FBRyxFQUFkOztBQUNBLFlBQUlDLGNBQWMsR0FBRyxTQUFqQkEsY0FBaUIsR0FBVztBQUM5QixjQUFJLENBQUNELE9BQU8sQ0FBQ3RsQixNQUFiLEVBQXFCO0FBRXJCLGNBQUl3bEIsY0FBYyxHQUFHRixPQUFyQjtBQUNBQSxVQUFBQSxPQUFPLEdBQUcsRUFBVjs7QUFFQSxlQUFLLElBQUl2bEIsQ0FBQyxHQUFDLENBQVgsRUFBY0EsQ0FBQyxHQUFDeWxCLGNBQWMsQ0FBQ3hsQixNQUEvQixFQUF1Q0QsQ0FBQyxFQUF4QyxFQUE0QztBQUMxQyxnQkFBSXlsQixjQUFjLENBQUN6bEIsQ0FBRCxDQUFkLENBQWtCdWUsZ0JBQXRCLEVBQXdDO0FBQ3RDa0gsY0FBQUEsY0FBYyxDQUFDemxCLENBQUQsQ0FBZCxDQUFrQndDLENBQWxCLENBQW9CcWlCLFNBQXBCLEVBQStCWSxjQUFjLENBQUN6bEIsQ0FBRCxDQUFkLENBQWtCb0ssQ0FBbEIsR0FBc0JBLENBQXJEO0FBQ0Q7QUFDRjs7QUFFRCxjQUFJc2IsY0FBYyxHQUFHcmtCLFVBQVUsQ0FBQyxZQUFXO0FBQ3pDNGpCLFlBQUFBLGVBQWUsR0FBR0EsZUFBZSxDQUFDemhCLE1BQWhCLENBQXVCb2hCLE1BQU0sQ0FBQ2MsY0FBRCxDQUE3QixDQUFsQjs7QUFFQSxpQkFBSyxJQUFJMWxCLENBQUMsR0FBQyxDQUFYLEVBQWNBLENBQUMsR0FBQ3lsQixjQUFjLENBQUN4bEIsTUFBL0IsRUFBdUNELENBQUMsRUFBeEMsRUFBNEM7QUFDMUMsa0JBQUksQ0FBQ3lsQixjQUFjLENBQUN6bEIsQ0FBRCxDQUFkLENBQWtCdWUsZ0JBQXZCLEVBQXlDO0FBQ3ZDa0gsZ0JBQUFBLGNBQWMsQ0FBQ3psQixDQUFELENBQWQsQ0FBa0J3QyxDQUFsQixDQUFvQnFpQixTQUFwQixFQUErQixDQUEvQjtBQUNBSyxnQkFBQUEsVUFBVTtBQUNWLG9CQUFJQSxVQUFVLEtBQUssQ0FBbkIsRUFBc0JDLFlBQVksQ0FBQy9qQixJQUFiO0FBQ3ZCO0FBQ0Y7QUFDRixXQVY4QixFQVU1QnFrQixjQUFjLENBQUMsQ0FBRCxDQUFkLENBQWtCcmIsQ0FBbEIsR0FBc0JBLENBVk0sQ0FBL0I7QUFXQTZhLFVBQUFBLGVBQWUsQ0FBQ3BsQixJQUFoQixDQUFxQjZsQixjQUFyQjtBQUNELFNBeEJEOztBQTBCQSxZQUFJQyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFTcE8sS0FBVCxFQUFnQjtBQUNoQyxjQUFJNk4sU0FBUyxJQUFJQSxTQUFTLENBQUNoYixDQUFWLEdBQWNBLENBQWQsS0FBb0JtTixLQUFLLENBQUNuTixDQUFOLEdBQVVBLENBQS9DLEVBQWtEO0FBQ2hEb2IsWUFBQUEsY0FBYztBQUNmOztBQUVERCxVQUFBQSxPQUFPLENBQUMxbEIsSUFBUixDQUFhMFgsS0FBYjtBQUNBNk4sVUFBQUEsU0FBUyxHQUFHN04sS0FBWjtBQUNELFNBUEQ7O0FBU0EsWUFBSXFPLFdBQUo7O0FBRUEsZUFBTSxDQUFOLEVBQVM7QUFDUCxjQUFJalMsS0FBSyxDQUFDMVQsTUFBTixHQUFlLENBQW5CLEVBQXNCO0FBQ3BCMmxCLFlBQUFBLFdBQVcsR0FBR2pTLEtBQUssQ0FBQyxDQUFELENBQW5COztBQUNBLGdCQUFJMFIsZUFBZSxDQUFDTyxXQUFELENBQW5CLEVBQWtDO0FBQ2hDRCxjQUFBQSxXQUFXLENBQUNDLFdBQUQsQ0FBWDtBQUNBalMsY0FBQUEsS0FBSyxDQUFDMkQsS0FBTixHQUZnQyxDQUVqQjtBQUNoQixhQUhELE1BR087QUFDTDtBQUNEO0FBQ0YsV0FSRCxNQVFPO0FBQ0w7QUFDRDtBQUNGOztBQUVEa08sUUFBQUEsY0FBYztBQUNmLE9BM0RrQixDQUFuQjtBQTZEQSxhQUFPO0FBQ0xwa0IsUUFBQUEsSUFBSSxFQUFFLGdCQUFVO0FBQ2QsZUFBSyxJQUFJcEIsQ0FBQyxHQUFDLENBQVgsRUFBY0EsQ0FBQyxHQUFDaWxCLGVBQWUsQ0FBQ2hsQixNQUFoQyxFQUF1Q0QsQ0FBQyxFQUF4QyxFQUEyQztBQUN6Q29lLFlBQUFBLFlBQVksQ0FBQzZHLGVBQWUsQ0FBQ2psQixDQUFELENBQWhCLENBQVo7QUFDRDs7QUFBQTtBQUNEbWxCLFVBQUFBLFlBQVksQ0FBQy9qQixJQUFiO0FBQ0Q7QUFOSSxPQUFQO0FBUUQsS0FsRkQ7O0FBb0ZBLFFBQUl2QixJQUFJLEdBQUc4a0IsV0FBVyxDQUFDOWtCLElBQVosQ0FBaUI2QixJQUFqQixDQUFzQmlqQixXQUF0QixDQUFYO0FBRUEsV0FBTztBQUNMcGYsTUFBQUEsS0FBSyxFQUFFQSxLQURGO0FBRUwxRixNQUFBQSxJQUFJLEVBQUVBO0FBRkQsS0FBUDtBQUlELEdBbkdEOztBQXFHQVcsRUFBQUEsS0FBSyxDQUFDeWQsS0FBTixDQUFZRSxXQUFaLENBQXdCMEgsY0FBeEIsR0FBeUMsVUFBU2prQixHQUFULEVBQWNrVSxFQUFkLEVBQWtCO0FBQ3pELFFBQUlnSSxNQUFKO0FBQ0FDLElBQUFBLEtBQUssR0FBR3ZkLEtBQUssQ0FBQ3lkLEtBQU4sQ0FBWUMsS0FBWixDQUNOM2QsTUFBTSxDQUFDMlAsV0FBUCxDQUFtQkMsR0FBbkIsQ0FBdUJ6TyxJQUF2QixDQUE0Qm5CLE1BQU0sQ0FBQzJQLFdBQW5DLENBRE0sRUFFTk0sV0FGTSxFQUdORixhQUhNLEVBSU4sR0FKTSxDQUFSO0FBS0F3TixJQUFBQSxNQUFNLEdBQUd0ZCxLQUFLLENBQUN5ZCxLQUFOLENBQVlFLFdBQVosQ0FBd0JKLEtBQXhCLEVBQStCMWMsVUFBL0IsRUFBMkMrYyxZQUEzQyxDQUFUO0FBRUEsUUFBSWlCLGFBQUo7QUFFQXZCLElBQUFBLE1BQU0sQ0FBQ2plLElBQVAsQ0FBWTtBQUFDMkMsTUFBQUEsQ0FBQyxFQUFFLGFBQVc7QUFDekIsWUFBSTZjLGFBQUosRUFBbUI7QUFDakJBLFVBQUFBLGFBQWEsQ0FBQ2plLElBQWQ7QUFDRDs7QUFDRFEsUUFBQUEsR0FBRztBQUNKLE9BTFc7QUFLVHdJLE1BQUFBLENBQUMsRUFBRTBMO0FBTE0sS0FBWjtBQU1BdUosSUFBQUEsYUFBYSxHQUFHdkIsTUFBTSxDQUFDdlksS0FBUCxFQUFoQjtBQUNELEdBbEJEOztBQW9CQS9FLEVBQUFBLEtBQUssQ0FBQ3lkLEtBQU4sQ0FBWTZILGtCQUFaLEdBQWlDLFVBQVNwTyxLQUFULEVBQWdCblcsS0FBaEIsRUFBdUI7QUFDdEQsUUFBSWdFLEtBQUssR0FBRyxTQUFSQSxLQUFRLENBQVN3Z0IsTUFBVCxFQUFpQjtBQUMzQixhQUFPck8sS0FBSyxDQUFDblMsS0FBTixDQUFZd2dCLE1BQVosQ0FBUDtBQUNELEtBRkQ7O0FBSUEsUUFBSWxtQixJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFTa21CLE1BQVQsRUFBaUI7QUFDMUIsYUFBT3JPLEtBQUssQ0FBQzdYLElBQU4sQ0FBVztBQUNoQjJDLFFBQUFBLENBQUMsRUFBRXVqQixNQUFNLENBQUN2akIsQ0FETTtBQUVoQjRILFFBQUFBLENBQUMsRUFBRTJiLE1BQU0sQ0FBQzNiLENBQVAsR0FBVzdJLEtBRkU7QUFHaEJnZCxRQUFBQSxnQkFBZ0IsRUFBRXdILE1BQU0sQ0FBQ3hIO0FBSFQsT0FBWCxDQUFQO0FBS0QsS0FORDs7QUFRQSxXQUFPO0FBQ0xoWixNQUFBQSxLQUFLLEVBQUVBLEtBREY7QUFFTDFGLE1BQUFBLElBQUksRUFBRUE7QUFGRCxLQUFQO0FBSUQsR0FqQkQ7QUFvQkMsQ0ExTEQ7OztBQ0FBLENBQUMsWUFBVztBQUNWVyxFQUFBQSxLQUFLLEdBQUdBLEtBQUssSUFBRyxFQUFoQjtBQUVBQSxFQUFBQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUosUUFBWixDQUFxQixVQUFyQixFQUFpQyxVQUFTdVAsSUFBVCxFQUFlO0FBQzlDLFFBQUksT0FBT0EsSUFBSSxDQUFDSixFQUFaLEtBQW1CLFVBQXZCLEVBQW1DO0FBQ2pDLGFBQU9JLElBQUksQ0FBQ0osRUFBTCxDQUFROU4sSUFBUixDQUFha08sSUFBYixDQUFQO0FBQ0Q7QUFDRixHQUpEO0FBTUFwUCxFQUFBQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUosUUFBWixDQUFxQixVQUFyQixFQUFpQyxVQUFTdUIsR0FBVCxFQUFjO0FBQzdDLFFBQUksT0FBT0EsR0FBUCxLQUFlLFVBQW5CLEVBQStCO0FBQzdCLGFBQU9BLEdBQVA7QUFDRDtBQUNGLEdBSkQ7QUFNQXBCLEVBQUFBLEtBQUssQ0FBQ0MsS0FBTixDQUFZSixRQUFaLENBQXFCLE1BQXJCLEVBQTZCLFVBQVN1QixHQUFULEVBQWM7QUFDekMsUUFBSSxPQUFPQSxHQUFQLEtBQWUsVUFBbkIsRUFBK0I7QUFDN0IsYUFBTyxJQUFJcEIsS0FBSyxDQUFDaUwsSUFBTixDQUFXdWEsWUFBZixDQUE0QnBrQixHQUE1QixDQUFQO0FBQ0Q7QUFDRixHQUpEO0FBTUFwQixFQUFBQSxLQUFLLENBQUNDLEtBQU4sQ0FBWUosUUFBWixDQUFxQixNQUFyQixFQUE2QixVQUFTdVAsSUFBVCxFQUFlO0FBQzFDLFFBQUksT0FBT0EsSUFBSSxDQUFDSixFQUFaLEtBQW1CLFVBQXZCLEVBQW1DO0FBQ2pDLGFBQU9JLElBQVA7QUFDRDtBQUNGLEdBSkQ7QUFPQSxNQUFJcVcsS0FBSyxHQUFHbmIsSUFBSSxDQUFDb2IsRUFBTCxHQUFRLENBQXBCO0FBQ0ExbEIsRUFBQUEsS0FBSyxDQUFDaUwsSUFBTixHQUFhLEVBQWI7O0FBRUEsTUFBSTBhLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBU3ZrQixHQUFULEVBQWM7QUFDaEMsV0FBTyxZQUFXO0FBQ2hCLFVBQUlnTyxJQUFJLEdBQUcsSUFBWDtBQUNBLGFBQU87QUFDTEosUUFBQUEsRUFBRSxFQUFFLFlBQVNwRixDQUFULEVBQVk7QUFDZHdGLFVBQUFBLElBQUksQ0FBQ0osRUFBTCxDQUFRNU4sR0FBRyxDQUFDd0ksQ0FBRCxDQUFYO0FBQ0Q7QUFISSxPQUFQO0FBS0QsS0FQRDtBQVFELEdBVEQ7O0FBVUEsTUFBSWdjLE9BQU8sR0FBRztBQUNaQyxJQUFBQSxPQUFPLEVBQUVGLGFBQWEsQ0FBQyxVQUFTL2IsQ0FBVCxFQUFXO0FBQUMsYUFBT0EsQ0FBQyxHQUFDLENBQVQ7QUFBYSxLQUExQixDQURWO0FBRVpzVCxJQUFBQSxLQUFLLEVBQUUsZUFBUzRJLE1BQVQsRUFBaUI7QUFDdEIsVUFBSTFXLElBQUksR0FBRyxJQUFYO0FBQ0EsYUFBTyxJQUFJcFAsS0FBSyxDQUFDaUwsSUFBTixDQUFXdWEsWUFBZixDQUE0QixVQUFTNWIsQ0FBVCxFQUFZO0FBQzdDLGVBQU93RixJQUFJLENBQUNKLEVBQUwsQ0FBUXBGLENBQUMsR0FBQ2tjLE1BQVYsQ0FBUDtBQUNELE9BRk0sQ0FBUDtBQUdELEtBUFc7QUFRWkMsSUFBQUEsU0FBUyxFQUFFLG1CQUFTQyxJQUFULEVBQWU7QUFDeEIsVUFBSTVXLElBQUksR0FBRyxJQUFYO0FBQ0EsYUFBTyxJQUFJcFAsS0FBSyxDQUFDaUwsSUFBTixDQUFXdWEsWUFBZixDQUE0QixVQUFTNWIsQ0FBVCxFQUFZO0FBQzdDLGVBQU93RixJQUFJLENBQUNKLEVBQUwsQ0FBUXBGLENBQUMsR0FBQ29jLElBQVYsQ0FBUDtBQUNELE9BRk0sQ0FBUDtBQUdELEtBYlc7QUFjWkMsSUFBQUEsS0FBSyxFQUFFLGVBQVMxaUIsT0FBVCxFQUFrQjtBQUN2QixhQUFPLElBQUl2RCxLQUFLLENBQUNpTCxJQUFOLENBQVdpYixLQUFmLENBQXFCLElBQXJCLEVBQTJCM2lCLE9BQTNCLENBQVA7QUFDRCxLQWhCVztBQWlCWjRpQixJQUFBQSxPQUFPLEVBQUUsaUJBQVNDLFNBQVQsRUFBb0JDLFdBQXBCLEVBQWlDO0FBQ3hDLFVBQUlDLFFBQVEsR0FBRyxJQUFmO0FBQ0FELE1BQUFBLFdBQVcsR0FBR0EsV0FBVyxJQUFJLEdBQTdCO0FBQ0EsVUFBSUUsVUFBVSxHQUFHLElBQUVGLFdBQW5CO0FBQ0FELE1BQUFBLFNBQVMsR0FBR3BtQixLQUFLLENBQUNDLEtBQU4sQ0FBWVgsSUFBWixDQUFpQixNQUFqQixFQUF5QjhtQixTQUF6QixDQUFaO0FBQ0EsYUFBTyxJQUFJcG1CLEtBQUssQ0FBQ2lMLElBQU4sQ0FBV3VhLFlBQWYsQ0FBNEIsVUFBUzViLENBQVQsRUFBWTtBQUM3QyxlQUFPd2MsU0FBUyxDQUFDcFgsRUFBVixDQUFhcEYsQ0FBYixJQUFrQnljLFdBQWxCLEdBQWdDQyxRQUFRLENBQUN0WCxFQUFULENBQVlwRixDQUFaLElBQWlCMmMsVUFBeEQ7QUFDRCxPQUZNLENBQVA7QUFHRDtBQXpCVyxHQUFkOztBQTRCQSxNQUFJQyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLENBQVNQLEtBQVQsRUFBZTtBQUN4QyxRQUFJeG1CLE1BQU0sR0FBR3dtQixLQUFLLENBQUN4bUIsTUFBbkI7QUFDQSxXQUFPLFVBQVNtSyxDQUFULEVBQVk7QUFDakIsVUFBSTJQLEtBQUssR0FBR2pQLElBQUksQ0FBQ2MsS0FBTCxDQUFXeEIsQ0FBQyxHQUFDcWMsS0FBSyxDQUFDeG1CLE1BQW5CLENBQVo7QUFDQSxhQUFPd21CLEtBQUssQ0FBQzFNLEtBQUQsQ0FBWjtBQUNELEtBSEQ7QUFJRCxHQU5EOztBQVFBdlosRUFBQUEsS0FBSyxDQUFDaUwsSUFBTixDQUFXaWIsS0FBWCxHQUFtQixVQUFTOVcsSUFBVCxFQUFlN0wsT0FBZixFQUF3QjtBQUN6Q0EsSUFBQUEsT0FBTyxHQUFHQSxPQUFPLElBQUksRUFBckI7QUFDQSxRQUFJNEgsV0FBVyxHQUFHNUgsT0FBTyxDQUFDMFAsT0FBUixJQUFtQixHQUFyQztBQUNBLFFBQUl3VCxhQUFhLEdBQUdsakIsT0FBTyxDQUFDa2pCLGFBQVIsSUFBeUJELG9CQUE3QztBQUVBLFFBQUlqVixNQUFNLEdBQUcsRUFBYjs7QUFDQSxTQUFLLElBQUkvUixDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUMyTCxXQUFoQixFQUE2QjNMLENBQUMsRUFBOUIsRUFBa0M7QUFDaEMrUixNQUFBQSxNQUFNLENBQUMvUixDQUFELENBQU4sR0FBWTRQLElBQUksQ0FBQ0osRUFBTCxDQUFReFAsQ0FBQyxHQUFDMkwsV0FBVixDQUFaO0FBQ0Q7O0FBRUQsU0FBSzZELEVBQUwsR0FBVXlYLGFBQWEsQ0FBQ2xWLE1BQUQsQ0FBdkI7QUFDRCxHQVhEOztBQVlBdlIsRUFBQUEsS0FBSyxDQUFDaUwsSUFBTixDQUFXaWIsS0FBWCxDQUFpQmhrQixTQUFqQixHQUE2QjBqQixPQUE3Qjs7QUFFQTVsQixFQUFBQSxLQUFLLENBQUNpTCxJQUFOLENBQVd1YSxZQUFYLEdBQTBCLFVBQVNwa0IsR0FBVCxFQUFjO0FBQ3RDLFNBQUs0TixFQUFMLEdBQVU1TixHQUFWO0FBQ0QsR0FGRDs7QUFHQXBCLEVBQUFBLEtBQUssQ0FBQ2lMLElBQU4sQ0FBV3VhLFlBQVgsQ0FBd0J0akIsU0FBeEIsR0FBb0MwakIsT0FBcEM7O0FBR0E1bEIsRUFBQUEsS0FBSyxDQUFDaUwsSUFBTixDQUFXeWIsSUFBWCxHQUFrQixZQUFXO0FBQzNCLFdBQU8sSUFBSTFtQixLQUFLLENBQUNpTCxJQUFOLENBQVd1YSxZQUFmLENBQTRCLFVBQVM1YixDQUFULEVBQVk7QUFDN0MsYUFBT1UsSUFBSSxDQUFDMEQsR0FBTCxDQUFTeVgsS0FBSyxHQUFDN2IsQ0FBZixDQUFQO0FBQ0QsS0FGTSxDQUFQO0FBR0QsR0FKRDs7QUFNQTVKLEVBQUFBLEtBQUssQ0FBQ2lMLElBQU4sQ0FBVzBiLE1BQVgsR0FBb0IsVUFBU3BqQixPQUFULEVBQWtCO0FBQ3BDQSxJQUFBQSxPQUFPLEdBQUdBLE9BQU8sSUFBSSxFQUFyQjtBQUNBLFFBQUlxakIsU0FBUyxHQUFHcmpCLE9BQU8sQ0FBQ3FqQixTQUFSLElBQXFCLEdBQXJDO0FBQ0EsUUFBSUMsU0FBUyxHQUFHdGpCLE9BQU8sQ0FBQ3NqQixTQUFSLElBQXFCLENBQXJDO0FBQ0EsUUFBSUMsUUFBUSxHQUFHdmpCLE9BQU8sQ0FBQ3VqQixRQUFSLElBQW9CLENBQUMsQ0FBcEM7QUFDQSxXQUFPLElBQUk5bUIsS0FBSyxDQUFDaUwsSUFBTixDQUFXdWEsWUFBZixDQUE0QixVQUFTNWIsQ0FBVCxFQUFZO0FBQzdDLFVBQUlBLENBQUMsR0FBQ2dkLFNBQU4sRUFBZ0I7QUFDZCxlQUFPQyxTQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0MsUUFBUDtBQUNEO0FBQ0YsS0FOTSxDQUFQO0FBT0QsR0FaRDs7QUFjQTltQixFQUFBQSxLQUFLLENBQUNpTCxJQUFOLENBQVc4YixRQUFYLEdBQXNCLFlBQVc7QUFDL0IsV0FBTyxJQUFJL21CLEtBQUssQ0FBQ2lMLElBQU4sQ0FBV3VhLFlBQWYsQ0FBNEIsVUFBUzViLENBQVQsRUFBWTtBQUM3QyxVQUFJb2QsRUFBRSxHQUFHcGQsQ0FBQyxHQUFDLElBQVg7QUFDQSxVQUFJb2QsRUFBRSxHQUFDLENBQVAsRUFBVUEsRUFBRTs7QUFDWixVQUFJQSxFQUFFLEdBQUMsR0FBUCxFQUFZO0FBQ1YsZUFBTyxJQUFFQSxFQUFFLEdBQUMsQ0FBWjtBQUNELE9BRkQsTUFFTztBQUNMLGVBQU8sQ0FBQyxDQUFELEdBQUcsQ0FBQ0EsRUFBRSxHQUFDLEdBQUosSUFBUyxDQUFuQjtBQUNEO0FBQ0YsS0FSTSxDQUFQO0FBU0QsR0FWRDs7QUFZQWhuQixFQUFBQSxLQUFLLENBQUNpTCxJQUFOLENBQVdnYyxRQUFYLEdBQXNCLFlBQVc7QUFDL0IsV0FBTyxJQUFJam5CLEtBQUssQ0FBQ2lMLElBQU4sQ0FBV3VhLFlBQWYsQ0FBNEIsVUFBUzViLENBQVQsRUFBWTtBQUM3QyxhQUFPQSxDQUFDLEdBQUMsQ0FBRixHQUFJLENBQVg7QUFDRCxLQUZNLENBQVA7QUFHRCxHQUpEO0FBTUQsQ0F2SUQ7OztBQ0FBNUosS0FBSyxHQUFHQSxLQUFLLElBQUcsRUFBaEI7QUFDQUEsS0FBSyxDQUFDa25CLE9BQU4sR0FBZ0JsbkIsS0FBSyxDQUFDa25CLE9BQU4sSUFBZSxFQUEvQjs7QUFDQWxuQixLQUFLLENBQUNrbkIsT0FBTixDQUFjQyxnQkFBZCxHQUFpQyxVQUFTQyxlQUFULEVBQTBCO0FBQ3pELE1BQUlDLFVBQUo7QUFDQSxNQUFJQyxTQUFKO0FBQ0EsTUFBSUMsUUFBSjtBQUVBLFNBQU87QUFDTEMsSUFBQUEsU0FBUyxFQUFFLG1CQUFTM1osSUFBVCxFQUFlbEUsS0FBZixFQUFzQjtBQUMvQixVQUFJOGQsZ0JBQUo7O0FBQ0EsVUFBSUYsUUFBUSxJQUFJRCxTQUFoQixFQUEyQjtBQUN6QkcsUUFBQUEsZ0JBQWdCLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlaGUsS0FBZixDQUFuQjtBQUNBLFlBQUk0ZCxRQUFRLEtBQUsxWixJQUFiLElBQXFCeVosU0FBUyxLQUFLRyxnQkFBdkMsRUFBeUQsT0FBT0osVUFBUDtBQUMxRDs7QUFFREUsTUFBQUEsUUFBUSxHQUFHMVosSUFBWDtBQUNBeVosTUFBQUEsU0FBUyxHQUFHRyxnQkFBZ0IsSUFBSUMsSUFBSSxDQUFDQyxTQUFMLENBQWVoZSxLQUFmLENBQWhDO0FBQ0EwZCxNQUFBQSxVQUFVLEdBQUdELGVBQWUsQ0FBQ0ksU0FBaEIsQ0FBMEIzWixJQUExQixFQUFnQ2xFLEtBQWhDLENBQWI7QUFDQSxhQUFPMGQsVUFBUDtBQUNELEtBWkk7QUFjTE8sSUFBQUEsV0FBVyxFQUFFUixlQUFlLENBQUNRLFdBQWhCLENBQTRCMW1CLElBQTVCLENBQWlDa21CLGVBQWpDO0FBZFIsR0FBUDtBQWdCRCxDQXJCRDs7O0FDRkFwbkIsS0FBSyxHQUFHQSxLQUFLLElBQUcsRUFBaEI7QUFDQUEsS0FBSyxDQUFDa25CLE9BQU4sR0FBZ0JsbkIsS0FBSyxDQUFDa25CLE9BQU4sSUFBZSxFQUEvQjs7QUFFQSxDQUFDLFlBQVc7QUFFWmxuQixFQUFBQSxLQUFLLENBQUNrbkIsT0FBTixDQUFjVyx3QkFBZCxHQUF5QyxVQUFTVCxlQUFULEVBQTBCO0FBQ2pFLFFBQUlVLFdBQVcsR0FBRyxDQUNoQixDQUFDLEdBQUQsRUFBTSxHQUFOLENBRGdCLEVBRWhCLENBQUMsSUFBRCxFQUFPLEVBQVAsQ0FGZ0IsRUFHaEIsQ0FBQyxZQUFELEVBQWUsRUFBZixDQUhnQixFQUloQixDQUFDLFlBQUQsRUFBZSxDQUFmLENBSmdCLEVBS2hCLENBQUMsY0FBRCxFQUFpQixDQUFqQixDQUxnQixDQUFsQjs7QUFRQSxRQUFJdlksS0FBSyxHQUFHLFNBQVJBLEtBQVEsQ0FBUzJSLEdBQVQsRUFBY3JOLENBQWQsRUFBaUI7QUFDM0IsVUFBSXhSLEdBQUcsR0FBRyxFQUFWOztBQUNBLFdBQUssSUFBSTdDLENBQUMsR0FBRSxDQUFaLEVBQWNBLENBQUMsR0FBQ3FVLENBQWhCLEVBQW1CclUsQ0FBQyxFQUFwQjtBQUF3QjZDLFFBQUFBLEdBQUcsR0FBR0EsR0FBRyxHQUFHNmUsR0FBWjtBQUF4Qjs7QUFDQSxhQUFPN2UsR0FBUDtBQUNELEtBSkQ7O0FBTUEsUUFBSW9SLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVM5TSxDQUFULEVBQVlDLENBQVosRUFBYztBQUFFLGFBQU9ELENBQUMsQ0FBQzhNLE1BQUYsQ0FBUzdNLENBQVQsQ0FBUDtBQUFxQixLQUFsRDs7QUFDQSxRQUFJbWhCLElBQUksR0FBR0QsV0FBVyxDQUFDM1AsR0FBWixDQUFnQixVQUFTbkwsSUFBVCxFQUFlO0FBQ3hDLGFBQU91QyxLQUFLLENBQUN2QyxJQUFJLENBQUMsQ0FBRCxDQUFMLEVBQVVBLElBQUksQ0FBQyxDQUFELENBQWQsQ0FBWjtBQUNELEtBRlUsRUFFUnFULE1BRlEsQ0FFRDVNLE1BRkMsQ0FBWDtBQUlBc1UsSUFBQUEsSUFBSSxHQUFHQSxJQUFJLEdBQUcsa0dBQWQ7QUFDQSxRQUFJQyxPQUFPLEdBQUdDLE9BQU8sQ0FBQ0MsWUFBUixDQUFxQkgsSUFBckIsQ0FBZDs7QUFFQSxRQUFJUCxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFTM1osSUFBVCxFQUFldE8sR0FBZixFQUFvQjtBQUNsQyxVQUFJMmhCLEdBQUcsR0FBR2tHLGVBQWUsQ0FBQ0ksU0FBaEIsQ0FBMEIzWixJQUExQixFQUFnQ3RPLEdBQWhDLENBQVY7QUFDQSxhQUFPeW9CLE9BQU8sQ0FBQ0csTUFBUixDQUFlakgsR0FBZixDQUFQO0FBQ0QsS0FIRDs7QUFLQSxRQUFJMEcsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBUy9aLElBQVQsRUFBZXFULEdBQWYsRUFBb0I7QUFDcEMsVUFBSWtILE9BQU8sR0FBR0osT0FBTyxDQUFDSyxNQUFSLENBQWVuSCxHQUFmLENBQWQ7QUFDQSxhQUFPa0csZUFBZSxDQUFDUSxXQUFoQixDQUE0Qi9aLElBQTVCLEVBQWtDdWEsT0FBbEMsQ0FBUDtBQUNELEtBSEQ7O0FBS0EsV0FBTztBQUNMWixNQUFBQSxTQUFTLEVBQUVBLFNBRE47QUFFTEksTUFBQUEsV0FBVyxFQUFFQTtBQUZSLEtBQVA7QUFJRCxHQXJDRDtBQXdDQyxDQTFDRDs7O0FDSEE1bkIsS0FBSyxHQUFHQSxLQUFLLElBQUcsRUFBaEI7QUFDQUEsS0FBSyxDQUFDa25CLE9BQU4sR0FBZ0JsbkIsS0FBSyxDQUFDa25CLE9BQU4sSUFBZSxFQUEvQjtBQUNBbG5CLEtBQUssQ0FBQ2tuQixPQUFOLENBQWNvQixjQUFkLEdBQStCLEVBQS9COztBQUVBdG9CLEtBQUssQ0FBQ2tuQixPQUFOLENBQWNvQixjQUFkLENBQTZCZCxTQUE3QixHQUF5QyxVQUFTM1osSUFBVCxFQUFldE8sR0FBZixFQUFvQjtBQUMzRCxTQUFPbW9CLElBQUksQ0FBQ0MsU0FBTCxDQUFlcG9CLEdBQWYsQ0FBUDtBQUNELENBRkQ7O0FBSUFTLEtBQUssQ0FBQ2tuQixPQUFOLENBQWNvQixjQUFkLENBQTZCVixXQUE3QixHQUEyQyxVQUFTL1osSUFBVCxFQUFlcVQsR0FBZixFQUFvQjtBQUM3RCxTQUFPd0csSUFBSSxDQUFDNUcsS0FBTCxDQUFXSSxHQUFYLENBQVA7QUFDRCxDQUZEOzs7OztBQ1JBbGhCLEtBQUssR0FBR0EsS0FBSyxJQUFHLEVBQWhCO0FBQ0FBLEtBQUssQ0FBQ2tuQixPQUFOLEdBQWdCbG5CLEtBQUssQ0FBQ2tuQixPQUFOLElBQWUsRUFBL0I7QUFDQWxuQixLQUFLLENBQUNrbkIsT0FBTixDQUFjcUIsZUFBZCxHQUFnQyxFQUFoQzs7QUFDQSxDQUFDLFlBQVc7QUFFWixNQUFJQyxlQUFlLEdBQUcsRUFBdEI7O0FBRUEsTUFBSUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsQ0FBUzloQixDQUFULEVBQVlDLENBQVosRUFBZTtBQUN6QixRQUFJLFFBQU9ELENBQVAsY0FBb0JDLENBQXBCLENBQUosRUFBMkIsT0FBTyxLQUFQO0FBRTNCLFFBQUlnUixLQUFLLENBQUNDLE9BQU4sQ0FBY2xSLENBQWQsS0FBb0IsQ0FBQ2lSLEtBQUssQ0FBQ0MsT0FBTixDQUFjalIsQ0FBZCxDQUF6QixFQUEyQyxPQUFPLEtBQVA7QUFDM0MsUUFBSWdSLEtBQUssQ0FBQ0MsT0FBTixDQUFjalIsQ0FBZCxLQUFvQixDQUFDZ1IsS0FBSyxDQUFDQyxPQUFOLENBQWNsUixDQUFkLENBQXpCLEVBQTJDLE9BQU8sS0FBUDs7QUFFM0MsUUFBSWlSLEtBQUssQ0FBQ0MsT0FBTixDQUFjbFIsQ0FBZCxDQUFKLEVBQXNCO0FBQ3BCLFVBQUlBLENBQUMsQ0FBQ2xILE1BQUYsS0FBYW1ILENBQUMsQ0FBQ25ILE1BQW5CLEVBQTJCLE9BQU8sS0FBUDs7QUFDM0IsV0FBSyxJQUFJRCxDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUNtSCxDQUFDLENBQUNsSCxNQUFsQixFQUEwQkQsQ0FBQyxFQUEzQixFQUErQjtBQUM3QixZQUFJLENBQUNpcEIsS0FBSyxDQUFDOWhCLENBQUMsQ0FBQ25ILENBQUQsQ0FBRixFQUFPb0gsQ0FBQyxDQUFDcEgsQ0FBRCxDQUFSLENBQVYsRUFBd0IsT0FBTyxLQUFQO0FBQ3pCOztBQUNELGFBQU8sSUFBUDtBQUNELEtBTkQsTUFNTyxJQUFJLFFBQU9tSCxDQUFQLE1BQWEsUUFBakIsRUFBMkI7QUFDaEMsYUFBT1UsTUFBTSxDQUFDcWhCLElBQVAsQ0FBWS9oQixDQUFaLEVBQWV5UixLQUFmLENBQXFCLFVBQVN1USxHQUFULEVBQWM7QUFDeEMsZUFBT0YsS0FBSyxDQUFDOWhCLENBQUMsQ0FBQ2dpQixHQUFELENBQUYsRUFBUy9oQixDQUFDLENBQUMraEIsR0FBRCxDQUFWLENBQVo7QUFDRCxPQUZNLENBQVA7QUFHRCxLQUpNLE1BSUE7QUFDTCxhQUFPaGlCLENBQUMsS0FBS0MsQ0FBYjtBQUNEO0FBQ0YsR0FuQkQ7O0FBcUJBNUcsRUFBQUEsS0FBSyxDQUFDa25CLE9BQU4sQ0FBY3FCLGVBQWQsQ0FBOEJFLEtBQTlCLEdBQXNDQSxLQUF0Qzs7QUFFQXpvQixFQUFBQSxLQUFLLENBQUNrbkIsT0FBTixDQUFjcUIsZUFBZCxDQUE4QkssY0FBOUIsR0FBK0MsVUFBU0MsVUFBVCxFQUFxQjtBQUNsRSxXQUFPO0FBQ0xyQixNQUFBQSxTQUFTLEVBQUUsbUJBQVMzWixJQUFULEVBQWV0TyxHQUFmLEVBQW9CO0FBQzdCLFlBQUk7QUFDRixjQUFJd0ksTUFBTSxHQUFHOGdCLFVBQVUsQ0FBQ3JCLFNBQVgsQ0FBcUIzWixJQUFyQixFQUEyQnRPLEdBQTNCLENBQWI7QUFDQSxjQUFJdXBCLGNBQWMsR0FBR0QsVUFBVSxDQUFDakIsV0FBWCxDQUF1Qi9aLElBQXZCLEVBQTZCOUYsTUFBN0IsQ0FBckI7QUFDQSxpQkFBTy9ILEtBQUssQ0FBQ2tuQixPQUFOLENBQWNxQixlQUFkLENBQThCRSxLQUE5QixDQUFvQ2xwQixHQUFwQyxFQUF5Q3VwQixjQUF6QyxJQUEyRC9nQixNQUEzRCxHQUFvRSxJQUEzRTtBQUNELFNBSkQsQ0FJQyxPQUFNMUcsQ0FBTixFQUFTO0FBQ1IsaUJBQU8sSUFBUCxDQURRLENBQ0s7QUFDZDtBQUNGLE9BVEk7QUFVTHVtQixNQUFBQSxXQUFXLEVBQUVpQixVQUFVLENBQUNqQjtBQVZuQixLQUFQO0FBWUQsR0FiRDs7QUFlQSxNQUFJbUIsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBU3BpQixDQUFULEVBQVlDLENBQVosRUFBZTtBQUM1QixXQUFPRCxDQUFDLENBQUNsSCxNQUFGLEdBQVdtSCxDQUFDLENBQUNuSCxNQUFiLEdBQXNCa0gsQ0FBdEIsR0FBMEJDLENBQWpDO0FBQ0QsR0FGRDs7QUFJQSxNQUFJb2lCLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVNyaUIsQ0FBVCxFQUFZO0FBQUUsV0FBTyxDQUFDLENBQUNBLENBQVQ7QUFBWSxHQUF2Qzs7QUFFQTNHLEVBQUFBLEtBQUssQ0FBQ2tuQixPQUFOLENBQWNxQixlQUFkLENBQThCVSxRQUE5QixHQUF5QyxVQUFTOVYsS0FBVCxFQUFnQjtBQUN2REEsSUFBQUEsS0FBSyxHQUFHQSxLQUFLLENBQUNuUSxNQUFOLENBQWFnbUIsTUFBYixDQUFSO0FBQ0EsUUFBSTdWLEtBQUssQ0FBQzFULE1BQVYsRUFBa0IsT0FBTzBULEtBQUssQ0FBQ25RLE1BQU4sQ0FBYWdtQixNQUFiLEVBQXFCM0ksTUFBckIsQ0FBNEIwSSxRQUE1QixDQUFQO0FBRWxCLFVBQU0sSUFBSUcsS0FBSixDQUFVLHlCQUFWLENBQU47QUFDRCxHQUxEOztBQU9BbHBCLEVBQUFBLEtBQUssQ0FBQ2tuQixPQUFOLENBQWNxQixlQUFkLENBQThCZixTQUE5QixHQUEwQyxVQUFTM1osSUFBVCxFQUFldE8sR0FBZixFQUFvQjtBQUM1RCxXQUFPUyxLQUFLLENBQUNrbkIsT0FBTixDQUFjcUIsZUFBZCxDQUE4QlUsUUFBOUIsQ0FDTFQsZUFBZSxDQUFDclEsR0FBaEIsQ0FBb0IsVUFBU0csQ0FBVCxFQUFZO0FBQzlCLFVBQUk2USxVQUFVLEdBQUc3USxDQUFDLENBQUN1USxVQUFGLENBQWFyQixTQUFiLENBQXVCM1osSUFBdkIsRUFBNkJ0TyxHQUE3QixDQUFqQjtBQUNBLFVBQUksQ0FBQzRwQixVQUFMLEVBQWlCLE9BQU9BLFVBQVA7QUFDakIsYUFBTzdRLENBQUMsQ0FBQ2pTLElBQUYsQ0FBT29OLE1BQVAsQ0FBYzBWLFVBQWQsQ0FBUDtBQUNELEtBSkQsQ0FESyxDQUFQO0FBT0QsR0FSRDs7QUFVQW5wQixFQUFBQSxLQUFLLENBQUNrbkIsT0FBTixDQUFjcUIsZUFBZCxDQUE4QlgsV0FBOUIsR0FBNEMsVUFBUy9aLElBQVQsRUFBZXRPLEdBQWYsRUFBb0I7QUFDOUQsU0FBSyxJQUFJQyxDQUFDLEdBQUMsQ0FBWCxFQUFhQSxDQUFDLEdBQUNncEIsZUFBZSxDQUFDL29CLE1BQS9CLEVBQXNDRCxDQUFDLEVBQXZDLEVBQTJDO0FBQ3pDLFVBQUlELEdBQUcsQ0FBQyxDQUFELENBQUgsS0FBU2lwQixlQUFlLENBQUNocEIsQ0FBRCxDQUFmLENBQW1CNkcsSUFBaEMsRUFBc0MsT0FBT21pQixlQUFlLENBQUNocEIsQ0FBRCxDQUFmLENBQW1CcXBCLFVBQW5CLENBQThCakIsV0FBOUIsQ0FBMEMvWixJQUExQyxFQUFnRHRPLEdBQUcsQ0FBQ3NpQixLQUFKLENBQVUsQ0FBVixDQUFoRCxDQUFQO0FBQ3ZDOztBQUVELFVBQU0sSUFBSXFILEtBQUosQ0FBVSxvQkFBVixDQUFOO0FBQ0QsR0FORDs7QUFRQWxwQixFQUFBQSxLQUFLLENBQUNrbkIsT0FBTixDQUFjcUIsZUFBZCxDQUE4QmEsY0FBOUIsR0FBK0MsVUFBU2pXLEtBQVQsRUFBZ0I7QUFDN0RxVixJQUFBQSxlQUFlLEdBQUdyVixLQUFLLENBQUNnRixHQUFOLENBQVUsVUFBU2tSLEtBQVQsRUFBZ0I7QUFDMUMsYUFBTztBQUNMUixRQUFBQSxVQUFVLEVBQUU3b0IsS0FBSyxDQUFDa25CLE9BQU4sQ0FBY3FCLGVBQWQsQ0FBOEJLLGNBQTlCLENBQTZDUyxLQUFLLENBQUNSLFVBQW5ELENBRFA7QUFFTHhpQixRQUFBQSxJQUFJLEVBQUVnakIsS0FBSyxDQUFDaGpCO0FBRlAsT0FBUDtBQUlELEtBTGlCLENBQWxCO0FBTUQsR0FQRDtBQVNDLENBbEZEOzs7QUNIQXJHLEtBQUssR0FBR0EsS0FBSyxJQUFHLEVBQWhCO0FBQ0FBLEtBQUssQ0FBQ2tuQixPQUFOLEdBQWdCbG5CLEtBQUssQ0FBQ2tuQixPQUFOLElBQWUsRUFBL0I7QUFDQWxuQixLQUFLLENBQUNrbkIsT0FBTixDQUFjb0Msb0JBQWQsR0FBcUMsRUFBckM7O0FBRUEsQ0FBQyxZQUFXO0FBRVosTUFBSUMsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFTYixJQUFULEVBQWU7QUFDcEMsUUFBSWMsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBU2pxQixHQUFULEVBQWM7QUFDdkIsVUFBSTRULEtBQUssR0FBRyxFQUFaOztBQUNBLFdBQUssSUFBSTNULENBQUMsR0FBQyxDQUFYLEVBQWNBLENBQUMsR0FBQ2twQixJQUFJLENBQUNqcEIsTUFBckIsRUFBNkJELENBQUMsRUFBOUIsRUFBa0M7QUFDaEMsWUFBSW1wQixHQUFHLEdBQUdELElBQUksQ0FBQ2xwQixDQUFELENBQWQ7O0FBQ0EsWUFBSW9ZLEtBQUssQ0FBQ0MsT0FBTixDQUFjOFEsR0FBZCxDQUFKLEVBQXdCO0FBQ3RCeFYsVUFBQUEsS0FBSyxDQUFDOVQsSUFBTixDQUFXc3BCLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT2EsSUFBUCxDQUFZanFCLEdBQUcsQ0FBQ29wQixHQUFHLENBQUMsQ0FBRCxDQUFKLENBQWYsRUFBeUJwcEIsR0FBekIsQ0FBWDtBQUNELFNBRkQsTUFFTztBQUNMLGNBQUlBLEdBQUcsQ0FBQ29wQixHQUFELENBQUgsS0FBVyxJQUFYLElBQW1CcHBCLEdBQUcsQ0FBQ29wQixHQUFELENBQUgsS0FBV3BVLFNBQWxDLEVBQTZDcEIsS0FBSyxDQUFDOVQsSUFBTixDQUFXRSxHQUFHLENBQUNvcEIsR0FBRCxDQUFkO0FBQzlDO0FBQ0Y7O0FBQ0QsYUFBT3hWLEtBQVA7QUFDRCxLQVhEOztBQWFBLFFBQUlzVyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFTdFcsS0FBVCxFQUFnQjtBQUMzQixVQUFJNVQsR0FBRyxHQUFHLEVBQVY7O0FBQ0EsV0FBSyxJQUFJQyxDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUMyVCxLQUFLLENBQUMxVCxNQUF0QixFQUE4QkQsQ0FBQyxFQUEvQixFQUFtQztBQUNqQyxZQUFJbXBCLEdBQUcsR0FBR0QsSUFBSSxDQUFDbHBCLENBQUQsQ0FBZDs7QUFDQSxZQUFJb1ksS0FBSyxDQUFDQyxPQUFOLENBQWM4USxHQUFkLENBQUosRUFBd0I7QUFDdEJwcEIsVUFBQUEsR0FBRyxDQUFDb3BCLEdBQUcsQ0FBQyxDQUFELENBQUosQ0FBSCxHQUFjQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9jLE1BQVAsQ0FBY3RXLEtBQUssQ0FBQzNULENBQUQsQ0FBbkIsRUFBd0JELEdBQXhCLENBQWQ7QUFDRCxTQUZELE1BRU87QUFDTCxjQUFJNFQsS0FBSyxDQUFDM1QsQ0FBRCxDQUFMLEtBQVcsSUFBWCxJQUFtQjJULEtBQUssQ0FBQzNULENBQUQsQ0FBTCxLQUFXK1UsU0FBbEMsRUFBNkNoVixHQUFHLENBQUNvcEIsR0FBRCxDQUFILEdBQVd4VixLQUFLLENBQUMzVCxDQUFELENBQWhCO0FBQzlDO0FBQ0Y7O0FBQ0QsYUFBT0QsR0FBUDtBQUNELEtBWEQ7O0FBYUEsV0FBTztBQUFDaXFCLE1BQUFBLElBQUksRUFBRUEsSUFBUDtBQUFhQyxNQUFBQSxNQUFNLEVBQUVBO0FBQXJCLEtBQVA7QUFDRCxHQTVCRDs7QUE4QkEsTUFBSXRXLEtBQUssR0FBRyxTQUFSQSxLQUFRLENBQVN1VyxXQUFULEVBQXNCO0FBQ2hDLFFBQUlGLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQVNqcUIsR0FBVCxFQUFjO0FBQ3ZCLGFBQU9BLEdBQUcsQ0FBQzRZLEdBQUosQ0FBUXVSLFdBQVcsQ0FBQ0YsSUFBcEIsQ0FBUDtBQUNELEtBRkQ7O0FBSUEsUUFBSUMsTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBU3RXLEtBQVQsRUFBZ0I7QUFDM0IsYUFBT0EsS0FBSyxDQUFDZ0YsR0FBTixDQUFVdVIsV0FBVyxDQUFDRCxNQUF0QixDQUFQO0FBQ0QsS0FGRDs7QUFJQSxXQUFPO0FBQUNELE1BQUFBLElBQUksRUFBRUEsSUFBUDtBQUFhQyxNQUFBQSxNQUFNLEVBQUVBO0FBQXJCLEtBQVA7QUFDRCxHQVZEOztBQVlBLE1BQUloVyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFTOU0sQ0FBVCxFQUFZQyxDQUFaLEVBQWM7QUFBQyxXQUFPRCxDQUFDLENBQUM4TSxNQUFGLENBQVM3TSxDQUFULENBQVA7QUFBcUIsR0FBakQ7O0FBQ0EsTUFBSStpQixPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFTRCxXQUFULEVBQXNCRSxJQUF0QixFQUE0QjtBQUN4QyxRQUFJSixJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFTanFCLEdBQVQsRUFBYztBQUN2QixVQUFJOEMsR0FBRyxHQUFHcW5CLFdBQVcsQ0FBQ0YsSUFBWixDQUFpQmpxQixHQUFqQixDQUFWO0FBQ0EsYUFBTzhDLEdBQUcsQ0FBQ2dlLE1BQUosQ0FBVzVNLE1BQVgsRUFBbUIsRUFBbkIsQ0FBUDtBQUNELEtBSEQ7O0FBS0EsUUFBSWdXLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVN0VyxLQUFULEVBQWdCO0FBQzNCLFVBQUkwVyxTQUFTLEdBQUcsRUFBaEI7O0FBQ0EsV0FBSyxJQUFJcnFCLENBQUMsR0FBQyxDQUFYLEVBQWNBLENBQUMsR0FBQzJULEtBQUssQ0FBQzFULE1BQXRCLEVBQThCRCxDQUFDLElBQUVvcUIsSUFBakMsRUFBdUM7QUFDckNDLFFBQUFBLFNBQVMsQ0FBQ3hxQixJQUFWLENBQWU4VCxLQUFLLENBQUMwTyxLQUFOLENBQVlyaUIsQ0FBWixFQUFjQSxDQUFDLEdBQUNvcUIsSUFBaEIsQ0FBZjtBQUNEOztBQUNELGFBQU9GLFdBQVcsQ0FBQ0QsTUFBWixDQUFtQkksU0FBbkIsQ0FBUDtBQUNELEtBTkQ7O0FBUUEsV0FBTztBQUFDTCxNQUFBQSxJQUFJLEVBQUVBLElBQVA7QUFBYUMsTUFBQUEsTUFBTSxFQUFFQTtBQUFyQixLQUFQO0FBQ0QsR0FmRDs7QUFpQkEsTUFBSUssYUFBYSxHQUFHUCxnQkFBZ0IsQ0FBQyxDQUNuQyxTQURtQyxFQUVuQyxjQUZtQyxFQUduQyxLQUhtQyxFQUluQyxlQUptQyxFQUtuQyxZQUxtQyxFQU1uQyxDQUFDLFFBQUQsRUFBV0ksT0FBTyxDQUFDeFcsS0FBSyxDQUN0Qm9XLGdCQUFnQixDQUFDLENBQUMsUUFBRCxFQUFVLENBQUMsUUFBRCxFQUFXSSxPQUFPLENBQUN4VyxLQUFLLENBQUNvVyxnQkFBZ0IsQ0FBQyxDQUFDLEdBQUQsRUFBSyxHQUFMLEVBQVMsR0FBVCxDQUFELENBQWpCLENBQU4sRUFBd0MsQ0FBeEMsQ0FBbEIsQ0FBVixFQUF5RSxZQUF6RSxDQUFELENBRE0sQ0FBTixFQUVoQixDQUZnQixDQUFsQixDQU5tQyxDQUFELENBQXBDOztBQVdBLE1BQUlRLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBcUIsQ0FBUzdTLEtBQVQsRUFBZ0I7QUFDdkMsUUFBSXNTLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQVNqcUIsR0FBVCxFQUFjO0FBQ3ZCLFVBQUkraUIsUUFBUSxHQUFHLEVBQWY7O0FBQ0EsVUFBSTBILGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBU0MsS0FBVCxFQUFnQjtBQUNsQyxZQUFHQSxLQUFLLENBQUNDLEVBQVQsRUFBYTtBQUNYLGNBQUk1SCxRQUFRLENBQUNqRCxPQUFULENBQWlCNEssS0FBSyxDQUFDQyxFQUF2QixNQUE2QixDQUFDLENBQWxDLEVBQXFDNUgsUUFBUSxDQUFDampCLElBQVQsQ0FBYzRxQixLQUFLLENBQUNDLEVBQXBCO0FBQ3JDLGlCQUFPO0FBQUNBLFlBQUFBLEVBQUUsRUFBRTVILFFBQVEsQ0FBQ2pELE9BQVQsQ0FBaUI0SyxLQUFLLENBQUNDLEVBQXZCLElBQTJCO0FBQWhDLFdBQVA7QUFDRCxTQUhELE1BR087QUFDTCxpQkFBTztBQUFDQSxZQUFBQSxFQUFFLEVBQUU7QUFBTCxXQUFQO0FBQ0Q7QUFDRixPQVBEOztBQVNBLFVBQUlDLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVNDLEtBQVQsRUFBZ0I7QUFDakMsZUFBTztBQUNMQyxVQUFBQSxNQUFNLEVBQUVELEtBQUssQ0FBQ0MsTUFBTixDQUFhbFMsR0FBYixDQUFpQjZSLGFBQWpCO0FBREgsU0FBUDtBQUdELE9BSkQ7O0FBTUEsVUFBSU0sU0FBUyxHQUFHO0FBQ2RoSSxRQUFBQSxRQUFRLEVBQUVBLFFBREk7QUFFZFUsUUFBQUEsT0FBTyxFQUFFempCLEdBQUcsQ0FBQ3lqQixPQUZDO0FBR2QvSCxRQUFBQSxHQUFHLEVBQUUxYixHQUFHLENBQUMwYixHQUhLO0FBSWRzUCxRQUFBQSxNQUFNLEVBQUVockIsR0FBRyxDQUFDZ3JCLE1BQUosQ0FBV3BTLEdBQVgsQ0FBZWdTLFlBQWY7QUFKTSxPQUFoQjtBQU9BLGFBQU9qVCxLQUFLLENBQUNzUyxJQUFOLENBQVdjLFNBQVgsQ0FBUDtBQUNELEtBekJEOztBQTJCQSxRQUFJYixNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFTbHFCLEdBQVQsRUFBYztBQUN6QixVQUFJOEMsR0FBRyxHQUFHNlUsS0FBSyxDQUFDdVMsTUFBTixDQUFhbHFCLEdBQWIsQ0FBVjtBQUNBOEMsTUFBQUEsR0FBRyxDQUFDa29CLE1BQUosQ0FBV3BuQixPQUFYLENBQW1CLFVBQVNpbkIsS0FBVCxFQUFnQjtBQUNqQ0EsUUFBQUEsS0FBSyxDQUFDQyxNQUFOLENBQWFsbkIsT0FBYixDQUFxQixVQUFTOG1CLEtBQVQsRUFBZ0I7QUFDbkMsY0FBSUEsS0FBSyxDQUFDQyxFQUFOLEtBQWEsQ0FBakIsRUFBb0I7QUFDbEIsbUJBQU9ELEtBQUssQ0FBQ0MsRUFBYjtBQUNELFdBRkQsTUFFTztBQUNMRCxZQUFBQSxLQUFLLENBQUNDLEVBQU4sR0FBVzduQixHQUFHLENBQUNpZ0IsUUFBSixDQUFhMkgsS0FBSyxDQUFDQyxFQUFOLEdBQVMsQ0FBdEIsQ0FBWDtBQUNEO0FBQ0YsU0FORDtBQU9ELE9BUkQ7QUFVQSxhQUFPO0FBQ0xsSCxRQUFBQSxPQUFPLEVBQUUzZ0IsR0FBRyxDQUFDMmdCLE9BRFI7QUFFTC9ILFFBQUFBLEdBQUcsRUFBRTVZLEdBQUcsQ0FBQzRZLEdBRko7QUFHTHNQLFFBQUFBLE1BQU0sRUFBRWxvQixHQUFHLENBQUNrb0I7QUFIUCxPQUFQO0FBS0QsS0FqQkQ7O0FBbUJBLFdBQU87QUFBQ2YsTUFBQUEsSUFBSSxFQUFFQSxJQUFQO0FBQWFDLE1BQUFBLE1BQU0sRUFBRUE7QUFBckIsS0FBUDtBQUNELEdBaEREOztBQWtEQSxNQUFJZSxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFTOUIsSUFBVCxFQUFlO0FBQ2hDLFFBQUljLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQVNqcUIsR0FBVCxFQUFjO0FBQ3ZCLFVBQUlrckIsR0FBRyxHQUFHL0IsSUFBSSxDQUFDckosT0FBTCxDQUFhOWYsR0FBYixDQUFWO0FBQ0EsVUFBSWtyQixHQUFHLEtBQUssQ0FBQyxDQUFiLEVBQWdCLE9BQU9sckIsR0FBUDtBQUNoQixhQUFPa3JCLEdBQVA7QUFDRCxLQUpEOztBQU1BLFFBQUloQixNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFTbHFCLEdBQVQsRUFBYztBQUN6QixVQUFJa08sS0FBSyxDQUFDbE8sR0FBRCxDQUFULEVBQWdCLE9BQU9BLEdBQVA7QUFDaEIsYUFBT21wQixJQUFJLENBQUNucEIsR0FBRCxDQUFYO0FBQ0QsS0FIRDs7QUFLQSxXQUFPO0FBQUNpcUIsTUFBQUEsSUFBSSxFQUFFQSxJQUFQO0FBQWFDLE1BQUFBLE1BQU0sRUFBRUE7QUFBckIsS0FBUDtBQUNELEdBYkQ7O0FBZUEsTUFBSWlCLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVNDLGVBQVQsRUFBMEJDLE9BQTFCLEVBQW1DO0FBRXBELFFBQUlwQixJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFTanFCLEdBQVQsRUFBY3NyQixNQUFkLEVBQXNCO0FBQy9CLFVBQUluQixXQUFXLEdBQUdrQixPQUFPLENBQUNDLE1BQU0sQ0FBQ0YsZUFBRCxDQUFQLENBQXpCOztBQUNBLFVBQUksQ0FBQ2pCLFdBQUwsRUFBa0I7QUFDaEIsZUFBT25xQixHQUFQO0FBQ0Q7O0FBRUQsYUFBT21xQixXQUFXLENBQUNGLElBQVosQ0FBaUJqcUIsR0FBakIsQ0FBUDtBQUNELEtBUEQ7O0FBU0EsUUFBSWtxQixNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFTbHFCLEdBQVQsRUFBY3NyQixNQUFkLEVBQXNCO0FBQ2pDLFVBQUluQixXQUFXLEdBQUdrQixPQUFPLENBQUNDLE1BQU0sQ0FBQ0YsZUFBRCxDQUFQLENBQXpCOztBQUNBLFVBQUksQ0FBQ2pCLFdBQUwsRUFBa0I7QUFDaEIsZUFBT25xQixHQUFQO0FBQ0Q7O0FBRUQsYUFBT21xQixXQUFXLENBQUNELE1BQVosQ0FBbUJscUIsR0FBbkIsQ0FBUDtBQUNELEtBUEQ7O0FBU0EsV0FBTztBQUFDaXFCLE1BQUFBLElBQUksRUFBRUEsSUFBUDtBQUFhQyxNQUFBQSxNQUFNLEVBQUVBO0FBQXJCLEtBQVA7QUFDRCxHQXJCRDs7QUF1QkEsTUFBSXFCLGFBQWEsR0FBRztBQUNsQnRCLElBQUFBLElBQUksRUFBRSxjQUFTanFCLEdBQVQsRUFBYztBQUNsQixVQUFJQSxHQUFHLEtBQUtnVixTQUFaLEVBQXVCLE9BQU8sQ0FBUDtBQUN2QixVQUFJaFYsR0FBRyxLQUFLLElBQVosRUFBa0IsT0FBTyxDQUFQO0FBRWxCLGFBQU8sQ0FBQyxDQUFDQSxHQUFGLEdBQVEsQ0FBUixHQUFZLENBQW5CO0FBQ0QsS0FOaUI7QUFRbEJrcUIsSUFBQUEsTUFBTSxFQUFFLGdCQUFTbHFCLEdBQVQsRUFBYztBQUNwQixVQUFJQSxHQUFHLEtBQUcsQ0FBVixFQUFhLE9BQU9nVixTQUFQO0FBQ2IsVUFBSWhWLEdBQUcsS0FBRyxDQUFWLEVBQWEsT0FBTyxJQUFQO0FBRWIsYUFBT0EsR0FBRyxLQUFLLENBQVIsR0FBWSxJQUFaLEdBQW1CLEtBQTFCO0FBQ0Q7QUFiaUIsR0FBcEI7O0FBZ0JBLE1BQUl3ckIsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBU3JCLFdBQVQsRUFBc0I7QUFDbkMsUUFBSUYsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBU2pxQixHQUFULEVBQWM7QUFDdkIsVUFBSUEsR0FBRyxLQUFLZ1YsU0FBWixFQUF1QixPQUFPLENBQVA7QUFDdkIsVUFBSWhWLEdBQUcsS0FBSyxJQUFaLEVBQWtCLE9BQU8sQ0FBUDtBQUVsQixhQUFPbXFCLFdBQVcsR0FBRUEsV0FBVyxDQUFDRixJQUFaLENBQWlCanFCLEdBQWpCLENBQUYsR0FBMEJBLEdBQTVDO0FBQ0QsS0FMRDs7QUFPQSxRQUFJa3FCLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVNscUIsR0FBVCxFQUFjO0FBQ3pCLFVBQUlBLEdBQUcsS0FBRyxDQUFWLEVBQWEsT0FBT2dWLFNBQVA7QUFDYixVQUFJaFYsR0FBRyxLQUFHLENBQVYsRUFBYSxPQUFPLElBQVA7QUFFYixhQUFPbXFCLFdBQVcsR0FBR0EsV0FBVyxDQUFDRCxNQUFaLENBQW1CbHFCLEdBQW5CLENBQUgsR0FBNkJBLEdBQS9DO0FBQ0QsS0FMRDs7QUFPQSxXQUFPO0FBQUNpcUIsTUFBQUEsSUFBSSxFQUFFQSxJQUFQO0FBQWFDLE1BQUFBLE1BQU0sRUFBRUE7QUFBckIsS0FBUDtBQUNELEdBaEJEOztBQW9CQSxNQUFJdUIsVUFBVSxHQUFHakIsa0JBQWtCLENBQUNSLGdCQUFnQixDQUFDLENBQ25ELFVBRG1ELEVBRW5ELFNBRm1ELEVBR25ELEtBSG1ELEVBSW5ELENBQUMsUUFBRCxFQUFXSSxPQUFPLENBQUN4VyxLQUFLLENBQUNvVyxnQkFBZ0IsQ0FBQyxDQUN4QyxDQUFDLFFBQUQsRUFBV0ksT0FBTyxDQUFDeFcsS0FBSyxDQUFDb1csZ0JBQWdCLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBakIsQ0FBTixFQUFpQyxDQUFqQyxDQUFsQixDQUR3QyxDQUFELENBQWpCLENBQU4sRUFFZCxDQUZjLENBQWxCLENBSm1ELENBQUQsQ0FBakIsQ0FBbkM7QUFTQSxNQUFJMEIseUJBQXlCLEdBQUc7QUFDOUJ6QixJQUFBQSxJQUFJLEVBQUUsY0FBU2pxQixHQUFULEVBQWM7QUFDbEIsYUFBTzJyQixnQkFBZ0IsQ0FBQzFCLElBQWpCLENBQXNCanFCLEdBQXRCLENBQVA7QUFDRCxLQUg2QjtBQUs5QmtxQixJQUFBQSxNQUFNLEVBQUUsZ0JBQVNscUIsR0FBVCxFQUFjO0FBQ3BCLGFBQU8yckIsZ0JBQWdCLENBQUN6QixNQUFqQixDQUF3QmxxQixHQUF4QixDQUFQO0FBQ0Q7QUFQNkIsR0FBaEM7QUFVQSxNQUFJNHJCLFdBQVcsR0FBRzVCLGdCQUFnQixDQUFDLENBQ2pDLENBQUMsT0FBRCxFQUFVcFcsS0FBSyxDQUFDOFgseUJBQUQsQ0FBZixDQURpQyxDQUFELENBQWxDO0FBSUEsTUFBSUcsY0FBYyxHQUFHN0IsZ0JBQWdCLENBQUMsQ0FBQyxZQUFELEVBQWMsV0FBZCxFQUEwQixjQUExQixFQUF5QyxhQUF6QyxFQUF3RCxDQUFDLGNBQUQsRUFBaUJ1QixhQUFqQixDQUF4RCxDQUFELENBQXJDO0FBQ0EsTUFBSU8sZ0JBQWdCLEdBQUc5QixnQkFBZ0IsQ0FBQyxDQUN0QyxDQUFDLGdCQUFELEVBQW1CaUIsWUFBWSxDQUFDLENBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsVUFBbkIsRUFBK0IsVUFBL0IsRUFBMkMsUUFBM0MsQ0FBRCxDQUEvQixDQURzQyxFQUV0QyxDQUFDLGlCQUFELEVBQW9CTSxhQUFwQixDQUZzQyxFQUd0QyxDQUFDLFdBQUQsRUFBY0MsUUFBUSxFQUF0QixDQUhzQyxFQUl0QyxDQUFDLFVBQUQsRUFBYUEsUUFBUSxFQUFyQixDQUpzQyxFQUt0QyxDQUFDLE9BQUQsRUFBVUEsUUFBUSxDQUFDeEIsZ0JBQWdCLENBQUMsQ0FBQyxLQUFELEVBQVEsS0FBUixDQUFELENBQWpCLENBQWxCLENBTHNDLEVBTXRDLENBQUMsT0FBRCxFQUFVd0IsUUFBUSxDQUFDeEIsZ0JBQWdCLENBQUMsQ0FBQyxLQUFELEVBQVEsS0FBUixDQUFELENBQWpCLENBQWxCLENBTnNDLEVBT3RDLENBQUMsWUFBRCxFQUFld0IsUUFBUSxDQUFDeEIsZ0JBQWdCLENBQUMsQ0FDdkMsQ0FBQyxRQUFELEVBQVcwQix5QkFBWCxDQUR1QyxDQUFELENBQWpCLENBQXZCLENBUHNDLEVBVXRDLGVBVnNDLENBQUQsQ0FBdkM7QUFhQSxNQUFJSyxxQkFBcUIsR0FBRy9CLGdCQUFnQixDQUFDLENBQzNDLFdBRDJDLEVBRTNDLFFBRjJDLEVBRzNDLEdBSDJDLEVBSTNDLENBQUMsWUFBRCxFQUFlQSxnQkFBZ0IsQ0FBQyxDQUM5QixDQUFDLFdBQUQsRUFBYzBCLHlCQUFkLENBRDhCLEVBRTlCLENBQUMsUUFBRCxFQUFXQSx5QkFBWCxDQUY4QixFQUc5QixDQUFDLEdBQUQsRUFBTUEseUJBQU4sQ0FIOEIsQ0FBRCxDQUEvQixDQUoyQyxDQUFELENBQTVDO0FBV0EsTUFBSU0sa0JBQWtCLEdBQUdoQyxnQkFBZ0IsQ0FBQyxFQUFELENBQXpDO0FBRUEsTUFBSWlDLHFCQUFxQixHQUFHakMsZ0JBQWdCLENBQUMsQ0FDM0MsQ0FBQyxZQUFELEVBQWVJLE9BQU8sQ0FBQ3hXLEtBQUssQ0FBQzhYLHlCQUFELENBQU4sRUFBbUMsQ0FBbkMsQ0FBdEIsQ0FEMkMsQ0FBRCxDQUE1QztBQUlBLE1BQUlRLFNBQVMsR0FBRyxDQUFDLFFBQUQsRUFBVSxNQUFWLEVBQWlCLFlBQWpCLEVBQThCLFdBQTlCLEVBQTBDLE1BQTFDLEVBQWlELE1BQWpELEVBQ2hCLFVBRGdCLEVBQ0wsV0FESyxFQUNPLE9BRFAsRUFDZSxNQURmLEVBQ3NCLE1BRHRCLEVBQzZCLFNBRDdCLEVBRWhCLFVBRmdCLEVBRUwsVUFGSyxFQUVNLFVBRk4sRUFFaUIsV0FGakIsRUFFNkIsU0FGN0IsRUFHaEIsT0FIZ0IsRUFHUixTQUhRLEVBR0UsUUFIRixFQUdXLE9BSFgsRUFHbUIsWUFIbkIsRUFHZ0MsV0FIaEMsRUFJaEIsYUFKZ0IsRUFJRixPQUpFLEVBSU8sa0JBSlAsRUFJMkIsWUFKM0IsRUFJeUMsWUFKekMsQ0FBaEI7QUFNQSxNQUFJQyxnQkFBZ0IsR0FBR25DLGdCQUFnQixDQUFDLENBQ3RDLENBQUMsZ0JBQUQsRUFBbUJ1QixhQUFuQixDQURzQyxDQUFELENBQXZDO0FBR0EsTUFBSWEsZ0JBQWdCLEdBQUdwQyxnQkFBZ0IsQ0FBQyxDQUFDLGFBQUQsQ0FBRCxDQUF2QztBQUVBLE1BQUkyQixnQkFBZ0IsR0FBRzNCLGdCQUFnQixDQUFDLENBQ3RDLENBQUMsTUFBRCxFQUFTaUIsWUFBWSxDQUFDaUIsU0FBRCxDQUFyQixDQURzQyxFQUV0QyxDQUFDLE1BQUQsRUFBU2YsWUFBWSxDQUFDLE1BQUQsRUFBUztBQUMxQmtCLElBQUFBLE1BQU0sRUFBRXJDLGdCQUFnQixDQUFDLENBQUMsTUFBRCxDQUFELENBREU7QUFFMUIsWUFBUWdDLGtCQUZrQjtBQUcxQjluQixJQUFBQSxVQUFVLEVBQUU0bkIsZ0JBSGM7QUFJMUJRLElBQUFBLFNBQVMsRUFBRXRDLGdCQUFnQixDQUFDLENBQUMsT0FBRCxDQUFELENBSkQ7QUFLMUJ1QyxJQUFBQSxJQUFJLEVBQUV2QyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQUQsRUFBUyxRQUFULENBQUQsQ0FMSTtBQU0xQndDLElBQUFBLElBQUksRUFBRVgsY0FOb0I7QUFPMUJZLElBQUFBLFFBQVEsRUFBRVosY0FQZ0I7QUFRMUJhLElBQUFBLFNBQVMsRUFBRTFDLGdCQUFnQixDQUFDLENBQUMsUUFBRCxDQUFELENBUkQ7QUFTMUJyTSxJQUFBQSxLQUFLLEVBQUVxTSxnQkFBZ0IsQ0FBQyxDQUFDLE1BQUQsRUFBUyxLQUFULENBQUQsQ0FURztBQVUxQmprQixJQUFBQSxJQUFJLEVBQUVpa0IsZ0JBQWdCLENBQUMsQ0FBQyxNQUFELENBQUQsQ0FWSTtBQVcxQjJDLElBQUFBLElBQUksRUFBRTNDLGdCQUFnQixDQUFDLENBQUMsTUFBRCxFQUFTLE9BQVQsQ0FBRCxDQVhJO0FBWTFCNEMsSUFBQUEsT0FBTyxFQUFFYixxQkFaaUI7QUFhMUJjLElBQUFBLFFBQVEsRUFBRWQscUJBYmdCO0FBYzFCZSxJQUFBQSxRQUFRLEVBQUVmLHFCQWRnQjtBQWUxQmdCLElBQUFBLFFBQVEsRUFBRWhCLHFCQWZnQjtBQWdCMUJpQixJQUFBQSxTQUFTLEVBQUVqQixxQkFoQmU7QUFpQjFCa0IsSUFBQUEsT0FBTyxFQUFFbEIscUJBakJpQjtBQWtCMUJtQixJQUFBQSxLQUFLLEVBQUVuQixxQkFsQm1CO0FBbUIxQm9CLElBQUFBLE9BQU8sRUFBRXBCLHFCQW5CaUI7QUFvQjFCcUIsSUFBQUEsTUFBTSxFQUFFcEQsZ0JBQWdCLENBQUMsQ0FBQyxNQUFELEVBQVMsTUFBVCxFQUFpQixLQUFqQixDQUFELENBcEJFO0FBcUIxQnhpQixJQUFBQSxLQUFLLEVBQUV3a0Isa0JBckJtQjtBQXNCMUJ0a0IsSUFBQUEsVUFBVSxFQUFFc2tCLGtCQXRCYztBQXVCMUJwa0IsSUFBQUEsU0FBUyxFQUFFb2tCLGtCQXZCZTtBQXdCMUJxQixJQUFBQSxXQUFXLEVBQUVyRCxnQkFBZ0IsQ0FBQyxDQUFDLE9BQUQsRUFBVSxVQUFWLEVBQXNCLFVBQXRCLEVBQWtDLEtBQWxDLENBQUQsQ0F4Qkg7QUF5QjFCc0QsSUFBQUEsS0FBSyxFQUFFMUIsV0F6Qm1CO0FBMEIxQjJCLElBQUFBLGdCQUFnQixFQUFFdEIscUJBMUJRO0FBMkIxQnVCLElBQUFBLFVBQVUsRUFBRXJCLGdCQTNCYztBQTRCMUJzQixJQUFBQSxVQUFVLEVBQUVyQjtBQTVCYyxHQUFULENBQXJCLENBRnNDLENBQUQsQ0FBdkM7QUFtQ0EsTUFBSXNCLE1BQU0sR0FBRztBQUNYeEssSUFBQUEsT0FBTyxFQUFFcUgsYUFERTtBQUVYb0QsSUFBQUEsSUFBSSxFQUFFbEMsVUFGSztBQUdYblUsSUFBQUEsVUFBVSxFQUFFcVU7QUFIRCxHQUFiOztBQU1BbHJCLEVBQUFBLEtBQUssQ0FBQ2tuQixPQUFOLENBQWNvQyxvQkFBZCxDQUFtQzlCLFNBQW5DLEdBQStDLFVBQVMzWixJQUFULEVBQWV0TyxHQUFmLEVBQW9CO0FBQ2pFLFFBQUkwdEIsTUFBTSxDQUFDcGYsSUFBRCxDQUFWLEVBQWtCO0FBQ2hCLFVBQUlxVCxHQUFHLEdBQUd3RyxJQUFJLENBQUNDLFNBQUwsQ0FBZXNGLE1BQU0sQ0FBQ3BmLElBQUQsQ0FBTixDQUFhMmIsSUFBYixDQUFrQmpxQixHQUFsQixDQUFmLENBQVY7QUFDQTJoQixNQUFBQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ1csS0FBSixDQUFVLENBQVYsRUFBYVgsR0FBRyxDQUFDemhCLE1BQUosR0FBVyxDQUF4QixDQUFOO0FBQ0EsYUFBT3loQixHQUFQO0FBQ0Q7O0FBRUQsV0FBT3dHLElBQUksQ0FBQ0MsU0FBTCxDQUFlcG9CLEdBQWYsQ0FBUDtBQUNELEdBUkQ7O0FBVUFTLEVBQUFBLEtBQUssQ0FBQ2tuQixPQUFOLENBQWNvQyxvQkFBZCxDQUFtQzFCLFdBQW5DLEdBQWlELFVBQVMvWixJQUFULEVBQWVxVCxHQUFmLEVBQW9CO0FBQ25FLFFBQUkrTCxNQUFNLENBQUNwZixJQUFELENBQVYsRUFBa0I7QUFDaEIsYUFBT29mLE1BQU0sQ0FBQ3BmLElBQUQsQ0FBTixDQUFhNGIsTUFBYixDQUFvQi9CLElBQUksQ0FBQzVHLEtBQUwsQ0FBVyxNQUFJSSxHQUFKLEdBQVEsR0FBbkIsQ0FBcEIsQ0FBUDtBQUNEOztBQUVELFdBQU93RyxJQUFJLENBQUM1RyxLQUFMLENBQVdJLEdBQVgsQ0FBUDtBQUNELEdBTkQ7QUFRQyxDQWpVRDs7O0FDSkFsaEIsS0FBSyxHQUFHQSxLQUFLLElBQUcsRUFBaEI7QUFDQUEsS0FBSyxDQUFDa25CLE9BQU4sR0FBZ0JsbkIsS0FBSyxDQUFDa25CLE9BQU4sSUFBZSxFQUEvQjtBQUNBbG5CLEtBQUssQ0FBQ2tuQixPQUFOLENBQWNpRyxxQkFBZCxHQUFzQyxFQUF0Qzs7QUFFQSxDQUFDLFlBQVc7QUFFWixNQUFJNUQsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFTYixJQUFULEVBQWU7QUFDcEMsUUFBSWMsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBU2pxQixHQUFULEVBQWM7QUFDdkIsVUFBSTRULEtBQUssR0FBRyxFQUFaOztBQUNBLFdBQUssSUFBSTNULENBQUMsR0FBQyxDQUFYLEVBQWNBLENBQUMsR0FBQ2twQixJQUFJLENBQUNqcEIsTUFBckIsRUFBNkJELENBQUMsRUFBOUIsRUFBa0M7QUFDaEMsWUFBSW1wQixHQUFHLEdBQUdELElBQUksQ0FBQ2xwQixDQUFELENBQWQ7O0FBQ0EsWUFBSW9ZLEtBQUssQ0FBQ0MsT0FBTixDQUFjOFEsR0FBZCxDQUFKLEVBQXdCO0FBQ3RCeFYsVUFBQUEsS0FBSyxDQUFDOVQsSUFBTixDQUFXc3BCLEdBQUcsQ0FBQyxDQUFELENBQUgsQ0FBT2EsSUFBUCxDQUFZanFCLEdBQUcsQ0FBQ29wQixHQUFHLENBQUMsQ0FBRCxDQUFKLENBQWYsRUFBeUJwcEIsR0FBekIsQ0FBWDtBQUNELFNBRkQsTUFFTztBQUNMLGNBQUlBLEdBQUcsQ0FBQ29wQixHQUFELENBQUgsS0FBVyxJQUFYLElBQW1CcHBCLEdBQUcsQ0FBQ29wQixHQUFELENBQUgsS0FBV3BVLFNBQWxDLEVBQTZDcEIsS0FBSyxDQUFDOVQsSUFBTixDQUFXRSxHQUFHLENBQUNvcEIsR0FBRCxDQUFkO0FBQzlDO0FBQ0Y7O0FBQ0QsYUFBT3hWLEtBQVA7QUFDRCxLQVhEOztBQWFBLFFBQUlzVyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFTdFcsS0FBVCxFQUFnQjtBQUMzQixVQUFJNVQsR0FBRyxHQUFHLEVBQVY7O0FBQ0EsV0FBSyxJQUFJQyxDQUFDLEdBQUMsQ0FBWCxFQUFjQSxDQUFDLEdBQUMyVCxLQUFLLENBQUMxVCxNQUF0QixFQUE4QkQsQ0FBQyxFQUEvQixFQUFtQztBQUNqQyxZQUFJbXBCLEdBQUcsR0FBR0QsSUFBSSxDQUFDbHBCLENBQUQsQ0FBZDs7QUFDQSxZQUFJb1ksS0FBSyxDQUFDQyxPQUFOLENBQWM4USxHQUFkLENBQUosRUFBd0I7QUFDdEJwcEIsVUFBQUEsR0FBRyxDQUFDb3BCLEdBQUcsQ0FBQyxDQUFELENBQUosQ0FBSCxHQUFjQSxHQUFHLENBQUMsQ0FBRCxDQUFILENBQU9jLE1BQVAsQ0FBY3RXLEtBQUssQ0FBQzNULENBQUQsQ0FBbkIsRUFBd0JELEdBQXhCLENBQWQ7QUFDRCxTQUZELE1BRU87QUFDTCxjQUFJNFQsS0FBSyxDQUFDM1QsQ0FBRCxDQUFMLEtBQVcsSUFBWCxJQUFtQjJULEtBQUssQ0FBQzNULENBQUQsQ0FBTCxLQUFXK1UsU0FBbEMsRUFBNkNoVixHQUFHLENBQUNvcEIsR0FBRCxDQUFILEdBQVd4VixLQUFLLENBQUMzVCxDQUFELENBQWhCO0FBQzlDO0FBQ0Y7O0FBQ0QsYUFBT0QsR0FBUDtBQUNELEtBWEQ7O0FBYUEsV0FBTztBQUFDaXFCLE1BQUFBLElBQUksRUFBRUEsSUFBUDtBQUFhQyxNQUFBQSxNQUFNLEVBQUVBO0FBQXJCLEtBQVA7QUFDRCxHQTVCRDs7QUE4QkEsTUFBSXRXLEtBQUssR0FBRyxTQUFSQSxLQUFRLENBQVN1VyxXQUFULEVBQXNCO0FBQ2hDLFFBQUlGLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQVNqcUIsR0FBVCxFQUFjO0FBQ3ZCLGFBQU9BLEdBQUcsQ0FBQzRZLEdBQUosQ0FBUXVSLFdBQVcsQ0FBQ0YsSUFBcEIsQ0FBUDtBQUNELEtBRkQ7O0FBSUEsUUFBSUMsTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBU3RXLEtBQVQsRUFBZ0I7QUFDM0IsYUFBT0EsS0FBSyxDQUFDZ0YsR0FBTixDQUFVdVIsV0FBVyxDQUFDRCxNQUF0QixDQUFQO0FBQ0QsS0FGRDs7QUFJQSxXQUFPO0FBQUNELE1BQUFBLElBQUksRUFBRUEsSUFBUDtBQUFhQyxNQUFBQSxNQUFNLEVBQUVBO0FBQXJCLEtBQVA7QUFDRCxHQVZEOztBQVlBLE1BQUloVyxNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFTOU0sQ0FBVCxFQUFZQyxDQUFaLEVBQWM7QUFBQyxXQUFPRCxDQUFDLENBQUM4TSxNQUFGLENBQVM3TSxDQUFULENBQVA7QUFBcUIsR0FBakQ7O0FBQ0EsTUFBSStpQixPQUFPLEdBQUcsU0FBVkEsT0FBVSxDQUFTRCxXQUFULEVBQXNCRSxJQUF0QixFQUE0QjtBQUN4QyxRQUFJSixJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFTanFCLEdBQVQsRUFBYztBQUN2QixVQUFJOEMsR0FBRyxHQUFHcW5CLFdBQVcsQ0FBQ0YsSUFBWixDQUFpQmpxQixHQUFqQixDQUFWO0FBQ0EsYUFBTzhDLEdBQUcsQ0FBQ2dlLE1BQUosQ0FBVzVNLE1BQVgsRUFBbUIsRUFBbkIsQ0FBUDtBQUNELEtBSEQ7O0FBS0EsUUFBSWdXLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVN0VyxLQUFULEVBQWdCO0FBQzNCLFVBQUkwVyxTQUFTLEdBQUcsRUFBaEI7O0FBQ0EsV0FBSyxJQUFJcnFCLENBQUMsR0FBQyxDQUFYLEVBQWNBLENBQUMsR0FBQzJULEtBQUssQ0FBQzFULE1BQXRCLEVBQThCRCxDQUFDLElBQUVvcUIsSUFBakMsRUFBdUM7QUFDckNDLFFBQUFBLFNBQVMsQ0FBQ3hxQixJQUFWLENBQWU4VCxLQUFLLENBQUMwTyxLQUFOLENBQVlyaUIsQ0FBWixFQUFjQSxDQUFDLEdBQUNvcUIsSUFBaEIsQ0FBZjtBQUNEOztBQUNELGFBQU9GLFdBQVcsQ0FBQ0QsTUFBWixDQUFtQkksU0FBbkIsQ0FBUDtBQUNELEtBTkQ7O0FBUUEsV0FBTztBQUFDTCxNQUFBQSxJQUFJLEVBQUVBLElBQVA7QUFBYUMsTUFBQUEsTUFBTSxFQUFFQTtBQUFyQixLQUFQO0FBQ0QsR0FmRDs7QUFpQkEsTUFBSXFCLGFBQWEsR0FBRztBQUNsQnRCLElBQUFBLElBQUksRUFBRSxjQUFTanFCLEdBQVQsRUFBYztBQUNsQixVQUFJQSxHQUFHLEtBQUtnVixTQUFaLEVBQXVCLE9BQU8sQ0FBUDtBQUN2QixVQUFJaFYsR0FBRyxLQUFLLElBQVosRUFBa0IsT0FBTyxDQUFQO0FBRWxCLGFBQU8sQ0FBQyxDQUFDQSxHQUFGLEdBQVEsQ0FBUixHQUFZLENBQW5CO0FBQ0QsS0FOaUI7QUFRbEJrcUIsSUFBQUEsTUFBTSxFQUFFLGdCQUFTbHFCLEdBQVQsRUFBYztBQUNwQixVQUFJQSxHQUFHLEtBQUcsQ0FBVixFQUFhLE9BQU9nVixTQUFQO0FBQ2IsVUFBSWhWLEdBQUcsS0FBRyxDQUFWLEVBQWEsT0FBTyxJQUFQO0FBRWIsYUFBT0EsR0FBRyxLQUFLLENBQVIsR0FBWSxJQUFaLEdBQW1CLEtBQTFCO0FBQ0Q7QUFiaUIsR0FBcEI7QUFnQkEsTUFBSTZ0QixrQkFBa0IsR0FBRztBQUN2QjVELElBQUFBLElBQUksRUFBRSxjQUFTanFCLEdBQVQsRUFBYztBQUNsQixVQUFJOHRCLFlBQVksR0FBRzl0QixHQUFHLENBQUNzVSxDQUF2Qjs7QUFDQSxXQUFLLElBQUkyRSxDQUFULElBQWNqWixHQUFkLEVBQW1CO0FBQ2pCLFlBQUlpWixDQUFDLEtBQUcsR0FBSixJQUFXQSxDQUFDLEtBQUcsR0FBZixJQUFzQkEsQ0FBQyxLQUFLLEdBQWhDLEVBQXFDO0FBQ25DLGNBQUk2VSxZQUFZLEtBQUs5dEIsR0FBRyxDQUFDc1UsQ0FBekIsRUFBNEI7QUFDMUJ3WixZQUFBQSxZQUFZLEdBQUc7QUFBQ3haLGNBQUFBLENBQUMsRUFBRXRVLEdBQUcsQ0FBQ3NVO0FBQVIsYUFBZjtBQUNEOztBQUNEd1osVUFBQUEsWUFBWSxDQUFDN1UsQ0FBRCxDQUFaLEdBQWtCalosR0FBRyxDQUFDaVosQ0FBRCxDQUFyQjtBQUNEO0FBQ0Y7O0FBQUE7QUFFRCxhQUFPLENBQUM2VSxZQUFELEVBQWU5dEIsR0FBRyxDQUFDK1ksQ0FBbkIsRUFBc0IvWSxHQUFHLENBQUNnWixDQUExQixDQUFQO0FBQ0QsS0Fic0I7QUFjdkJrUixJQUFBQSxNQUFNLEVBQUUsZ0JBQVN0VyxLQUFULEVBQWdCO0FBQ3RCLFVBQUlrYSxZQUFZLEdBQUdsYSxLQUFLLENBQUMsQ0FBRCxDQUF4Qjs7QUFDQSxVQUFJLE9BQU9rYSxZQUFQLEtBQXdCLFFBQTVCLEVBQXNDO0FBQ3BDLGVBQU87QUFDTHhaLFVBQUFBLENBQUMsRUFBRVYsS0FBSyxDQUFDLENBQUQsQ0FESDtBQUVMbUYsVUFBQUEsQ0FBQyxFQUFFbkYsS0FBSyxDQUFDLENBQUQsQ0FGSDtBQUdMb0YsVUFBQUEsQ0FBQyxFQUFFcEYsS0FBSyxDQUFDLENBQUQ7QUFISCxTQUFQO0FBS0QsT0FORCxNQU1PO0FBQ0wsWUFBSTlRLEdBQUcsR0FBRyxFQUFWOztBQUNBLGFBQUssSUFBSW1XLENBQVQsSUFBYzZVLFlBQWQsRUFBNEI7QUFDMUJockIsVUFBQUEsR0FBRyxDQUFDbVcsQ0FBRCxDQUFILEdBQVM2VSxZQUFZLENBQUM3VSxDQUFELENBQXJCO0FBQ0Q7O0FBQ0RuVyxRQUFBQSxHQUFHLENBQUNpVyxDQUFKLEdBQVFuRixLQUFLLENBQUMsQ0FBRCxDQUFiO0FBQ0E5USxRQUFBQSxHQUFHLENBQUNrVyxDQUFKLEdBQVFwRixLQUFLLENBQUMsQ0FBRCxDQUFiO0FBQ0EsZUFBTzlRLEdBQVA7QUFDRDtBQUNGO0FBL0JzQixHQUF6QjtBQWtDQSxNQUFJeW5CLGFBQWEsR0FBR1AsZ0JBQWdCLENBQUMsQ0FDbkMsU0FEbUMsRUFFbkMsY0FGbUMsRUFHbkMsS0FIbUMsRUFJbkMsZUFKbUMsRUFLbkMsWUFMbUMsRUFNbkMsQ0FBQyxRQUFELEVBQVdwVyxLQUFLLENBQ2RvVyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsT0FBRCxFQUFVdUIsYUFBVixDQUFELEVBQTJCLENBQUMsTUFBRCxFQUFTQSxhQUFULENBQTNCLEVBQW9ELFFBQXBELEVBQTZELENBQUMsUUFBRCxFQUFXbkIsT0FBTyxDQUFDeFcsS0FBSyxDQUFDaWEsa0JBQUQsQ0FBTixFQUEyQixDQUEzQixDQUFsQixDQUE3RCxFQUErRyxZQUEvRyxDQUFELENBREYsQ0FBaEIsQ0FObUMsQ0FBRCxDQUFwQzs7QUFXQSxNQUFJckQsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUFTN1MsS0FBVCxFQUFnQjtBQUN2QyxRQUFJc1MsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBU2pxQixHQUFULEVBQWM7QUFDdkIsVUFBSStpQixRQUFRLEdBQUcsRUFBZjs7QUFDQSxVQUFJMEgsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFTQyxLQUFULEVBQWdCO0FBQ2xDLFlBQUdBLEtBQUssQ0FBQ0MsRUFBVCxFQUFhO0FBQ1gsY0FBSTVILFFBQVEsQ0FBQ2pELE9BQVQsQ0FBaUI0SyxLQUFLLENBQUNDLEVBQXZCLE1BQTZCLENBQUMsQ0FBbEMsRUFBcUM1SCxRQUFRLENBQUNqakIsSUFBVCxDQUFjNHFCLEtBQUssQ0FBQ0MsRUFBcEI7QUFDckMsaUJBQU87QUFBQ0EsWUFBQUEsRUFBRSxFQUFFNUgsUUFBUSxDQUFDakQsT0FBVCxDQUFpQjRLLEtBQUssQ0FBQ0MsRUFBdkIsSUFBMkI7QUFBaEMsV0FBUDtBQUNELFNBSEQsTUFHTztBQUNMLGlCQUFPO0FBQUNBLFlBQUFBLEVBQUUsRUFBRTtBQUFMLFdBQVA7QUFDRDtBQUNGLE9BUEQ7O0FBU0EsVUFBSUMsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBU0MsS0FBVCxFQUFnQjtBQUNqQyxlQUFPO0FBQ0xDLFVBQUFBLE1BQU0sRUFBRUQsS0FBSyxDQUFDQyxNQUFOLENBQWFsUyxHQUFiLENBQWlCNlIsYUFBakI7QUFESCxTQUFQO0FBR0QsT0FKRDs7QUFNQSxVQUFJTSxTQUFTLEdBQUc7QUFDZGhJLFFBQUFBLFFBQVEsRUFBRUEsUUFESTtBQUVkVSxRQUFBQSxPQUFPLEVBQUV6akIsR0FBRyxDQUFDeWpCLE9BRkM7QUFHZC9ILFFBQUFBLEdBQUcsRUFBRTFiLEdBQUcsQ0FBQzBiLEdBSEs7QUFJZHNQLFFBQUFBLE1BQU0sRUFBRWhyQixHQUFHLENBQUNnckIsTUFBSixDQUFXcFMsR0FBWCxDQUFlZ1MsWUFBZjtBQUpNLE9BQWhCO0FBT0EsYUFBT2pULEtBQUssQ0FBQ3NTLElBQU4sQ0FBV2MsU0FBWCxDQUFQO0FBQ0QsS0F6QkQ7O0FBMkJBLFFBQUliLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVNscUIsR0FBVCxFQUFjO0FBQ3pCLFVBQUk4QyxHQUFHLEdBQUc2VSxLQUFLLENBQUN1UyxNQUFOLENBQWFscUIsR0FBYixDQUFWO0FBQ0E4QyxNQUFBQSxHQUFHLENBQUNrb0IsTUFBSixDQUFXcG5CLE9BQVgsQ0FBbUIsVUFBU2luQixLQUFULEVBQWdCO0FBQ2pDQSxRQUFBQSxLQUFLLENBQUNDLE1BQU4sQ0FBYWxuQixPQUFiLENBQXFCLFVBQVM4bUIsS0FBVCxFQUFnQjtBQUNuQyxjQUFJQSxLQUFLLENBQUNDLEVBQU4sS0FBYSxDQUFqQixFQUFvQjtBQUNsQixtQkFBT0QsS0FBSyxDQUFDQyxFQUFiO0FBQ0QsV0FGRCxNQUVPO0FBQ0xELFlBQUFBLEtBQUssQ0FBQ0MsRUFBTixHQUFXN25CLEdBQUcsQ0FBQ2lnQixRQUFKLENBQWEySCxLQUFLLENBQUNDLEVBQU4sR0FBUyxDQUF0QixDQUFYO0FBQ0Q7QUFDRixTQU5EO0FBT0QsT0FSRDtBQVVBLGFBQU87QUFDTGxILFFBQUFBLE9BQU8sRUFBRTNnQixHQUFHLENBQUMyZ0IsT0FEUjtBQUVML0gsUUFBQUEsR0FBRyxFQUFFNVksR0FBRyxDQUFDNFksR0FGSjtBQUdMc1AsUUFBQUEsTUFBTSxFQUFFbG9CLEdBQUcsQ0FBQ2tvQjtBQUhQLE9BQVA7QUFLRCxLQWpCRDs7QUFtQkEsV0FBTztBQUFDZixNQUFBQSxJQUFJLEVBQUVBLElBQVA7QUFBYUMsTUFBQUEsTUFBTSxFQUFFQTtBQUFyQixLQUFQO0FBQ0QsR0FoREQ7O0FBa0RBLE1BQUllLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVM5QixJQUFULEVBQWU7QUFDaEMsUUFBSWMsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBU2pxQixHQUFULEVBQWM7QUFDdkIsVUFBSWtyQixHQUFHLEdBQUcvQixJQUFJLENBQUNySixPQUFMLENBQWE5ZixHQUFiLENBQVY7QUFDQSxVQUFJa3JCLEdBQUcsS0FBSyxDQUFDLENBQWIsRUFBZ0IsT0FBT2xyQixHQUFQO0FBQ2hCLGFBQU9rckIsR0FBUDtBQUNELEtBSkQ7O0FBTUEsUUFBSWhCLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVNscUIsR0FBVCxFQUFjO0FBQ3pCLFVBQUlrTyxLQUFLLENBQUNsTyxHQUFELENBQVQsRUFBZ0IsT0FBT0EsR0FBUDtBQUNoQixhQUFPbXBCLElBQUksQ0FBQ25wQixHQUFELENBQVg7QUFDRCxLQUhEOztBQUtBLFdBQU87QUFBQ2lxQixNQUFBQSxJQUFJLEVBQUVBLElBQVA7QUFBYUMsTUFBQUEsTUFBTSxFQUFFQTtBQUFyQixLQUFQO0FBQ0QsR0FiRDs7QUFlQSxNQUFJaUIsWUFBWSxHQUFHLFNBQWZBLFlBQWUsQ0FBU0MsZUFBVCxFQUEwQkMsT0FBMUIsRUFBbUM7QUFFcEQsUUFBSXBCLElBQUksR0FBRyxTQUFQQSxJQUFPLENBQVNqcUIsR0FBVCxFQUFjc3JCLE1BQWQsRUFBc0I7QUFDL0IsVUFBSW5CLFdBQVcsR0FBR2tCLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDRixlQUFELENBQVAsQ0FBekI7O0FBQ0EsVUFBSSxDQUFDakIsV0FBTCxFQUFrQjtBQUNoQixlQUFPbnFCLEdBQVA7QUFDRDs7QUFFRCxhQUFPbXFCLFdBQVcsQ0FBQ0YsSUFBWixDQUFpQmpxQixHQUFqQixDQUFQO0FBQ0QsS0FQRDs7QUFTQSxRQUFJa3FCLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVNscUIsR0FBVCxFQUFjc3JCLE1BQWQsRUFBc0I7QUFDakMsVUFBSW5CLFdBQVcsR0FBR2tCLE9BQU8sQ0FBQ0MsTUFBTSxDQUFDRixlQUFELENBQVAsQ0FBekI7O0FBQ0EsVUFBSSxDQUFDakIsV0FBTCxFQUFrQjtBQUNoQixlQUFPbnFCLEdBQVA7QUFDRDs7QUFFRCxhQUFPbXFCLFdBQVcsQ0FBQ0QsTUFBWixDQUFtQmxxQixHQUFuQixDQUFQO0FBQ0QsS0FQRDs7QUFTQSxXQUFPO0FBQUNpcUIsTUFBQUEsSUFBSSxFQUFFQSxJQUFQO0FBQWFDLE1BQUFBLE1BQU0sRUFBRUE7QUFBckIsS0FBUDtBQUNELEdBckJEOztBQXVCQSxNQUFJc0IsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBU3JCLFdBQVQsRUFBc0I7QUFDbkMsUUFBSUYsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBU2pxQixHQUFULEVBQWM7QUFDdkIsVUFBSUEsR0FBRyxLQUFLZ1YsU0FBWixFQUF1QixPQUFPLENBQVA7QUFDdkIsVUFBSWhWLEdBQUcsS0FBSyxJQUFaLEVBQWtCLE9BQU8sQ0FBUDtBQUVsQixhQUFPbXFCLFdBQVcsR0FBRUEsV0FBVyxDQUFDRixJQUFaLENBQWlCanFCLEdBQWpCLENBQUYsR0FBMEJBLEdBQTVDO0FBQ0QsS0FMRDs7QUFPQSxRQUFJa3FCLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVNscUIsR0FBVCxFQUFjO0FBQ3pCLFVBQUlBLEdBQUcsS0FBRyxDQUFWLEVBQWEsT0FBT2dWLFNBQVA7QUFDYixVQUFJaFYsR0FBRyxLQUFHLENBQVYsRUFBYSxPQUFPLElBQVA7QUFFYixhQUFPbXFCLFdBQVcsR0FBR0EsV0FBVyxDQUFDRCxNQUFaLENBQW1CbHFCLEdBQW5CLENBQUgsR0FBNkJBLEdBQS9DO0FBQ0QsS0FMRDs7QUFPQSxXQUFPO0FBQUNpcUIsTUFBQUEsSUFBSSxFQUFFQSxJQUFQO0FBQWFDLE1BQUFBLE1BQU0sRUFBRUE7QUFBckIsS0FBUDtBQUNELEdBaEJEOztBQW9CQSxNQUFJdUIsVUFBVSxHQUFHakIsa0JBQWtCLENBQUNSLGdCQUFnQixDQUFDLENBQ25ELFVBRG1ELEVBRW5ELFNBRm1ELEVBR25ELEtBSG1ELEVBSW5ELENBQUMsUUFBRCxFQUFXSSxPQUFPLENBQUN4VyxLQUFLLENBQUNvVyxnQkFBZ0IsQ0FBQyxDQUN4QyxDQUFDLFFBQUQsRUFBV0ksT0FBTyxDQUFDeFcsS0FBSyxDQUFDb1csZ0JBQWdCLENBQUMsQ0FBQyxJQUFELENBQUQsQ0FBakIsQ0FBTixFQUFpQyxDQUFqQyxDQUFsQixDQUR3QyxDQUFELENBQWpCLENBQU4sRUFFZCxDQUZjLENBQWxCLENBSm1ELENBQUQsQ0FBakIsQ0FBbkM7QUFTQSxNQUFJMEIseUJBQXlCLEdBQUc7QUFDOUJ6QixJQUFBQSxJQUFJLEVBQUUsY0FBU2pxQixHQUFULEVBQWM7QUFDbEIsYUFBTzJyQixnQkFBZ0IsQ0FBQzFCLElBQWpCLENBQXNCanFCLEdBQXRCLENBQVA7QUFDRCxLQUg2QjtBQUs5QmtxQixJQUFBQSxNQUFNLEVBQUUsZ0JBQVNscUIsR0FBVCxFQUFjO0FBQ3BCLGFBQU8yckIsZ0JBQWdCLENBQUN6QixNQUFqQixDQUF3QmxxQixHQUF4QixDQUFQO0FBQ0Q7QUFQNkIsR0FBaEM7QUFVQSxNQUFJNHJCLFdBQVcsR0FBRzVCLGdCQUFnQixDQUFDLENBQ2pDLENBQUMsT0FBRCxFQUFVcFcsS0FBSyxDQUFDOFgseUJBQUQsQ0FBZixDQURpQyxDQUFELENBQWxDO0FBSUEsTUFBSUcsY0FBYyxHQUFHN0IsZ0JBQWdCLENBQUMsQ0FBQyxZQUFELEVBQWMsV0FBZCxFQUEwQixjQUExQixFQUF5QyxhQUF6QyxFQUF3RCxDQUFDLGNBQUQsRUFBaUJ1QixhQUFqQixDQUF4RCxDQUFELENBQXJDO0FBQ0EsTUFBSU8sZ0JBQWdCLEdBQUc5QixnQkFBZ0IsQ0FBQyxDQUN0QyxDQUFDLGdCQUFELEVBQW1CaUIsWUFBWSxDQUFDLENBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsVUFBbkIsRUFBK0IsVUFBL0IsRUFBMkMsUUFBM0MsQ0FBRCxDQUEvQixDQURzQyxFQUV0QyxDQUFDLGlCQUFELEVBQW9CTSxhQUFwQixDQUZzQyxFQUd0QyxDQUFDLFdBQUQsRUFBY0MsUUFBUSxFQUF0QixDQUhzQyxFQUl0QyxDQUFDLFVBQUQsRUFBYUEsUUFBUSxFQUFyQixDQUpzQyxFQUt0QyxDQUFDLE9BQUQsRUFBVUEsUUFBUSxDQUFDeEIsZ0JBQWdCLENBQUMsQ0FBQyxLQUFELEVBQVEsS0FBUixDQUFELENBQWpCLENBQWxCLENBTHNDLEVBTXRDLENBQUMsT0FBRCxFQUFVd0IsUUFBUSxDQUFDeEIsZ0JBQWdCLENBQUMsQ0FBQyxLQUFELEVBQVEsS0FBUixDQUFELENBQWpCLENBQWxCLENBTnNDLEVBT3RDLENBQUMsWUFBRCxFQUFld0IsUUFBUSxDQUFDeEIsZ0JBQWdCLENBQUMsQ0FDdkMsQ0FBQyxRQUFELEVBQVcwQix5QkFBWCxDQUR1QyxFQUV2QyxDQUFDLGFBQUQsRUFBZ0JGLFFBQVEsQ0FBQ0UseUJBQUQsQ0FBeEIsQ0FGdUMsQ0FBRCxDQUFqQixDQUF2QixDQVBzQyxFQVd0QyxlQVhzQyxFQVl0QyxhQVpzQyxDQUFELENBQXZDO0FBZUEsTUFBSUsscUJBQXFCLEdBQUcvQixnQkFBZ0IsQ0FBQyxDQUMzQyxXQUQyQyxFQUUzQyxRQUYyQyxFQUczQyxHQUgyQyxFQUkzQyxDQUFDLFlBQUQsRUFBZUEsZ0JBQWdCLENBQUMsQ0FDOUIsQ0FBQyxXQUFELEVBQWMwQix5QkFBZCxDQUQ4QixFQUU5QixDQUFDLFFBQUQsRUFBV0EseUJBQVgsQ0FGOEIsRUFHOUIsQ0FBQyxHQUFELEVBQU1BLHlCQUFOLENBSDhCLENBQUQsQ0FBL0IsQ0FKMkMsQ0FBRCxDQUE1QztBQVdBLE1BQUlNLGtCQUFrQixHQUFHaEMsZ0JBQWdCLENBQUMsRUFBRCxDQUF6QztBQUVBLE1BQUlpQyxxQkFBcUIsR0FBR2pDLGdCQUFnQixDQUFDLENBQzNDLENBQUMsWUFBRCxFQUFlSSxPQUFPLENBQUN4VyxLQUFLLENBQUM4WCx5QkFBRCxDQUFOLEVBQW1DLENBQW5DLENBQXRCLENBRDJDLENBQUQsQ0FBNUM7QUFJQSxNQUFJUSxTQUFTLEdBQUcsQ0FBQyxRQUFELEVBQVUsTUFBVixFQUFpQixZQUFqQixFQUE4QixXQUE5QixFQUEwQyxNQUExQyxFQUFpRCxNQUFqRCxFQUNoQixVQURnQixFQUNMLFdBREssRUFDTyxPQURQLEVBQ2UsTUFEZixFQUNzQixNQUR0QixFQUM2QixTQUQ3QixFQUVoQixVQUZnQixFQUVMLFVBRkssRUFFTSxVQUZOLEVBRWlCLFdBRmpCLEVBRTZCLFNBRjdCLEVBR2hCLE9BSGdCLEVBR1IsU0FIUSxFQUdFLFFBSEYsRUFHVyxPQUhYLEVBR21CLFlBSG5CLEVBR2dDLFdBSGhDLEVBSWhCLGFBSmdCLEVBSUYsT0FKRSxFQUlPLGtCQUpQLEVBSTJCLFlBSjNCLEVBSXlDLFlBSnpDLEVBSXVELGNBSnZELEVBS2hCLGdCQUxnQixFQUtFLGdCQUxGLEVBS29CLGlCQUxwQixFQUt1QyxZQUx2QyxFQU1oQix1QkFOZ0IsRUFNUyxjQU5ULEVBT2hCLGNBUGdCLEVBT0EsWUFQQSxFQVFoQixXQVJnQixFQVFILFlBUkcsRUFRVyxZQVJYLEVBUXlCLGFBUnpCLEVBUXdDLE9BUnhDLEVBUWlELDBCQVJqRCxFQVNoQixpQkFUZ0IsRUFTRyxhQVRILENBQWhCO0FBV0EsTUFBSUMsZ0JBQWdCLEdBQUduQyxnQkFBZ0IsQ0FBQyxDQUN0QyxDQUFDLGdCQUFELEVBQW1CdUIsYUFBbkIsQ0FEc0MsQ0FBRCxDQUF2QztBQUdBLE1BQUlhLGdCQUFnQixHQUFHcEMsZ0JBQWdCLENBQUMsQ0FBQyxhQUFELENBQUQsQ0FBdkM7QUFDQSxNQUFJK0QsaUJBQWlCLEdBQUcvRCxnQkFBZ0IsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUF4Qzs7QUFFQSxNQUFJZ0UsTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBU2xvQixLQUFULEVBQWdCO0FBQzNCLFdBQU8sQ0FBQ0EsS0FBRCxFQUFRNGxCLHlCQUFSLENBQVA7QUFDRCxHQUZEOztBQUlBLE1BQUlybEIsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBUzRuQixNQUFULEVBQWlCO0FBQzFCLFdBQU96QyxRQUFRLENBQUN4QixnQkFBZ0IsQ0FBQ2lFLE1BQU0sQ0FBQ3JWLEdBQVAsQ0FBV29WLE1BQVgsQ0FBRCxDQUFqQixDQUFmO0FBQ0QsR0FGRDs7QUFJQSxNQUFJckMsZ0JBQWdCLEdBQUczQixnQkFBZ0IsQ0FBQyxDQUN0QyxDQUFDLE1BQUQsRUFBU2lCLFlBQVksQ0FBQ2lCLFNBQUQsQ0FBckIsQ0FEc0MsRUFFdEMsQ0FBQyxNQUFELEVBQVNmLFlBQVksQ0FBQyxNQUFELEVBQVM7QUFDMUJrQixJQUFBQSxNQUFNLEVBQUVyQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQURFO0FBRTFCLFlBQVFnQyxrQkFGa0I7QUFHMUI5bkIsSUFBQUEsVUFBVSxFQUFFNG5CLGdCQUhjO0FBSTFCUSxJQUFBQSxTQUFTLEVBQUV0QyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQUQsQ0FBRCxDQUpEO0FBSzFCdUMsSUFBQUEsSUFBSSxFQUFFdkMsZ0JBQWdCLENBQUMsQ0FBQyxNQUFELEVBQVMsUUFBVCxDQUFELENBTEk7QUFNMUJ3QyxJQUFBQSxJQUFJLEVBQUVYLGNBTm9CO0FBTzFCWSxJQUFBQSxRQUFRLEVBQUVaLGNBUGdCO0FBUTFCYSxJQUFBQSxTQUFTLEVBQUUxQyxnQkFBZ0IsQ0FBQyxDQUFDLFFBQUQsQ0FBRCxDQVJEO0FBUzFCck0sSUFBQUEsS0FBSyxFQUFFcU0sZ0JBQWdCLENBQUMsQ0FBQyxNQUFELEVBQVMsS0FBVCxDQUFELENBVEc7QUFVMUJqa0IsSUFBQUEsSUFBSSxFQUFFaWtCLGdCQUFnQixDQUFDLENBQUMsTUFBRCxFQUFTLENBQUMsWUFBRCxFQUFlM2pCLElBQUksQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFuQixDQUFULENBQUQsQ0FWSTtBQVcxQnNtQixJQUFBQSxJQUFJLEVBQUUzQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQUQsRUFBUyxPQUFULENBQUQsQ0FYSTtBQVkxQjRDLElBQUFBLE9BQU8sRUFBRWIscUJBWmlCO0FBYTFCYyxJQUFBQSxRQUFRLEVBQUVkLHFCQWJnQjtBQWMxQmUsSUFBQUEsUUFBUSxFQUFFZixxQkFkZ0I7QUFlMUJnQixJQUFBQSxRQUFRLEVBQUVoQixxQkFmZ0I7QUFnQjFCaUIsSUFBQUEsU0FBUyxFQUFFakIscUJBaEJlO0FBaUIxQmtCLElBQUFBLE9BQU8sRUFBRWxCLHFCQWpCaUI7QUFrQjFCbUIsSUFBQUEsS0FBSyxFQUFFbkIscUJBbEJtQjtBQW1CMUJvQixJQUFBQSxPQUFPLEVBQUVwQixxQkFuQmlCO0FBb0IxQnFCLElBQUFBLE1BQU0sRUFBRXBELGdCQUFnQixDQUFDLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsS0FBakIsQ0FBRCxDQXBCRTtBQXFCMUJ4aUIsSUFBQUEsS0FBSyxFQUFFd2tCLGtCQXJCbUI7QUFzQjFCdGtCLElBQUFBLFVBQVUsRUFBRXNrQixrQkF0QmM7QUF1QjFCcGtCLElBQUFBLFNBQVMsRUFBRW9rQixrQkF2QmU7QUF3QjFCcUIsSUFBQUEsV0FBVyxFQUFFckQsZ0JBQWdCLENBQUMsQ0FBQyxPQUFELEVBQVUsVUFBVixFQUFzQixVQUF0QixFQUFrQyxLQUFsQyxDQUFELENBeEJIO0FBeUIxQnNELElBQUFBLEtBQUssRUFBRTFCLFdBekJtQjtBQTBCMUIyQixJQUFBQSxnQkFBZ0IsRUFBRXRCLHFCQTFCUTtBQTJCMUJ1QixJQUFBQSxVQUFVLEVBQUVyQixnQkEzQmM7QUE0QjFCc0IsSUFBQUEsVUFBVSxFQUFFckIsZ0JBNUJjO0FBNkIxQjhCLElBQUFBLFlBQVksRUFBRUgsaUJBN0JZO0FBOEIxQkksSUFBQUEsY0FBYyxFQUFFbkUsZ0JBQWdCLENBQUMsQ0FBQyxTQUFELEVBQVksVUFBWixFQUF1QixxQkFBdkIsRUFBOEMscUJBQTlDLENBQUQsQ0E5Qk47QUErQjFCb0UsSUFBQUEsY0FBYyxFQUFFcEMsa0JBL0JVO0FBZ0MxQnFDLElBQUFBLGVBQWUsRUFBRXJFLGdCQUFnQixDQUFDLENBQUMsUUFBRCxDQUFELENBaENQO0FBaUMxQnNFLElBQUFBLFVBQVUsRUFBRXRFLGdCQUFnQixDQUFDLENBQUMsT0FBRCxDQUFELENBakNGO0FBa0MxQnhvQixJQUFBQSxLQUFLLEVBQUV3b0IsZ0JBQWdCLENBQUMsQ0FBQyxPQUFELEVBQVUsQ0FBQyxZQUFELEVBQWUzakIsSUFBSSxDQUFDLENBQUMsT0FBRCxDQUFELENBQW5CLENBQVYsQ0FBRCxDQWxDRztBQW1DMUJrb0IsSUFBQUEscUJBQXFCLEVBQUV2RSxnQkFBZ0IsQ0FBQyxDQUFDLFFBQUQsQ0FBRCxDQW5DYjtBQW9DMUJ3RSxJQUFBQSxZQUFZLEVBQUV4RSxnQkFBZ0IsQ0FBQyxDQUFDLE1BQUQsQ0FBRCxDQXBDSjtBQXFDMUJwakIsSUFBQUEsWUFBWSxFQUFFb2pCLGdCQUFnQixDQUFDLENBQUMsTUFBRCxFQUFTLEtBQVQsQ0FBRCxDQXJDSjtBQXNDMUIvakIsSUFBQUEsVUFBVSxFQUFFK2xCLGtCQXRDYztBQXVDMUI5bEIsSUFBQUEsU0FBUyxFQUFFOGpCLGdCQUFnQixDQUFDLENBQUMsZUFBRCxFQUFrQixDQUFDLFlBQUQsRUFBZTNqQixJQUFJLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FBbkIsQ0FBbEIsQ0FBRCxDQXZDRDtBQXdDMUJSLElBQUFBLFVBQVUsRUFBRW1rQixnQkFBZ0IsQ0FBQyxDQUFDLGVBQUQsRUFBa0IsQ0FBQyxZQUFELEVBQWUzakIsSUFBSSxDQUFDLENBQUMsZUFBRCxDQUFELENBQW5CLENBQWxCLENBQUQsQ0F4Q0Y7QUF5QzFCRixJQUFBQSxVQUFVLEVBQUU2akIsZ0JBQWdCLENBQUMsQ0FBQyxlQUFELEVBQWtCLENBQUMsWUFBRCxFQUFlM2pCLElBQUksQ0FBQyxDQUFDLGVBQUQsQ0FBRCxDQUFuQixDQUFsQixDQUFELENBekNGO0FBMEMxQkwsSUFBQUEsV0FBVyxFQUFFZ2tCLGdCQUFnQixDQUFDLENBQUMsZUFBRCxFQUFrQixDQUFDLFlBQUQsRUFBZTNqQixJQUFJLENBQUMsQ0FBQyxlQUFELENBQUQsQ0FBbkIsQ0FBbEIsQ0FBRCxDQTFDSDtBQTJDMUJvb0IsSUFBQUEsd0JBQXdCLEVBQUV6RSxnQkFBZ0IsQ0FBQyxDQUFDLGVBQUQsQ0FBRCxDQTNDaEI7QUE0QzFCMEUsSUFBQUEsZUFBZSxFQUFFMUUsZ0JBQWdCLENBQUMsQ0FBQyxNQUFELENBQUQsQ0E1Q1A7QUE2QzFCMkUsSUFBQUEsV0FBVyxFQUFFM0UsZ0JBQWdCLENBQUMsQ0FBQyxTQUFELEVBQVksR0FBWixDQUFEO0FBN0NILEdBQVQsQ0FBckIsQ0FGc0MsQ0FBRCxDQUF2QztBQW9EQSxNQUFJMEQsTUFBTSxHQUFHO0FBQ1h4SyxJQUFBQSxPQUFPLEVBQUVxSCxhQURFO0FBRVhvRCxJQUFBQSxJQUFJLEVBQUVsQyxVQUZLO0FBR1huVSxJQUFBQSxVQUFVLEVBQUVxVTtBQUhELEdBQWI7O0FBTUFsckIsRUFBQUEsS0FBSyxDQUFDa25CLE9BQU4sQ0FBY2lHLHFCQUFkLENBQW9DM0YsU0FBcEMsR0FBZ0QsVUFBUzNaLElBQVQsRUFBZXRPLEdBQWYsRUFBb0I7QUFDbEUsUUFBSTB0QixNQUFNLENBQUNwZixJQUFELENBQVYsRUFBa0I7QUFDaEIsVUFBSXFULEdBQUcsR0FBR3dHLElBQUksQ0FBQ0MsU0FBTCxDQUFlc0YsTUFBTSxDQUFDcGYsSUFBRCxDQUFOLENBQWEyYixJQUFiLENBQWtCanFCLEdBQWxCLENBQWYsQ0FBVjtBQUNBMmhCLE1BQUFBLEdBQUcsR0FBR0EsR0FBRyxDQUFDVyxLQUFKLENBQVUsQ0FBVixFQUFhWCxHQUFHLENBQUN6aEIsTUFBSixHQUFXLENBQXhCLENBQU47QUFDQSxhQUFPeWhCLEdBQVA7QUFDRDs7QUFFRCxXQUFPd0csSUFBSSxDQUFDQyxTQUFMLENBQWVwb0IsR0FBZixDQUFQO0FBQ0QsR0FSRDs7QUFVQVMsRUFBQUEsS0FBSyxDQUFDa25CLE9BQU4sQ0FBY2lHLHFCQUFkLENBQW9DdkYsV0FBcEMsR0FBa0QsVUFBUy9aLElBQVQsRUFBZXFULEdBQWYsRUFBb0I7QUFDcEUsUUFBSStMLE1BQU0sQ0FBQ3BmLElBQUQsQ0FBVixFQUFrQjtBQUNoQixhQUFPb2YsTUFBTSxDQUFDcGYsSUFBRCxDQUFOLENBQWE0YixNQUFiLENBQW9CL0IsSUFBSSxDQUFDNUcsS0FBTCxDQUFXLE1BQUlJLEdBQUosR0FBUSxHQUFuQixDQUFwQixDQUFQO0FBQ0Q7O0FBRUQsV0FBT3dHLElBQUksQ0FBQzVHLEtBQUwsQ0FBV0ksR0FBWCxDQUFQO0FBQ0QsR0FORDtBQVFDLENBcFlEIiwiZmlsZSI6Im11c2ljLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMCBXaWxrZXIgTMO6Y2lvXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG52YXIgSHVmZm1hbjtIdWZmbWFuPXt0cmVlRnJvbVRleHQ6ZnVuY3Rpb24oYil7dmFyIGE7YT1uZXcgSHVmZm1hbi5UcmVlQnVpbGRlcihiKTtyZXR1cm4gYS5idWlsZCgpfX07SHVmZm1hbi5Db3JlSGVscGVycz17aXNBcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gISEoYSYmYS5jb25zdHJ1Y3Rvcj09PUFycmF5KX0sbHBhZDpmdW5jdGlvbihhLGIpe2I9Ynx8ODt3aGlsZShhLmxlbmd0aDxiKXthPVwiMFwiK2F9cmV0dXJuIGF9fTtIdWZmbWFuLlRyZWU9ZnVuY3Rpb24oYSl7dGhpcy5yb290PWE7dGhpcy5yb290PXRoaXMucm9vdHx8bmV3IEh1ZmZtYW4uVHJlZS5Ob2RlKCk7cmV0dXJuIHRoaXN9O0h1ZmZtYW4uVHJlZS5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmJpdFN0cmluZ1RvU3RyaW5nKHRoaXMuZW5jb2RlQml0U3RyaW5nKGEpKX07SHVmZm1hbi5UcmVlLnByb3RvdHlwZS5kZWNvZGU9ZnVuY3Rpb24oail7dmFyIGcsZixlLGEsYyxpLGgsYjthPXRoaXMuc3RyaW5nVG9CaXRTdHJpbmcoaik7aT1cIlwiO2I9dGhpcy5yb290O2Y9YS5zcGxpdChcIlwiKTtmb3IoZz0wLGU9Zi5sZW5ndGg7ZzxlO2crKyl7aD1mW2ddO2M9aD09PVwiMFwiP1wibGVmdFwiOlwicmlnaHRcIjtiPWJbY107aWYoYi5pc0xlYWYoKSl7aSs9Yi52YWx1ZTtiPXRoaXMucm9vdH19cmV0dXJuIGl9O0h1ZmZtYW4uVHJlZS5wcm90b3R5cGUuZW5jb2RlQml0U3RyaW5nPWZ1bmN0aW9uKGYpe3ZhciBjLGIsYSxkLGU7ZT1cIlwiO2I9Zi5zcGxpdChcIlwiKTtmb3IoYz0wLGE9Yi5sZW5ndGg7YzxhO2MrKyl7ZD1iW2NdO2UrPXRoaXMuYml0VmFsdWUoZCl9cmV0dXJuIGV9O0h1ZmZtYW4uVHJlZS5wcm90b3R5cGUuYml0U3RyaW5nVG9TdHJpbmc9ZnVuY3Rpb24oYSl7dmFyIGQsYixmLGMsZTtlPTgtYS5sZW5ndGglODtmb3IoYz0wOygwPD1lP2M8ZTpjPmUpOygwPD1lP2MrPTE6Yy09MSkpe2ErPVwiMFwifWY9KGZ1bmN0aW9uKCl7ZD1bXTtiPWEubGVuZ3RoO2ZvcihjPTA7KDA8PWI/YzxiOmM+Yik7Yys9OCl7ZC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoYS5zdWJzdHIoYyw4KSwyKSkpfXJldHVybiBkfSkoKTtyZXR1cm4gZi5qb2luKFwiXCIpK2UudG9TdHJpbmcoKX07SHVmZm1hbi5UcmVlLnByb3RvdHlwZS5zdHJpbmdUb0JpdFN0cmluZz1mdW5jdGlvbihjKXt2YXIgZSxkLGIsYSxmLGgsZztnPWMuc3BsaXQoXCJcIik7aD1wYXJzZUludChnLnBvcCgpKTtnPShmdW5jdGlvbigpe2U9W107Yj1nO2ZvcihkPTAsYT1iLmxlbmd0aDtkPGE7ZCsrKXtmPWJbZF07ZS5wdXNoKEh1ZmZtYW4uQ29yZUhlbHBlcnMubHBhZChmLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMikpKX1yZXR1cm4gZX0pKCk7Zz1nLmpvaW4oXCJcIik7cmV0dXJuIGcuc3Vic3RyKDAsZy5sZW5ndGgtaCl9O0h1ZmZtYW4uVHJlZS5wcm90b3R5cGUuYml0VmFsdWU9ZnVuY3Rpb24oYil7dmFyIGE7aWYoISgodHlwZW9mKGE9dGhpcy5sZWFmQ2FjaGUpIT09XCJ1bmRlZmluZWRcIiYmYSE9PW51bGwpKSl7dGhpcy5nZW5lcmF0ZUxlYWZDYWNoZSgpfXJldHVybiB0aGlzLmxlYWZDYWNoZVtiXX07SHVmZm1hbi5UcmVlLnByb3RvdHlwZS5nZW5lcmF0ZUxlYWZDYWNoZT1mdW5jdGlvbihhLGIpe3RoaXMubGVhZkNhY2hlPSh0eXBlb2YgdGhpcy5sZWFmQ2FjaGUhPT1cInVuZGVmaW5lZFwiJiZ0aGlzLmxlYWZDYWNoZSE9PW51bGwpP3RoaXMubGVhZkNhY2hlOnt9O2E9YXx8dGhpcy5yb290O2I9Ynx8XCJcIjtpZihhLmlzTGVhZigpKXtyZXR1cm4odGhpcy5sZWFmQ2FjaGVbYS52YWx1ZV09Yil9ZWxzZXt0aGlzLmdlbmVyYXRlTGVhZkNhY2hlKGEubGVmdCxiK1wiMFwiKTtyZXR1cm4gdGhpcy5nZW5lcmF0ZUxlYWZDYWNoZShhLnJpZ2h0LGIrXCIxXCIpfX07SHVmZm1hbi5UcmVlLnByb3RvdHlwZS5lbmNvZGVUcmVlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucm9vdC5lbmNvZGUoKX07SHVmZm1hbi5UcmVlLmRlY29kZVRyZWU9ZnVuY3Rpb24oYSl7cmV0dXJuIG5ldyBIdWZmbWFuLlRyZWUoSHVmZm1hbi5UcmVlLnBhcnNlTm9kZShhKSl9O0h1ZmZtYW4uVHJlZS5wYXJzZU5vZGU9ZnVuY3Rpb24oYil7dmFyIGE7YT1uZXcgSHVmZm1hbi5UcmVlLk5vZGUoKTtpZihIdWZmbWFuLkNvcmVIZWxwZXJzLmlzQXJyYXkoYikpe2EubGVmdD1IdWZmbWFuLlRyZWUucGFyc2VOb2RlKGJbMF0pO2EucmlnaHQ9SHVmZm1hbi5UcmVlLnBhcnNlTm9kZShiWzFdKX1lbHNle2EudmFsdWU9Yn1yZXR1cm4gYX07SHVmZm1hbi5UcmVlLk5vZGU9ZnVuY3Rpb24oKXt0aGlzLmxlZnQ9KHRoaXMucmlnaHQ9KHRoaXMudmFsdWU9bnVsbCkpO3JldHVybiB0aGlzfTtIdWZmbWFuLlRyZWUuTm9kZS5wcm90b3R5cGUuaXNMZWFmPWZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMubGVmdD09PXRoaXMucmlnaHQpJiYodGhpcy5yaWdodD09PW51bGwpfTtIdWZmbWFuLlRyZWUuTm9kZS5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWU/dGhpcy52YWx1ZTpbdGhpcy5sZWZ0LmVuY29kZSgpLHRoaXMucmlnaHQuZW5jb2RlKCldfTt2YXIgX19oYXNQcm9wPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7SHVmZm1hbi5UcmVlQnVpbGRlcj1mdW5jdGlvbihhKXt0aGlzLnRleHQ9YTtyZXR1cm4gdGhpc307SHVmZm1hbi5UcmVlQnVpbGRlci5wcm90b3R5cGUuYnVpbGQ9ZnVuY3Rpb24oKXt2YXIgYSxiO2I9dGhpcy5idWlsZEZyZXF1ZW5jeVRhYmxlKCk7YT10aGlzLmNvbWJpbmVUYWJsZShiKTtyZXR1cm4gSHVmZm1hbi5UcmVlLmRlY29kZVRyZWUodGhpcy5jb21wcmVzc0NvbWJpbmVkVGFibGUoYSkpfTtIdWZmbWFuLlRyZWVCdWlsZGVyLnByb3RvdHlwZS5idWlsZEZyZXF1ZW5jeVRhYmxlPWZ1bmN0aW9uKCl7dmFyIGQsYyxiLGEsZSxoLGYsZztnPXt9O2M9dGhpcy50ZXh0LnNwbGl0KFwiXCIpO2ZvcihkPTAsYj1jLmxlbmd0aDtkPGI7ZCsrKXtlPWNbZF07Z1tlXT0odHlwZW9mIGdbZV0hPT1cInVuZGVmaW5lZFwiJiZnW2VdIT09bnVsbCk/Z1tlXTowO2dbZV0rPTF9Zj1bXTthPWc7Zm9yKGUgaW4gYSl7aWYoIV9faGFzUHJvcC5jYWxsKGEsZSkpe2NvbnRpbnVlfWg9YVtlXTtmLnB1c2goW2gsZV0pfWYuc29ydCh0aGlzLmZyZXF1ZW5jeVNvcnRlcik7cmV0dXJuIGZ9O0h1ZmZtYW4uVHJlZUJ1aWxkZXIucHJvdG90eXBlLmZyZXF1ZW5jeVNvcnRlcj1mdW5jdGlvbihkLGMpe3JldHVybiBkWzBdPmNbMF0/MTooZFswXTxjWzBdPy0xOjApfTtIdWZmbWFuLlRyZWVCdWlsZGVyLnByb3RvdHlwZS5jb21iaW5lVGFibGU9ZnVuY3Rpb24oYil7dmFyIGMsYTt3aGlsZShiLmxlbmd0aD4xKXtjPWIuc2hpZnQoKTthPWIuc2hpZnQoKTtiLnB1c2goW2NbMF0rYVswXSxbYyxhXV0pO2Iuc29ydCh0aGlzLmZyZXF1ZW5jeVNvcnRlcil9cmV0dXJuIGJbMF19O0h1ZmZtYW4uVHJlZUJ1aWxkZXIucHJvdG90eXBlLmNvbXByZXNzQ29tYmluZWRUYWJsZT1mdW5jdGlvbihhKXt2YXIgYjtiPWFbMV07cmV0dXJuIEh1ZmZtYW4uQ29yZUhlbHBlcnMuaXNBcnJheShiKT9bdGhpcy5jb21wcmVzc0NvbWJpbmVkVGFibGUoYlswXSksdGhpcy5jb21wcmVzc0NvbWJpbmVkVGFibGUoYlsxXSldOmJ9OyIsIihmdW5jdGlvbih3aW5kb3cpe1xyXG5cclxuICB2YXIgV09SS0VSX1BBVEggPSAncmVjb3JkZXJXb3JrZXIuanMnO1xyXG5cclxuICB2YXIgUmVjb3JkZXIgPSBmdW5jdGlvbihzb3VyY2UsIGNmZyl7XHJcbiAgICB2YXIgY29uZmlnID0gY2ZnIHx8IHt9O1xyXG4gICAgdmFyIGJ1ZmZlckxlbiA9IGNvbmZpZy5idWZmZXJMZW4gfHwgNDA5NjtcclxuICAgIHRoaXMuY29udGV4dCA9IHNvdXJjZS5jb250ZXh0O1xyXG4gICAgdGhpcy5ub2RlID0gKHRoaXMuY29udGV4dC5jcmVhdGVTY3JpcHRQcm9jZXNzb3IgfHxcclxuICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuY3JlYXRlSmF2YVNjcmlwdE5vZGUpLmNhbGwodGhpcy5jb250ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJMZW4sIDIsIDIpO1xyXG4gICAgdmFyIHdvcmtlciA9IG5ldyBXb3JrZXIoY29uZmlnLndvcmtlclBhdGggfHwgV09SS0VSX1BBVEgpO1xyXG4gICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcclxuICAgICAgY29tbWFuZDogJ2luaXQnLFxyXG4gICAgICBjb25maWc6IHtcclxuICAgICAgICBzYW1wbGVSYXRlOiB0aGlzLmNvbnRleHQuc2FtcGxlUmF0ZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHZhciByZWNvcmRpbmcgPSBmYWxzZSxcclxuICAgICAgY3VyckNhbGxiYWNrO1xyXG5cclxuICAgIHRoaXMubm9kZS5vbmF1ZGlvcHJvY2VzcyA9IGZ1bmN0aW9uKGUpe1xyXG4gICAgICBpZiAoIXJlY29yZGluZykgcmV0dXJuO1xyXG4gICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgIGNvbW1hbmQ6ICdyZWNvcmQnLFxyXG4gICAgICAgIGJ1ZmZlcjogW1xyXG4gICAgICAgICAgZS5pbnB1dEJ1ZmZlci5nZXRDaGFubmVsRGF0YSgwKSxcclxuICAgICAgICAgIGUuaW5wdXRCdWZmZXIuZ2V0Q2hhbm5lbERhdGEoMSlcclxuICAgICAgICBdXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY29uZmlndXJlID0gZnVuY3Rpb24oY2ZnKXtcclxuICAgICAgZm9yICh2YXIgcHJvcCBpbiBjZmcpe1xyXG4gICAgICAgIGlmIChjZmcuaGFzT3duUHJvcGVydHkocHJvcCkpe1xyXG4gICAgICAgICAgY29uZmlnW3Byb3BdID0gY2ZnW3Byb3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucmVjb3JkID0gZnVuY3Rpb24oKXtcclxuICAgICAgcmVjb3JkaW5nID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN0b3AgPSBmdW5jdGlvbigpe1xyXG4gICAgICByZWNvcmRpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNsZWFyID0gZnVuY3Rpb24oKXtcclxuICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHsgY29tbWFuZDogJ2NsZWFyJyB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmdldEJ1ZmZlciA9IGZ1bmN0aW9uKGNiKSB7XHJcbiAgICAgIGN1cnJDYWxsYmFjayA9IGNiIHx8IGNvbmZpZy5jYWxsYmFjaztcclxuICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHsgY29tbWFuZDogJ2dldEJ1ZmZlcicgfSlcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmV4cG9ydFdBViA9IGZ1bmN0aW9uKGNiLCB0eXBlKXtcclxuICAgICAgY3VyckNhbGxiYWNrID0gY2IgfHwgY29uZmlnLmNhbGxiYWNrO1xyXG4gICAgICB0eXBlID0gdHlwZSB8fCBjb25maWcudHlwZSB8fCAnYXVkaW8vd2F2JztcclxuICAgICAgaWYgKCFjdXJyQ2FsbGJhY2spIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgbm90IHNldCcpO1xyXG4gICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgIGNvbW1hbmQ6ICdleHBvcnRXQVYnLFxyXG4gICAgICAgIHR5cGU6IHR5cGVcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgd29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpe1xyXG4gICAgICB2YXIgYmxvYiA9IGUuZGF0YTtcclxuICAgICAgY3VyckNhbGxiYWNrKGJsb2IpO1xyXG4gICAgfVxyXG5cclxuICAgIHNvdXJjZS5jb25uZWN0KHRoaXMubm9kZSk7XHJcbiAgICB0aGlzLm5vZGUuY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pOyAgICAvL3RoaXMgc2hvdWxkIG5vdCBiZSBuZWNlc3NhcnlcclxuICB9O1xyXG5cclxuICBSZWNvcmRlci5mb3JjZURvd25sb2FkID0gZnVuY3Rpb24oYmxvYiwgZmlsZW5hbWUpe1xyXG4gICAgdmFyIHVybCA9ICh3aW5kb3cuVVJMIHx8IHdpbmRvdy53ZWJraXRVUkwpLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgIHZhciBsaW5rID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgIGxpbmsuaHJlZiA9IHVybDtcclxuICAgIGxpbmsuZG93bmxvYWQgPSBmaWxlbmFtZSB8fCAnb3V0cHV0Lndhdic7XHJcbiAgICB2YXIgY2xpY2sgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xyXG4gICAgY2xpY2suaW5pdEV2ZW50KFwiY2xpY2tcIiwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICBsaW5rLmRpc3BhdGNoRXZlbnQoY2xpY2spO1xyXG4gIH1cclxuXHJcbiAgd2luZG93LlJlY29yZGVyID0gUmVjb3JkZXI7XHJcblxyXG59KSh3aW5kb3cpO1xyXG4iLCIvKipcclxuICogVChcInRpbWJyZS5qc1wiKSAtIEEgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBvYmplY3RpdmUgc291bmQgcHJvZ3JhbW1pbmdcclxuICovXHJcbihmdW5jdGlvbih1bmRlZmluZWQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciB0aW1icmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gVC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XHJcblxyXG4gICAgdmFyIEZJTklTSEVEX1NUQVRFICAgID0gMDtcclxuICAgIHZhciBQTEFZSU5HX1NUQVRFICAgICA9IDE7XHJcbiAgICB2YXIgVU5TQ0hFRFVMRURfU1RBVEUgPSAyOyAvLyAobm90IHVzZSlcclxuICAgIHZhciBTQ0hFRFVMRURfU1RBVEUgICA9IDM7IC8vIChub3QgdXNlKVxyXG5cclxuICAgIHZhciBBQ0NFUFRfU0FNUExFUkFURVMgPSBbODAwMCwxMTAyNSwxMjAwMCwxNjAwMCwyMjA1MCwyNDAwMCwzMjAwMCw0NDEwMCw0ODAwMF07XHJcbiAgICB2YXIgQUNDRVBUX0NFTExTSVpFUyA9IFszMiw2NCwxMjgsMjU2XTtcclxuXHJcbiAgICB2YXIgX3ZlciA9IFwiMTQuMTEuMjVcIjtcclxuICAgIHZhciBfc3lzID0gbnVsbDtcclxuICAgIHZhciBfY29uc3RydWN0b3JzID0ge307XHJcbiAgICB2YXIgX2ZhY3RvcmllcyAgICA9IHt9O1xyXG4gICAgdmFyIF9lbnZ0eXBlID0gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpID8gXCJicm93c2VyXCIgOlxyXG4gICAgICAgICh0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzKSA/IFwibm9kZVwiIDogXCJ1bmtub3duXCI7XHJcbiAgICB2YXIgX2Vudm1vYmlsZSA9IF9lbnZ0eXBlID09PSBcImJyb3dzZXJcIiAmJiAvKGlQaG9uZXxpUGFkfGlQb2R8QW5kcm9pZCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgdmFyIF9mNjRtb2RlID0gZmFsc2U7XHJcbiAgICB2YXIgX2JwbSA9IDEyMDtcclxuXHJcbiAgICB2YXIgVCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLCBrZXkgPSBhcmdzWzBdLCB0LCBtO1xyXG5cclxuICAgICAgICBzd2l0Y2ggKHR5cGVvZiBrZXkpIHtcclxuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XHJcbiAgICAgICAgICAgIGlmIChfY29uc3RydWN0b3JzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgIHQgPSBuZXcgX2NvbnN0cnVjdG9yc1trZXldKGFyZ3Muc2xpY2UoMSkpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF9mYWN0b3JpZXNba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgdCA9IF9mYWN0b3JpZXNba2V5XShhcmdzLnNsaWNlKDEpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG0gPSAvXiguKz8pKD86XFwuKGFyfGtyKSk/JC8uZXhlYyhrZXkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG0pIHtcclxuICAgICAgICAgICAgICAgICAgICBrZXkgPSBtWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfY29uc3RydWN0b3JzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IG5ldyBfY29uc3RydWN0b3JzW2tleV0oYXJncy5zbGljZSgxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfZmFjdG9yaWVzW2tleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IF9mYWN0b3JpZXNba2V5XShhcmdzLnNsaWNlKDEpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgbVsyXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0W21bMl1dKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcclxuICAgICAgICAgICAgdCA9IG5ldyBOdW1iZXJXcmFwcGVyKGFyZ3MpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxyXG4gICAgICAgICAgICB0ID0gbmV3IEJvb2xlYW5XcmFwcGVyKGFyZ3MpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcclxuICAgICAgICAgICAgdCA9IG5ldyBGdW5jdGlvbldyYXBwZXIoYXJncyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJvYmplY3RcIjpcclxuICAgICAgICAgICAgaWYgKGtleSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSBpbnN0YW5jZW9mIFRpbWJyZU9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleS5jb250ZXh0IGluc3RhbmNlb2YgVGltYnJlT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleS5jb250ZXh0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0RpY3Rpb25hcnkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSBuZXcgT2JqZWN0V3JhcHBlcihhcmdzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IG5ldyBBcnJheVdyYXBwZXIoYXJncyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHQgPSBuZXcgQWRkTm9kZShhcmdzLnNsaWNlKDEpKTtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVChcXFwiXCIgKyBrZXkgKyBcIlxcXCIpIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBfID0gdC5fO1xyXG4gICAgICAgIF8ub3JpZ2lua2V5ID0ga2V5O1xyXG4gICAgICAgIF8ubWV0YSA9IF9fYnVpbGRNZXRhRGF0YSh0KTtcclxuICAgICAgICBfLmVtaXQoXCJpbml0XCIpO1xyXG5cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIF9fYnVpbGRNZXRhRGF0YSA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XHJcbiAgICAgICAgdmFyIG1ldGEgPSBpbnN0YW5jZS5fLm1ldGE7XHJcbiAgICAgICAgdmFyIG5hbWVzLCBkZXNjO1xyXG4gICAgICAgIHZhciBwID0gaW5zdGFuY2U7XHJcbiAgICAgICAgd2hpbGUgKHAgIT09IG51bGwgJiYgcC5jb25zdHJ1Y3RvciAhPT0gT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIG5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbWF4ID0gbmFtZXMubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWV0YVtuYW1lc1tpXV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgvXihjb25zdHJ1Y3RvciR8cHJvY2VzcyR8XykvLnRlc3QobmFtZXNbaV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWV0YVtuYW1lc1tpXV0gPSBcImlnbm9yZVwiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwLCBuYW1lc1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXNjLnZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YVtuYW1lc1tpXV0gPSBcImZ1bmN0aW9uXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhW25hbWVzW2ldXSA9IFwicHJvcGVydHlcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1ldGE7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHByb3BlcnRpZXNcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRpbWJyZSwge1xyXG4gICAgICAgIHZlcnNpb24gIDogeyB2YWx1ZTogX3ZlciB9LFxyXG4gICAgICAgIGVudnR5cGUgIDogeyB2YWx1ZTogX2VudnR5cGUgfSxcclxuICAgICAgICBlbnZtb2JpbGU6IHsgdmFsdWU6IF9lbnZtb2JpbGUgfSxcclxuICAgICAgICBlbnY6IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfc3lzLmltcGwuZW52O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzYW1wbGVyYXRlOiB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3N5cy5zYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjaGFubmVsczoge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9zeXMuY2hhbm5lbHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGNlbGxzaXplOiB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3N5cy5jZWxsc2l6ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3VycmVudFRpbWU6IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfc3lzLmN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc1BsYXlpbmc6IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfc3lzLnN0YXR1cyA9PT0gUExBWUlOR19TVEFURTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNSZWNvcmRpbmc6IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfc3lzLnN0YXR1cyA9PT0gU0NIRURVTEVEX1NUQVRFO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhbXA6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIF9zeXMuYW1wID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX3N5cy5hbXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGJwbToge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKDUgPD0gdmFsdWUgJiYgdmFsdWUgPD0gMzAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9icG0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX2JwbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRpbWJyZS5iaW5kID0gZnVuY3Rpb24oS2xhc3MsIG9wdHMpIHtcclxuICAgICAgICBfc3lzLmJpbmQoS2xhc3MsIG9wdHMpO1xyXG4gICAgICAgIHJldHVybiB0aW1icmU7XHJcbiAgICB9O1xyXG4gICAgdGltYnJlLnNldHVwID0gZnVuY3Rpb24ob3B0cykge1xyXG4gICAgICAgIF9zeXMuc2V0dXAob3B0cyk7XHJcbiAgICAgICAgcmV0dXJuIHRpbWJyZTtcclxuICAgIH07XHJcbiAgICB0aW1icmUucGxheSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIF9zeXMucGxheSgpO1xyXG4gICAgICAgIHJldHVybiB0aW1icmU7XHJcbiAgICB9O1xyXG4gICAgdGltYnJlLnBhdXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgX3N5cy5wYXVzZSgpO1xyXG4gICAgICAgIHJldHVybiB0aW1icmU7XHJcbiAgICB9O1xyXG4gICAgdGltYnJlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgX3N5cy5yZXNldCgpO1xyXG4gICAgICAgIF9zeXMuZXZlbnRzLmVtaXQoXCJyZXNldFwiKTtcclxuICAgICAgICByZXR1cm4gdGltYnJlO1xyXG4gICAgfTtcclxuICAgIHRpbWJyZS5vbiA9IHRpbWJyZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgX3N5cy5vbih0eXBlLCBsaXN0ZW5lcik7XHJcbiAgICAgICAgcmV0dXJuIHRpbWJyZTtcclxuICAgIH07XHJcbiAgICB0aW1icmUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgX3N5cy5vbmNlKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgICByZXR1cm4gdGltYnJlO1xyXG4gICAgfTtcclxuICAgIHRpbWJyZS5vZmYgPSB0aW1icmUucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIF9zeXMub2ZmKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgICByZXR1cm4gdGltYnJlO1xyXG4gICAgfTtcclxuICAgIHRpbWJyZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgX3N5cy5yZW1vdmVBbGxMaXN0ZW5lcnModHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIHRpbWJyZTtcclxuICAgIH07XHJcbiAgICB0aW1icmUubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgIHJldHVybiBfc3lzLmxpc3RlbmVycyh0eXBlKTtcclxuICAgIH07XHJcbiAgICB0aW1icmUucmVjID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zeXMucmVjLmFwcGx5KF9zeXMsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG4gICAgdGltYnJlLnRpbWV2YWx1ZSA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgZ2V0YnBtID0gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgICAgIHZhciBtLCBicG0gPSBfYnBtO1xyXG4gICAgICAgICAgICBpZiAoKG0gPSAvXmJwbShcXGQrKD86XFwuXFxkKyk/KS9pLmV4ZWMoc3RyKSkpIHtcclxuICAgICAgICAgICAgICAgIGJwbSA9IE1hdGgubWF4KDUsIE1hdGgubWluKDMwMCwgKyhtWzFdfHwwKSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBicG07XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oc3RyKSB7XHJcbiAgICAgICAgICAgIHZhciBtLCBtcywgeDtcclxuICAgICAgICAgICAgaWYgKChtID0gL14oXFxkKyg/OlxcLlxcZCspPylIeiQvaS5leGVjKHN0cikpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gK21bMV0gPT09IDAgPyAwIDogMTAwMCAvICttWzFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgobSA9IC9MKFxcZCspPyhcXC4qKSQvaS5leGVjKHN0cikpKSB7XHJcbiAgICAgICAgICAgICAgICBtcyA9IDYwIC8gZ2V0YnBtKHN0cikgKiAoNCAvIChtWzFdfHw0KSkgKiAxMDAwO1xyXG4gICAgICAgICAgICAgICAgbXMgKj0gMiAtICgxIC8gTWF0aC5wb3coMiwgKG1bMl18fFwiXCIpLmxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgobSA9IC9eKFxcZCsoPzpcXC5cXGQrKT98XFwuKD86XFxkKykpKG1pbnxzZWN8bSlzPyQvaS5leGVjKHN0cikpKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1bMl0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtaW5cIjogcmV0dXJuICsobVsxXXx8MCkgKiA2MCAqIDEwMDA7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwic2VjXCI6IHJldHVybiArKG1bMV18fDApICogMTAwMDtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJtXCIgIDogcmV0dXJuICsobVsxXXx8MCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChtID0gL14oPzooWzAtNV0/WzAtOV0pOik/KD86KFswLTVdP1swLTldKTopKD86KFswLTVdP1swLTldKSkoPzpcXC4oWzAtOV17MSwzfSkpPyQvLmV4ZWMoc3RyKSkpIHtcclxuICAgICAgICAgICAgICAgIHggPSAobVsxXXx8MCkgKiAzNjAwICsgKG1bMl18fDApICogNjAgKyAobVszXXx8MCk7XHJcbiAgICAgICAgICAgICAgICB4ID0geCAqIDEwMDAgKyAoKCgobVs0XXx8XCJcIikrXCIwMFwiKS5zdWJzdHIoMCwgMykpfDApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChtID0gLyhcXGQrKVxcLihcXGQrKVxcLihcXGQrKSQvaS5leGVjKHN0cikpKSB7XHJcbiAgICAgICAgICAgICAgICB4ID0gKG1bMV0gKiA0ICsgKCttWzJdKSkgKiA0ODAgKyAoK21bM10pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDYwIC8gZ2V0YnBtKHN0cikgKiAoeCAvIDQ4MCkgKiAxMDAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgobSA9IC8oXFxkKyl0aWNrcyQvaS5leGVjKHN0cikpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gNjAgLyBnZXRicG0oc3RyKSAqIChtWzFdIC8gNDgwKSAqIDEwMDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChtID0gL14oXFxkKylzYW1wbGVzKD86XFwvKFxcZCspSHopPyQvaS5leGVjKHN0cikpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbVsxXSAqIDEwMDAgLyAobVsyXSB8fCB0aW1icmUuc2FtcGxlcmF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgdmFyIGZuID0gdGltYnJlLmZuID0ge1xyXG4gICAgICAgIFNpZ25hbEFycmF5OiBGbG9hdDMyQXJyYXksXHJcbiAgICAgICAgY3VycmVudFRpbWVJbmNyOiAwLFxyXG4gICAgICAgIGVtcHR5Y2VsbDogbnVsbCxcclxuICAgICAgICBGSU5JU0hFRF9TVEFURTogRklOSVNIRURfU1RBVEUsXHJcbiAgICAgICAgUExBWUlOR19TVEFURTogUExBWUlOR19TVEFURSxcclxuICAgICAgICBVTlNDSEVEVUxFRF9TVEFURTogVU5TQ0hFRFVMRURfU1RBVEUsXHJcbiAgICAgICAgU0NIRURVTEVEX1NUQVRFOiBTQ0hFRFVMRURfU1RBVEVcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGlzQXJyYXkgPSBmbi5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcclxuICAgIHZhciBpc0RpY3Rpb25hcnkgPSBmbi5pc0RpY3Rpb25hcnkgPSBmdW5jdGlvbihvYmplY3QpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gXCJvYmplY3RcIiAmJiBvYmplY3QuY29uc3RydWN0b3IgPT09IE9iamVjdDtcclxuICAgIH07XHJcblxyXG4gICAgZm4ubm9wID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLmlzU2lnbmFsQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgZm4uU2lnbmFsQXJyYXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikgJiYgb2JqLl9fa2xhc3MgJiYgb2JqLl9fa2xhc3MudHlwZSA9PT0gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBib3Jyb3dlZCBmcm9tIGNvZmZlZS1zY3JpcHRcclxuICAgIGZuLmV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHtcclxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgVGltYnJlT2JqZWN0O1xyXG5cclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXHJcbiAgICAgICAgZnVuY3Rpb24gY3RvcigpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6ZmFsc2UgKi9cclxuICAgICAgICBjdG9yLnByb3RvdHlwZSAgPSBwYXJlbnQucHJvdG90eXBlO1xyXG4gICAgICAgIGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7XHJcbiAgICAgICAgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTtcclxuICAgICAgICByZXR1cm4gY2hpbGQ7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLmNvbnN0cnVjdG9yb2YgPSBmdW5jdGlvbihjdG9yLCBLbGFzcykge1xyXG4gICAgICAgIHZhciBmID0gY3RvciAmJiBjdG9yLnByb3RvdHlwZTtcclxuICAgICAgICB3aGlsZSAoZikge1xyXG4gICAgICAgICAgICBpZiAoZiA9PT0gS2xhc3MucHJvdG90eXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyID0gZnVuY3Rpb24oa2V5LCBjdG9yKSB7XHJcbiAgICAgICAgaWYgKGZuLmNvbnN0cnVjdG9yb2YoY3RvciwgVGltYnJlT2JqZWN0KSkge1xyXG4gICAgICAgICAgICBfY29uc3RydWN0b3JzW2tleV0gPSBjdG9yO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIF9mYWN0b3JpZXNba2V5XSA9IGN0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmbi5hbGlhcyA9IGZ1bmN0aW9uKGtleSwgYWxpYXMpIHtcclxuICAgICAgICBpZiAoX2NvbnN0cnVjdG9yc1thbGlhc10pIHtcclxuICAgICAgICAgICAgX2NvbnN0cnVjdG9yc1trZXldID0gX2NvbnN0cnVjdG9yc1thbGlhc107XHJcbiAgICAgICAgfSBlbHNlIGlmIChfZmFjdG9yaWVzW2FsaWFzXSkge1xyXG4gICAgICAgICAgICBfZmFjdG9yaWVzW2tleV0gPSBfZmFjdG9yaWVzW2FsaWFzXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBmbi5nZXRDbGFzcyA9IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgIHJldHVybiBfY29uc3RydWN0b3JzW2tleV07XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnBvaW50ZXIgPSBmdW5jdGlvbihzcmMsIG9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgICAgICAgb2Zmc2V0ID0gc3JjLmJ5dGVPZmZzZXQgKyBvZmZzZXQgKiBzcmMuY29uc3RydWN0b3IuQllURVNfUEVSX0VMRU1FTlQ7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBzcmMuY29uc3RydWN0b3Ioc3JjLmJ1ZmZlciwgb2Zmc2V0LCBsZW5ndGgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgc3JjLmNvbnN0cnVjdG9yKHNyYy5idWZmZXIsIG9mZnNldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmbi5uZXh0VGljayA9IGZ1bmN0aW9uKGZ1bmMpIHtcclxuICAgICAgICBfc3lzLm5leHRUaWNrKGZ1bmMpO1xyXG4gICAgICAgIHJldHVybiB0aW1icmU7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLmZpeEFSID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgIHNlbGYuXy5hciA9IHRydWU7XHJcbiAgICAgICAgc2VsZi5fLmFyb25seSA9IHRydWU7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLmZpeEtSID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgIHNlbGYuXy5hciA9IGZhbHNlO1xyXG4gICAgICAgIHNlbGYuXy5rcm9ubHkgPSB0cnVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBmbi5jaGFuZ2VXaXRoVmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICB2YXIgeCA9IF8udmFsdWUgKiBfLm11bCArIF8uYWRkO1xyXG4gICAgICAgIGlmIChpc05hTih4KSkge1xyXG4gICAgICAgICAgICB4ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWzBdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbWF4ID0gY2VsbC5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgY2VsbFtpXSA9IHg7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZuLmNoYW5nZVdpdGhWYWx1ZS51bnJlbW92YWJsZSA9IHRydWU7XHJcblxyXG4gICAgZm4uY2xvbmUgPSBmdW5jdGlvbihzcmMpIHtcclxuICAgICAgICB2YXIgbmV3X2luc3RhbmNlID0gbmV3IHNyYy5jb25zdHJ1Y3RvcihbXSk7XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLl8uYXIgID0gc3JjLl8uYXI7XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLl8ubXVsID0gc3JjLl8ubXVsO1xyXG4gICAgICAgIG5ld19pbnN0YW5jZS5fLmFkZCA9IHNyYy5fLmFkZDtcclxuICAgICAgICBuZXdfaW5zdGFuY2UuXy5ieXBhc3NlZCA9IHNyYy5fLmJ5cGFzc2VkO1xyXG4gICAgICAgIHJldHVybiBuZXdfaW5zdGFuY2U7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnRpbWVyID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBtYWtlX29uc3RhcnQgPSBmdW5jdGlvbihzZWxmKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChfc3lzLnRpbWVycy5pbmRleE9mKHNlbGYpID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9zeXMudGltZXJzLnB1c2goc2VsZik7XHJcbiAgICAgICAgICAgICAgICAgICAgX3N5cy5ldmVudHMuZW1pdChcImFkZE9iamVjdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLl8uZW1pdChcInN0YXJ0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZuLmJ1ZGRpZXNfc3RhcnQoc2VsZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgbWFrZV9vbnN0b3AgPSBmdW5jdGlvbihzZWxmKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gX3N5cy50aW1lcnMuaW5kZXhPZihzZWxmKTtcclxuICAgICAgICAgICAgICAgIGlmIChpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9zeXMudGltZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLl8uZW1pdChcInN0b3BcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgX3N5cy5ldmVudHMuZW1pdChcInJlbW92ZU9iamVjdFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBmbi5idWRkaWVzX3N0b3Aoc2VsZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgICAgICB2YXIgb25zdGFydCA9IG1ha2Vfb25zdGFydChzZWxmKTtcclxuICAgICAgICAgICAgdmFyIG9uc3RvcCAgPSBtYWtlX29uc3RvcChzZWxmKTtcclxuICAgICAgICAgICAgc2VsZi5ub2RlVHlwZSA9IFRpbWJyZU9iamVjdC5USU1FUjtcclxuICAgICAgICAgICAgc2VsZi5zdGFydCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgX3N5cy5uZXh0VGljayhvbnN0YXJ0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzZWxmLnN0b3AgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIF9zeXMubmV4dFRpY2sob25zdG9wKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gc2VsZjtcclxuICAgICAgICB9O1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICBmbi5saXN0ZW5lciA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbWFrZV9vbmxpc3RlbiA9IGZ1bmN0aW9uKHNlbGYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF9zeXMubGlzdGVuZXJzLmluZGV4T2Yoc2VsZikgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3N5cy5saXN0ZW5lcnMucHVzaChzZWxmKTtcclxuICAgICAgICAgICAgICAgICAgICBfc3lzLmV2ZW50cy5lbWl0KFwiYWRkT2JqZWN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuXy5lbWl0KFwibGlzdGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZuLmJ1ZGRpZXNfc3RhcnQoc2VsZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgbWFrZV9vbnVubGlzdGVuID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IF9zeXMubGlzdGVuZXJzLmluZGV4T2Yoc2VsZik7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBfc3lzLmxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fLmVtaXQoXCJ1bmxpc3RlblwiKTtcclxuICAgICAgICAgICAgICAgICAgICBfc3lzLmV2ZW50cy5lbWl0KFwicmVtb3ZlT2JqZWN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZuLmJ1ZGRpZXNfc3RvcChzZWxmKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihzZWxmKSB7XHJcbiAgICAgICAgICAgIHZhciBvbmxpc3RlbiA9IG1ha2Vfb25saXN0ZW4oc2VsZik7XHJcbiAgICAgICAgICAgIHZhciBvbnVubGlzdGVuID0gbWFrZV9vbnVubGlzdGVuKHNlbGYpO1xyXG4gICAgICAgICAgICBzZWxmLm5vZGVUeXBlID0gVGltYnJlT2JqZWN0LkxJU1RFTkVSO1xyXG4gICAgICAgICAgICBzZWxmLmxpc3RlbiA9IGZ1bmN0aW9uKGJ1ZGRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5hcHBlbmQuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzZWxmLm5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9zeXMubmV4dFRpY2sob25saXN0ZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHNlbGYudW5saXN0ZW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZW1vdmUuYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5ub2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfc3lzLm5leHRUaWNrKG9udW5saXN0ZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGY7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgICAgIH07XHJcbiAgICB9KSgpO1xyXG5cclxuICAgIGZuLm1ha2Vfb25lbmRlZCA9IGZ1bmN0aW9uKHNlbGYsIGxhc3RWYWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi5wbGF5YmFja1N0YXRlID0gRklOSVNIRURfU1RBVEU7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGFzdFZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VsbCAgPSBzZWxmLmNlbGxzWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNlbGxMID0gc2VsZi5jZWxsc1sxXTtcclxuICAgICAgICAgICAgICAgIHZhciBjZWxsUiA9IHNlbGYuY2VsbHNbMl07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaW1heCA9IGNlbGxMLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbMF0gPSBjZWxsTFtpXSA9IGNlbGxSW2ldID0gbGFzdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNlbGYuXy5lbWl0KFwiZW5kZWRcIik7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgZm4uaW5wdXRTaWduYWxBUiA9IGZ1bmN0aW9uKHNlbGYpIHtcclxuICAgICAgICB2YXIgY2VsbCAgPSBzZWxmLmNlbGxzWzBdO1xyXG4gICAgICAgIHZhciBjZWxsTCA9IHNlbGYuY2VsbHNbMV07XHJcbiAgICAgICAgdmFyIGNlbGxSID0gc2VsZi5jZWxsc1syXTtcclxuICAgICAgICB2YXIgbm9kZXMgPSBzZWxmLm5vZGVzO1xyXG4gICAgICAgIHZhciBpLCBpbWF4ID0gbm9kZXMubGVuZ3RoO1xyXG4gICAgICAgIHZhciBqLCBqbWF4ID0gY2VsbC5sZW5ndGg7XHJcbiAgICAgICAgdmFyIHRpY2tJRCAgPSBzZWxmLnRpY2tJRDtcclxuICAgICAgICB2YXIgbm90X2NsZWFyLCB0bXAsIHRtcEwsIHRtcFI7XHJcblxyXG4gICAgICAgIGlmIChzZWxmLm51bUNoYW5uZWxzID09PSAyKSB7XHJcbiAgICAgICAgICAgIG5vdF9jbGVhciA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChpbWF4ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVzW2ldLnBsYXliYWNrU3RhdGUgPT09IFBMQVlJTkdfU1RBVEUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0ucHJvY2Vzcyh0aWNrSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsTC5zZXQobm9kZXNbaV0uY2VsbHNbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsUi5zZXQobm9kZXNbaV0uY2VsbHNbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub3RfY2xlYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2Rlc1tpXS5wbGF5YmFja1N0YXRlID09PSBQTEFZSU5HX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzW2ldLnByb2Nlc3ModGlja0lEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wTCA9IG5vZGVzW2ldLmNlbGxzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBSID0gbm9kZXNbaV0uY2VsbHNbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IGptYXg7IGo7ICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaiAtPSA4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbExbaiAgXSArPSB0bXBMW2ogIF07IGNlbGxSW2ogIF0gKz0gdG1wUltqICBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbExbaisxXSArPSB0bXBMW2orMV07IGNlbGxSW2orMV0gKz0gdG1wUltqKzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbExbaisyXSArPSB0bXBMW2orMl07IGNlbGxSW2orMl0gKz0gdG1wUltqKzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbExbaiszXSArPSB0bXBMW2orM107IGNlbGxSW2orM10gKz0gdG1wUltqKzNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbExbais0XSArPSB0bXBMW2orNF07IGNlbGxSW2orNF0gKz0gdG1wUltqKzRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbExbais1XSArPSB0bXBMW2orNV07IGNlbGxSW2orNV0gKz0gdG1wUltqKzVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbExbais2XSArPSB0bXBMW2orNl07IGNlbGxSW2orNl0gKz0gdG1wUltqKzZdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbExbais3XSArPSB0bXBMW2orN107IGNlbGxSW2orN10gKz0gdG1wUltqKzddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChub3RfY2xlYXIpIHtcclxuICAgICAgICAgICAgICAgIGNlbGxMLnNldChmbi5lbXB0eWNlbGwpO1xyXG4gICAgICAgICAgICAgICAgY2VsbFIuc2V0KGZuLmVtcHR5Y2VsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBub3RfY2xlYXIgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoaW1heCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2Rlc1tpXS5wbGF5YmFja1N0YXRlID09PSBQTEFZSU5HX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzW2ldLnByb2Nlc3ModGlja0lEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXQobm9kZXNbaV0uY2VsbHNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub3RfY2xlYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2Rlc1tpXS5wbGF5YmFja1N0YXRlID09PSBQTEFZSU5HX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IG5vZGVzW2ldLnByb2Nlc3ModGlja0lEKS5jZWxsc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gam1heDsgajsgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqIC09IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsW2ogIF0gKz0gdG1wW2ogIF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsW2orMV0gKz0gdG1wW2orMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsW2orMl0gKz0gdG1wW2orMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsW2orM10gKz0gdG1wW2orM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsW2orNF0gKz0gdG1wW2orNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsW2orNV0gKz0gdG1wW2orNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsW2orNl0gKz0gdG1wW2orNl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsW2orN10gKz0gdG1wW2orN107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG5vdF9jbGVhcikge1xyXG4gICAgICAgICAgICAgICAgY2VsbC5zZXQoZm4uZW1wdHljZWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZm4uaW5wdXRTaWduYWxLUiA9IGZ1bmN0aW9uKHNlbGYpIHtcclxuICAgICAgICB2YXIgbm9kZXMgPSBzZWxmLm5vZGVzO1xyXG4gICAgICAgIHZhciBpLCBpbWF4ID0gbm9kZXMubGVuZ3RoO1xyXG4gICAgICAgIHZhciB0aWNrSUQgPSBzZWxmLnRpY2tJRDtcclxuICAgICAgICB2YXIgdG1wID0gMDtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmIChub2Rlc1tpXS5wbGF5YmFja1N0YXRlID09PSBQTEFZSU5HX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgICB0bXAgKz0gbm9kZXNbaV0ucHJvY2Vzcyh0aWNrSUQpLmNlbGxzWzBdWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0bXA7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLm91dHB1dFNpZ25hbEFSID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgIHZhciBjZWxsICA9IHNlbGYuY2VsbHNbMF07XHJcbiAgICAgICAgdmFyIGNlbGxMID0gc2VsZi5jZWxsc1sxXTtcclxuICAgICAgICB2YXIgY2VsbFIgPSBzZWxmLmNlbGxzWzJdO1xyXG4gICAgICAgIHZhciBtdWwgPSBzZWxmLl8ubXVsLCBhZGQgPSBzZWxmLl8uYWRkO1xyXG4gICAgICAgIHZhciBpO1xyXG5cclxuICAgICAgICBpZiAoc2VsZi5udW1DaGFubmVscyA9PT0gMikge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSBjZWxsLmxlbmd0aDsgaTsgKSB7XHJcbiAgICAgICAgICAgICAgICBpIC09IDg7XHJcbiAgICAgICAgICAgICAgICBjZWxsTFtpICBdID0gY2VsbExbaSAgXSAqIG11bCArIGFkZDsgY2VsbFJbaSAgXSA9IGNlbGxSW2kgIF0gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICBjZWxsTFtpKzFdID0gY2VsbExbaSsxXSAqIG11bCArIGFkZDsgY2VsbFJbaSsxXSA9IGNlbGxSW2krMV0gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICBjZWxsTFtpKzJdID0gY2VsbExbaSsyXSAqIG11bCArIGFkZDsgY2VsbFJbaSsyXSA9IGNlbGxSW2krMl0gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICBjZWxsTFtpKzNdID0gY2VsbExbaSszXSAqIG11bCArIGFkZDsgY2VsbFJbaSszXSA9IGNlbGxSW2krM10gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICBjZWxsTFtpKzRdID0gY2VsbExbaSs0XSAqIG11bCArIGFkZDsgY2VsbFJbaSs0XSA9IGNlbGxSW2krNF0gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICBjZWxsTFtpKzVdID0gY2VsbExbaSs1XSAqIG11bCArIGFkZDsgY2VsbFJbaSs1XSA9IGNlbGxSW2krNV0gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICBjZWxsTFtpKzZdID0gY2VsbExbaSs2XSAqIG11bCArIGFkZDsgY2VsbFJbaSs2XSA9IGNlbGxSW2krNl0gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICBjZWxsTFtpKzddID0gY2VsbExbaSs3XSAqIG11bCArIGFkZDsgY2VsbFJbaSs3XSA9IGNlbGxSW2krN10gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICBjZWxsW2kgIF0gPSAoY2VsbExbaSAgXSArIGNlbGxSW2kgIF0pICogMC41O1xyXG4gICAgICAgICAgICAgICAgY2VsbFtpKzFdID0gKGNlbGxMW2krMV0gKyBjZWxsUltpKzFdKSAqIDAuNTtcclxuICAgICAgICAgICAgICAgIGNlbGxbaSsyXSA9IChjZWxsTFtpKzJdICsgY2VsbFJbaSsyXSkgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICBjZWxsW2krM10gPSAoY2VsbExbaSszXSArIGNlbGxSW2krM10pICogMC41O1xyXG4gICAgICAgICAgICAgICAgY2VsbFtpKzRdID0gKGNlbGxMW2krNF0gKyBjZWxsUltpKzRdKSAqIDAuNTtcclxuICAgICAgICAgICAgICAgIGNlbGxbaSs1XSA9IChjZWxsTFtpKzVdICsgY2VsbFJbaSs1XSkgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICBjZWxsW2krNl0gPSAoY2VsbExbaSs2XSArIGNlbGxSW2krNl0pICogMC41O1xyXG4gICAgICAgICAgICAgICAgY2VsbFtpKzddID0gKGNlbGxMW2krN10gKyBjZWxsUltpKzddKSAqIDAuNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChtdWwgIT09IDEgfHwgYWRkICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBjZWxsLmxlbmd0aDsgaTsgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSAtPSA4O1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbaSAgXSA9IGNlbGxbaSAgXSAqIG11bCArIGFkZDtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsW2krMV0gPSBjZWxsW2krMV0gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbFtpKzJdID0gY2VsbFtpKzJdICogbXVsICsgYWRkO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbaSszXSA9IGNlbGxbaSszXSAqIG11bCArIGFkZDtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsW2krNF0gPSBjZWxsW2krNF0gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbFtpKzVdID0gY2VsbFtpKzVdICogbXVsICsgYWRkO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbaSs2XSA9IGNlbGxbaSs2XSAqIG11bCArIGFkZDtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsW2krN10gPSBjZWxsW2krN10gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLm91dHB1dFNpZ25hbEtSID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgIHZhciBjZWxsICA9IHNlbGYuY2VsbHNbMF07XHJcbiAgICAgICAgdmFyIGNlbGxMID0gc2VsZi5jZWxsc1sxXTtcclxuICAgICAgICB2YXIgY2VsbFIgPSBzZWxmLmNlbGxzWzJdO1xyXG4gICAgICAgIHZhciBtdWwgPSBzZWxmLl8ubXVsLCBhZGQgPSBzZWxmLl8uYWRkO1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IGNlbGxbMF0gKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgdmFyIGk7XHJcblxyXG4gICAgICAgIGlmIChzZWxmLm51bUNoYW5uZWxzID09PSAyKSB7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IGNlbGwubGVuZ3RoOyBpOyApIHtcclxuICAgICAgICAgICAgICAgIGkgLT0gODtcclxuICAgICAgICAgICAgICAgIGNlbGxbaV0gPSBjZWxsW2krMV0gPSBjZWxsW2krMl0gPSBjZWxsW2krM10gPSBjZWxsW2krNF0gPSBjZWxsW2krNV0gPSBjZWxsW2krNl0gPSBjZWxsW2krN10gPSBjZWxsTFtpXSA9IGNlbGxMW2krMV0gPSBjZWxsTFtpKzJdID0gY2VsbExbaSszXSA9IGNlbGxMW2krNF0gPSBjZWxsTFtpKzVdID0gY2VsbExbaSs2XSA9IGNlbGxMW2krN10gPSBjZWxsUltpXSA9IGNlbGxSW2krMV0gPSBjZWxsUltpKzJdID0gY2VsbFJbaSszXSA9IGNlbGxSW2krNF0gPSBjZWxsUltpKzVdID0gY2VsbFJbaSs2XSA9IGNlbGxSW2krN10gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IGNlbGwubGVuZ3RoOyBpOyApIHtcclxuICAgICAgICAgICAgICAgIGkgLT0gODtcclxuICAgICAgICAgICAgICAgIGNlbGxbaV0gPSBjZWxsW2krMV0gPSBjZWxsW2krMl0gPSBjZWxsW2krM10gPSBjZWxsW2krNF0gPSBjZWxsW2krNV0gPSBjZWxsW2krNl0gPSBjZWxsW2krN10gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZm4uYnVkZGllc19zdGFydCA9IGZ1bmN0aW9uKHNlbGYpIHtcclxuICAgICAgICB2YXIgYnVkZGllcyA9IHNlbGYuXy5idWRkaWVzO1xyXG4gICAgICAgIHZhciBub2RlLCBpLCBpbWF4O1xyXG4gICAgICAgIGZvciAoaSA9IDAsIGltYXggPSBidWRkaWVzLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICBub2RlID0gYnVkZGllc1tpXTtcclxuICAgICAgICAgICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVGltYnJlT2JqZWN0LkRTUDpcclxuICAgICAgICAgICAgICAgIG5vZGUucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVGltYnJlT2JqZWN0LlRJTUVSOlxyXG4gICAgICAgICAgICAgICAgbm9kZS5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVGltYnJlT2JqZWN0LkxJU1RFTkVSOlxyXG4gICAgICAgICAgICAgICAgbm9kZS5saXN0ZW4oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmbi5idWRkaWVzX3N0b3AgPSBmdW5jdGlvbihzZWxmKSB7XHJcbiAgICAgICAgdmFyIGJ1ZGRpZXMgPSBzZWxmLl8uYnVkZGllcztcclxuICAgICAgICB2YXIgbm9kZSwgaSwgaW1heDtcclxuICAgICAgICBmb3IgKGkgPSAwLCBpbWF4ID0gYnVkZGllcy5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgbm9kZSA9IGJ1ZGRpZXNbaV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlIFRpbWJyZU9iamVjdC5EU1A6XHJcbiAgICAgICAgICAgICAgICBub2RlLnBhdXNlKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBUaW1icmVPYmplY3QuVElNRVI6XHJcbiAgICAgICAgICAgICAgICBub2RlLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFRpbWJyZU9iamVjdC5MSVNURU5FUjpcclxuICAgICAgICAgICAgICAgIG5vZGUudW5saXN0ZW4oKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBmbi5maXhfaU9TNl8xX3Byb2JsZW0gPSBmdW5jdGlvbihmbGFnKSB7XHJcbiAgICAgICAgX3N5cy5maXhfaU9TNl8xX3Byb2JsZW0oZmxhZyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBtb2R1bGVzID0gdGltYnJlLm1vZHVsZXMgPSB7fTtcclxuXHJcbiAgICAvLyBFdmVudEVtaXR0ZXJcclxuICAgIHZhciBFdmVudEVtaXR0ZXIgPSBtb2R1bGVzLkV2ZW50RW1pdHRlciA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoY29udGV4dCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50cyA9IHt9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyICQgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlO1xyXG5cclxuICAgICAgICAkLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gdGhpcy5ldmVudHNbdHlwZV07XHJcbiAgICAgICAgICAgIGlmICghaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgYXJncztcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLmNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLmNvbnRleHQsIGFyZ3VtZW50c1sxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5jYWxsKHRoaXMuY29udGV4dCwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcy5jb250ZXh0LCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoaGFuZGxlcikpIHtcclxuICAgICAgICAgICAgICAgIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gaGFuZGxlci5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXSBpbnN0YW5jZW9mIFRpbWJyZU9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnNbaV0uYmFuZy5hcHBseShsaXN0ZW5lcnNbaV0sIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLmNvbnRleHQsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgaW5zdGFuY2VvZiBUaW1icmVPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmJhbmcuYXBwbHkoaGFuZGxlciwgYXJncyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkLm9uID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiICYmICEobGlzdGVuZXIgaW5zdGFuY2VvZiBUaW1icmVPYmplY3QpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhZGRMaXN0ZW5lciB0YWtlcyBpbnN0YW5jZXMgb2YgRnVuY3Rpb24gb3IgdGltYnJlLk9iamVjdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMuZXZlbnRzO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFlW3R5cGVdKSB7XHJcbiAgICAgICAgICAgICAgICBlW3R5cGVdID0gbGlzdGVuZXI7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShlW3R5cGVdKSkge1xyXG4gICAgICAgICAgICAgICAgZVt0eXBlXS5wdXNoKGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVbdHlwZV0gPSBbZVt0eXBlXSwgbGlzdGVuZXJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGc7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm9mZih0eXBlLCBnKTtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5hcHBseShzZWxmLmNvbnRleHQsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RlbmVyIGluc3RhbmNlb2YgVGltYnJlT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYub2ZmKHR5cGUsIGcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmJhbmcuYXBwbHkobGlzdGVuZXIsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwib25jZSB0YWtlcyBpbnN0YW5jZXMgb2YgRnVuY3Rpb24gb3IgdGltYnJlLk9iamVjdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnLmxpc3RlbmVyID0gbGlzdGVuZXI7XHJcblxyXG4gICAgICAgICAgICBzZWxmLm9uKHR5cGUsIGcpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5vZmYgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSBcImZ1bmN0aW9uXCIgJiYgIShsaXN0ZW5lciBpbnN0YW5jZW9mIFRpbWJyZU9iamVjdCkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlbW92ZUxpc3RlbmVyIHRha2VzIGluc3RhbmNlcyBvZiBGdW5jdGlvbiBvciB0aW1icmUuT2JqZWN0XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5ldmVudHM7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWVbdHlwZV0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgbGlzdCA9IGVbdHlwZV07XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNBcnJheShsaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gLTE7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaW1heCA9IGxpc3QubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uY2UgbGlzdGVuZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTtcclxuICAgICAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVbdHlwZV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gb25jZSBsaXN0ZW5lclxyXG4gICAgICAgICAgICAgICAgICAgICAgIChsaXN0Lmxpc3RlbmVyICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xyXG4gICAgICAgICAgICAgICAgZVt0eXBlXSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMuZXZlbnRzO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlbWFpbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gZVt0eXBlXTtcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkobGlzdGVuZXJzKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGxpc3RlbmVycy5sZW5ndGg7IGktLTsgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lci51bnJlbW92YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1haW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmYodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFsaXN0ZW5lcnMudW5yZW1vdmFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZih0eXBlLCBsaXN0ZW5lcnMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZW1haW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghcmVtYWluKSB7XHJcbiAgICAgICAgICAgICAgICBlW3R5cGVdID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5saXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgICAgICAgIHZhciBhLCBlID0gdGhpcy5ldmVudHM7XHJcbiAgICAgICAgICAgIGlmICghZVt0eXBlXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGUgPSBlW3R5cGVdO1xyXG4gICAgICAgICAgICBpZiAoIWlzQXJyYXkoZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlLnVucmVtb3ZhYmxlID8gW10gOiBbZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZSA9IGUuc2xpY2UoKTtcclxuICAgICAgICAgICAgYSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaW1heCA9IGUubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVbaV0udW5yZW1vdmFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBhLnB1c2goZVtpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgdmFyIERlZmVycmVkID0gbW9kdWxlcy5EZWZlcnJlZCA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICBmdW5jdGlvbiBEZWZlcnJlZChjb250ZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQgfHwgdGhpcztcclxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBcInBlbmRpbmdcIjtcclxuICAgICAgICAgICAgdGhpcy5fZG9uZUxpc3QgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5fZmFpbExpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZSh0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciAkID0gRGVmZXJyZWQucHJvdG90eXBlO1xyXG5cclxuICAgICAgICB2YXIgZXhlYyA9IGZ1bmN0aW9uKHN0YXR1ZSwgbGlzdCwgY29udGV4dCwgYXJncykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IFwicGVuZGluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHN0YXR1ZTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbWF4ID0gbGlzdC5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0W2ldLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZG9uZUxpc3QgPSB0aGlzLl9mYWlsTGlzdCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgaXNEZWZlcnJlZCA9IGZ1bmN0aW9uKHgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHggJiYgdHlwZW9mIHgucHJvbWlzZSA9PT0gXCJmdW5jdGlvblwiO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcclxuICAgICAgICAgICAgZXhlYy5jYWxsKHRoaXMsIFwicmVzb2x2ZWRcIiwgdGhpcy5fZG9uZUxpc3QsIHRoaXMuY29udGV4dCB8fCB0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkLnJlc29sdmVXaXRoID0gZnVuY3Rpb24oY29udGV4dCkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuICAgICAgICAgICAgZXhlYy5jYWxsKHRoaXMsIFwicmVzb2x2ZWRcIiwgdGhpcy5fZG9uZUxpc3QsIGNvbnRleHQsIGFyZ3MpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgICQucmVqZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xyXG4gICAgICAgICAgICBleGVjLmNhbGwodGhpcywgXCJyZWplY3RlZFwiLCB0aGlzLl9mYWlsTGlzdCwgdGhpcy5jb250ZXh0IHx8IHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgICQucmVqZWN0V2l0aCA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcbiAgICAgICAgICAgIGV4ZWMuY2FsbCh0aGlzLCBcInJlamVjdGVkXCIsIHRoaXMuX2ZhaWxMaXN0LCBjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5wcm9taXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJC5kb25lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB2YXIgaXNSZXNvbHZlZCA9ICh0aGlzLl9zdGF0ZSA9PT0gXCJyZXNvbHZlZFwiKTtcclxuICAgICAgICAgICAgdmFyIGlzUGVuZGluZyAgPSAodGhpcy5fc3RhdGUgPT09IFwicGVuZGluZ1wiKTtcclxuICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzLl9kb25lTGlzdDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSBhcmdzLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2ldID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNSZXNvbHZlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzW2ldKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc1BlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKGFyZ3NbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgICQuZmFpbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgdmFyIGlzUmVqZWN0ZWQgPSAodGhpcy5fc3RhdGUgPT09IFwicmVqZWN0ZWRcIik7XHJcbiAgICAgICAgICAgIHZhciBpc1BlbmRpbmcgID0gKHRoaXMuX3N0YXRlID09PSBcInBlbmRpbmdcIik7XHJcbiAgICAgICAgICAgIHZhciBsaXN0ID0gdGhpcy5fZmFpbExpc3Q7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbWF4ID0gYXJncy5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1tpXSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVqZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tpXSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNQZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QucHVzaChhcmdzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkLmFsd2F5cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLmRvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgdGhpcy5mYWlsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJC50aGVuID0gZnVuY3Rpb24gdGhlbihkb25lLCBmYWlsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRvbmUoZG9uZSkuZmFpbChmYWlsKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICQucGlwZSA9IGZ1bmN0aW9uKGRvbmUsIGZhaWwpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgZGZkID0gbmV3IERlZmVycmVkKHRoaXMuY29udGV4dCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRvbmUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gZG9uZS5hcHBseShzZWxmLmNvbnRleHQsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNEZWZlcnJlZChyZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZmQucmVzb2x2ZVdpdGguYXBwbHkoZGZkLCBbcmVzXS5jb25jYXQoYXJncykpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZmQucmVzb2x2ZVdpdGgoc2VsZiwgcmVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMuZmFpbChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZmFpbCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IGZhaWwuYXBwbHkoc2VsZi5jb250ZXh0LCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0RlZmVycmVkKHJlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzLmZhaWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRmZC5yZWplY3RXaXRoLmFwcGx5KGRmZCwgW3Jlc10uY29uY2F0KGFyZ3MpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZmQucmVqZWN0LmFwcGx5KGRmZCwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZGZkLnByb21pc2UoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vICQudGhlbiA9ICQucGlwZTtcclxuXHJcbiAgICAgICAgJC5pc1Jlc29sdmVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZSA9PT0gXCJyZXNvbHZlZFwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJC5pc1JlamVjdGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZSA9PT0gXCJyZWplY3RlZFwiO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJC5zdGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gVE9ETzogdGVzdFxyXG4gICAgICAgIERlZmVycmVkLndoZW4gPSBmdW5jdGlvbihzdWJvcmRpbmF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgICAgIHZhciByZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICB2YXIgbGVuZ3RoICAgID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciByZW1haW5pbmcgPSBsZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBpZiAobGVuZ3RoID09PSAxICYmICFpc0RlZmVycmVkKHN1Ym9yZGluYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgcmVtYWluaW5nID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAocmVtYWluaW5nID09PSAxKSA/IHN1Ym9yZGluYXRlIDogbmV3IERlZmVycmVkKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgdXBkYXRlRnVuYyA9IGZ1bmN0aW9uKGksIHJlc3VsdHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbaV0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoYXJndW1lbnRzKSA6IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKC0tcmVtYWluaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlLmFwcGx5KGRlZmVycmVkLCByZXN1bHRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKGxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXNvbHZlUmVzdWx0cyA9IG5ldyBBcnJheShsZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG9uZmFpbGVkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZm9yICg7IGkgPCBsZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlVmFsdWVzW2ldICYmIGlzRGVmZXJyZWQocmVzb2x2ZVZhbHVlc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZVZhbHVlc1tpXS5wcm9taXNlKCkuZG9uZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUZ1bmMoaSwgcmVzb2x2ZVJlc3VsdHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkuZmFpbChvbmZhaWxlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZVJlc3VsdHNbaV0gPSByZXNvbHZlVmFsdWVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAtLXJlbWFpbmluZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghcmVtYWluaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlLmFwcGx5KGRlZmVycmVkLCByZXNvbHZlVmFsdWVzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2UoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBQcm9taXNlKG9iamVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQgPSBvYmplY3QuY29udGV4dDtcclxuICAgICAgICAgICAgdGhpcy50aGVuID0gb2JqZWN0LnRoZW47XHJcbiAgICAgICAgICAgIHRoaXMuZG9uZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0LmRvbmUuYXBwbHkob2JqZWN0LCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuZmFpbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgb2JqZWN0LmZhaWwuYXBwbHkob2JqZWN0LCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMucGlwZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5waXBlLmFwcGx5KG9iamVjdCwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5hbHdheXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdC5hbHdheXMuYXBwbHkob2JqZWN0LCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMucHJvbWlzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuaXNSZXNvbHZlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5pc1Jlc29sdmVkKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuaXNSZWplY3RlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdC5pc1JlamVjdGVkKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gRGVmZXJyZWQ7XHJcbiAgICB9KSgpO1xyXG5cclxuICAgIC8vIHJvb3Qgb2JqZWN0XHJcbiAgICB2YXIgVGltYnJlT2JqZWN0ID0gdGltYnJlLk9iamVjdCA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICBmdW5jdGlvbiBUaW1icmVPYmplY3QobnVtQ2hhbm5lbHMsIF9hcmdzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuXyA9IHt9OyAvLyBwcml2YXRlIG1lbWJlcnNcclxuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl8uZXZlbnRzID0gbmV3IEV2ZW50RW1pdHRlcih0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fLmVtaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlLmVtaXQuYXBwbHkoZSwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKGlzRGljdGlvbmFyeShfYXJnc1swXSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBfYXJncy5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9pbiA9IHBhcmFtc1tcImluXCJdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbmNlKFwiaW5pdFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldChwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkoX2luKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQuYXBwbHkodGhpcywgX2luKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfaW4gaW5zdGFuY2VvZiBUaW1icmVPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kKF9pbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSAtMTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlcyAgPSBfYXJncy5tYXAodGltYnJlKTtcclxuICAgICAgICAgICAgdGhpcy5jZWxscyAgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5udW1DaGFubmVscyA9IG51bUNoYW5uZWxzO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG51bUNoYW5uZWxzKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgIHRoaXMuTCA9IHRoaXMuUiA9IG5ldyBDaGFubmVsT2JqZWN0KG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsc1swXSA9IHRoaXMuY2VsbHNbMV0gPSB0aGlzLmNlbGxzWzJdID0gdGhpcy5MLmNlbGw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5MID0gdGhpcy5SID0gbmV3IENoYW5uZWxPYmplY3QodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNlbGxzWzBdID0gdGhpcy5jZWxsc1sxXSA9IHRoaXMuY2VsbHNbMl0gPSB0aGlzLkwuY2VsbDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLkwgPSBuZXcgQ2hhbm5lbE9iamVjdCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuUiA9IG5ldyBDaGFubmVsT2JqZWN0KHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsc1swXSA9IG5ldyBmbi5TaWduYWxBcnJheShfc3lzLmNlbGxzaXplKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNbMV0gPSB0aGlzLkwuY2VsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNbMl0gPSB0aGlzLlIuY2VsbDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGxheWJhY2tTdGF0ZSA9IFBMQVlJTkdfU1RBVEU7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZVR5cGUgPSBUaW1icmVPYmplY3QuRFNQO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fLmFyICA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuXy5tdWwgPSAxO1xyXG4gICAgICAgICAgICB0aGlzLl8uYWRkID0gMDtcclxuICAgICAgICAgICAgdGhpcy5fLmRhYyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuXy5ieXBhc3NlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLl8ubWV0YSA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLl8uc2FtcGxlcmF0ZSA9IF9zeXMuc2FtcGxlcmF0ZTtcclxuICAgICAgICAgICAgdGhpcy5fLmNlbGxzaXplICAgPSBfc3lzLmNlbGxzaXplO1xyXG4gICAgICAgICAgICB0aGlzLl8uYnVkZGllcyAgICA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBUaW1icmVPYmplY3QuRFNQICAgICAgPSAxO1xyXG4gICAgICAgIFRpbWJyZU9iamVjdC5USU1FUiAgICA9IDI7XHJcbiAgICAgICAgVGltYnJlT2JqZWN0LkxJU1RFTkVSID0gMztcclxuXHJcbiAgICAgICAgdmFyICQgPSBUaW1icmVPYmplY3QucHJvdG90eXBlO1xyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgICAgIGlzQXI6IHtcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5hcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNLcjoge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuXy5hcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNCeXBhc3NlZDoge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmJ5cGFzc2VkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpc0VuZGVkOiB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhKHRoaXMucGxheWJhY2tTdGF0ZSAmIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtdWw6IHtcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuXy5tdWwgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmVtaXQoXCJzZXRNdWxcIiwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ubXVsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhZGQ6IHtcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuXy5hZGQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmVtaXQoXCJzZXRBZGRcIiwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uYWRkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBidWRkaWVzOiB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFt2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5idWRkaWVzID0gdmFsdWUuZmlsdGVyKGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBUaW1icmVPYmplY3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmJ1ZGRpZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQudmFsdWVPZiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoX3N5cy50aWNrSUQgIT09IHRoaXMudGlja0lEKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoX3N5cy50aWNrSUQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNlbGxzWzBdWzBdO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQuYXBwZW5kID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBzbGljZS5jYWxsKGFyZ3VtZW50cykubWFwKHRpbWJyZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzID0gdGhpcy5ub2Rlcy5jb25jYXQobGlzdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uZW1pdChcImFwcGVuZFwiLCBsaXN0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkLmFwcGVuZFRvID0gZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgICAgICAgIG9iamVjdC5hcHBlbmQodGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQucmVtb3ZlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGosIG5vZGVzID0gdGhpcy5ub2RlcywgbGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChqID0gbm9kZXMuaW5kZXhPZihhcmd1bWVudHNbaV0pKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKG5vZGVzW2pdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGosIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8uZW1pdChcInJlbW92ZVwiLCBsaXN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkLnJlbW92ZUZyb20gPSBmdW5jdGlvbihvYmplY3QpIHtcclxuICAgICAgICAgICAgb2JqZWN0LnJlbW92ZSh0aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5yZW1vdmVBbGwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzLm5vZGVzLnNsaWNlKCk7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZXMgPSBbXTtcclxuICAgICAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmVtaXQoXCJyZW1vdmVcIiwgbGlzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5yZW1vdmVBdEluZGV4ID0gZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLm5vZGVzW2luZGV4XTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5lbWl0KFwicmVtb3ZlXCIsIFtpdGVtXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5wb3N0TWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5fLmVtaXQoXCJtZXNzYWdlXCIsIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkLnRvID0gZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBUaW1icmVPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIG9iamVjdC5hcHBlbmQodGhpcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIGlmIChpc0RpY3Rpb25hcnkoYXJnc1sxXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmdzLnNwbGljZSgyLCAwLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJncy5zcGxpY2UoMSwgMCwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvYmplY3QgPSBULmFwcGx5KG51bGwsIGFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5zcGxpY2UgPSBmdW5jdGlvbihpbnMsIG9iaiwgcmVtKSB7XHJcbiAgICAgICAgICAgIHZhciBpO1xyXG4gICAgICAgICAgICBpZiAoIW9iaikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuXy5kYWMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zIGluc3RhbmNlb2YgVGltYnJlT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW0gaW5zdGFuY2VvZiBUaW1icmVPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW0uXy5kYWMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW0uXy5kYWMuXy5ub2RlID0gaW5zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucy5fLmRhYyA9IHJlbS5fLmRhYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW0uXy5kYWMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucy5ub2Rlcy5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuXy5kYWMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8uZGFjLl8ubm9kZSA9IGlucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnMuXy5kYWMgPSB0aGlzLl8uZGFjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuXy5kYWMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucy5ub2Rlcy5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZW0gaW5zdGFuY2VvZiBUaW1icmVPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbS5fLmRhYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtLl8uZGFjLl8ubm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8uZGFjID0gcmVtLl8uZGFjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtLl8uZGFjID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBUaW1icmVPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gb2JqLm5vZGVzLmluZGV4T2YocmVtKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm5vZGVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucyBpbnN0YW5jZW9mIFRpbWJyZU9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnMubm9kZXMucHVzaCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm5vZGVzLnB1c2goaW5zKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoubm9kZXMucHVzaCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gRXZlbnRFbWl0dGVyXHJcbiAgICAgICAgJC5vbiA9ICQuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLl8uZXZlbnRzLm9uKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fLmV2ZW50cy5vbmNlKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5vZmYgPSAkLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fLmV2ZW50cy5vZmYodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fLmV2ZW50cy5yZW1vdmVBbGxMaXN0ZW5lcnModHlwZSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQubGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fLmV2ZW50cy5saXN0ZW5lcnModHlwZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5zZXQgPSBmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciB4LCBkZXNjLCBtZXRhID0gdGhpcy5fLm1ldGE7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIGtleSkge1xyXG4gICAgICAgICAgICBjYXNlIFwic3RyaW5nXCI6XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG1ldGFba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInByb3BlcnR5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzW2tleV0odmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB4ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoeCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih4LCBrZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVzYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXNjLnZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhW2tleV0gPSBcImZ1bmN0aW9uXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trZXldKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRhW2tleV0gPSBcInByb3BlcnR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih4KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxyXG4gICAgICAgICAgICAgICAgZm9yICh4IGluIGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KHgsIGtleVt4XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkLmdldCA9IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fLm1ldGFba2V5XSA9PT0gXCJwcm9wZXJ0eVwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5iYW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuXy5lbWl0LmFwcGx5KHRoaXMsIFtcImJhbmdcIl0uY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkLnByb2Nlc3MgPSBmbi5ub3A7XHJcblxyXG4gICAgICAgICQuYnlwYXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuXy5ieXBhc3NlZCA9IChhcmd1bWVudHMubGVuZ3RoID09PSAwKSA/IHRydWUgOiAhIWFyZ3VtZW50c1swXTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5wbGF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBkYWMgPSB0aGlzLl8uZGFjO1xyXG4gICAgICAgICAgICBpZiAoZGFjID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBkYWMgPSB0aGlzLl8uZGFjID0gbmV3IFN5c3RlbUlubGV0KHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkYWMucGxheSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uZW1pdC5hcHBseSh0aGlzLCBbXCJwbGF5XCJdLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmbi5idWRkaWVzX3N0YXJ0KHRoaXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkLnBhdXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBkYWMgPSB0aGlzLl8uZGFjO1xyXG4gICAgICAgICAgICBpZiAoZGFjICYmIGRhYy5wbGF5YmFja1N0YXRlID09PSBQTEFZSU5HX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgICBkYWMucGF1c2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5kYWMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmVtaXQoXCJwYXVzZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmbi5idWRkaWVzX3N0b3AodGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQuc3RhcnQgPSAkLnN0b3AgPSAkLmxpc3RlbiA9ICQudW5saXN0ZW4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5hciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPT09IDApID8gdHJ1ZSA6ICEhYXJndW1lbnRzWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuXy5rcm9ubHkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8uYXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5lbWl0KFwiYXJcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtyKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQua3IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKChhcmd1bWVudHMubGVuZ3RoID09PSAwKSA/IHRydWUgOiAhIWFyZ3VtZW50c1swXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl8uYXJvbmx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmFyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmVtaXQoXCJhclwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFyKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmIChfZW52dHlwZSA9PT0gXCJicm93c2VyXCIpIHtcclxuICAgICAgICAgICAgJC5wbG90ID0gZnVuY3Rpb24ob3B0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FudmFzID0gb3B0cy50YXJnZXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFjYW52YXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGggICAgPSBvcHRzLndpZHRoICB8fCBjYW52YXMud2lkdGggIHx8IDMyMDtcclxuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgICA9IG9wdHMuaGVpZ2h0IHx8IGNhbnZhcy5oZWlnaHQgfHwgMjQwO1xyXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldF94ID0gKG9wdHMueCB8fCAwKSArIDAuNTtcclxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXRfeSA9IChvcHRzLnkgfHwgMCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBmb3JlZ3JvdW5kO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMuZm9yZWdyb3VuZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yZWdyb3VuZCA9IG9wdHMuZm9yZWdyb3VuZDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBmb3JlZ3JvdW5kID0gXy5wbG90Rm9yZWdyb3VuZCB8fCBcInJnYiggIDAsIDEyOCwgMjU1KVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGJhY2tncm91bmQ7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5iYWNrZ3JvdW5kICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kID0gb3B0cy5iYWNrZ3JvdW5kO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kID0gXy5wbG90QmFja2dyb3VuZCB8fCBcInJnYigyNTUsIDI1NSwgMjU1KVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGxpbmVXaWR0aCAgPSBvcHRzLmxpbmVXaWR0aCAgfHwgXy5wbG90TGluZVdpZHRoIHx8IDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3ljbGljICAgICA9ICEhXy5wbG90Q3ljbGljO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBkYXRhICA9IF8ucGxvdERhdGEgfHwgdGhpcy5jZWxsc1swXTtcclxuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IG9wdHMucmFuZ2UgfHwgXy5wbG90UmFuZ2UgfHwgWy0xLjIsICsxLjJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlTWluICAgPSByYW5nZVswXTtcclxuICAgICAgICAgICAgICAgIHZhciByYW5nZURlbHRhID0gaGVpZ2h0IC8gKHJhbmdlWzFdIC0gcmFuZ2VNaW4pO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB4LCBkeCA9ICh3aWR0aCAvIGRhdGEubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHZhciB5LCBkeSwgeTA7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSwgaW1heCA9IGRhdGEubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuc2F2ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQucmVjdChvZmZzZXRfeCwgb2Zmc2V0X3ksIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29udGV4dC5jbGlwKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGJhY2tncm91bmQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGJhY2tncm91bmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdChvZmZzZXRfeCwgb2Zmc2V0X3ksIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKF8ucGxvdEJlZm9yZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF8ucGxvdEJlZm9yZS5jYWxsKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLCBjb250ZXh0LCBvZmZzZXRfeCwgb2Zmc2V0X3ksIHdpZHRoLCBoZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfLnBsb3RCYXJTdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gZm9yZWdyb3VuZDtcclxuICAgICAgICAgICAgICAgICAgICB4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGR5ID0gKGRhdGFbaV0gLSByYW5nZU1pbikgKiByYW5nZURlbHRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5ICA9IGhlaWdodCAtIGR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHggKyBvZmZzZXRfeCwgeSArIG9mZnNldF95LCBkeCwgZHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4ICs9IGR4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGZvcmVncm91bmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggICA9IGxpbmVXaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgeCAgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHkwID0gaGVpZ2h0IC0gKGRhdGFbMF0gLSByYW5nZU1pbikgKiByYW5nZURlbHRhO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHggKyBvZmZzZXRfeCwgeTAgKyBvZmZzZXRfeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4ICs9IGR4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gaGVpZ2h0IC0gKGRhdGFbaV0gLSByYW5nZU1pbikgKiByYW5nZURlbHRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh4ICsgb2Zmc2V0X3gsIHkgKyBvZmZzZXRfeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjeWNsaWMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oeCArIGR4ICsgb2Zmc2V0X3gsIHkwICsgb2Zmc2V0X3kpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHggKyBkeCArIG9mZnNldF94LCB5ICArIG9mZnNldF95KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXy5wbG90QWZ0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLnBsb3RBZnRlci5jYWxsKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLCBjb250ZXh0LCBvZmZzZXRfeCwgb2Zmc2V0X3ksIHdpZHRoLCBoZWlnaHRcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGJvcmRlciA9IG9wdHMuYm9yZGVyIHx8IF8ucGxvdEJvcmRlcjtcclxuICAgICAgICAgICAgICAgIGlmIChib3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBib3JkZXIgPT09IFwic3RyaW5nXCIpID8gYm9yZGVyIDogXCIjMDAwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlUmVjdChvZmZzZXRfeCwgb2Zmc2V0X3ksIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICQucGxvdCA9IGZuLm5vcDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBUaW1icmVPYmplY3Q7XHJcbiAgICB9KSgpO1xyXG5cclxuICAgIHZhciBDaGFubmVsT2JqZWN0ID0gdGltYnJlLkNoYW5uZWxPYmplY3QgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gQ2hhbm5lbE9iamVjdChwYXJlbnQpIHtcclxuICAgICAgICAgICAgdGltYnJlLk9iamVjdC5jYWxsKHRoaXMsIC0xLCBbXSk7XHJcbiAgICAgICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fLnBhcmVudCA9IHBhcmVudDtcclxuICAgICAgICAgICAgdGhpcy5jZWxsID0gbmV3IGZuLlNpZ25hbEFycmF5KF9zeXMuY2VsbHNpemUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5MID0gdGhpcy5SID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5jZWxsc1swXSA9IHRoaXMuY2VsbHNbMV0gPSB0aGlzLmNlbGxzWzJdID0gdGhpcy5jZWxsO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5udW1DaGFubmVscyA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuLmV4dGVuZChDaGFubmVsT2JqZWN0KTtcclxuXHJcbiAgICAgICAgQ2hhbm5lbE9iamVjdC5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5wYXJlbnQucHJvY2Vzcyh0aWNrSUQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBDaGFubmVsT2JqZWN0O1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICB2YXIgQWRkTm9kZSA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICBmdW5jdGlvbiBBZGROb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgICAgIFRpbWJyZU9iamVjdC5jYWxsKHRoaXMsIDIsIF9hcmdzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm4uZXh0ZW5kKEFkZE5vZGUpO1xyXG5cclxuICAgICAgICBBZGROb2RlLnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5hcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZuLmlucHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNbMF1bMF0gPSBmbi5pbnB1dFNpZ25hbEtSKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEtSKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm4ucmVnaXN0ZXIoXCIrXCIsIEFkZE5vZGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gQWRkTm9kZTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgdmFyIE51bWJlcldyYXBwZXIgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gTnVtYmVyV3JhcHBlcihfYXJncykge1xyXG4gICAgICAgICAgICBUaW1icmVPYmplY3QuY2FsbCh0aGlzLCAxLCBbXSk7XHJcbiAgICAgICAgICAgIGZuLmZpeEtSKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IF9hcmdzWzBdO1xyXG5cclxuICAgICAgICAgICAgaWYgKGlzRGljdGlvbmFyeShfYXJnc1sxXSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBfYXJnc1sxXTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25jZShcImluaXRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQocGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMub24oXCJzZXRBZGRcIiwgZm4uY2hhbmdlV2l0aFZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5vbihcInNldE11bFwiLCBmbi5jaGFuZ2VXaXRoVmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbi5leHRlbmQoTnVtYmVyV3JhcHBlcik7XHJcblxyXG4gICAgICAgIHZhciAkID0gTnVtYmVyV3JhcHBlci5wcm90b3R5cGU7XHJcblxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuXy52YWx1ZSA9IGlzTmFOKHZhbHVlKSA/IDAgOiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm4uY2hhbmdlV2l0aFZhbHVlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gTnVtYmVyV3JhcHBlcjtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgdmFyIEJvb2xlYW5XcmFwcGVyID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIEJvb2xlYW5XcmFwcGVyKF9hcmdzKSB7XHJcbiAgICAgICAgICAgIFRpbWJyZU9iamVjdC5jYWxsKHRoaXMsIDEsIFtdKTtcclxuICAgICAgICAgICAgZm4uZml4S1IodGhpcyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gX2FyZ3NbMF07XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNEaWN0aW9uYXJ5KF9hcmdzWzFdKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IF9hcmdzWzFdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbmNlKFwiaW5pdFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldChwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vbihcInNldEFkZFwiLCBmbi5jaGFuZ2VXaXRoVmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLm9uKFwic2V0TXVsXCIsIGZuLmNoYW5nZVdpdGhWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuLmV4dGVuZChCb29sZWFuV3JhcHBlcik7XHJcblxyXG4gICAgICAgIHZhciAkID0gQm9vbGVhbldyYXBwZXIucHJvdG90eXBlO1xyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLnZhbHVlID0gdmFsdWUgPyAxIDogMDtcclxuICAgICAgICAgICAgICAgICAgICBmbi5jaGFuZ2VXaXRoVmFsdWUuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuXy52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gQm9vbGVhbldyYXBwZXI7XHJcbiAgICB9KSgpO1xyXG5cclxuICAgIHZhciBGdW5jdGlvbldyYXBwZXIgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gRnVuY3Rpb25XcmFwcGVyKF9hcmdzKSB7XHJcbiAgICAgICAgICAgIFRpbWJyZU9iamVjdC5jYWxsKHRoaXMsIDEsIFtdKTtcclxuICAgICAgICAgICAgZm4uZml4S1IodGhpcyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmZ1bmMgICAgPSBfYXJnc1swXTtcclxuICAgICAgICAgICAgdGhpcy5fLnZhbHVlID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChpc0RpY3Rpb25hcnkoX2FyZ3NbMV0pKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gX2FyZ3NbMV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2UoXCJpbml0XCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm9uKFwic2V0QWRkXCIsIGZuLmNoYW5nZVdpdGhWYWx1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMub24oXCJzZXRNdWxcIiwgZm4uY2hhbmdlV2l0aFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm4uZXh0ZW5kKEZ1bmN0aW9uV3JhcHBlcik7XHJcblxyXG4gICAgICAgIHZhciAkID0gRnVuY3Rpb25XcmFwcGVyLnByb3RvdHlwZTtcclxuXHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgICAgICBmdW5jOiB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuXy5mdW5jID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5mdW5jO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhcmdzOiB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuXy5hcmdzID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmFyZ3MgPSBbdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uYXJncztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkLmJhbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpLmNvbmNhdChfLmFyZ3MpO1xyXG4gICAgICAgICAgICB2YXIgeCA9IF8uZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB4ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICBfLnZhbHVlID0geDtcclxuICAgICAgICAgICAgICAgIGZuLmNoYW5nZVdpdGhWYWx1ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuXy5lbWl0KFwiYmFuZ1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uV3JhcHBlcjtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgdmFyIEFycmF5V3JhcHBlciA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICBmdW5jdGlvbiBBcnJheVdyYXBwZXIoX2FyZ3MpIHtcclxuICAgICAgICAgICAgVGltYnJlT2JqZWN0LmNhbGwodGhpcywgMSwgW10pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGksIGltYXg7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGltYXggPSBfYXJnc1swXS5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICB0aGlzLmFwcGVuZChfYXJnc1swXVtpXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpc0RpY3Rpb25hcnkoX2FyZ3NbMV0pKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gX2FyZ3NbMV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uY2UoXCJpbml0XCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmbi5leHRlbmQoQXJyYXlXcmFwcGVyKTtcclxuXHJcbiAgICAgICAgdmFyICQgPSBBcnJheVdyYXBwZXIucHJvdG90eXBlO1xyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkLmJhbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXCJiYW5nXCJdLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpO1xyXG4gICAgICAgICAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heDtcclxuICAgICAgICAgICAgZm9yIChpID0gMCwgaW1heCA9IG5vZGVzLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZXNbaV0uYmFuZy5hcHBseShub2Rlc1tpXSwgYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5wb3N0TWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcclxuICAgICAgICAgICAgdmFyIGksIGltYXg7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGltYXggPSBub2Rlcy5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIG5vZGVzW2ldLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG4gICAgICAgICAgICAgICAgaWYgKF8uYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBmbi5pbnB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNlbGxzWzBdWzBdID0gZm4uaW5wdXRTaWduYWxLUih0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxLUih0aGlzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gQXJyYXlXcmFwcGVyO1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICB2YXIgT2JqZWN0V3JhcHBlciA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICBmdW5jdGlvbiBPYmplY3RXcmFwcGVyKF9hcmdzKSB7XHJcbiAgICAgICAgICAgIFRpbWJyZU9iamVjdC5jYWxsKHRoaXMsIDEsIFtdKTtcclxuICAgICAgICAgICAgZm4uZml4S1IodGhpcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNEaWN0aW9uYXJ5KF9hcmdzWzFdKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IF9hcmdzWzFdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbmNlKFwiaW5pdFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldChwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm4uZXh0ZW5kKE9iamVjdFdyYXBwZXIpO1xyXG5cclxuICAgICAgICB2YXIgJCA9IE9iamVjdFdyYXBwZXIucHJvdG90eXBlO1xyXG5cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gT2JqZWN0V3JhcHBlcjtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgdmFyIFN5c3RlbUlubGV0ID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIFN5c3RlbUlubGV0KG9iamVjdCkge1xyXG4gICAgICAgICAgICBUaW1icmVPYmplY3QuY2FsbCh0aGlzLCAyLCBbXSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsYXliYWNrU3RhdGUgPSBGSU5JU0hFRF9TVEFURTtcclxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgIF8ubm9kZSA9IG9iamVjdDtcclxuICAgICAgICAgICAgXy5vbnBsYXkgID0gbWFrZV9vbnBsYXkodGhpcyk7XHJcbiAgICAgICAgICAgIF8ub25wYXVzZSA9IG1ha2Vfb25wYXVzZSh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm4uZXh0ZW5kKFN5c3RlbUlubGV0KTtcclxuXHJcbiAgICAgICAgdmFyIG1ha2Vfb25wbGF5ID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3N5cy5pbmxldHMuaW5kZXhPZihzZWxmKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBfc3lzLmlubGV0cy5wdXNoKHNlbGYpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9zeXMuZXZlbnRzLmVtaXQoXCJhZGRPYmplY3RcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wbGF5YmFja1N0YXRlID0gUExBWUlOR19TVEFURTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLl8uZW1pdChcInBsYXlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG1ha2Vfb25wYXVzZSA9IGZ1bmN0aW9uKHNlbGYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGkgPSBfc3lzLmlubGV0cy5pbmRleE9mKHNlbGYpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3N5cy5pbmxldHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucGxheWJhY2tTdGF0ZSA9IEZJTklTSEVEX1NUQVRFO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuXy5lbWl0KFwicGF1c2VcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgX3N5cy5ldmVudHMuZW1pdChcInJlbW92ZU9iamVjdFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgJCA9IFN5c3RlbUlubGV0LnByb3RvdHlwZTtcclxuXHJcbiAgICAgICAgJC5wbGF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIF9zeXMubmV4dFRpY2sodGhpcy5fLm9ucGxheSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoX3N5cy5pbmxldHMuaW5kZXhPZih0aGlzKSA9PT0gLTEpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQucGF1c2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgX3N5cy5uZXh0VGljayh0aGlzLl8ub25wYXVzZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5fLm5vZGU7XHJcbiAgICAgICAgICAgIGlmIChub2RlLnBsYXliYWNrU3RhdGUgJiAxKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLnByb2Nlc3ModGlja0lEKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNbMV0uc2V0KG5vZGUuY2VsbHNbMV0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsc1syXS5zZXQobm9kZS5jZWxsc1syXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNlbGxzWzFdLnNldChmbi5lbXB0eWNlbGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsc1syXS5zZXQoZm4uZW1wdHljZWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBTeXN0ZW1JbmxldDtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgdmFyIFNvdW5kU3lzdGVtID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIFNvdW5kU3lzdGVtKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuaW1wbCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuYW1wICA9IDAuODtcclxuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBGSU5JU0hFRF9TVEFURTtcclxuICAgICAgICAgICAgdGhpcy5zYW1wbGVyYXRlID0gNDQxMDA7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbHMgICA9IDI7XHJcbiAgICAgICAgICAgIHRoaXMuY2VsbHNpemUgICA9IDY0O1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbW1zZWMgPSAyMDtcclxuICAgICAgICAgICAgdGhpcy5zdHJlYW1zaXplID0gMDtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMubmV4dFRpY2tzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuaW5sZXRzICAgID0gW107XHJcbiAgICAgICAgICAgIHRoaXMudGltZXJzICAgID0gW107XHJcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRlZmVycmVkID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5yZWNTdGFydCAgID0gMDtcclxuICAgICAgICAgICAgdGhpcy5yZWNCdWZmZXJzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5kZWxheVByb2Nlc3MgPSBtYWtlX2RlbGF5UHJvY2Vzcyh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGZuLmN1cnJlbnRUaW1lSW5jciA9IHRoaXMuY2VsbHNpemUgKiAxMDAwIC8gdGhpcy5zYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICBmbi5lbXB0eWNlbGwgPSBuZXcgZm4uU2lnbmFsQXJyYXkodGhpcy5jZWxsc2l6ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlc2V0KHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG1ha2VfZGVsYXlQcm9jZXNzID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlY1N0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgIHNlbGYucHJvY2VzcygpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciAkID0gU291bmRTeXN0ZW0ucHJvdG90eXBlO1xyXG5cclxuICAgICAgICAkLmJpbmQgPSBmdW5jdGlvbihLbGFzcywgb3B0cykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEtsYXNzID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwbGF5ZXIgPSBuZXcgS2xhc3ModGhpcywgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmltcGwgPSBwbGF5ZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbXBsLmRlZmF1bHRTYW1wbGVyYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYW1wbGVyYXRlID0gdGhpcy5pbXBsLmRlZmF1bHRTYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQuc2V0dXAgPSBmdW5jdGlvbihwYXJhbXMpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChBQ0NFUFRfU0FNUExFUkFURVMuaW5kZXhPZihwYXJhbXMuc2FtcGxlcmF0ZSkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmFtcy5zYW1wbGVyYXRlIDw9IHRoaXMuaW1wbC5tYXhTYW1wbGVyYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2FtcGxlcmF0ZSA9IHBhcmFtcy5zYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2FtcGxlcmF0ZSA9IHRoaXMuaW1wbC5tYXhTYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChBQ0NFUFRfQ0VMTFNJWkVTLmluZGV4T2YocGFyYW1zLmNlbGxzaXplKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNlbGxzaXplID0gcGFyYW1zLmNlbGxzaXplO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBGbG9hdDY0QXJyYXkgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHBhcmFtcy5mNjQgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBfZjY0bW9kZSA9ICEhcGFyYW1zLmY2NDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoX2Y2NG1vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm4uU2lnbmFsQXJyYXkgPSBGbG9hdDY0QXJyYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm4uU2lnbmFsQXJyYXkgPSBGbG9hdDMyQXJyYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZuLmN1cnJlbnRUaW1lSW5jciA9IHRoaXMuY2VsbHNpemUgKiAxMDAwIC8gdGhpcy5zYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICBmbi5lbXB0eWNlbGwgPSBuZXcgZm4uU2lnbmFsQXJyYXkodGhpcy5jZWxsc2l6ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQuZ2V0QWRqdXN0U2FtcGxlcyA9IGZ1bmN0aW9uKHNhbXBsZXJhdGUpIHtcclxuICAgICAgICAgICAgdmFyIHNhbXBsZXMsIGJpdHM7XHJcbiAgICAgICAgICAgIHNhbXBsZXJhdGUgPSBzYW1wbGVyYXRlIHx8IHRoaXMuc2FtcGxlcmF0ZTtcclxuICAgICAgICAgICAgc2FtcGxlcyA9IHRoaXMuc3RyZWFtbXNlYyAvIDEwMDAgKiBzYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICBiaXRzID0gTWF0aC5jZWlsKE1hdGgubG9nKHNhbXBsZXMpICogTWF0aC5MT0cyRSk7XHJcbiAgICAgICAgICAgIGJpdHMgPSAoYml0cyA8IDgpID8gOCA6IChiaXRzID4gMTQpID8gMTQgOiBiaXRzO1xyXG4gICAgICAgICAgICByZXR1cm4gMSA8PCBiaXRzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQucGxheSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IEZJTklTSEVEX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IFBMQVlJTkdfU1RBVEU7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1zaXplID0gdGhpcy5nZXRBZGp1c3RTYW1wbGVzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0cm1MID0gbmV3IGZuLlNpZ25hbEFycmF5KHRoaXMuc3RyZWFtc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0cm1SID0gbmV3IGZuLlNpZ25hbEFycmF5KHRoaXMuc3RyZWFtc2l6ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbXBsLnBsYXkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzLmVtaXQoXCJwbGF5XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQucGF1c2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBQTEFZSU5HX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IEZJTklTSEVEX1NUQVRFO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbXBsLnBhdXNlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KFwicGF1c2VcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5yZXNldCA9IGZ1bmN0aW9uKGRlZXApIHtcclxuICAgICAgICAgICAgaWYgKGRlZXApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzID0gbmV3IEV2ZW50RW1pdHRlcih0aGlzKS5vbihcImFkZE9iamVjdFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IEZJTklTSEVEX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLm9uKFwicmVtb3ZlT2JqZWN0XCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gUExBWUlOR19TVEFURSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmxldHMubGVuZ3RoICsgdGhpcy50aW1lcnMubGVuZ3RoICsgdGhpcy5saXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhdXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gMDtcclxuICAgICAgICAgICAgdGhpcy5uZXh0VGlja3MgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5pbmxldHMgICAgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy50aW1lcnMgICAgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5wcm9jZXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB0aWNrSUQgPSB0aGlzLnRpY2tJRDtcclxuICAgICAgICAgICAgdmFyIHN0cm1MID0gdGhpcy5zdHJtTCwgc3RybVIgPSB0aGlzLnN0cm1SO1xyXG4gICAgICAgICAgICB2YXIgYW1wID0gdGhpcy5hbXA7XHJcbiAgICAgICAgICAgIHZhciB4LCB0bXBMLCB0bXBSO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heCA9IHRoaXMuc3RyZWFtc2l6ZSwgc2F2ZWRfaSA9IDA7XHJcbiAgICAgICAgICAgIHZhciBqLCBqbWF4O1xyXG4gICAgICAgICAgICB2YXIgaywga21heCA9IHRoaXMuY2VsbHNpemU7XHJcbiAgICAgICAgICAgIHZhciBuID0gdGhpcy5zdHJlYW1zaXplIC8gdGhpcy5jZWxsc2l6ZTtcclxuICAgICAgICAgICAgdmFyIG5leHRUaWNrcztcclxuICAgICAgICAgICAgdmFyIHRpbWVycyAgICA9IHRoaXMudGltZXJzO1xyXG4gICAgICAgICAgICB2YXIgaW5sZXRzICAgID0gdGhpcy5pbmxldHM7XHJcbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycztcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRUaW1lSW5jciA9IGZuLmN1cnJlbnRUaW1lSW5jcjtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHN0cm1MW2ldID0gc3RybVJbaV0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB3aGlsZSAobi0tKSB7XHJcbiAgICAgICAgICAgICAgICArK3RpY2tJRDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwLCBqbWF4ID0gdGltZXJzLmxlbmd0aDsgaiA8IGptYXg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lcnNbal0ucGxheWJhY2tTdGF0ZSAmIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZXJzW2pdLnByb2Nlc3ModGlja0lEKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChqID0gMCwgam1heCA9IGlubGV0cy5sZW5ndGg7IGogPCBqbWF4OyArK2opIHtcclxuICAgICAgICAgICAgICAgICAgICB4ID0gaW5sZXRzW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgIHgucHJvY2Vzcyh0aWNrSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4LnBsYXliYWNrU3RhdGUgJiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcEwgPSB4LmNlbGxzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBSID0geC5jZWxsc1syXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMCwgaSA9IHNhdmVkX2k7IGsgPCBrbWF4OyArK2ssICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RybUxbaV0gKz0gdG1wTFtrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm1SW2ldICs9IHRtcFJba107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzYXZlZF9pICs9IGttYXg7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChqID0gMCwgam1heCA9IGxpc3RlbmVycy5sZW5ndGg7IGogPCBqbWF4OyArK2opIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGlzdGVuZXJzW2pdLnBsYXliYWNrU3RhdGUgJiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyc1tqXS5wcm9jZXNzKHRpY2tJRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFRpbWUgKz0gY3VycmVudFRpbWVJbmNyO1xyXG5cclxuICAgICAgICAgICAgICAgIG5leHRUaWNrcyA9IHRoaXMubmV4dFRpY2tzLnNwbGljZSgwKTtcclxuICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGptYXggPSBuZXh0VGlja3MubGVuZ3RoOyBqIDwgam1heDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dFRpY2tzW2pdKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHggPSBzdHJtTFtpXSAqIGFtcDtcclxuICAgICAgICAgICAgICAgIGlmICh4IDwgLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzdHJtTFtpXSA9IHg7XHJcbiAgICAgICAgICAgICAgICB4ID0gc3RybVJbaV0gKiBhbXA7XHJcbiAgICAgICAgICAgICAgICBpZiAoeCA8IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4ID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHggPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3RybVJbaV0gPSB4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50VGltZSA9IHRoaXMuY3VycmVudFRpbWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IFNDSEVEVUxFRF9TVEFURSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVjQ2ggPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY0J1ZmZlcnMucHVzaChuZXcgZm4uU2lnbmFsQXJyYXkoc3RybUwpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY0J1ZmZlcnMucHVzaChuZXcgZm4uU2lnbmFsQXJyYXkoc3RybVIpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cm0gPSBuZXcgZm4uU2lnbmFsQXJyYXkoc3RybUwubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpbWF4ID0gc3RybS5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RybVtpXSA9IChzdHJtTFtpXSArIHN0cm1SW2ldKSAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNCdWZmZXJzLnB1c2goc3RybSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lID49IHRoaXMubWF4RHVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmVycmVkLnN1Yi5yZWplY3QoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFRpbWUgPj0gdGhpcy5yZWNEdXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmZXJyZWQuc3ViLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChub3cgLSB0aGlzLnJlY1N0YXJ0KSA+IDIwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5kZWxheVByb2Nlc3MsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkLm5leHRUaWNrID0gZnVuY3Rpb24oZnVuYykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IEZJTklTSEVEX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRUaWNrcy5wdXNoKGZ1bmMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5yZWMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZm4uZml4X2lPUzZfMV9wcm9ibGVtKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRmZCA9IG5ldyBEZWZlcnJlZCh0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRlZmVycmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJyZWMgZGVmZXJyZWQgaXMgZXhpc3RzPz9cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGZkLnJlamVjdCgpLnByb21pc2UoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzICE9PSBGSU5JU0hFRF9TVEFURSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzdGF0dXMgaXMgbm90IG5vbmVcIiwgdGhpcy5zdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRmZC5yZWplY3QoKS5wcm9taXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBpID0gMCwgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICAgICAgdmFyIG9wdHMgPSBpc0RpY3Rpb25hcnkoYXJnc1tpXSkgPyBhcmdzW2krK10gOiB7fTtcclxuICAgICAgICAgICAgdmFyIGZ1bmMgPSBhcmdzW2ldO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRocm93IGVycm9yPz9cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIm5vIGZ1bmN0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRmZC5yZWplY3QoKS5wcm9taXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGVmZXJyZWQgPSBkZmQ7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gU0NIRURVTEVEX1NUQVRFO1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVjX2lubGV0ID0gbmV3IFQoXCIrXCIpO1xyXG4gICAgICAgICAgICB2YXIgaW5sZXRfZGZkID0gbmV3IERlZmVycmVkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdmFyIG91dGxldCA9IHtcclxuICAgICAgICAgICAgICAgIGRvbmU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlubGV0X2RmZC5yZXNvbHZlLmFwcGx5KGlubGV0X2RmZCwgc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICByZWNfaW5sZXQuYXBwZW5kLmFwcGx5KHJlY19pbmxldCwgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgaW5sZXRfZGZkLnRoZW4ocmVjZG9uZSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBmbi5maXhfaU9TNl8xX3Byb2JsZW0oZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgcmVjZG9uZS5jYWxsKHNlbGYsIHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGVmZXJyZWQuc3ViID0gaW5sZXRfZGZkO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zYXZlZFNhbXBsZXJhdGUgPSB0aGlzLnNhbXBsZXJhdGU7XHJcbiAgICAgICAgICAgIHRoaXMuc2FtcGxlcmF0ZSAgPSBvcHRzLnNhbXBsZXJhdGUgIHx8IHRoaXMuc2FtcGxlcmF0ZTtcclxuICAgICAgICAgICAgdGhpcy5yZWNEdXJhdGlvbiA9IG9wdHMucmVjRHVyYXRpb24gfHwgSW5maW5pdHk7XHJcbiAgICAgICAgICAgIHRoaXMubWF4RHVyYXRpb24gPSBvcHRzLm1heER1cmF0aW9uIHx8IDEwICogNjAgKiAxMDAwO1xyXG4gICAgICAgICAgICB0aGlzLnJlY0NoID0gb3B0cy5jaCB8fCAxO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yZWNDaCAhPT0gMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNDaCA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yZWNCdWZmZXJzID0gW107XHJcblxyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbXNpemUgPSB0aGlzLmdldEFkanVzdFNhbXBsZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5zdHJtTCA9IG5ldyBmbi5TaWduYWxBcnJheSh0aGlzLnN0cmVhbXNpemUpO1xyXG4gICAgICAgICAgICB0aGlzLnN0cm1SID0gbmV3IGZuLlNpZ25hbEFycmF5KHRoaXMuc3RyZWFtc2l6ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmlubGV0cy5wdXNoKHJlY19pbmxldCk7XHJcblxyXG4gICAgICAgICAgICBmdW5jKG91dGxldCk7XHJcblxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMuZGVsYXlQcm9jZXNzLCAxMCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZGZkLnByb21pc2UoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgcmVjZG9uZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IEZJTklTSEVEX1NUQVRFO1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVjQnVmZmVycyA9IHRoaXMucmVjQnVmZmVycztcclxuICAgICAgICAgICAgdmFyIHNhbXBsZXJhdGUgPSB0aGlzLnNhbXBsZXJhdGU7XHJcbiAgICAgICAgICAgIHZhciBzdHJlYW1zaXplID0gdGhpcy5zdHJlYW1zaXplO1xyXG4gICAgICAgICAgICB2YXIgYnVmZmVyTGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zYW1wbGVyYXRlID0gdGhpcy5zYXZlZFNhbXBsZXJhdGU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5yZWNEdXJhdGlvbiAhPT0gSW5maW5pdHkpIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlckxlbmd0aCA9ICh0aGlzLnJlY0R1cmF0aW9uICogc2FtcGxlcmF0ZSAqIDAuMDAxKXwwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyTGVuZ3RoID0gKHJlY0J1ZmZlcnMubGVuZ3RoID4+ICh0aGlzLnJlY0NoLTEpKSAqIHN0cmVhbXNpemU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gKGJ1ZmZlckxlbmd0aCAvIHN0cmVhbXNpemUpfDA7XHJcbiAgICAgICAgICAgIHZhciBqID0gMCwgayA9IDA7XHJcbiAgICAgICAgICAgIHZhciByZW1haW5pbmcgPSBidWZmZXJMZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5yZWNDaCA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgdmFyIEwgPSBuZXcgZm4uU2lnbmFsQXJyYXkoYnVmZmVyTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHZhciBSID0gbmV3IGZuLlNpZ25hbEFycmF5KGJ1ZmZlckxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWl4ZWQgPSBuZXcgZm4uU2lnbmFsQXJyYXkoYnVmZmVyTGVuZ3RoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgTC5zZXQocmVjQnVmZmVyc1tqKytdLCBrKTtcclxuICAgICAgICAgICAgICAgICAgICBSLnNldChyZWNCdWZmZXJzW2orK10sIGspO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgKz0gc3RyZWFtc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICByZW1haW5pbmcgLT0gc3RyZWFtc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVtYWluaW5nID4gMCAmJiByZW1haW5pbmcgPCBzdHJlYW1zaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEwuc2V0KHJlY0J1ZmZlcnNbaisrXS5zdWJhcnJheSgwLCByZW1haW5pbmcpLCBrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUi5zZXQocmVjQnVmZmVyc1tqKytdLnN1YmFycmF5KDAsIHJlbWFpbmluZyksIGspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpbWF4ID0gYnVmZmVyTGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWl4ZWRbaV0gPSAoTFtpXSArIFJbaV0pICogMC41O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzYW1wbGVyYXRlOiBzYW1wbGVyYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzICA6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBbbWl4ZWQsIEwsIFJdXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBuZXcgZm4uU2lnbmFsQXJyYXkoYnVmZmVyTGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXIuc2V0KHJlY0J1ZmZlcnNbaisrXSwgayk7XHJcbiAgICAgICAgICAgICAgICAgICAgayArPSBzdHJlYW1zaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbWFpbmluZyAtPSBzdHJlYW1zaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW1haW5pbmcgPiAwICYmIHJlbWFpbmluZyA8IHN0cmVhbXNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnNldChyZWNCdWZmZXJzW2orK10uc3ViYXJyYXkoMCwgcmVtYWluaW5nKSwgayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBzYW1wbGVyYXRlOiBzYW1wbGVyYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzICA6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBbYnVmZmVyXVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBbXS5jb25jYXQuYXBwbHkoW3Jlc3VsdF0sIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmZXJyZWQucmVzb2x2ZS5hcHBseSh0aGlzLmRlZmVycmVkLCBhcmdzKTtcclxuICAgICAgICAgICAgdGhpcy5kZWZlcnJlZCA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gRXZlbnRFbWl0dGVyXHJcbiAgICAgICAgJC5vbiA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVycykge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5vbih0eXBlLCBsaXN0ZW5lcnMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgJC5vbmNlID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLm9uY2UodHlwZSwgbGlzdGVuZXJzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICQub2ZmID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudHMub2ZmKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgICQucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xyXG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5yZW1vdmVMaXN0ZW5lcnModHlwZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAkLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRzLmxpc3RlbmVycyh0eXBlKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkLmZpeF9pT1M2XzFfcHJvYmxlbSA9IGZ1bmN0aW9uKGZsYWcpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW1wbC5maXhfaU9TNl8xX3Byb2JsZW0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW1wbC5maXhfaU9TNl8xX3Byb2JsZW0oZmxhZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gU291bmRTeXN0ZW07XHJcbiAgICB9KSgpO1xyXG5cclxuICAgIC8vIHBsYXllclxyXG4gICAgdmFyIEltcGxDbGFzcyAgICA9IG51bGw7XHJcbiAgICB2YXIgQXVkaW9Db250ZXh0O1xyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgQXVkaW9Db250ZXh0ID0gd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgQXVkaW9Db250ZXh0ICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgSW1wbENsYXNzID0gZnVuY3Rpb24oc3lzKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xyXG4gICAgICAgICAgICB2YXIgYnVmU3JjLCBqc05vZGU7XHJcblxyXG4gICAgICAgICAgICBmbi5fYXVkaW9Db250ZXh0ID0gY29udGV4dDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubWF4U2FtcGxlcmF0ZSAgICAgPSBjb250ZXh0LnNhbXBsZVJhdGU7XHJcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdFNhbXBsZXJhdGUgPSBjb250ZXh0LnNhbXBsZVJhdGU7XHJcbiAgICAgICAgICAgIHRoaXMuZW52ID0gXCJ3ZWJraXRcIjtcclxuXHJcbiAgICAgICAgICAgIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XHJcbiAgICAgICAgICAgIGlmICh1YS5tYXRjaCgvbGludXgvaSkpIHtcclxuICAgICAgICAgICAgICAgIHN5cy5zdHJlYW1tc2VjICo9IDg7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodWEubWF0Y2goL3dpbihkb3dzKT9cXHMqKG50IDVcXC4xfHhwKS9pKSkge1xyXG4gICAgICAgICAgICAgICAgc3lzLnN0cmVhbW1zZWMgKj0gNDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5wbGF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb25hdWRpb3Byb2Nlc3M7XHJcbiAgICAgICAgICAgICAgICB2YXIganNuX3N0cmVhbXNpemUgPSBzeXMuZ2V0QWRqdXN0U2FtcGxlcyhjb250ZXh0LnNhbXBsZVJhdGUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN5c19zdHJlYW1zaXplID0gc3lzLnN0cmVhbXNpemU7XHJcbiAgICAgICAgICAgICAgICB2YXIgeCwgZHg7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN5cy5zYW1wbGVyYXRlID09PSBjb250ZXh0LnNhbXBsZVJhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBvbmF1ZGlvcHJvY2VzcyA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91dHMgPSBlLm91dHB1dEJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3lzLnByb2Nlc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cy5nZXRDaGFubmVsRGF0YSgwKS5zZXQoc3lzLnN0cm1MKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cy5nZXRDaGFubmVsRGF0YSgxKS5zZXQoc3lzLnN0cm1SKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzeXMuc2FtcGxlcmF0ZSAqIDIgPT09IGNvbnRleHQuc2FtcGxlUmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uYXVkaW9wcm9jZXNzID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5MID0gc3lzLnN0cm1MO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5SID0gc3lzLnN0cm1SO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0cyA9IGUub3V0cHV0QnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0TCA9IG91dHMuZ2V0Q2hhbm5lbERhdGEoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdXRSID0gb3V0cy5nZXRDaGFubmVsRGF0YSgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGksIGltYXggPSBvdXRzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGo7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzeXMucHJvY2VzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBqID0gMDsgaSA8IGltYXg7IGkgKz0gMiwgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRMW2ldID0gb3V0TFtpKzFdID0gaW5MW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0UltpXSA9IG91dFJbaSsxXSA9IGluUltqXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHggID0gc3lzX3N0cmVhbXNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgZHggPSBzeXMuc2FtcGxlcmF0ZSAvIGNvbnRleHQuc2FtcGxlUmF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBvbmF1ZGlvcHJvY2VzcyA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluTCA9IHN5cy5zdHJtTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluUiA9IHN5cy5zdHJtUjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91dHMgPSBlLm91dHB1dEJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG91dEwgPSBvdXRzLmdldENoYW5uZWxEYXRhKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3V0UiA9IG91dHMuZ2V0Q2hhbm5lbERhdGEoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gb3V0cy5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeCA+PSBzeXNfc3RyZWFtc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5cy5wcm9jZXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCAtPSBzeXNfc3RyZWFtc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dExbaV0gPSBpbkxbeHwwXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dFJbaV0gPSBpblJbeHwwXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gZHg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGJ1ZlNyYyA9IGNvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICAgICAgICAgICAgICBqc05vZGUgPSBjb250ZXh0LmNyZWF0ZVNjcmlwdFByb2Nlc3Nvcihqc25fc3RyZWFtc2l6ZSwgMiwgc3lzLmNoYW5uZWxzKTtcclxuICAgICAgICAgICAgICAgIGpzTm9kZS5vbmF1ZGlvcHJvY2VzcyA9IG9uYXVkaW9wcm9jZXNzO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1ZlNyYy5ub3RlT24pIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZTcmMubm90ZU9uKDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnVmU3JjLmNvbm5lY3QoanNOb2RlKTtcclxuICAgICAgICAgICAgICAgIGpzTm9kZS5jb25uZWN0KGNvbnRleHQuZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5wYXVzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgYnVmU3JjLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgICAgIGpzTm9kZS5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAoX2Vudm1vYmlsZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG4gICA9IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnVmID0gY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZml4X2lPUzZfMV9wcm9ibGVtID0gZnVuY3Rpb24oZmxhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIG4gKz0gZmxhZyA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobiA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWYubm90ZU9uKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWYuY29ubmVjdChjb250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4gPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgSW1wbENsYXNzID0gZnVuY3Rpb24oc3lzKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWF4U2FtcGxlcmF0ZSAgICAgPSA0ODAwMDtcclxuICAgICAgICAgICAgdGhpcy5kZWZhdWx0U2FtcGxlcmF0ZSA9IDQ0MTAwO1xyXG4gICAgICAgICAgICB0aGlzLmVudiA9IFwibm9wXCI7XHJcbiAgICAgICAgICAgIHRoaXMucGxheSAgPSBmdW5jdGlvbigpIHt9O1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlID0gZnVuY3Rpb24oKSB7fTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIF9zeXMgPSBuZXcgU291bmRTeXN0ZW0oKS5iaW5kKEltcGxDbGFzcyk7XHJcblxyXG4gICAgdmFyIGV4cG9ydHMgPSB0aW1icmU7XHJcblxyXG4gICAgaWYgKF9lbnZ0eXBlID09PSBcIm5vZGVcIiB8fCB0eXBlb2YgbW9kdWxlICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzKSB7XHJcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwudGltYnJlID0gZXhwb3J0cztcclxuICAgIH0gZWxzZSBpZiAoX2VudnR5cGUgPT09IFwiYnJvd3NlclwiKSB7XHJcbiAgICAgICAgZXhwb3J0cy5ub0NvbmZsaWN0ID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgIHZhciBfdCA9IHdpbmRvdy50aW1icmUsIF9UID0gd2luZG93LlQ7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihkZWVwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LlQgPT09IGV4cG9ydHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuVCA9IF9UO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRlZXAgJiYgd2luZG93LnRpbWJyZSA9PT0gZXhwb3J0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy50aW1icmUgPSBfdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBleHBvcnRzO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgIHdpbmRvdy50aW1icmUgPSB3aW5kb3cuVCA9IGV4cG9ydHM7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmxhc2ggZmFsbGJhY2tcclxuICAgIChmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoX3N5cy5pbXBsLmVudiAhPT0gXCJub3BcIiB8fCBfZW52dHlwZSAhPT0gXCJicm93c2VyXCIgfHwgX2Vudm1vYmlsZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBuYXYgPSBuYXZpZ2F0b3I7XHJcblxyXG4gICAgICAgIC8qanNoaW50IGxhdGVkZWY6dHJ1ZSAqL1xyXG4gICAgICAgIGlmIChnZXRGbGFzaFBsYXllclZlcnNpb24oMCkgPCAxMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8qanNoaW50IGxhdGVkZWY6ZmFsc2UgKi9cclxuXHJcbiAgICAgICAgdmFyIHN3ZiwgUGxheWVyRGl2SUQgPSBcIlRpbWJyZUZsYXNoUGxheWVyRGl2XCI7XHJcbiAgICAgICAgdmFyIHNyYyA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcclxuICAgICAgICAgICAgaWYgKHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIG0sIGkgPSAwLCBpbWF4ID0gc2NyaXB0cy5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKG0gPSAvXiguKlxcLyl0aW1icmUoPzpcXC5kZXYpP1xcLmpzJC9pLmV4ZWMoc2NyaXB0c1tpXS5zcmMpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbVsxXSArIFwidGltYnJlLnN3ZlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pKCk7XHJcblxyXG4gICAgICAgIHdpbmRvdy50aW1icmVqc19mbGFzaGZhbGxiYWNrX2luaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gVGltYnJlRmxhc2hQbGF5ZXIoc3lzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZXJJZCA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXhTYW1wbGVyYXRlICAgICA9IDQ0MTAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0U2FtcGxlcmF0ZSA9IDQ0MTAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbnYgPSBcImZsYXNoXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9uYXVkaW9wcm9jZXNzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnRlcmxlYXZlZCA9IG5ldyBBcnJheShzeXMuc3RyZWFtc2l6ZSAqIHN5cy5jaGFubmVscyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0cmVhbW1zZWMgID0gc3lzLnN0cmVhbW1zZWM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdyaXR0ZW4gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3cml0dGVuSW5jciA9IHN5cy5zdHJlYW1zaXplIC8gc3lzLnNhbXBsZXJhdGUgKiAxMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IERhdGUubm93KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9uYXVkaW9wcm9jZXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cml0dGVuID4gRGF0ZS5ub3coKSAtIHN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluTCA9IHN5cy5zdHJtTDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluUiA9IHN5cy5zdHJtUjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBpbnRlcmxlYXZlZC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqID0gaW5MLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3lzLnByb2Nlc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGotLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJsZWF2ZWRbLS1pXSA9IChpblJbal0gKiAzMjc2OCl8MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVybGVhdmVkWy0taV0gPSAoaW5MW2pdICogMzI3NjgpfDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dmLndyaXRlQXVkaW8oaW50ZXJsZWF2ZWQuam9pbihcIiBcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0dGVuICs9IHdyaXR0ZW5JbmNyO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzd2Yuc2V0dXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dmLnNldHVwKHN5cy5jaGFubmVscywgc3lzLnNhbXBsZXJhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lcklkID0gc2V0SW50ZXJ2YWwob25hdWRpb3Byb2Nlc3MsIHN0cmVhbW1zZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNhbm5vdCBmaW5kIFwiICsgc3JjKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMucGF1c2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZXJJZCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2YuY2FuY2VsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXJJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVySWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3N5cy5iaW5kKFRpbWJyZUZsYXNoUGxheWVyKTtcclxuICAgICAgICAgICAgZGVsZXRlIHdpbmRvdy50aW1icmVqc19mbGFzaGZhbGxiYWNrX2luaXQ7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG8sIHA7XHJcbiAgICAgICAgdmFyIHN3ZlNyYyAgPSBzcmM7XHJcbiAgICAgICAgdmFyIHN3Zk5hbWUgPSBzd2ZTcmMgKyBcIj9cIiArICgrbmV3IERhdGUoKSk7XHJcbiAgICAgICAgdmFyIHN3ZklkICAgPSBcIlRpbWJyZUZsYXNoUGxheWVyXCI7XHJcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgZGl2LmlkID0gUGxheWVyRGl2SUQ7XHJcbiAgICAgICAgZGl2LnN0eWxlLmRpc3BsYXkgPSBcImlubGluZVwiO1xyXG4gICAgICAgIGRpdi53aWR0aCA9IGRpdi5oZWlnaHQgPSAxO1xyXG5cclxuICAgICAgICBpZiAobmF2LnBsdWdpbnMgJiYgbmF2Lm1pbWVUeXBlcyAmJiBuYXYubWltZVR5cGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyBuc1xyXG4gICAgICAgICAgICBvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9iamVjdFwiKTtcclxuICAgICAgICAgICAgby5pZCA9IHN3ZklkO1xyXG4gICAgICAgICAgICBvLmNsYXNzaWQgPSBcImNsc2lkOkQyN0NEQjZFLUFFNkQtMTFjZi05NkI4LTQ0NDU1MzU0MDAwMFwiO1xyXG4gICAgICAgICAgICBvLndpZHRoID0gby5oZWlnaHQgPSAxO1xyXG4gICAgICAgICAgICBvLnNldEF0dHJpYnV0ZShcImRhdGFcIiwgc3dmTmFtZSk7XHJcbiAgICAgICAgICAgIG8uc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXCIpO1xyXG4gICAgICAgICAgICBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBhcmFtXCIpO1xyXG4gICAgICAgICAgICBwLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgXCJhbGxvd1NjcmlwdEFjY2Vzc1wiKTtcclxuICAgICAgICAgICAgcC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcImFsd2F5c1wiKTtcclxuICAgICAgICAgICAgby5hcHBlbmRDaGlsZChwKTtcclxuICAgICAgICAgICAgZGl2LmFwcGVuZENoaWxkKG8pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGllXHJcbiAgICAgICAgICAgIC8qanNoaW50IHF1b3RtYXJrOnNpbmdsZSAqL1xyXG4gICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gJzxvYmplY3QgaWQ9XCInICsgc3dmSWQgKyAnXCIgY2xhc3NpZD1cImNsc2lkOkQyN0NEQjZFLUFFNkQtMTFjZi05NkI4LTQ0NDU1MzU0MDAwMFwiIHdpZHRoPVwiMVwiIGhlaWdodD1cIjFcIj48cGFyYW0gbmFtZT1cIm1vdmllXCIgdmFsdWU9XCInICsgc3dmTmFtZSArICdcIiAvPjxwYXJhbSBuYW1lPVwiYmdjb2xvclwiIHZhbHVlPVwiI0ZGRkZGRlwiIC8+PHBhcmFtIG5hbWU9XCJxdWFsaXR5XCIgdmFsdWU9XCJoaWdoXCIgLz48cGFyYW0gbmFtZT1cImFsbG93U2NyaXB0QWNjZXNzXCIgdmFsdWU9XCJhbHdheXNcIiAvPjwvb2JqZWN0Pic7XHJcbiAgICAgICAgICAgIC8qanNoaW50IHF1b3RtYXJrOmRvdWJsZSAqL1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcclxuICAgICAgICAgICAgc3dmID0gZG9jdW1lbnRbc3dmSWRdO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRGbGFzaFBsYXllclZlcnNpb24oc3Vicykge1xyXG4gICAgICAgICAgICAvKmdsb2JhbCBBY3RpdmVYT2JqZWN0OnRydWUgKi9cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmIChuYXYucGx1Z2lucyAmJiBuYXYubWltZVR5cGVzICYmIG5hdi5taW1lVHlwZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hdi5wbHVnaW5zW1wiU2hvY2t3YXZlIEZsYXNoXCJdLmRlc2NyaXB0aW9uLm1hdGNoKC8oWzAtOV0rKS8pW3N1YnNdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChuZXcgQWN0aXZlWE9iamVjdChcIlNob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoXCIpKS5HZXRWYXJpYWJsZShcIiR2ZXJzaW9uXCIpLm1hdGNoKC8oWzAtOV0rKS8pW3N1YnNdO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLypnbG9iYWwgQWN0aXZlWE9iamVjdDpmYWxzZSAqL1xyXG4gICAgICAgIH1cclxuICAgIH0pKCk7XHJcblxyXG59KSgpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgZnVuY3Rpb24gQmlxdWFkKHNhbXBsZXJhdGUpIHtcclxuICAgICAgICB0aGlzLnNhbXBsZXJhdGUgPSBzYW1wbGVyYXRlO1xyXG4gICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gMzQwO1xyXG4gICAgICAgIHRoaXMuUSAgICAgICAgID0gMTtcclxuICAgICAgICB0aGlzLmdhaW4gICAgICA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMueDFMID0gdGhpcy54MkwgPSB0aGlzLnkxTCA9IHRoaXMueTJMID0gMDtcclxuICAgICAgICB0aGlzLngxUiA9IHRoaXMueDJSID0gdGhpcy55MVIgPSB0aGlzLnkyUiA9IDA7XHJcbiAgICAgICAgdGhpcy5iMCA9IHRoaXMuYjEgPSB0aGlzLmIyID0gdGhpcy5hMSA9IHRoaXMuYTIgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLnNldFR5cGUoXCJscGZcIik7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyICQgPSBCaXF1YWQucHJvdG90eXBlO1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKGNlbGxMLCBjZWxsUikge1xyXG4gICAgICAgIHZhciB4TCwgeFIsIHlMLCB5UjtcclxuICAgICAgICB2YXIgeDFMID0gdGhpcy54MUwsIHgyTCA9IHRoaXMueDJMLCB5MUwgPSB0aGlzLnkxTCwgeTJMID0gdGhpcy55Mkw7XHJcbiAgICAgICAgdmFyIHgxUiA9IHRoaXMueDFSLCB4MlIgPSB0aGlzLngyUiwgeTFSID0gdGhpcy55MVIsIHkyUiA9IHRoaXMueTJSO1xyXG4gICAgICAgIHZhciBiMCA9IHRoaXMuYjAsIGIxID0gdGhpcy5iMSwgYjIgPSB0aGlzLmIyLCBhMSA9IHRoaXMuYTEsIGEyID0gdGhpcy5hMjtcclxuICAgICAgICB2YXIgaSwgaW1heDtcclxuXHJcbiAgICAgICAgZm9yIChpID0gMCwgaW1heCA9IGNlbGxMLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICB4TCA9IGNlbGxMW2ldO1xyXG4gICAgICAgICAgICB5TCA9IGIwICogeEwgKyBiMSAqIHgxTCArIGIyICogeDJMIC0gYTEgKiB5MUwgLSBhMiAqIHkyTDtcclxuICAgICAgICAgICAgeDJMID0geDFMOyB4MUwgPSB4TDsgeTJMID0geTFMOyB5MUwgPSB5TDtcclxuXHJcbiAgICAgICAgICAgIHhSID0gY2VsbFJbaV07XHJcbiAgICAgICAgICAgIHlSID0gYjAgKiB4UiArIGIxICogeDFSICsgYjIgKiB4MlIgLSBhMSAqIHkxUiAtIGEyICogeTJSO1xyXG4gICAgICAgICAgICB4MlIgPSB4MVI7IHgxUiA9IHhSOyB5MlIgPSB5MVI7IHkxUiA9IHlSO1xyXG5cclxuICAgICAgICAgICAgY2VsbExbaV0gPSB5TDtcclxuICAgICAgICAgICAgY2VsbFJbaV0gPSB5UjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy54MUwgPSB4MUw7IHRoaXMueDJMID0geDJMOyB0aGlzLnkxTCA9IHkxTDsgdGhpcy55MkwgPSB5Mkw7XHJcbiAgICAgICAgdGhpcy54MVIgPSB4MVI7IHRoaXMueDJSID0geDJSOyB0aGlzLnkxUiA9IHkxUjsgdGhpcy55MlIgPSB5MlI7XHJcbiAgICB9O1xyXG5cclxuICAgICQuc2V0VHlwZSA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICB2YXIgZjtcclxuICAgICAgICBpZiAoKGYgPSBzZXRQYXJhbXNbdHlwZV0pKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgIGYuY2FsbCh0aGlzLCB0aGlzLmZyZXF1ZW5jeSwgdGhpcy5RLCB0aGlzLmdhaW4pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJC5zZXRQYXJhbXMgPSBmdW5jdGlvbihmcmVxdWVuY3ksIFEsIGRiR2Fpbikge1xyXG4gICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gZnJlcXVlbmN5O1xyXG4gICAgICAgIHRoaXMuUSA9IFE7XHJcbiAgICAgICAgdGhpcy5nYWluID0gZGJHYWluO1xyXG5cclxuICAgICAgICB2YXIgZiA9IHNldFBhcmFtc1t0aGlzLnR5cGVdO1xyXG4gICAgICAgIGlmIChmKSB7XHJcbiAgICAgICAgICAgIGYuY2FsbCh0aGlzLCBmcmVxdWVuY3ksIFEsIGRiR2Fpbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG5cclxuICAgIHZhciBzZXRQYXJhbXMgPSB7XHJcbiAgICAgICAgbG93cGFzczogZnVuY3Rpb24oY3V0b2ZmLCByZXNvbmFuY2UpIHtcclxuICAgICAgICAgICAgY3V0b2ZmIC89ICh0aGlzLnNhbXBsZXJhdGUgKiAwLjUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGN1dG9mZiA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmIwID0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYjEgPSB0aGlzLmIyID0gdGhpcy5hMSA9IHRoaXMuYTIgPSAwO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1dG9mZiA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmIwID0gdGhpcy5iMSA9IHRoaXMuYjIgPSB0aGlzLmExID0gdGhpcy5hMiA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXNvbmFuY2UgPSAocmVzb25hbmNlIDwgMCkgPyAwIDogcmVzb25hbmNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGcgPSBNYXRoLnBvdygxMC4wLCAwLjA1ICogcmVzb25hbmNlKTtcclxuICAgICAgICAgICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KCg0IC0gTWF0aC5zcXJ0KDE2IC0gMTYgLyAoZyAqIGcpKSkgKiAwLjUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB0aGV0YSA9IE1hdGguUEkgKiBjdXRvZmY7XHJcbiAgICAgICAgICAgICAgICB2YXIgc24gPSAwLjUgKiBkICogTWF0aC5zaW4odGhldGEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJldGEgPSAwLjUgKiAoMSAtIHNuKSAvICgxICsgc24pO1xyXG4gICAgICAgICAgICAgICAgdmFyIGdhbW1hID0gKDAuNSArIGJldGEpICogTWF0aC5jb3ModGhldGEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFscGhhID0gMC4yNSAqICgwLjUgKyBiZXRhIC0gZ2FtbWEpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuYjAgPSAyICogYWxwaGE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmIxID0gNCAqIGFscGhhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iMiA9IHRoaXMuYjA7IC8vIDIgKiBhbHBoYTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYTEgPSAyICogLWdhbW1hO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hMiA9IDIgKiBiZXRhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoaWdocGFzczogZnVuY3Rpb24oY3V0b2ZmLCByZXNvbmFuY2UpIHtcclxuICAgICAgICAgICAgY3V0b2ZmIC89ICh0aGlzLnNhbXBsZXJhdGUgKiAwLjUpO1xyXG4gICAgICAgICAgICBpZiAoY3V0b2ZmID49IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYjAgPSB0aGlzLmIxID0gdGhpcy5iMiA9IHRoaXMuYTEgPSB0aGlzLmEyID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjdXRvZmYgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iMCA9IDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmIxID0gdGhpcy5iMiA9IHRoaXMuYTEgPSB0aGlzLmEyID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc29uYW5jZSA9IChyZXNvbmFuY2UgPCAwKSA/IDAgOiByZXNvbmFuY2U7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGcgPSBNYXRoLnBvdygxMC4wLCAwLjA1ICogcmVzb25hbmNlKTtcclxuICAgICAgICAgICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KCg0IC0gTWF0aC5zcXJ0KDE2IC0gMTYgLyAoZyAqIGcpKSkgLyAyKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgdGhldGEgPSBNYXRoLlBJICogY3V0b2ZmO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNuID0gMC41ICogZCAqIE1hdGguc2luKHRoZXRhKTtcclxuICAgICAgICAgICAgICAgIHZhciBiZXRhID0gMC41ICogKDEgLSBzbikgLyAoMSArIHNuKTtcclxuICAgICAgICAgICAgICAgIHZhciBnYW1tYSA9ICgwLjUgKyBiZXRhKSAqIE1hdGguY29zKHRoZXRhKTtcclxuICAgICAgICAgICAgICAgIHZhciBhbHBoYSA9IDAuMjUgKiAoMC41ICsgYmV0YSArIGdhbW1hKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmIwID0gMiAqIGFscGhhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iMSA9IC00ICogYWxwaGE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmIyID0gdGhpcy5iMDsgLy8gMiAqIGFscGhhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hMSA9IDIgKiAtZ2FtbWE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmEyID0gMiAqIGJldGE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGJhbmRwYXNzOiBmdW5jdGlvbihmcmVxdWVuY3ksIFEpIHtcclxuICAgICAgICAgICAgZnJlcXVlbmN5IC89ICh0aGlzLnNhbXBsZXJhdGUgKiAwLjUpO1xyXG4gICAgICAgICAgICBpZiAoZnJlcXVlbmN5ID4gMCAmJiBmcmVxdWVuY3kgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoUSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdzAgPSBNYXRoLlBJICogZnJlcXVlbmN5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWxwaGEgPSBNYXRoLnNpbih3MCkgLyAoMiAqIFEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrID0gTWF0aC5jb3ModzApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWEwID0gMSAvICgxICsgYWxwaGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmIwID0gYWxwaGEgKiBpYTA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iMSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iMiA9IC1hbHBoYSAqIGlhMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmExID0gLTIgKiBrICogaWEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYTIgPSAoMSAtIGFscGhhKSAqIGlhMDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iMCA9IHRoaXMuYjEgPSB0aGlzLmIyID0gdGhpcy5hMSA9IHRoaXMuYTIgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iMCA9IHRoaXMuYjEgPSB0aGlzLmIyID0gdGhpcy5hMSA9IHRoaXMuYTIgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsb3dzaGVsZjogZnVuY3Rpb24oZnJlcXVlbmN5LCBfZHVtbXlfLCBkYkdhaW4pIHtcclxuICAgICAgICAgICAgZnJlcXVlbmN5IC89ICh0aGlzLnNhbXBsZXJhdGUgKiAwLjUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIEEgPSBNYXRoLnBvdygxMC4wLCBkYkdhaW4gLyA0MCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZnJlcXVlbmN5ID49IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYjAgPSBBKiBBO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iMSA9IHRoaXMuYjIgPSB0aGlzLmExID0gdGhpcy5hMiA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZnJlcXVlbmN5IDw9IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYjAgPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iMSA9IHRoaXMuYjIgPSB0aGlzLmExID0gdGhpcy5hMiA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdzAgPSBNYXRoLlBJICogZnJlcXVlbmN5O1xyXG4gICAgICAgICAgICAgICAgdmFyIFMgPSAxOyAvLyBmaWx0ZXIgc2xvcGUgKDEgaXMgbWF4IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgdmFyIGFscGhhID0gMC41ICogTWF0aC5zaW4odzApICogTWF0aC5zcXJ0KChBICsgMSAvIEEpICogKDEgLyBTIC0gMSkgKyAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBrID0gTWF0aC5jb3ModzApO1xyXG4gICAgICAgICAgICAgICAgdmFyIGsyID0gMiAqIE1hdGguc3FydChBKSAqIGFscGhhO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFQbHVzT25lID0gQSArIDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgYU1pbnVzT25lID0gQSAtIDE7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGlhMCA9IDEgLyAoYVBsdXNPbmUgKyBhTWludXNPbmUgKiBrICsgazIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuYjAgPSAoQSAqIChhUGx1c09uZSAtIGFNaW51c09uZSAqIGsgKyBrMikpICogaWEwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iMSA9ICgyICogQSAqIChhTWludXNPbmUgLSBhUGx1c09uZSAqIGspKSAqIGlhMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYjIgPSAoQSAqIChhUGx1c09uZSAtIGFNaW51c09uZSAqIGsgLSBrMikpICogaWEwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hMSA9ICgtMiAqIChhTWludXNPbmUgKyBhUGx1c09uZSAqIGspKSAqIGlhMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYTIgPSAoYVBsdXNPbmUgKyBhTWludXNPbmUgKiBrIC0gazIpICogaWEwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoaWdoc2hlbGY6IGZ1bmN0aW9uKGZyZXF1ZW5jeSwgX2R1bW15XywgZGJHYWluKSB7XHJcbiAgICAgICAgICAgIGZyZXF1ZW5jeSAvPSAodGhpcy5zYW1wbGVyYXRlICogMC41KTtcclxuXHJcbiAgICAgICAgICAgIHZhciBBID0gTWF0aC5wb3coMTAuMCwgZGJHYWluIC8gNDApO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZyZXF1ZW5jeSA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmIwID0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYjEgPSB0aGlzLmIyID0gdGhpcy5hMSA9IHRoaXMuYTIgPSAwO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZyZXF1ZW5jeSA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmIwID0gQSAqIEE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmIxID0gdGhpcy5iMiA9IHRoaXMuYTEgPSB0aGlzLmEyID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciB3MCA9IE1hdGguUEkgKiBmcmVxdWVuY3k7XHJcbiAgICAgICAgICAgICAgICB2YXIgUyA9IDE7IC8vIGZpbHRlciBzbG9wZSAoMSBpcyBtYXggdmFsdWUpXHJcbiAgICAgICAgICAgICAgICB2YXIgYWxwaGEgPSAwLjUgKiBNYXRoLnNpbih3MCkgKiBNYXRoLnNxcnQoKEEgKyAxIC8gQSkgKiAoMSAvIFMgLSAxKSArIDIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGsgPSBNYXRoLmNvcyh3MCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgazIgPSAyICogTWF0aC5zcXJ0KEEpICogYWxwaGE7XHJcbiAgICAgICAgICAgICAgICB2YXIgYVBsdXNPbmUgPSBBICsgMTtcclxuICAgICAgICAgICAgICAgIHZhciBhTWludXNPbmUgPSBBIC0gMTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaWEwID0gMSAvIChhUGx1c09uZSAtIGFNaW51c09uZSAqIGsgKyBrMik7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5iMCA9IChBICogKGFQbHVzT25lICsgYU1pbnVzT25lICogayArIGsyKSkgKiBpYTA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmIxID0gKC0yICogQSAqIChhTWludXNPbmUgKyBhUGx1c09uZSAqIGspKSAqIGlhMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYjIgPSAoQSAqIChhUGx1c09uZSArIGFNaW51c09uZSAqIGsgLSBrMikpICogaWEwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hMSA9ICgyICogKGFNaW51c09uZSAtIGFQbHVzT25lICogaykpICogaWEwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hMiA9IChhUGx1c09uZSAtIGFNaW51c09uZSAqIGsgLSBrMikgKiBpYTA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHBlYWtpbmc6IGZ1bmN0aW9uKGZyZXF1ZW5jeSwgUSwgZGJHYWluKSB7XHJcbiAgICAgICAgICAgIGZyZXF1ZW5jeSAvPSAodGhpcy5zYW1wbGVyYXRlICogMC41KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmcmVxdWVuY3kgPiAwICYmIGZyZXF1ZW5jeSA8IDEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBBID0gTWF0aC5wb3coMTAuMCwgZGJHYWluIC8gNDApO1xyXG4gICAgICAgICAgICAgICAgaWYgKFEgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHcwID0gTWF0aC5QSSAqIGZyZXF1ZW5jeTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWxwaGEgPSBNYXRoLnNpbih3MCkgLyAoMiAqIFEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrID0gTWF0aC5jb3ModzApO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpYTAgPSAxIC8gKDEgKyBhbHBoYSAvIEEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmIwID0gKDEgKyBhbHBoYSAqIEEpICogaWEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYjEgPSAoLTIgKiBrKSAqIGlhMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmIyID0gKDEgLSBhbHBoYSAqIEEpICogaWEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYTEgPSB0aGlzLmIxOyAvLyAoLTIgKiBrKSAqIGlhMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmEyID0gKDEgLSBhbHBoYSAvIEEpICogaWEwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmIwID0gQSAqIEE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iMSA9IHRoaXMuYjIgPSB0aGlzLmExID0gdGhpcy5hMiA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmIwID0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYjEgPSB0aGlzLmIyID0gdGhpcy5hMSA9IHRoaXMuYTIgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBub3RjaDogZnVuY3Rpb24oZnJlcXVlbmN5LCBRKSB7XHJcbiAgICAgICAgICAgIGZyZXF1ZW5jeSAvPSAodGhpcy5zYW1wbGVyYXRlICogMC41KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmcmVxdWVuY3kgPiAwICYmIGZyZXF1ZW5jeSA8IDEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChRID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3MCA9IE1hdGguUEkgKiBmcmVxdWVuY3k7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFscGhhID0gTWF0aC5zaW4odzApIC8gKDIgKiBRKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgayA9IE1hdGguY29zKHcwKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWEwID0gMSAvICgxICsgYWxwaGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmIwID0gaWEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYjEgPSAoLTIgKiBrKSAqIGlhMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmIyID0gaWEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYTEgPSB0aGlzLmIxOyAvLyAoLTIgKiBrKSAqIGlhMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmEyID0gKDEgLSBhbHBoYSkgKiBpYTA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYjAgPSB0aGlzLmIxID0gdGhpcy5iMiA9IHRoaXMuYTEgPSB0aGlzLmEyID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYjAgPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iMSA9IHRoaXMuYjIgPSB0aGlzLmExID0gdGhpcy5hMiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGFsbHBhc3M6IGZ1bmN0aW9uKGZyZXF1ZW5jeSwgUSkge1xyXG4gICAgICAgICAgICBmcmVxdWVuY3kgLz0gKHRoaXMuc2FtcGxlcmF0ZSAqIDAuNSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZnJlcXVlbmN5ID4gMCAmJiBmcmVxdWVuY3kgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoUSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdzAgPSBNYXRoLlBJICogZnJlcXVlbmN5O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhbHBoYSA9IE1hdGguc2luKHcwKSAvICgyICogUSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGsgPSBNYXRoLmNvcyh3MCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlhMCA9IDEgLyAoMSArIGFscGhhKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iMCA9ICgxIC0gYWxwaGEpICogaWEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYjEgPSAoLTIgKiBrKSAqIGlhMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmIyID0gKDEgKyBhbHBoYSkgKiBpYTA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hMSA9IHRoaXMuYjE7IC8vICgtMiAqIGspICogaWEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYTIgPSB0aGlzLmIwOyAvLyAoMSAtIGFscGhhKSAqIGlhMDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5iMCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYjEgPSB0aGlzLmIyID0gdGhpcy5hMSA9IHRoaXMuYTIgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iMCA9IDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmIxID0gdGhpcy5iMiA9IHRoaXMuYTEgPSB0aGlzLmEyID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgc2V0UGFyYW1zLmxwZiA9IHNldFBhcmFtcy5sb3dwYXNzO1xyXG4gICAgc2V0UGFyYW1zLmhwZiA9IHNldFBhcmFtcy5oaWdocGFzcztcclxuICAgIHNldFBhcmFtcy5icGYgPSBzZXRQYXJhbXMuYmFuZHBhc3M7XHJcbiAgICBzZXRQYXJhbXMuYmVmID0gc2V0UGFyYW1zLm5vdGNoO1xyXG4gICAgc2V0UGFyYW1zLmJyZiA9IHNldFBhcmFtcy5ub3RjaDtcclxuICAgIHNldFBhcmFtcy5hcGYgPSBzZXRQYXJhbXMuYWxscGFzcztcclxuXHJcbiAgICBULm1vZHVsZXMuQmlxdWFkID0gQmlxdWFkO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGZ1bmN0aW9uIENob3J1cyhzYW1wbGVyYXRlKSB7XHJcbiAgICAgICAgdGhpcy5zYW1wbGVyYXRlID0gc2FtcGxlcmF0ZTtcclxuXHJcbiAgICAgICAgdmFyIGJpdHMgPSBNYXRoLnJvdW5kKE1hdGgubG9nKHNhbXBsZXJhdGUgKiAwLjEpICogTWF0aC5MT0cyRSk7XHJcbiAgICAgICAgdGhpcy5idWZmZXJzaXplID0gMSA8PCBiaXRzO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyTCA9IG5ldyBULmZuLlNpZ25hbEFycmF5KHRoaXMuYnVmZmVyc2l6ZSArIDEpO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyUiA9IG5ldyBULmZuLlNpZ25hbEFycmF5KHRoaXMuYnVmZmVyc2l6ZSArIDEpO1xyXG5cclxuICAgICAgICB0aGlzLndhdmUgICAgICAgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX3dhdmUgICAgICA9IG51bGw7XHJcbiAgICAgICAgdGhpcy53cml0ZUluZGV4ID0gdGhpcy5idWZmZXJzaXplID4+IDE7XHJcbiAgICAgICAgdGhpcy5yZWFkSW5kZXggID0gMDtcclxuICAgICAgICB0aGlzLmRlbGF5VGltZSAgPSAyMDtcclxuICAgICAgICB0aGlzLnJhdGUgICAgICAgPSA0O1xyXG4gICAgICAgIHRoaXMuZGVwdGggICAgICA9IDIwO1xyXG4gICAgICAgIHRoaXMuZmVlZGJhY2sgICA9IDAuMjtcclxuICAgICAgICB0aGlzLndldCAgICAgICAgPSAwLjU7XHJcbiAgICAgICAgdGhpcy5waGFzZSAgICAgID0gMDtcclxuICAgICAgICB0aGlzLnBoYXNlSW5jciAgPSAwO1xyXG4gICAgICAgIHRoaXMucGhhc2VTdGVwICA9IDQ7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0V2F2ZVR5cGUoXCJzaW5cIik7XHJcbiAgICAgICAgdGhpcy5zZXREZWxheVRpbWUodGhpcy5kZWxheVRpbWUpO1xyXG4gICAgICAgIHRoaXMuc2V0UmF0ZSh0aGlzLnJhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciAkID0gQ2hvcnVzLnByb3RvdHlwZTtcclxuXHJcbiAgICB2YXIgd2F2ZXMgPSBbXTtcclxuICAgIHdhdmVzWzBdID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB3YXZlID0gbmV3IEZsb2F0MzJBcnJheSg1MTIpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTEyOyArK2kpIHtcclxuICAgICAgICAgICAgd2F2ZVtpXSA9IE1hdGguc2luKDIgKiBNYXRoLlBJICogKGkvNTEyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3YXZlO1xyXG4gICAgfSkoKTtcclxuICAgIHdhdmVzWzFdID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB3YXZlID0gbmV3IEZsb2F0MzJBcnJheSg1MTIpO1xyXG4gICAgICAgIGZvciAodmFyIHgsIGkgPSAwOyBpIDwgNTEyOyArK2kpIHtcclxuICAgICAgICAgICAgeCA9IChpIC8gNTEyKSAtIDAuMjU7XHJcbiAgICAgICAgICAgIHdhdmVbaV0gPSAxLjAgLSA0LjAgKiBNYXRoLmFicyhNYXRoLnJvdW5kKHgpIC0geCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB3YXZlO1xyXG4gICAgfSkoKTtcclxuXHJcbiAgICAkLnNldFdhdmVUeXBlID0gZnVuY3Rpb24od2F2ZVR5cGUpIHtcclxuICAgICAgICBpZiAod2F2ZVR5cGUgPT09IFwic2luXCIpIHtcclxuICAgICAgICAgICAgdGhpcy53YXZlID0gd2F2ZVR5cGU7XHJcbiAgICAgICAgICAgIHRoaXMuX3dhdmUgPSB3YXZlc1swXTtcclxuICAgICAgICB9IGVsc2UgaWYgKHdhdmVUeXBlID09PSBcInRyaVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMud2F2ZSA9IHdhdmVUeXBlO1xyXG4gICAgICAgICAgICB0aGlzLl93YXZlID0gd2F2ZXNbMV07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkLnNldERlbGF5VGltZSA9IGZ1bmN0aW9uKGRlbGF5VGltZSkge1xyXG4gICAgICAgIHRoaXMuZGVsYXlUaW1lID0gZGVsYXlUaW1lO1xyXG4gICAgICAgIHZhciByZWFkSW5kZXggPSB0aGlzLndyaXRlSW5kZXggLSAoKGRlbGF5VGltZSAqIHRoaXMuc2FtcGxlcmF0ZSAqIDAuMDAxKXwwKTtcclxuICAgICAgICB3aGlsZSAocmVhZEluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICByZWFkSW5kZXggKz0gdGhpcy5idWZmZXJzaXplO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlYWRJbmRleCA9IHJlYWRJbmRleDtcclxuICAgIH07XHJcblxyXG4gICAgJC5zZXRSYXRlID0gZnVuY3Rpb24ocmF0ZSkge1xyXG4gICAgICAgIHRoaXMucmF0ZSAgICAgID0gcmF0ZTtcclxuICAgICAgICB0aGlzLnBoYXNlSW5jciA9ICg1MTIgKiB0aGlzLnJhdGUgLyB0aGlzLnNhbXBsZXJhdGUpICogdGhpcy5waGFzZVN0ZXA7XHJcbiAgICB9O1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKGNlbGxMLCBjZWxsUikge1xyXG4gICAgICAgIHZhciBidWZmZXJMID0gdGhpcy5idWZmZXJMO1xyXG4gICAgICAgIHZhciBidWZmZXJSID0gdGhpcy5idWZmZXJSO1xyXG4gICAgICAgIHZhciBzaXplID0gdGhpcy5idWZmZXJzaXplO1xyXG4gICAgICAgIHZhciBtYXNrID0gc2l6ZSAtIDE7XHJcbiAgICAgICAgdmFyIHdhdmUgICAgICAgPSB0aGlzLl93YXZlO1xyXG4gICAgICAgIHZhciBwaGFzZSAgICAgID0gdGhpcy5waGFzZTtcclxuICAgICAgICB2YXIgcGhhc2VJbmNyICA9IHRoaXMucGhhc2VJbmNyO1xyXG4gICAgICAgIHZhciB3cml0ZUluZGV4ID0gdGhpcy53cml0ZUluZGV4O1xyXG4gICAgICAgIHZhciByZWFkSW5kZXggID0gdGhpcy5yZWFkSW5kZXg7XHJcbiAgICAgICAgdmFyIGRlcHRoICAgICAgPSB0aGlzLmRlcHRoO1xyXG4gICAgICAgIHZhciBmZWVkYmFjayAgID0gdGhpcy5mZWVkYmFjaztcclxuICAgICAgICB2YXIgeCwgaW5kZXgsIG1vZDtcclxuICAgICAgICB2YXIgd2V0ID0gdGhpcy53ZXQsIGRyeSA9IDEgLSB3ZXQ7XHJcbiAgICAgICAgdmFyIGksIGltYXggPSBjZWxsTC5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGosIGptYXggPSB0aGlzLnBoYXNlU3RlcDtcclxuXHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICkge1xyXG4gICAgICAgICAgICBtb2QgPSB3YXZlW3BoYXNlfDBdICogZGVwdGg7XHJcbiAgICAgICAgICAgIHBoYXNlICs9IHBoYXNlSW5jcjtcclxuICAgICAgICAgICAgd2hpbGUgKHBoYXNlID4gNTEyKSB7XHJcbiAgICAgICAgICAgICAgICBwaGFzZSAtPSA1MTI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGptYXg7ICsraiwgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IChyZWFkSW5kZXggKyBzaXplICsgbW9kKSAmIG1hc2s7XHJcblxyXG4gICAgICAgICAgICAgICAgeCA9IChidWZmZXJMW2luZGV4XSArIGJ1ZmZlckxbaW5kZXggKyAxXSkgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJMW3dyaXRlSW5kZXhdID0gY2VsbExbaV0gLSB4ICogZmVlZGJhY2s7XHJcbiAgICAgICAgICAgICAgICBjZWxsTFtpXSA9IChjZWxsTFtpXSAqIGRyeSkgKyAoeCAqIHdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgeCA9IChidWZmZXJSW2luZGV4XSArIGJ1ZmZlclJbaW5kZXggKyAxXSkgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJSW3dyaXRlSW5kZXhdID0gY2VsbFJbaV0gLSB4ICogZmVlZGJhY2s7XHJcbiAgICAgICAgICAgICAgICBjZWxsUltpXSA9IChjZWxsUltpXSAqIGRyeSkgKyAoeCAqIHdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgd3JpdGVJbmRleCA9ICh3cml0ZUluZGV4ICsgMSkgJiBtYXNrO1xyXG4gICAgICAgICAgICAgICAgcmVhZEluZGV4ICA9IChyZWFkSW5kZXggICsgMSkgJiBtYXNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnBoYXNlID0gcGhhc2U7XHJcbiAgICAgICAgdGhpcy53cml0ZUluZGV4ID0gd3JpdGVJbmRleDtcclxuICAgICAgICB0aGlzLnJlYWRJbmRleCAgPSByZWFkSW5kZXg7XHJcbiAgICB9O1xyXG5cclxuICAgIFQubW9kdWxlcy5DaG9ydXMgPSBDaG9ydXM7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIE1heFByZURlbGF5RnJhbWVzICAgICA9IDEwMjQ7XHJcbiAgICB2YXIgTWF4UHJlRGVsYXlGcmFtZXNNYXNrID0gTWF4UHJlRGVsYXlGcmFtZXMgLSAxO1xyXG4gICAgdmFyIERlZmF1bHRQcmVEZWxheUZyYW1lcyA9IDI1NjtcclxuICAgIHZhciBrU3BhY2luZ0RiID0gNTtcclxuXHJcbiAgICBmdW5jdGlvbiBDb21wcmVzc29yKHNhbXBsZXJhdGUsIGNoYW5uZWxzKSB7XHJcbiAgICAgICAgdGhpcy5zYW1wbGVyYXRlID0gc2FtcGxlcmF0ZTtcclxuICAgICAgICB0aGlzLmNoYW5uZWxzID0gY2hhbm5lbHM7XHJcblxyXG4gICAgICAgIHRoaXMubGFzdFByZURlbGF5RnJhbWVzID0gMDtcclxuICAgICAgICB0aGlzLnByZURlbGF5UmVhZEluZGV4ICA9IDA7XHJcbiAgICAgICAgdGhpcy5wcmVEZWxheVdyaXRlSW5kZXggPSBEZWZhdWx0UHJlRGVsYXlGcmFtZXM7XHJcbiAgICAgICAgdGhpcy5yYXRpbyAgICAgICA9IC0xO1xyXG4gICAgICAgIHRoaXMuc2xvcGUgICAgICAgPSAtMTtcclxuICAgICAgICB0aGlzLmxpbmVhclRocmVzaG9sZCA9IC0xO1xyXG4gICAgICAgIHRoaXMuZGJUaHJlc2hvbGQgPSAtMTtcclxuICAgICAgICB0aGlzLmRiS25lZSAgICAgID0gLTE7XHJcbiAgICAgICAgdGhpcy5rbmVlVGhyZXNob2xkICAgID0gLTE7XHJcbiAgICAgICAgdGhpcy5rbmVlVGhyZXNob2xkRGIgID0gLTE7XHJcbiAgICAgICAgdGhpcy55a25lZVRocmVzaG9sZERiID0gLTE7XHJcbiAgICAgICAgdGhpcy5LID0gLTE7XHJcblxyXG4gICAgICAgIHRoaXMuYXR0YWNrVGltZSAgPSAwLjAwMztcclxuICAgICAgICB0aGlzLnJlbGVhc2VUaW1lID0gMC4yNTtcclxuXHJcbiAgICAgICAgdGhpcy5wcmVEZWxheVRpbWUgPSAwLjAwNjtcclxuICAgICAgICB0aGlzLmRiUG9zdEdhaW4gICA9IDA7XHJcbiAgICAgICAgdGhpcy5lZmZlY3RCbGVuZCAgPSAxO1xyXG4gICAgICAgIHRoaXMucmVsZWFzZVpvbmUxID0gMC4wOTtcclxuICAgICAgICB0aGlzLnJlbGVhc2Vab25lMiA9IDAuMTY7XHJcbiAgICAgICAgdGhpcy5yZWxlYXNlWm9uZTMgPSAwLjQyO1xyXG4gICAgICAgIHRoaXMucmVsZWFzZVpvbmU0ID0gMC45ODtcclxuXHJcbiAgICAgICAgdGhpcy5kZXRlY3RvckF2ZXJhZ2UgPSAwO1xyXG4gICAgICAgIHRoaXMuY29tcHJlc3NvckdhaW4gID0gMTtcclxuICAgICAgICB0aGlzLm1ldGVyaW5nR2FpbiAgICA9IDE7XHJcblxyXG4gICAgICAgIHRoaXMuZGVsYXlCdWZmZXJMID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkoTWF4UHJlRGVsYXlGcmFtZXMpO1xyXG4gICAgICAgIGlmIChjaGFubmVscyA9PT0gMikge1xyXG4gICAgICAgICAgICB0aGlzLmRlbGF5QnVmZmVyUiA9IG5ldyBULmZuLlNpZ25hbEFycmF5KE1heFByZURlbGF5RnJhbWVzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRlbGF5QnVmZmVyUiA9IHRoaXMuZGVsYXlCdWZmZXJMO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByZURlbGF5VGltZSA9IDY7XHJcbiAgICAgICAgdGhpcy5wcmVEZWxheVJlYWRJbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5wcmVEZWxheVdyaXRlSW5kZXggPSBEZWZhdWx0UHJlRGVsYXlGcmFtZXM7XHJcbiAgICAgICAgdGhpcy5tYXhBdHRhY2tDb21wcmVzc2lvbkRpZmZEYiA9IC0xO1xyXG4gICAgICAgIHRoaXMubWV0ZXJpbmdSZWxlYXNlSyA9IDEgLSBNYXRoLmV4cCgtMSAvICh0aGlzLnNhbXBsZXJhdGUgKiAwLjMyNSkpO1xyXG5cclxuICAgICAgICB0aGlzLnNldEF0dGFja1RpbWUodGhpcy5hdHRhY2tUaW1lKTtcclxuICAgICAgICB0aGlzLnNldFJlbGVhc2VUaW1lKHRoaXMucmVsZWFzZVRpbWUpO1xyXG4gICAgICAgIHRoaXMuc2V0UHJlRGVsYXlUaW1lKHRoaXMucHJlRGVsYXlUaW1lKTtcclxuICAgICAgICB0aGlzLnNldFBhcmFtcygtMjQsIDMwLCAxMik7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyICQgPSBDb21wcmVzc29yLnByb3RvdHlwZTtcclxuXHJcbiAgICAkLmNsb25lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIG5ld19pbnN0YW5jZSA9IG5ldyBDb21wcmVzc29yKHRoaXMuc2FtcGxlcmF0ZSwgdGhpcy5jaGFubmVscyk7XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLnNldEF0dGFja1RpbWUodGhpcy5hdHRhY2tUaW1lKTtcclxuICAgICAgICBuZXdfaW5zdGFuY2Uuc2V0UmVsZWFzZVRpbWUodGhpcy5yZWxlYXNlVGltZSk7XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLnNldFByZURlbGF5VGltZSh0aGlzLnByZURlbGF5VGltZSk7XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLnNldFBhcmFtcyh0aGlzLmRiVGhyZXNob2xkLCB0aGlzLmRiS25lZSwgdGhpcy5yYXRpbyk7XHJcbiAgICAgICAgcmV0dXJuIG5ld19pbnN0YW5jZTtcclxuICAgIH07XHJcblxyXG4gICAgJC5zZXRBdHRhY2tUaW1lID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICB0aGlzLmF0dGFja1RpbWUgPSBNYXRoLm1heCgwLjAwMSwgdmFsdWUpO1xyXG4gICAgICAgIHRoaXMuX2F0dGFja0ZyYW1lcyA9IHRoaXMuYXR0YWNrVGltZSAqIHRoaXMuc2FtcGxlcmF0ZTtcclxuICAgIH07XHJcblxyXG4gICAgJC5zZXRSZWxlYXNlVGltZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5yZWxlYXNlVGltZSA9IE1hdGgubWF4KDAuMDAxLCB2YWx1ZSk7XHJcbiAgICAgICAgdmFyIHJlbGVhc2VGcmFtZXMgPSB0aGlzLnJlbGVhc2VUaW1lICogdGhpcy5zYW1wbGVyYXRlO1xyXG5cclxuICAgICAgICB2YXIgc2F0UmVsZWFzZVRpbWUgPSAwLjAwMjU7XHJcbiAgICAgICAgdGhpcy5fc2F0UmVsZWFzZUZyYW1lcyA9IHNhdFJlbGVhc2VUaW1lICogdGhpcy5zYW1wbGVyYXRlO1xyXG5cclxuICAgICAgICB2YXIgeTEgPSByZWxlYXNlRnJhbWVzICogdGhpcy5yZWxlYXNlWm9uZTE7XHJcbiAgICAgICAgdmFyIHkyID0gcmVsZWFzZUZyYW1lcyAqIHRoaXMucmVsZWFzZVpvbmUyO1xyXG4gICAgICAgIHZhciB5MyA9IHJlbGVhc2VGcmFtZXMgKiB0aGlzLnJlbGVhc2Vab25lMztcclxuICAgICAgICB2YXIgeTQgPSByZWxlYXNlRnJhbWVzICogdGhpcy5yZWxlYXNlWm9uZTQ7XHJcblxyXG4gICAgICAgIHRoaXMuX2tBID0gMC45OTk5OTk5OTk5OTk5OTk4KnkxICsgMS44NDMyMjE5Njg0MzIzOTIzZS0xNip5MiAtIDEuOTM3MzM5NDM1MTY3NjQyM2UtMTYqeTMgKyA4LjgyNDUxNjAxMTgxNjI0NWUtMTgqeTQ7XHJcbiAgICAgICAgdGhpcy5fa0IgPSAtMS41Nzg4MzIwMzUyODQ1ODg4KnkxICsgMi4zMzA1ODM3MDMyMDc0Mjg2KnkyIC0gMC45MTQxMTk0MjA0ODQwNDI5KnkzICsgMC4xNjIzNjc3NTI1NjEyMDMyKnk0O1xyXG4gICAgICAgIHRoaXMuX2tDID0gMC41MzM0MTQyODY5MTA2NDI0KnkxIC0gMS4yNzI3MzY3ODkyMTM2MzEqeTIgKyAwLjkyNTg4NTYwNDIyMDc1MTIqeTMgLSAwLjE4NjU2MzEwMTkxNzc2MjI2Knk0O1xyXG4gICAgICAgIHRoaXMuX2tEID0gMC4wODc4MzQ2MzEzODIwNzIzNCp5MSAtIDAuMTY5NDE2Mjk2NzkyNTYyMip5MiArIDAuMDg1ODgwNTc5NTE1OTUyNzIqeTMgLSAwLjAwNDI5ODkxNDEwNTQ2MjgzKnk0O1xyXG4gICAgICAgIHRoaXMuX2tFID0gLTAuMDQyNDE2ODgzMDA4MTIzMDc0KnkxICsgMC4xMTE1NjkzODI3OTg3NjAyKnkyIC0gMC4wOTc2NDY3NjMyNTI2NTg3Mip5MyArIDAuMDI4NDk0MjYzNDYyMDIxNTc2Knk0O1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnNldFByZURlbGF5VGltZSA9IGZ1bmN0aW9uKHByZURlbGF5VGltZSkge1xyXG4gICAgICAgIHRoaXMucHJlRGVsYXlUaW1lID0gcHJlRGVsYXlUaW1lO1xyXG4gICAgICAgIHZhciBwcmVEZWxheUZyYW1lcyA9IHByZURlbGF5VGltZSAqIHRoaXMuc2FtcGxlcmF0ZTtcclxuICAgICAgICBpZiAocHJlRGVsYXlGcmFtZXMgPiBNYXhQcmVEZWxheUZyYW1lcyAtIDEpIHtcclxuICAgICAgICAgICAgcHJlRGVsYXlGcmFtZXMgPSBNYXhQcmVEZWxheUZyYW1lcyAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmxhc3RQcmVEZWxheUZyYW1lcyAhPT0gcHJlRGVsYXlGcmFtZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5sYXN0UHJlRGVsYXlGcmFtZXMgPSBwcmVEZWxheUZyYW1lcztcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSB0aGlzLmRlbGF5QnVmZmVyTC5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsYXlCdWZmZXJMW2ldID0gdGhpcy5kZWxheUJ1ZmZlclJbaV0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucHJlRGVsYXlSZWFkSW5kZXggPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnByZURlbGF5V3JpdGVJbmRleCA9IHByZURlbGF5RnJhbWVzO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJC5zZXRQYXJhbXMgPSBmdW5jdGlvbihkYlRocmVzaG9sZCwgZGJLbmVlLCByYXRpbykge1xyXG4gICAgICAgIHRoaXMuX2sgPSB0aGlzLnVwZGF0ZVN0YXRpY0N1cnZlUGFyYW1ldGVycyhkYlRocmVzaG9sZCwgZGJLbmVlLCByYXRpbyk7XHJcblxyXG4gICAgICAgIHZhciBmdWxsUmFuZ2VHYWluID0gdGhpcy5zYXR1cmF0ZSgxLCB0aGlzLl9rKTtcclxuICAgICAgICB2YXIgZnVsbFJhbmdlTWFrZXVwR2FpbiA9IDEgLyBmdWxsUmFuZ2VHYWluO1xyXG5cclxuICAgICAgICBmdWxsUmFuZ2VNYWtldXBHYWluID0gTWF0aC5wb3coZnVsbFJhbmdlTWFrZXVwR2FpbiwgMC42KTtcclxuXHJcbiAgICAgICAgdGhpcy5fbWFzdGVyTGluZWFyR2FpbiA9IE1hdGgucG93KDEwLCAwLjA1ICogdGhpcy5kYlBvc3RHYWluKSAqIGZ1bGxSYW5nZU1ha2V1cEdhaW47XHJcbiAgICB9O1xyXG5cclxuICAgICQua25lZUN1cnZlID0gZnVuY3Rpb24oeCwgaykge1xyXG4gICAgICAgIGlmICh4IDwgdGhpcy5saW5lYXJUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmxpbmVhclRocmVzaG9sZCArICgxIC0gTWF0aC5leHAoLWsgKiAoeCAtIHRoaXMubGluZWFyVGhyZXNob2xkKSkpIC8gaztcclxuICAgIH07XHJcblxyXG4gICAgJC5zYXR1cmF0ZSA9IGZ1bmN0aW9uKHgsIGspIHtcclxuICAgICAgICB2YXIgeTtcclxuICAgICAgICBpZiAoeCA8IHRoaXMua25lZVRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICB5ID0gdGhpcy5rbmVlQ3VydmUoeCwgayk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHhEYiA9ICh4KSA/IDIwICogTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRSA6IC0xMDAwO1xyXG4gICAgICAgICAgICB2YXIgeURiID0gdGhpcy55a25lZVRocmVzaG9sZERiICsgdGhpcy5zbG9wZSAqICh4RGIgLSB0aGlzLmtuZWVUaHJlc2hvbGREYik7XHJcbiAgICAgICAgICAgIHkgPSBNYXRoLnBvdygxMCwgMC4wNSAqIHlEYik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB5O1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnNsb3BlQXQgPSBmdW5jdGlvbih4LCBrKSB7XHJcbiAgICAgICAgaWYgKHggPCB0aGlzLmxpbmVhclRocmVzaG9sZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB4MiAgID0geCAqIDEuMDAxO1xyXG4gICAgICAgIHZhciB4RGIgID0gKHggKSA/IDIwICogTWF0aC5sb2coeCApICogTWF0aC5MT0cxMEUgOiAtMTAwMDtcclxuICAgICAgICB2YXIgeDJEYiA9ICh4MikgPyAyMCAqIE1hdGgubG9nKHgyKSAqIE1hdGguTE9HMTBFIDogLTEwMDA7XHJcbiAgICAgICAgdmFyIHkgID0gdGhpcy5rbmVlQ3VydmUoeCAsIGspO1xyXG4gICAgICAgIHZhciB5MiA9IHRoaXMua25lZUN1cnZlKHgyLCBrKTtcclxuICAgICAgICB2YXIgeURiICA9ICh5ICkgPyAyMCAqIE1hdGgubG9nKHkgKSAqIE1hdGguTE9HMTBFIDogLTEwMDA7XHJcbiAgICAgICAgdmFyIHkyRGIgPSAoeTIpID8gMjAgKiBNYXRoLmxvZyh5MikgKiBNYXRoLkxPRzEwRSA6IC0xMDAwO1xyXG5cclxuICAgICAgICByZXR1cm4gKHkyRGIgLSB5RGIpIC8gKHgyRGIgLSB4RGIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmtBdFNsb3BlID0gZnVuY3Rpb24oZGVzaXJlZFNsb3BlKSB7XHJcbiAgICAgICAgdmFyIHhEYiA9IHRoaXMuZGJUaHJlc2hvbGQgKyB0aGlzLmRiS25lZTtcclxuICAgICAgICB2YXIgeCAgID0gTWF0aC5wb3coMTAsIDAuMDUgKiB4RGIpO1xyXG5cclxuICAgICAgICB2YXIgbWluSyA9IDAuMTtcclxuICAgICAgICB2YXIgbWF4SyA9IDEwMDAwO1xyXG4gICAgICAgIHZhciBrID0gNTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNTsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciBzbG9wZSA9IHRoaXMuc2xvcGVBdCh4LCBrKTtcclxuICAgICAgICAgICAgaWYgKHNsb3BlIDwgZGVzaXJlZFNsb3BlKSB7XHJcbiAgICAgICAgICAgICAgICBtYXhLID0gaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1pbksgPSBrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGsgPSBNYXRoLnNxcnQobWluSyAqIG1heEspO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaztcclxuICAgIH07XHJcblxyXG4gICAgJC51cGRhdGVTdGF0aWNDdXJ2ZVBhcmFtZXRlcnMgPSBmdW5jdGlvbihkYlRocmVzaG9sZCwgZGJLbmVlLCByYXRpbykge1xyXG4gICAgICAgIHRoaXMuZGJUaHJlc2hvbGQgICAgID0gZGJUaHJlc2hvbGQ7XHJcbiAgICAgICAgdGhpcy5saW5lYXJUaHJlc2hvbGQgPSBNYXRoLnBvdygxMCwgMC4wNSAqIGRiVGhyZXNob2xkKTtcclxuICAgICAgICB0aGlzLmRiS25lZSAgICAgICAgICA9IGRiS25lZTtcclxuXHJcbiAgICAgICAgdGhpcy5yYXRpbyA9IHJhdGlvO1xyXG4gICAgICAgIHRoaXMuc2xvcGUgPSAxIC8gdGhpcy5yYXRpbztcclxuXHJcbiAgICAgICAgdGhpcy5rbmVlVGhyZXNob2xkRGIgPSBkYlRocmVzaG9sZCArIGRiS25lZTtcclxuICAgICAgICB0aGlzLmtuZWVUaHJlc2hvbGQgICA9IE1hdGgucG93KDEwLCAwLjA1ICogdGhpcy5rbmVlVGhyZXNob2xkRGIpO1xyXG5cclxuICAgICAgICB2YXIgayA9IHRoaXMua0F0U2xvcGUoMSAvIHRoaXMucmF0aW8pO1xyXG4gICAgICAgIHZhciB5ID0gdGhpcy5rbmVlQ3VydmUodGhpcy5rbmVlVGhyZXNob2xkLCBrKTtcclxuICAgICAgICB0aGlzLnlrbmVlVGhyZXNob2xkRGIgPSAoeSkgPyAyMCAqIE1hdGgubG9nKHkpICogTWF0aC5MT0cxMEUgOiAtMTAwMDtcclxuXHJcbiAgICAgICAgdGhpcy5fayA9IGs7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9rO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbihjZWxsTCwgY2VsbFIpIHtcclxuICAgICAgICB2YXIgZHJ5TWl4ID0gMSAtIHRoaXMuZWZmZWN0QmxlbmQ7XHJcbiAgICAgICAgdmFyIHdldE1peCA9IHRoaXMuZWZmZWN0QmxlbmQ7XHJcbiAgICAgICAgdmFyIGsgPSB0aGlzLl9rO1xyXG4gICAgICAgIHZhciBtYXN0ZXJMaW5lYXJHYWluID0gdGhpcy5fbWFzdGVyTGluZWFyR2FpbjtcclxuICAgICAgICB2YXIgc2F0UmVsZWFzZUZyYW1lcyA9IHRoaXMuX3NhdFJlbGVhc2VGcmFtZXM7XHJcbiAgICAgICAgdmFyIGtBID0gdGhpcy5fa0E7XHJcbiAgICAgICAgdmFyIGtCID0gdGhpcy5fa0I7XHJcbiAgICAgICAgdmFyIGtDID0gdGhpcy5fa0M7XHJcbiAgICAgICAgdmFyIGtEID0gdGhpcy5fa0Q7XHJcbiAgICAgICAgdmFyIGtFID0gdGhpcy5fa0U7XHJcbiAgICAgICAgdmFyIG5EaXZpc2lvbkZyYW1lcyA9IDY0O1xyXG4gICAgICAgIHZhciBuRGl2aXNpb25zID0gY2VsbEwubGVuZ3RoIC8gbkRpdmlzaW9uRnJhbWVzO1xyXG4gICAgICAgIHZhciBmcmFtZUluZGV4ID0gMDtcclxuICAgICAgICB2YXIgZGVzaXJlZEdhaW4gPSB0aGlzLmRldGVjdG9yQXZlcmFnZTtcclxuICAgICAgICB2YXIgY29tcHJlc3NvckdhaW4gPSB0aGlzLmNvbXByZXNzb3JHYWluO1xyXG4gICAgICAgIHZhciBtYXhBdHRhY2tDb21wcmVzc2lvbkRpZmZEYiA9IHRoaXMubWF4QXR0YWNrQ29tcHJlc3Npb25EaWZmRGI7XHJcbiAgICAgICAgdmFyIGlfYXR0YWNrRnJhbWVzID0gMSAvIHRoaXMuX2F0dGFja0ZyYW1lcztcclxuICAgICAgICB2YXIgcHJlRGVsYXlSZWFkSW5kZXggPSB0aGlzLnByZURlbGF5UmVhZEluZGV4O1xyXG4gICAgICAgIHZhciBwcmVEZWxheVdyaXRlSW5kZXggPSB0aGlzLnByZURlbGF5V3JpdGVJbmRleDtcclxuICAgICAgICB2YXIgZGV0ZWN0b3JBdmVyYWdlID0gdGhpcy5kZXRlY3RvckF2ZXJhZ2U7XHJcbiAgICAgICAgdmFyIGRlbGF5QnVmZmVyTCA9IHRoaXMuZGVsYXlCdWZmZXJMO1xyXG4gICAgICAgIHZhciBkZWxheUJ1ZmZlclIgPSB0aGlzLmRlbGF5QnVmZmVyUjtcclxuICAgICAgICB2YXIgbWV0ZXJpbmdHYWluID0gdGhpcy5tZXRlcmluZ0dhaW47XHJcbiAgICAgICAgdmFyIG1ldGVyaW5nUmVsZWFzZUsgPSB0aGlzLm1ldGVyaW5nUmVsZWFzZUs7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbkRpdmlzaW9uczsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciBzY2FsZWREZXNpcmVkR2FpbiA9IE1hdGguYXNpbihkZXNpcmVkR2FpbikgLyAoMC41ICogTWF0aC5QSSk7XHJcbiAgICAgICAgICAgIHZhciBlbnZlbG9wZVJhdGU7XHJcbiAgICAgICAgICAgIHZhciBpc1JlbGVhc2luZyA9IHNjYWxlZERlc2lyZWRHYWluID4gY29tcHJlc3NvckdhaW47XHJcbiAgICAgICAgICAgIHZhciB4ID0gY29tcHJlc3NvckdhaW4gLyBzY2FsZWREZXNpcmVkR2FpbjtcclxuXHJcbiAgICAgICAgICAgIHZhciBjb21wcmVzc2lvbkRpZmZEYiA9ICh4KSA/IDIwICogTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRSA6IC0xMDAwO1xyXG4gICAgICAgICAgICBpZiAoY29tcHJlc3Npb25EaWZmRGIgPT09IEluZmluaXR5IHx8IGlzTmFOKGNvbXByZXNzaW9uRGlmZkRiKSkge1xyXG4gICAgICAgICAgICAgICAgY29tcHJlc3Npb25EaWZmRGIgPSAtMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGlzUmVsZWFzaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBtYXhBdHRhY2tDb21wcmVzc2lvbkRpZmZEYiA9IC0xO1xyXG5cclxuICAgICAgICAgICAgICAgIHggPSBjb21wcmVzc2lvbkRpZmZEYjtcclxuICAgICAgICAgICAgICAgIGlmICh4IDwgLTEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IDM7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHggPSAwLjI1ICogKHggKyAxMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHgyID0geCAqIHg7XHJcbiAgICAgICAgICAgICAgICB2YXIgeDMgPSB4MiAqIHg7XHJcbiAgICAgICAgICAgICAgICB2YXIgeDQgPSB4MiAqIHgyO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9yZWxlYXNlRnJhbWVzID0ga0EgKyBrQiAqIHggKyBrQyAqIHgyICsga0QgKiB4MyArIGtFICogeDQ7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIF9kYlBlckZyYW1lID0ga1NwYWNpbmdEYiAvIF9yZWxlYXNlRnJhbWVzO1xyXG5cclxuICAgICAgICAgICAgICAgIGVudmVsb3BlUmF0ZSA9IE1hdGgucG93KDEwLCAwLjA1ICogX2RiUGVyRnJhbWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1heEF0dGFja0NvbXByZXNzaW9uRGlmZkRiID09PSAtMSB8fCBtYXhBdHRhY2tDb21wcmVzc2lvbkRpZmZEYiA8IGNvbXByZXNzaW9uRGlmZkRiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4QXR0YWNrQ29tcHJlc3Npb25EaWZmRGIgPSBjb21wcmVzc2lvbkRpZmZEYjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZWZmQXR0ZW5EaWZmRGIgPSBNYXRoLm1heCgwLjUsIG1heEF0dGFja0NvbXByZXNzaW9uRGlmZkRiKTtcclxuXHJcbiAgICAgICAgICAgICAgICB4ID0gMC4yNSAvIGVmZkF0dGVuRGlmZkRiO1xyXG4gICAgICAgICAgICAgICAgZW52ZWxvcGVSYXRlID0gMSAtIE1hdGgucG93KHgsIGlfYXR0YWNrRnJhbWVzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGxvb3BGcmFtZXMgPSBuRGl2aXNpb25GcmFtZXM7XHJcbiAgICAgICAgICAgIHdoaWxlIChsb29wRnJhbWVzLS0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb21wcmVzc29ySW5wdXQgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBhYnNVbmRlbGF5ZWRTb3VyY2UgPSAoY2VsbExbZnJhbWVJbmRleF0gKyBjZWxsUltmcmFtZUluZGV4XSkgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICBkZWxheUJ1ZmZlckxbcHJlRGVsYXlXcml0ZUluZGV4XSA9IGNlbGxMW2ZyYW1lSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgZGVsYXlCdWZmZXJSW3ByZURlbGF5V3JpdGVJbmRleF0gPSBjZWxsUltmcmFtZUluZGV4XTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoYWJzVW5kZWxheWVkU291cmNlIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFic1VuZGVsYXllZFNvdXJjZSAqPSAtMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjb21wcmVzc29ySW5wdXQgPCBhYnNVbmRlbGF5ZWRTb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21wcmVzc29ySW5wdXQgPSBhYnNVbmRlbGF5ZWRTb3VyY2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGFic0lucHV0ID0gY29tcHJlc3NvcklucHV0O1xyXG4gICAgICAgICAgICAgICAgaWYgKGFic0lucHV0IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFic0lucHV0ICo9IC0xO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBzaGFwZWRJbnB1dCA9IHRoaXMuc2F0dXJhdGUoYWJzSW5wdXQsIGspO1xyXG4gICAgICAgICAgICAgICAgdmFyIGF0dGVudWF0aW9uID0gYWJzSW5wdXQgPD0gMC4wMDAxID8gMSA6IHNoYXBlZElucHV0IC8gYWJzSW5wdXQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0ZW51YXRpb25EYiA9IChhdHRlbnVhdGlvbikgPyAtMjAgKiBNYXRoLmxvZyhhdHRlbnVhdGlvbikgKiBNYXRoLkxPRzEwRSA6IDEwMDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0ZW51YXRpb25EYiA8IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhdHRlbnVhdGlvbkRiID0gMjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZGJQZXJGcmFtZSA9IGF0dGVudWF0aW9uRGIgLyBzYXRSZWxlYXNlRnJhbWVzO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNhdFJlbGVhc2VSYXRlID0gTWF0aC5wb3coMTAsIDAuMDUgKiBkYlBlckZyYW1lKSAtIDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNSZWxlYXNlID0gKGF0dGVudWF0aW9uID4gZGV0ZWN0b3JBdmVyYWdlKTtcclxuICAgICAgICAgICAgICAgIHZhciByYXRlID0gaXNSZWxlYXNlID8gc2F0UmVsZWFzZVJhdGUgOiAxO1xyXG5cclxuICAgICAgICAgICAgICAgIGRldGVjdG9yQXZlcmFnZSArPSAoYXR0ZW51YXRpb24gLSBkZXRlY3RvckF2ZXJhZ2UpICogcmF0ZTtcclxuICAgICAgICAgICAgICAgIGlmIChkZXRlY3RvckF2ZXJhZ2UgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGV0ZWN0b3JBdmVyYWdlID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZW52ZWxvcGVSYXRlIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXByZXNzb3JHYWluICs9IChzY2FsZWREZXNpcmVkR2FpbiAtIGNvbXByZXNzb3JHYWluKSAqIGVudmVsb3BlUmF0ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29tcHJlc3NvckdhaW4gKj0gZW52ZWxvcGVSYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21wcmVzc29yR2FpbiA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcHJlc3NvckdhaW4gPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zdFdhcnBDb21wcmVzc29yR2FpbiA9IE1hdGguc2luKDAuNSAqIE1hdGguUEkgKiBjb21wcmVzc29yR2Fpbik7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG90YWxHYWluID0gZHJ5TWl4ICsgd2V0TWl4ICogbWFzdGVyTGluZWFyR2FpbiAqIHBvc3RXYXJwQ29tcHJlc3NvckdhaW47XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRiUmVhbEdhaW4gPSAyMCAqIE1hdGgubG9nKHBvc3RXYXJwQ29tcHJlc3NvckdhaW4pICogTWF0aC5MT0cxMEU7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGJSZWFsR2FpbiA8IG1ldGVyaW5nR2FpbikgIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRlcmluZ0dhaW4gPSBkYlJlYWxHYWluO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRlcmluZ0dhaW4gKz0gKGRiUmVhbEdhaW4gLSBtZXRlcmluZ0dhaW4pICogbWV0ZXJpbmdSZWxlYXNlSztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNlbGxMW2ZyYW1lSW5kZXhdID0gZGVsYXlCdWZmZXJMW3ByZURlbGF5UmVhZEluZGV4XSAqIHRvdGFsR2FpbjtcclxuICAgICAgICAgICAgICAgIGNlbGxSW2ZyYW1lSW5kZXhdID0gZGVsYXlCdWZmZXJSW3ByZURlbGF5UmVhZEluZGV4XSAqIHRvdGFsR2FpbjtcclxuXHJcbiAgICAgICAgICAgICAgICBmcmFtZUluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICBwcmVEZWxheVJlYWRJbmRleCAgPSAocHJlRGVsYXlSZWFkSW5kZXggICsgMSkgJiBNYXhQcmVEZWxheUZyYW1lc01hc2s7XHJcbiAgICAgICAgICAgICAgICBwcmVEZWxheVdyaXRlSW5kZXggPSAocHJlRGVsYXlXcml0ZUluZGV4ICsgMSkgJiBNYXhQcmVEZWxheUZyYW1lc01hc2s7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZXRlY3RvckF2ZXJhZ2UgPCAxZS02KSB7XHJcbiAgICAgICAgICAgICAgICBkZXRlY3RvckF2ZXJhZ2UgPSAxZS02O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb21wcmVzc29yR2FpbiA8IDFlLTYpIHtcclxuICAgICAgICAgICAgICAgIGNvbXByZXNzb3JHYWluID0gMWUtNjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByZURlbGF5UmVhZEluZGV4ICA9IHByZURlbGF5UmVhZEluZGV4O1xyXG4gICAgICAgIHRoaXMucHJlRGVsYXlXcml0ZUluZGV4ID0gcHJlRGVsYXlXcml0ZUluZGV4O1xyXG4gICAgICAgIHRoaXMuZGV0ZWN0b3JBdmVyYWdlICAgID0gZGV0ZWN0b3JBdmVyYWdlO1xyXG4gICAgICAgIHRoaXMuY29tcHJlc3NvckdhaW4gPSBjb21wcmVzc29yR2FpbjtcclxuICAgICAgICB0aGlzLm1heEF0dGFja0NvbXByZXNzaW9uRGlmZkRiID0gbWF4QXR0YWNrQ29tcHJlc3Npb25EaWZmRGI7XHJcbiAgICAgICAgdGhpcy5tZXRlcmluZ0dhaW4gPSBtZXRlcmluZ0dhaW47XHJcbiAgICB9O1xyXG5cclxuICAgICQucmVzZXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLmRldGVjdG9yQXZlcmFnZSA9IDA7XHJcbiAgICAgICAgdGhpcy5jb21wcmVzc29yR2FpbiA9IDE7XHJcbiAgICAgICAgdGhpcy5tZXRlcmluZ0dhaW4gPSAxO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaW1heCA9IHRoaXMuZGVsYXlCdWZmZXJMLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLmRlbGF5QnVmZmVyTFtpXSA9IHRoaXMuZGVsYXlCdWZmZXJSW2ldID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucHJlRGVsYXlSZWFkSW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMucHJlRGVsYXlXcml0ZUluZGV4ID0gRGVmYXVsdFByZURlbGF5RnJhbWVzO1xyXG5cclxuICAgICAgICB0aGlzLm1heEF0dGFja0NvbXByZXNzaW9uRGlmZkRiID0gLTE7XHJcbiAgICB9O1xyXG5cclxuICAgIFQubW9kdWxlcy5Db21wcmVzc29yID0gQ29tcHJlc3NvcjtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBmdW5jdGlvbiBEZWNvZGVyKCkge31cclxuXHJcbiAgICBEZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbihzcmMsIG9ubG9hZGVkbWV0YWRhdGEsIG9ubG9hZGVkZGF0YSkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3JjID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmICgvXFwud2F2JC8udGVzdChzcmMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRGVjb2Rlci53YXZfZGVjb2RlKHNyYywgb25sb2FkZWRtZXRhZGF0YSwgb25sb2FkZWRkYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChEZWNvZGVyLm9nZ19kZWNvZGUgJiYgL1xcLm9nZyQvLnRlc3Qoc3JjKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERlY29kZXIub2dnX2RlY29kZShzcmMsIG9ubG9hZGVkbWV0YWRhdGEsIG9ubG9hZGVkZGF0YSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoRGVjb2Rlci5tcDNfZGVjb2RlICYmIC9cXC5tcDMkLy50ZXN0KHNyYykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBEZWNvZGVyLm1wM19kZWNvZGUoc3JjLCBvbmxvYWRlZG1ldGFkYXRhLCBvbmxvYWRlZGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3JjID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIGlmIChzcmMudHlwZSA9PT0gXCJ3YXZcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERlY29kZXIud2F2X2RlY29kZShzcmMuZGF0YSwgb25sb2FkZWRtZXRhZGF0YSwgb25sb2FkZWRkYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChEZWNvZGVyLm9nZ19kZWNvZGUgJiYgc3JjLnR5cGUgPT09IFwib2dnXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBEZWNvZGVyLm9nZ19kZWNvZGUoc3JjLmRhdGEsIG9ubG9hZGVkbWV0YWRhdGEsIG9ubG9hZGVkZGF0YSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoRGVjb2Rlci5tcDNfZGVjb2RlICYmIHNyYy50eXBlID09PSBcIm1wM1wiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRGVjb2Rlci5tcDNfZGVjb2RlKHNyYy5kYXRhLCBvbmxvYWRlZG1ldGFkYXRhLCBvbmxvYWRlZGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChEZWNvZGVyLndlYmtpdF9kZWNvZGUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzcmMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBEZWNvZGVyLndlYmtpdF9kZWNvZGUoc3JjLmRhdGF8fHNyYywgb25sb2FkZWRtZXRhZGF0YSwgb25sb2FkZWRkYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBEZWNvZGVyLndlYmtpdF9kZWNvZGUoc3JjLCBvbmxvYWRlZG1ldGFkYXRhLCBvbmxvYWRlZGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChEZWNvZGVyLm1vel9kZWNvZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIERlY29kZXIubW96X2RlY29kZShzcmMsIG9ubG9hZGVkbWV0YWRhdGEsIG9ubG9hZGVkZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9ubG9hZGVkbWV0YWRhdGEoZmFsc2UpO1xyXG4gICAgfTtcclxuICAgIFQubW9kdWxlcy5EZWNvZGVyID0gRGVjb2RlcjtcclxuXHJcbiAgICBpZiAoVC5lbnZ0eXBlID09PSBcImJyb3dzZXJcIikge1xyXG4gICAgICAgIERlY29kZXIuZ2V0QmluYXJ5V2l0aFBhdGggPSBmdW5jdGlvbihwYXRoLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBULmZuLmZpeF9pT1M2XzFfcHJvYmxlbSh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgeGhyLm9wZW4oXCJHRVRcIiwgcGF0aCk7XHJcbiAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcbiAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobmV3IFVpbnQ4QXJyYXkoeGhyLnJlc3BvbnNlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4aHIucmVzcG9uc2VCb2R5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLypnbG9iYWwgVkJBcnJheTp0cnVlICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBVaW50OEFycmF5KFZCQXJyYXkoeGhyLnJlc3BvbnNlQm9keSkudG9BcnJheSgpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qZ2xvYmFsIFZCQXJyYXk6ZmFsc2UgKi9cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgVC5mbi5maXhfaU9TNl8xX3Byb2JsZW0oZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xyXG4gICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIERlY29kZXIuZ2V0QmluYXJ5V2l0aFBhdGggPSBmdW5jdGlvbihwYXRoLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhcIm5vIHN1cHBvcnRcIik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgXzI0Yml0X3RvXzMyYml0ID0gZnVuY3Rpb24odWludDgpIHtcclxuICAgICAgICB2YXIgYjAsIGIxLCBiMiwgYmIsIHg7XHJcbiAgICAgICAgdmFyIGludDMyID0gbmV3IEludDMyQXJyYXkodWludDgubGVuZ3RoIC8gMyk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSB1aW50OC5sZW5ndGgsIGogPSAwOyBpIDwgaW1heDsgKSB7XHJcbiAgICAgICAgICAgIGIwID0gdWludDhbaSsrXTtcclxuICAgICAgICAgICAgYjEgPSB1aW50OFtpKytdO1xyXG4gICAgICAgICAgICBiMiA9IHVpbnQ4W2krK107XHJcbiAgICAgICAgICAgIGJiID0gYjAgKyAoYjEgPDwgOCkgKyAoYjIgPDwgMTYpO1xyXG4gICAgICAgICAgICB4ID0gKGJiICYgMHg4MDAwMDApID8gYmIgLSAxNjc3NzIxNiA6IGJiO1xyXG4gICAgICAgICAgICBpbnQzMltqKytdID0geDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGludDMyO1xyXG4gICAgfTtcclxuXHJcbiAgICBEZWNvZGVyLndhdl9kZWNvZGUgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF9kZWNvZGUgPSBmdW5jdGlvbihkYXRhLCBvbmxvYWRlZG1ldGFkYXRhLCBvbmxvYWRlZGRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVswXSwgZGF0YVsxXSwgZGF0YVsyXSwgZGF0YVszXSkgIT09IFwiUklGRlwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb25sb2FkZWRtZXRhZGF0YShmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBsMSA9IGRhdGFbNF0gKyAoZGF0YVs1XTw8OCkgKyAoZGF0YVs2XTw8MTYpICsgKGRhdGFbN108PDI0KTtcclxuICAgICAgICAgICAgaWYgKGwxICsgOCAhPT0gZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvbmxvYWRlZG1ldGFkYXRhKGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVs4XSwgZGF0YVs5XSwgZGF0YVsxMF0sIGRhdGFbMTFdKSAhPT0gXCJXQVZFXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvbmxvYWRlZG1ldGFkYXRhKGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKFN0cmluZy5mcm9tQ2hhckNvZGUoZGF0YVsxMl0sIGRhdGFbMTNdLCBkYXRhWzE0XSwgZGF0YVsxNV0pICE9PSBcImZtdCBcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ubG9hZGVkbWV0YWRhdGEoZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgY2hhbm5lbHMgICA9IGRhdGFbMjJdICsgKGRhdGFbMjNdPDw4KTtcclxuICAgICAgICAgICAgdmFyIHNhbXBsZXJhdGUgPSBkYXRhWzI0XSArIChkYXRhWzI1XTw8OCkgKyAoZGF0YVsyNl08PDE2KSArIChkYXRhWzI3XTw8MjQpO1xyXG4gICAgICAgICAgICB2YXIgYml0U2l6ZSAgICA9IGRhdGFbMzRdICsgKGRhdGFbMzVdPDw4KTtcclxuXHJcbiAgICAgICAgICAgIHZhciBpID0gMzY7XHJcbiAgICAgICAgICAgIHdoaWxlIChpIDwgZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChTdHJpbmcuZnJvbUNoYXJDb2RlKGRhdGFbaV0sIGRhdGFbaSsxXSwgZGF0YVtpKzJdLCBkYXRhW2krM10pID09PSBcImRhdGFcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaSArPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpID49IGRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb25sb2FkZWRtZXRhZGF0YShmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaSArPSA0O1xyXG5cclxuICAgICAgICAgICAgdmFyIGwyID0gZGF0YVtpXSArIChkYXRhW2krMV08PDgpICsgKGRhdGFbaSsyXTw8MTYpICsgKGRhdGFbaSszXTw8MjQpO1xyXG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSAoKGwyIC8gY2hhbm5lbHMpID4+IDEpIC8gc2FtcGxlcmF0ZTtcclxuICAgICAgICAgICAgaSArPSA0O1xyXG5cclxuICAgICAgICAgICAgaWYgKGwyID4gZGF0YS5sZW5ndGggLSBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb25sb2FkZWRtZXRhZGF0YShmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBtaXhkb3duLCBidWZmZXJMLCBidWZmZXJSO1xyXG4gICAgICAgICAgICBtaXhkb3duID0gbmV3IEZsb2F0MzJBcnJheSgoZHVyYXRpb24gKiBzYW1wbGVyYXRlKXwwKTtcclxuICAgICAgICAgICAgaWYgKGNoYW5uZWxzID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJMID0gbmV3IEZsb2F0MzJBcnJheShtaXhkb3duLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJSID0gbmV3IEZsb2F0MzJBcnJheShtaXhkb3duLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9ubG9hZGVkbWV0YWRhdGEoe1xyXG4gICAgICAgICAgICAgICAgc2FtcGxlcmF0ZTogc2FtcGxlcmF0ZSxcclxuICAgICAgICAgICAgICAgIGNoYW5uZWxzICA6IGNoYW5uZWxzLFxyXG4gICAgICAgICAgICAgICAgYnVmZmVyICAgIDogW21peGRvd24sIGJ1ZmZlckwsIGJ1ZmZlclJdLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gIDogZHVyYXRpb25cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoYml0U2l6ZSA9PT0gOCkge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IG5ldyBJbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGkpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJpdFNpemUgPT09IDE2KSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhID0gbmV3IEludDE2QXJyYXkoZGF0YS5idWZmZXIsIGkpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJpdFNpemUgPT09IDMyKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhID0gbmV3IEludDMyQXJyYXkoZGF0YS5idWZmZXIsIGkpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJpdFNpemUgPT09IDI0KSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhID0gXzI0Yml0X3RvXzMyYml0KG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBpKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBpbWF4LCBqLCBrID0gMSAvICgoMSA8PCAoYml0U2l6ZS0xKSkgLSAxKSwgeDtcclxuICAgICAgICAgICAgaWYgKGNoYW5uZWxzID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBqID0gMCwgaW1heCA9IG1peGRvd24ubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9ICBidWZmZXJMW2ldID0gZGF0YVtqKytdICogaztcclxuICAgICAgICAgICAgICAgICAgICB4ICs9IGJ1ZmZlclJbaV0gPSBkYXRhW2orK10gKiBrO1xyXG4gICAgICAgICAgICAgICAgICAgIG1peGRvd25baV0gPSB4ICogMC41O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgaW1heCA9IG1peGRvd24ubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWl4ZG93bltpXSA9IGRhdGFbaV0gKiBrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvbmxvYWRlZGRhdGEoKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oc3JjLCBvbmxvYWRlZG1ldGFkYXRhLCBvbmxvYWRlZGRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzcmMgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIERlY29kZXIuZ2V0QmluYXJ5V2l0aFBhdGgoc3JjLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2RlY29kZShkYXRhLCBvbmxvYWRlZG1ldGFkYXRhLCBvbmxvYWRlZGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfZGVjb2RlKHNyYywgb25sb2FkZWRtZXRhZGF0YSwgb25sb2FkZWRkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9KSgpO1xyXG5cclxuICAgIERlY29kZXIud2Via2l0X2RlY29kZSA9IChmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodHlwZW9mIFQuZm4uX2F1ZGlvQ29udGV4dCAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICB2YXIgY3R4ID0gVC5mbi5fYXVkaW9Db250ZXh0O1xyXG4gICAgICAgICAgICB2YXIgX2RlY29kZSA9IGZ1bmN0aW9uKGRhdGEsIG9ubG9hZGVkbWV0YWRhdGEsIG9ubG9hZGVkZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNhbXBsZXJhdGUsIGNoYW5uZWxzLCBidWZmZXJMLCBidWZmZXJSLCBkdXJhdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb25sb2FkZWRkYXRhKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBjdHguY3JlYXRlQnVmZmVyKGRhdGEuYnVmZmVyLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9ubG9hZGVkbWV0YWRhdGEoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNhbXBsZXJhdGUgPSBjdHguc2FtcGxlUmF0ZTtcclxuICAgICAgICAgICAgICAgIGNoYW5uZWxzICAgPSBidWZmZXIubnVtYmVyT2ZDaGFubmVscztcclxuICAgICAgICAgICAgICAgIGlmIChjaGFubmVscyA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlckwgPSBidWZmZXIuZ2V0Q2hhbm5lbERhdGEoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyUiA9IGJ1ZmZlci5nZXRDaGFubmVsRGF0YSgxKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyTCA9IGJ1ZmZlclIgPSBidWZmZXIuZ2V0Q2hhbm5lbERhdGEoMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IGJ1ZmZlckwubGVuZ3RoIC8gc2FtcGxlcmF0ZTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWl4ZG93biA9IG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyTCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaW1heCA9IG1peGRvd24ubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWl4ZG93bltpXSA9IChtaXhkb3duW2ldICsgYnVmZmVyUltpXSkgKiAwLjU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgb25sb2FkZWRtZXRhZGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlcmF0ZTogc2FtcGxlcmF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBjaGFubmVscyAgOiBjaGFubmVscyxcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXIgICAgOiBbbWl4ZG93biwgYnVmZmVyTCwgYnVmZmVyUl0sXHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gIDogZHVyYXRpb25cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIG9ubG9hZGVkZGF0YSgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNyYywgb25sb2FkZWRtZXRhZGF0YSwgb25sb2FkZWRkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAvKmdsb2JhbCBGaWxlOnRydWUgKi9cclxuICAgICAgICAgICAgICAgIGlmIChzcmMgaW5zdGFuY2VvZiBGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2RlY29kZShuZXcgVWludDhBcnJheShlLnRhcmdldC5yZXN1bHQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ubG9hZGVkbWV0YWRhdGEsIG9ubG9hZGVkZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoc3JjKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNyYyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIERlY29kZXIuZ2V0QmluYXJ5V2l0aFBhdGgoc3JjLCBmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kZWNvZGUoZGF0YSwgb25sb2FkZWRtZXRhZGF0YSwgb25sb2FkZWRkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2RlY29kZShzcmMsIG9ubG9hZGVkbWV0YWRhdGEsIG9ubG9hZGVkZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKmdsb2JhbCBGaWxlOmZhbHNlICovXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfSkoKTtcclxuXHJcbiAgICBEZWNvZGVyLm1vel9kZWNvZGUgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBBdWRpbyA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBuZXcgQXVkaW8oKS5tb3pTZXR1cCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzcmMsIG9ubG9hZGVkbWV0YWRhdGEsIG9ubG9hZGVkZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNhbXBsZXJhdGUsIGNoYW5uZWxzLCBtaXhkb3duLCBidWZmZXJMLCBidWZmZXJSLCBkdXJhdGlvbjtcclxuICAgICAgICAgICAgICAgIHZhciB3cml0ZUluZGV4ID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYXVkaW8gPSBuZXcgQXVkaW8oc3JjKTtcclxuICAgICAgICAgICAgICAgIGF1ZGlvLnZvbHVtZSA9IDAuMDtcclxuICAgICAgICAgICAgICAgIGF1ZGlvLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZWRtZXRhZGF0YVwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBzYW1wbGVyYXRlID0gYXVkaW8ubW96U2FtcGxlUmF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBjaGFubmVscyAgID0gYXVkaW8ubW96Q2hhbm5lbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gICA9IGF1ZGlvLmR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIG1peGRvd24gPSBuZXcgRmxvYXQzMkFycmF5KChhdWRpby5kdXJhdGlvbiAqIHNhbXBsZXJhdGUpfDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFubmVscyA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJMID0gbmV3IEZsb2F0MzJBcnJheSgoYXVkaW8uZHVyYXRpb24gKiBzYW1wbGVyYXRlKXwwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyUiA9IG5ldyBGbG9hdDMyQXJyYXkoKGF1ZGlvLmR1cmF0aW9uICogc2FtcGxlcmF0ZSl8MCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFubmVscyA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKFwiTW96QXVkaW9BdmFpbGFibGVcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHgsIHNhbXBsZXMgPSBlLmZyYW1lQnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSBzYW1wbGVzLmxlbmd0aDsgaSA8IGltYXg7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSAgYnVmZmVyTFt3cml0ZUluZGV4XSA9IHNhbXBsZXNbaSAgXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ICs9IGJ1ZmZlclJbd3JpdGVJbmRleF0gPSBzYW1wbGVzW2krMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWl4ZG93blt3cml0ZUluZGV4XSA9IHggKiAwLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVJbmRleCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcihcIk1vekF1ZGlvQXZhaWxhYmxlXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzYW1wbGVzID0gZS5mcmFtZUJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbWF4ID0gc2FtcGxlcy5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXhkb3duW2ldID0gc2FtcGxlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUluZGV4ICs9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYXVkaW8ucGxheSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ubG9hZGVkbWV0YWRhdGEoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxlcmF0ZTogc2FtcGxlcmF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzICA6IGNoYW5uZWxzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyICAgIDogW21peGRvd24sIGJ1ZmZlckwsIGJ1ZmZlclJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gIDogZHVyYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKFwiZW5kZWRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25sb2FkZWRkYXRhKCk7XHJcbiAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBhdWRpby5sb2FkKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfSkoKTtcclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGZ1bmN0aW9uIEVudmVsb3BlKHNhbXBsZXJhdGUpIHtcclxuICAgICAgICB0aGlzLnNhbXBsZXJhdGUgPSBzYW1wbGVyYXRlIHx8IDQ0MTAwO1xyXG4gICAgICAgIHRoaXMudmFsdWUgID0gWkVSTztcclxuICAgICAgICB0aGlzLnN0YXR1cyA9IFN0YXR1c1dhaXQ7XHJcbiAgICAgICAgdGhpcy5jdXJ2ZSAgPSBcImxpbmVhclwiO1xyXG4gICAgICAgIHRoaXMuc3RlcCAgID0gMTtcclxuICAgICAgICB0aGlzLnJlbGVhc2VOb2RlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmxvb3BOb2RlICAgID0gbnVsbDtcclxuICAgICAgICB0aGlzLmVtaXQgPSBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLl9lbnZWYWx1ZSA9IG5ldyBFbnZlbG9wZVZhbHVlKHNhbXBsZXJhdGUpO1xyXG5cclxuICAgICAgICB0aGlzLl90YWJsZSAgPSBbXTtcclxuICAgICAgICB0aGlzLl9pbml0VmFsdWUgID0gWkVSTztcclxuICAgICAgICB0aGlzLl9jdXJ2ZVZhbHVlID0gMDtcclxuICAgICAgICB0aGlzLl9kZWZhdWx0Q3VydmVUeXBlID0gQ3VydmVUeXBlTGluO1xyXG4gICAgICAgIHRoaXMuX2luZGV4ICAgPSAwO1xyXG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBaRVJPICAgICAgICAgICA9IEVudmVsb3BlLlpFUk8gPSAxZS02O1xyXG4gICAgdmFyIEN1cnZlVHlwZVNldCAgID0gRW52ZWxvcGUuQ3VydmVUeXBlU2V0ICAgPSAwO1xyXG4gICAgdmFyIEN1cnZlVHlwZUxpbiAgID0gRW52ZWxvcGUuQ3VydmVUeXBlTGluICAgPSAxO1xyXG4gICAgdmFyIEN1cnZlVHlwZUV4cCAgID0gRW52ZWxvcGUuQ3VydmVUeXBlRXhwICAgPSAyO1xyXG4gICAgdmFyIEN1cnZlVHlwZVNpbiAgID0gRW52ZWxvcGUuQ3VydmVUeXBlU2luICAgPSAzO1xyXG4gICAgdmFyIEN1cnZlVHlwZVdlbCAgID0gRW52ZWxvcGUuQ3VydmVUeXBlV2VsICAgPSA0O1xyXG4gICAgdmFyIEN1cnZlVHlwZUN1cnZlID0gRW52ZWxvcGUuQ3VydmVUeXBlQ3VydmUgPSA1O1xyXG4gICAgdmFyIEN1cnZlVHlwZVNxciAgID0gRW52ZWxvcGUuQ3VydmVUeXBlU3FyICAgPSA2O1xyXG4gICAgdmFyIEN1cnZlVHlwZUN1YiAgID0gRW52ZWxvcGUuQ3VydmVUeXBlQ3ViICAgPSA3O1xyXG5cclxuICAgIHZhciBTdGF0dXNXYWl0ICAgID0gRW52ZWxvcGUuU3RhdHVzV2FpdCAgICA9IDA7XHJcbiAgICB2YXIgU3RhdHVzR2F0ZSAgICA9IEVudmVsb3BlLlN0YXR1c0dhdGUgICAgPSAxO1xyXG4gICAgdmFyIFN0YXR1c1N1c3RhaW4gPSBFbnZlbG9wZS5TdGF0dXNTdXN0YWluID0gMjtcclxuICAgIHZhciBTdGF0dXNSZWxlYXNlID0gRW52ZWxvcGUuU3RhdHVzUmVsZWFzZSA9IDM7XHJcbiAgICB2YXIgU3RhdHVzRW5kICAgICA9IEVudmVsb3BlLlN0YXR1c0VuZCAgICAgPSA0O1xyXG5cclxuICAgIHZhciBDdXJ2ZVR5cGVEaWN0ID0ge1xyXG4gICAgICAgIHNldDpDdXJ2ZVR5cGVTZXQsXHJcbiAgICAgICAgbGluOkN1cnZlVHlwZUxpbiwgbGluZWFyICAgICA6Q3VydmVUeXBlTGluLFxyXG4gICAgICAgIGV4cDpDdXJ2ZVR5cGVFeHAsIGV4cG9uZW50aWFsOkN1cnZlVHlwZUV4cCxcclxuICAgICAgICBzaW46Q3VydmVUeXBlU2luLCBzaW5lICAgICAgIDpDdXJ2ZVR5cGVTaW4sXHJcbiAgICAgICAgd2VsOkN1cnZlVHlwZVdlbCwgd2VsY2ggICAgICA6Q3VydmVUeXBlV2VsLFxyXG4gICAgICAgIHNxcjpDdXJ2ZVR5cGVTcXIsIHNxdWFyZWQgICAgOkN1cnZlVHlwZVNxcixcclxuICAgICAgICBjdWI6Q3VydmVUeXBlQ3ViLCBjdWJlZCAgICAgIDpDdXJ2ZVR5cGVDdWJcclxuICAgIH07XHJcbiAgICBFbnZlbG9wZS5DdXJ2ZVR5cGVEaWN0ID0gQ3VydmVUeXBlRGljdDtcclxuXHJcbiAgICB2YXIgJCA9IEVudmVsb3BlLnByb3RvdHlwZTtcclxuXHJcbiAgICAkLmNsb25lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIG5ld19pbnN0YW5jZSA9IG5ldyBFbnZlbG9wZSh0aGlzLnNhbXBsZXJhdGUpO1xyXG4gICAgICAgIG5ld19pbnN0YW5jZS5fdGFibGUgPSB0aGlzLl90YWJsZTtcclxuICAgICAgICBuZXdfaW5zdGFuY2UuX2luaXRWYWx1ZSA9IHRoaXMuX2luaXRWYWx1ZTtcclxuICAgICAgICBuZXdfaW5zdGFuY2Uuc2V0Q3VydmUodGhpcy5jdXJ2ZSk7XHJcbiAgICAgICAgaWYgKHRoaXMucmVsZWFzZU5vZGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgbmV3X2luc3RhbmNlLnNldFJlbGVhc2VOb2RlKHRoaXMucmVsZWFzZU5vZGUgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubG9vcE5vZGUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgbmV3X2luc3RhbmNlLnNldExvb3BOb2RlKHRoaXMubG9vcE5vZGUgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLnNldFN0ZXAodGhpcy5zdGVwKTtcclxuICAgICAgICBuZXdfaW5zdGFuY2UucmVzZXQoKTtcclxuICAgICAgICByZXR1cm4gbmV3X2luc3RhbmNlO1xyXG4gICAgfTtcclxuICAgICQuc2V0VGFibGUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2luaXRWYWx1ZSA9IHZhbHVlWzBdO1xyXG4gICAgICAgIHRoaXMuX3RhYmxlID0gdmFsdWUuc2xpY2UoMSk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuX2VudlZhbHVlLnZhbHVlID0gdGhpcy5faW5pdFZhbHVlO1xyXG4gICAgICAgIHRoaXMuX2luZGV4ICAgPSAwO1xyXG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gU3RhdHVzV2FpdDtcclxuICAgIH07XHJcbiAgICAkLnNldEN1cnZlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSAge1xyXG4gICAgICAgICAgICB0aGlzLl9kZWZhdWx0Q3VydmVUeXBlID0gQ3VydmVUeXBlQ3VydmU7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnZlVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5jdXJ2ZSA9IHZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRDdXJ2ZVR5cGUgPSBDdXJ2ZVR5cGVEaWN0W3ZhbHVlXSB8fCBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmN1cnZlID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgICQuc2V0UmVsZWFzZU5vZGUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVsZWFzZU5vZGUgPSB2YWx1ZSAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgICQuc2V0TG9vcE5vZGUgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9vcE5vZGUgPSB2YWx1ZSAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgICQuc2V0U3RlcCA9IGZ1bmN0aW9uKHN0ZXApIHtcclxuICAgICAgICB0aGlzLnN0ZXAgPSB0aGlzLl9lbnZWYWx1ZS5zdGVwID0gc3RlcDtcclxuICAgIH07XHJcbiAgICAkLnJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuX2VudlZhbHVlLnZhbHVlID0gdGhpcy5faW5pdFZhbHVlO1xyXG4gICAgICAgIHRoaXMuX2luZGV4ICAgPSAwO1xyXG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gU3RhdHVzV2FpdDtcclxuICAgIH07XHJcbiAgICAkLnJlbGVhc2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5yZWxlYXNlTm9kZSAhPT0gbnVsbCAmJiB0aGlzLl9pbmRleCA8PSB0aGlzLnJlbGVhc2VOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRleCA9IHRoaXMucmVsZWFzZU5vZGU7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gU3RhdHVzUmVsZWFzZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgJC5nZXRJbmZvID0gZnVuY3Rpb24oc3VzdGFpblRpbWUpIHtcclxuICAgICAgICB2YXIgdGFibGUgPSB0aGlzLl90YWJsZTtcclxuICAgICAgICB2YXIgaSwgaW1heDtcclxuICAgICAgICB2YXIgdG90YWxEdXJhdGlvbiAgICA9IDA7XHJcbiAgICAgICAgdmFyIGxvb3BCZWdpblRpbWUgICAgPSBJbmZpbml0eTtcclxuICAgICAgICB2YXIgcmVsZWFzZUJlZ2luVGltZSA9IEluZmluaXR5O1xyXG4gICAgICAgIHZhciBpc0VuZGxlc3NMb29wICAgID0gZmFsc2U7XHJcbiAgICAgICAgZm9yIChpID0gMCwgaW1heCA9IHRhYmxlLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sb29wTm9kZSA9PT0gaSkge1xyXG4gICAgICAgICAgICAgICAgbG9vcEJlZ2luVGltZSA9IHRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMucmVsZWFzZU5vZGUgPT09IGkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0b3RhbER1cmF0aW9uIDwgc3VzdGFpblRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbER1cmF0aW9uICs9IHN1c3RhaW5UaW1lO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0b3RhbER1cmF0aW9uICA9IHN1c3RhaW5UaW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVsZWFzZUJlZ2luVGltZSA9IHRvdGFsRHVyYXRpb247XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBpdGVtcyA9IHRhYmxlW2ldO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtcykpIHtcclxuICAgICAgICAgICAgICAgIHRvdGFsRHVyYXRpb24gKz0gaXRlbXNbMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxvb3BCZWdpblRpbWUgIT09IEluZmluaXR5ICYmIHJlbGVhc2VCZWdpblRpbWUgPT09IEluZmluaXR5KSB7XHJcbiAgICAgICAgICAgIHRvdGFsRHVyYXRpb24gKz0gc3VzdGFpblRpbWU7XHJcbiAgICAgICAgICAgIGlzRW5kbGVzc0xvb3AgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG90YWxEdXJhdGlvbiAgIDogdG90YWxEdXJhdGlvbixcclxuICAgICAgICAgICAgbG9vcEJlZ2luVGltZSAgIDogbG9vcEJlZ2luVGltZSxcclxuICAgICAgICAgICAgcmVsZWFzZUJlZ2luVGltZTogcmVsZWFzZUJlZ2luVGltZSxcclxuICAgICAgICAgICAgaXNFbmRsZXNzTG9vcCAgIDogaXNFbmRsZXNzTG9vcFxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgICQuY2FsY1N0YXR1cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzdGF0dXMgID0gdGhpcy5zdGF0dXM7XHJcbiAgICAgICAgdmFyIHRhYmxlICAgPSB0aGlzLl90YWJsZTtcclxuICAgICAgICB2YXIgaW5kZXggICA9IHRoaXMuX2luZGV4O1xyXG4gICAgICAgIHZhciBjb3VudGVyID0gdGhpcy5fY291bnRlcjtcclxuXHJcbiAgICAgICAgdmFyIGN1cnZlVmFsdWUgPSB0aGlzLl9jdXJ2ZVZhbHVlO1xyXG4gICAgICAgIHZhciBkZWZhdWx0Q3VydmVUeXBlID0gdGhpcy5fZGVmYXVsdEN1cnZlVHlwZTtcclxuICAgICAgICB2YXIgbG9vcE5vZGUgICAgPSB0aGlzLmxvb3BOb2RlO1xyXG4gICAgICAgIHZhciByZWxlYXNlTm9kZSA9IHRoaXMucmVsZWFzZU5vZGU7XHJcbiAgICAgICAgdmFyIGVudlZhbHVlID0gdGhpcy5fZW52VmFsdWU7XHJcbiAgICAgICAgdmFyIGl0ZW1zLCBlbmRWYWx1ZSwgdGltZSwgY3VydmVUeXBlLCBlbWl0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgc3dpdGNoIChzdGF0dXMpIHtcclxuICAgICAgICBjYXNlIFN0YXR1c1dhaXQ6XHJcbiAgICAgICAgY2FzZSBTdGF0dXNFbmQ6XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgU3RhdHVzR2F0ZTpcclxuICAgICAgICBjYXNlIFN0YXR1c1JlbGVhc2U6XHJcbiAgICAgICAgICAgIHdoaWxlIChjb3VudGVyIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSB0YWJsZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBTdGF0dXNHYXRlICYmIGxvb3BOb2RlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gbG9vcE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMgICAgPSBTdGF0dXNFbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY291bnRlciAgID0gSW5maW5pdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VydmVUeXBlID0gQ3VydmVUeXBlU2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGVtaXQgICAgICA9IFwiZW5kZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBTdGF0dXNHYXRlICYmIGluZGV4ID09PSByZWxlYXNlTm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsb29wTm9kZSAhPT0gbnVsbCAmJiBsb29wTm9kZSA8IHJlbGVhc2VOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gbG9vcE5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMgICAgPSBTdGF0dXNTdXN0YWluO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgICA9IEluZmluaXR5O1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnZlVHlwZSA9IEN1cnZlVHlwZVNldDtcclxuICAgICAgICAgICAgICAgICAgICBlbWl0ICAgICAgPSBcInN1c3RhaW5lZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaXRlbXMgPSB0YWJsZVtpbmRleCsrXTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbmRWYWx1ZSA9IGl0ZW1zWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1zWzJdID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VydmVUeXBlID0gZGVmYXVsdEN1cnZlVHlwZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VydmVUeXBlID0gaXRlbXNbMl07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VydmVUeXBlID09PSBDdXJ2ZVR5cGVDdXJ2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnZlVmFsdWUgPSBpdGVtc1szXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMoY3VydmVWYWx1ZSkgPCAwLjAwMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJ2ZVR5cGUgPSBDdXJ2ZVR5cGVMaW47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGltZSA9IGl0ZW1zWzFdO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvdW50ZXIgPSBlbnZWYWx1ZS5zZXROZXh0KGVuZFZhbHVlLCB0aW1lLCBjdXJ2ZVR5cGUsIGN1cnZlVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICAgICAgdGhpcy5lbWl0ICAgPSBlbWl0O1xyXG4gICAgICAgIHRoaXMuX2luZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgdGhpcy5fY291bnRlciA9IGNvdW50ZXI7XHJcblxyXG4gICAgICAgIHJldHVybiBzdGF0dXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQubmV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhbGNTdGF0dXMoKSAmIDEpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSAgPSB0aGlzLl9lbnZWYWx1ZS5uZXh0KCkgfHwgWkVSTztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fY291bnRlciAtPSAxO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbihjZWxsKSB7XHJcbiAgICAgICAgdmFyIGVudlZhbHVlID0gdGhpcy5fZW52VmFsdWU7XHJcbiAgICAgICAgdmFyIGksIGltYXggPSBjZWxsLmxlbmd0aDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2FsY1N0YXR1cygpICYgMSkge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxsW2ldID0gZW52VmFsdWUubmV4dCgpIHx8IFpFUk87XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlIHx8IFpFUk87XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGNlbGxbaV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnZhbHVlID0gY2VsbFtpbWF4LTFdO1xyXG5cclxuICAgICAgICB0aGlzLl9jb3VudGVyIC09IGNlbGwubGVuZ3RoO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgZnVuY3Rpb24gRW52ZWxvcGVWYWx1ZShzYW1wbGVyYXRlKSB7XHJcbiAgICAgICAgdGhpcy5zYW1wbGVyYXRlID0gc2FtcGxlcmF0ZTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gWkVSTztcclxuICAgICAgICB0aGlzLnN0ZXAgID0gMTtcclxuXHJcbiAgICAgICAgdGhpcy5fY3VydmVUeXBlICA9IEN1cnZlVHlwZUxpbjtcclxuICAgICAgICB0aGlzLl9jdXJ2ZVZhbHVlID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5fZ3JvdyA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuX2EyID0gMDtcclxuICAgICAgICB0aGlzLl9iMSA9IDA7XHJcbiAgICAgICAgdGhpcy5feTEgPSAwO1xyXG4gICAgICAgIHRoaXMuX3kyID0gMDtcclxuICAgIH1cclxuICAgIEVudmVsb3BlVmFsdWUucHJvdG90eXBlLnNldE5leHQgPSBmdW5jdGlvbihlbmRWYWx1ZSwgdGltZSwgY3VydmVUeXBlLCBjdXJ2ZVZhbHVlKSB7XHJcbiAgICAgICAgdmFyIG4gPSB0aGlzLnN0ZXA7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICB2YXIgZ3JvdywgdywgYTEsIGEyLCBiMSwgeTEsIHkyO1xyXG5cclxuICAgICAgICB2YXIgY291bnRlciA9ICgodGltZSAqIDAuMDAxICogdGhpcy5zYW1wbGVyYXRlKSAvIG4pfDA7XHJcbiAgICAgICAgaWYgKGNvdW50ZXIgPCAxKSB7XHJcbiAgICAgICAgICAgIGNvdW50ZXIgICA9IDE7XHJcbiAgICAgICAgICAgIGN1cnZlVHlwZSA9IEN1cnZlVHlwZVNldDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAoY3VydmVUeXBlKSB7XHJcbiAgICAgICAgY2FzZSBDdXJ2ZVR5cGVTZXQ6XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBlbmRWYWx1ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBDdXJ2ZVR5cGVMaW46XHJcbiAgICAgICAgICAgIGdyb3cgPSAoZW5kVmFsdWUgLSB2YWx1ZSkgLyBjb3VudGVyO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEN1cnZlVHlwZUV4cDpcclxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBncm93ID0gTWF0aC5wb3coXHJcbiAgICAgICAgICAgICAgICAgICAgZW5kVmFsdWUgLyB2YWx1ZSwgMSAvIGNvdW50ZXJcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBncm93ID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEN1cnZlVHlwZVNpbjpcclxuICAgICAgICAgICAgdyA9IE1hdGguUEkgLyBjb3VudGVyO1xyXG4gICAgICAgICAgICBhMiA9IChlbmRWYWx1ZSArIHZhbHVlKSAqIDAuNTtcclxuICAgICAgICAgICAgYjEgPSAyICogTWF0aC5jb3Modyk7XHJcbiAgICAgICAgICAgIHkxID0gKGVuZFZhbHVlIC0gdmFsdWUpICogMC41O1xyXG4gICAgICAgICAgICB5MiA9IHkxICogTWF0aC5zaW4oTWF0aC5QSSAqIDAuNSAtIHcpO1xyXG4gICAgICAgICAgICB2YWx1ZSA9IGEyIC0geTE7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgQ3VydmVUeXBlV2VsOlxyXG4gICAgICAgICAgICB3ID0gKE1hdGguUEkgKiAwLjUpIC8gY291bnRlcjtcclxuICAgICAgICAgICAgYjEgPSAyICogTWF0aC5jb3Modyk7XHJcbiAgICAgICAgICAgIGlmIChlbmRWYWx1ZSA+PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgYTIgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIHkxID0gMDtcclxuICAgICAgICAgICAgICAgIHkyID0gLU1hdGguc2luKHcpICogKGVuZFZhbHVlIC0gdmFsdWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYTIgPSBlbmRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHkxID0gdmFsdWUgLSBlbmRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHkyID0gTWF0aC5jb3ModykgKiAodmFsdWUgLSBlbmRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFsdWUgPSBhMiArIHkxO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEN1cnZlVHlwZUN1cnZlOlxyXG4gICAgICAgICAgICBhMSA9IChlbmRWYWx1ZSAtIHZhbHVlKSAvICgxLjAgLSBNYXRoLmV4cChjdXJ2ZVZhbHVlKSk7XHJcbiAgICAgICAgICAgIGEyID0gdmFsdWUgKyBhMTtcclxuICAgICAgICAgICAgYjEgPSBhMTtcclxuICAgICAgICAgICAgZ3JvdyA9IE1hdGguZXhwKGN1cnZlVmFsdWUgLyBjb3VudGVyKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBDdXJ2ZVR5cGVTcXI6XHJcbiAgICAgICAgICAgIHkxID0gTWF0aC5zcXJ0KHZhbHVlKTtcclxuICAgICAgICAgICAgeTIgPSBNYXRoLnNxcnQoZW5kVmFsdWUpO1xyXG4gICAgICAgICAgICBncm93ID0gKHkyIC0geTEpIC8gY291bnRlcjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBDdXJ2ZVR5cGVDdWI6XHJcbiAgICAgICAgICAgIHkxID0gTWF0aC5wb3codmFsdWUgICAsIDAuMzMzMzMzMzMpO1xyXG4gICAgICAgICAgICB5MiA9IE1hdGgucG93KGVuZFZhbHVlLCAwLjMzMzMzMzMzKTtcclxuICAgICAgICAgICAgZ3JvdyA9ICh5MiAtIHkxKSAvIGNvdW50ZXI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5uZXh0ID0gTmV4dEZ1bmN0aW9uc1tjdXJ2ZVR5cGVdO1xyXG4gICAgICAgIHRoaXMuX2dyb3cgPSBncm93O1xyXG4gICAgICAgIHRoaXMuX2EyID0gYTI7XHJcbiAgICAgICAgdGhpcy5fYjEgPSBiMTtcclxuICAgICAgICB0aGlzLl95MSA9IHkxO1xyXG4gICAgICAgIHRoaXMuX3kyID0geTI7XHJcblxyXG4gICAgICAgIHJldHVybiBjb3VudGVyO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgTmV4dEZ1bmN0aW9ucyA9IFtdO1xyXG4gICAgTmV4dEZ1bmN0aW9uc1tDdXJ2ZVR5cGVTZXRdID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICB9O1xyXG4gICAgTmV4dEZ1bmN0aW9uc1tDdXJ2ZVR5cGVMaW5dID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSArPSB0aGlzLl9ncm93O1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfTtcclxuICAgIE5leHRGdW5jdGlvbnNbQ3VydmVUeXBlRXhwXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgKj0gdGhpcy5fZ3JvdztcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgIH07XHJcbiAgICBOZXh0RnVuY3Rpb25zW0N1cnZlVHlwZVNpbl0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgeTAgPSB0aGlzLl9iMSAqIHRoaXMuX3kxIC0gdGhpcy5feTI7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuX2EyIC0geTA7XHJcbiAgICAgICAgdGhpcy5feTIgPSB0aGlzLl95MTtcclxuICAgICAgICB0aGlzLl95MSA9IHkwO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfTtcclxuICAgIE5leHRGdW5jdGlvbnNbQ3VydmVUeXBlV2VsXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciB5MCA9IHRoaXMuX2IxICogdGhpcy5feTEgLSB0aGlzLl95MjtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5fYTIgKyB5MDtcclxuICAgICAgICB0aGlzLl95MiA9IHRoaXMuX3kxO1xyXG4gICAgICAgIHRoaXMuX3kxID0geTA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICB9O1xyXG4gICAgTmV4dEZ1bmN0aW9uc1tDdXJ2ZVR5cGVDdXJ2ZV0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl9iMSAqPSB0aGlzLl9ncm93O1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLl9hMiAtIHRoaXMuX2IxO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfTtcclxuICAgIE5leHRGdW5jdGlvbnNbQ3VydmVUeXBlU3FyXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX3kxICs9IHRoaXMuX2dyb3c7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuX3kxICogdGhpcy5feTE7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICB9O1xyXG4gICAgTmV4dEZ1bmN0aW9uc1tDdXJ2ZVR5cGVDdWJdID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5feTEgKz0gdGhpcy5fZ3JvdztcclxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5feTEgKiB0aGlzLl95MSAqIHRoaXMuX3kxO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBFbnZlbG9wZVZhbHVlLnByb3RvdHlwZS5uZXh0ID0gTmV4dEZ1bmN0aW9uc1tDdXJ2ZVR5cGVTZXRdO1xyXG5cclxuICAgIFQubW9kdWxlcy5FbnZlbG9wZSAgICAgID0gRW52ZWxvcGU7XHJcbiAgICBULm1vZHVsZXMuRW52ZWxvcGVWYWx1ZSA9IEVudmVsb3BlVmFsdWU7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgZnVuY3Rpb24gRkZUKG4pIHtcclxuICAgICAgICBuID0gKHR5cGVvZiBuID09PSBcIm51bWJlclwiKSA/IG4gOiA1MTI7XHJcbiAgICAgICAgbiA9IDEgPDwgTWF0aC5jZWlsKE1hdGgubG9nKG4pICogTWF0aC5MT0cyRSk7XHJcblxyXG4gICAgICAgIHRoaXMubGVuZ3RoICA9IG47XHJcbiAgICAgICAgdGhpcy5idWZmZXIgID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkobik7XHJcbiAgICAgICAgdGhpcy5yZWFsICAgID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkobik7XHJcbiAgICAgICAgdGhpcy5pbWFnICAgID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkobik7XHJcbiAgICAgICAgdGhpcy5fcmVhbCAgID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkobik7XHJcbiAgICAgICAgdGhpcy5faW1hZyAgID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkobik7XHJcbiAgICAgICAgdGhpcy5tYWcgICAgID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkobj4+MSk7XHJcblxyXG4gICAgICAgIHRoaXMubWluRGVjaWJlbHMgPSAgLTMwO1xyXG4gICAgICAgIHRoaXMubWF4RGVjaWJlbHMgPSAtMTAwO1xyXG5cclxuICAgICAgICB2YXIgcGFyYW1zID0gRkZUUGFyYW1zLmdldChuKTtcclxuICAgICAgICB0aGlzLl9iaXRyZXYgICA9IHBhcmFtcy5iaXRyZXY7XHJcbiAgICAgICAgdGhpcy5fc2ludGFibGUgPSBwYXJhbXMuc2ludGFibGU7XHJcbiAgICAgICAgdGhpcy5fY29zdGFibGUgPSBwYXJhbXMuY29zdGFibGU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyICQgPSBGRlQucHJvdG90eXBlO1xyXG5cclxuICAgICQuc2V0V2luZG93ID0gZnVuY3Rpb24oa2V5KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdmFyIG0gPSAvKFtBLVphLXpdKykoPzpcXCgoWzAxXVxcLj9cXGQqKVxcKSk/Ly5leGVjKGtleSk7XHJcbiAgICAgICAgICAgIGlmIChtICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZSA9IG1bMV0udG9Mb3dlckNhc2UoKSwgYSA9IG1bMl0gIT09IHVuZGVmaW5lZCA/ICttWzJdIDogMC4yNTtcclxuICAgICAgICAgICAgICAgIHZhciBmID0gV2luZG93RnVuY3Rpb25zW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGYpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3dpbmRvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl93aW5kb3cgPSBuZXcgVC5mbi5TaWduYWxBcnJheSh0aGlzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3ID0gdGhpcy5fd2luZG93LCBuID0gMCwgTiA9IHRoaXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGEgPSAoYSA8IDApID8gMCA6IChhID4gMSkgPyAxIDogYTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgbiA8IE47ICsrbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3W25dID0gZihuLCBOLCBhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aW5kb3dOYW1lID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkLmZvcndhcmQgPSBmdW5jdGlvbihfYnVmZmVyKSB7XHJcbiAgICAgICAgdmFyIGJ1ZmZlciAgID0gdGhpcy5idWZmZXI7XHJcbiAgICAgICAgdmFyIHJlYWwgICA9IHRoaXMucmVhbDtcclxuICAgICAgICB2YXIgaW1hZyAgID0gdGhpcy5pbWFnO1xyXG4gICAgICAgIHZhciB3aW5kb3cgPSB0aGlzLl93aW5kb3c7XHJcbiAgICAgICAgdmFyIGJpdHJldiA9IHRoaXMuX2JpdHJldjtcclxuICAgICAgICB2YXIgc2ludGFibGUgPSB0aGlzLl9zaW50YWJsZTtcclxuICAgICAgICB2YXIgY29zdGFibGUgPSB0aGlzLl9jb3N0YWJsZTtcclxuICAgICAgICB2YXIgbiA9IGJ1ZmZlci5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGksIGosIGssIGsyLCBoLCBkLCBjLCBzLCBpaywgZHgsIGR5O1xyXG5cclxuICAgICAgICBpZiAod2luZG93KSB7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcltpXSA9IF9idWZmZXJbaV0gKiB3aW5kb3dbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBidWZmZXIuc2V0KF9idWZmZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgICAgICByZWFsW2ldID0gYnVmZmVyW2JpdHJldltpXV07XHJcbiAgICAgICAgICAgIGltYWdbaV0gPSAwLjA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGsgPSAxOyBrIDwgbjsgayA9IGsyKSB7XHJcbiAgICAgICAgICAgIGggPSAwOyBrMiA9IGsgKyBrOyBkID0gbiAvIGsyO1xyXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgazsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBjID0gY29zdGFibGVbaF07XHJcbiAgICAgICAgICAgICAgICBzID0gc2ludGFibGVbaF07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBqOyBpIDwgbjsgaSArPSBrMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlrID0gaSArIGs7XHJcbiAgICAgICAgICAgICAgICAgICAgZHggPSBzICogaW1hZ1tpa10gKyBjICogcmVhbFtpa107XHJcbiAgICAgICAgICAgICAgICAgICAgZHkgPSBjICogaW1hZ1tpa10gLSBzICogcmVhbFtpa107XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhbFtpa10gPSByZWFsW2ldIC0gZHg7IHJlYWxbaV0gKz0gZHg7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ1tpa10gPSBpbWFnW2ldIC0gZHk7IGltYWdbaV0gKz0gZHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBoICs9IGQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBtYWcgPSB0aGlzLm1hZztcclxuICAgICAgICB2YXIgcnZhbCwgaXZhbDtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgICAgIHJ2YWwgPSByZWFsW2ldO1xyXG4gICAgICAgICAgICBpdmFsID0gaW1hZ1tpXTtcclxuICAgICAgICAgICAgbWFnW2ldID0gTWF0aC5zcXJ0KHJ2YWwgKiBydmFsICsgaXZhbCAqIGl2YWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtyZWFsOnJlYWwsIGltYWc6aW1hZ307XHJcbiAgICB9O1xyXG5cclxuICAgICQuaW52ZXJzZSA9IGZ1bmN0aW9uKF9yZWFsLCBfaW1hZykge1xyXG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcclxuICAgICAgICB2YXIgcmVhbCAgID0gdGhpcy5fcmVhbDtcclxuICAgICAgICB2YXIgaW1hZyAgID0gdGhpcy5faW1hZztcclxuICAgICAgICB2YXIgYml0cmV2ID0gdGhpcy5fYml0cmV2O1xyXG4gICAgICAgIHZhciBzaW50YWJsZSA9IHRoaXMuX3NpbnRhYmxlO1xyXG4gICAgICAgIHZhciBjb3N0YWJsZSA9IHRoaXMuX2Nvc3RhYmxlO1xyXG4gICAgICAgIHZhciBuID0gYnVmZmVyLmxlbmd0aDtcclxuICAgICAgICB2YXIgaSwgaiwgaywgazIsIGgsIGQsIGMsIHMsIGlrLCBkeCwgZHk7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcclxuICAgICAgICAgICAgaiA9IGJpdHJldltpXTtcclxuICAgICAgICAgICAgcmVhbFtpXSA9ICtfcmVhbFtqXTtcclxuICAgICAgICAgICAgaW1hZ1tpXSA9IC1faW1hZ1tqXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoayA9IDE7IGsgPCBuOyBrID0gazIpIHtcclxuICAgICAgICAgICAgaCA9IDA7IGsyID0gayArIGs7IGQgPSBuIC8gazI7XHJcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBrOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGMgPSBjb3N0YWJsZVtoXTtcclxuICAgICAgICAgICAgICAgIHMgPSBzaW50YWJsZVtoXTtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IGo7IGkgPCBuOyBpICs9IGsyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWsgPSBpICsgaztcclxuICAgICAgICAgICAgICAgICAgICBkeCA9IHMgKiBpbWFnW2lrXSArIGMgKiByZWFsW2lrXTtcclxuICAgICAgICAgICAgICAgICAgICBkeSA9IGMgKiBpbWFnW2lrXSAtIHMgKiByZWFsW2lrXTtcclxuICAgICAgICAgICAgICAgICAgICByZWFsW2lrXSA9IHJlYWxbaV0gLSBkeDsgcmVhbFtpXSArPSBkeDtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnW2lrXSA9IGltYWdbaV0gLSBkeTsgaW1hZ1tpXSArPSBkeTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGggKz0gZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICAgICAgICBidWZmZXJbaV0gPSByZWFsW2ldIC8gbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcclxuICAgIH07XHJcblxyXG4gICAgJC5nZXRGcmVxdWVuY3lEYXRhID0gZnVuY3Rpb24oYXJyYXkpIHtcclxuICAgICAgICB2YXIgbWluRGVjaWJlbHMgID0gdGhpcy5taW5EZWNpYmVscztcclxuICAgICAgICB2YXIgaSwgaW1heCA9IE1hdGgubWluKHRoaXMubWFnLmxlbmd0aCwgYXJyYXkubGVuZ3RoKTtcclxuICAgICAgICBpZiAoaW1heCkge1xyXG4gICAgICAgICAgICB2YXIgeCwgbWFnID0gdGhpcy5tYWc7XHJcbiAgICAgICAgICAgIHZhciBwZWFrID0gMDtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgeCAgPSBtYWdbaV07XHJcbiAgICAgICAgICAgICAgICBhcnJheVtpXSA9ICF4ID8gbWluRGVjaWJlbHMgOiAyMCAqIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XHJcbiAgICAgICAgICAgICAgICBpZiAocGVhayA8IGFycmF5W2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGVhayA9IGFycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIEZGVFBhcmFtcyA9IHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIEZGVFBhcmFtc1tuXSB8fCAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYml0cmV2ID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB4LCBpLCBqLCBrLCBuMjtcclxuICAgICAgICAgICAgICAgICAgICB4ID0gbmV3IEludDE2QXJyYXkobik7XHJcbiAgICAgICAgICAgICAgICAgICAgbjIgPSBuID4+IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IGogPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoOzspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeFtpXSA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgrK2kgPj0gbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgayA9IG4yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoayA8PSBqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqIC09IGs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrID4+PSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGogKz0gaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgICAgICAgICB9KCkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGksIGltYXgsIGsgPSBNYXRoLmZsb29yKE1hdGgubG9nKG4pIC8gTWF0aC5MTjIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNpbnRhYmxlID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkoKDE8PGspLTEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvc3RhYmxlID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkoKDE8PGspLTEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIFBJMiA9IE1hdGguUEkgKiAyO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGltYXggPSBzaW50YWJsZS5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBzaW50YWJsZVtpXSA9IE1hdGguc2luKFBJMiAqIChpIC8gbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvc3RhYmxlW2ldID0gTWF0aC5jb3MoUEkyICogKGkgLyBuKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBGRlRQYXJhbXNbbl0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYml0cmV2OiBiaXRyZXYsIHNpbnRhYmxlOnNpbnRhYmxlLCBjb3N0YWJsZTpjb3N0YWJsZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBGRlRQYXJhbXNbbl07XHJcbiAgICAgICAgICAgIH0oKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgV2luZG93RnVuY3Rpb25zID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBQSSAgID0gTWF0aC5QSTtcclxuICAgICAgICB2YXIgUEkyICA9IE1hdGguUEkgKiAyO1xyXG4gICAgICAgIHZhciBhYnMgID0gTWF0aC5hYnM7XHJcbiAgICAgICAgdmFyIHBvdyAgPSBNYXRoLnBvdztcclxuICAgICAgICB2YXIgY29zICA9IE1hdGguY29zO1xyXG4gICAgICAgIHZhciBzaW4gID0gTWF0aC5zaW47XHJcbiAgICAgICAgdmFyIHNpbmMgPSBmdW5jdGlvbih4KSB7IHJldHVybiBzaW4oUEkqeCkgLyAoUEkqeCk7IH07XHJcbiAgICAgICAgdmFyIEUgICAgPSBNYXRoLkU7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlY3Rhbmd1bGFyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBoYW5uOiBmdW5jdGlvbihuLCBOKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMC41ICogKDEgLSBjb3MoKFBJMipuKSAvIChOLTEpKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGhhbW1pbmc6IGZ1bmN0aW9uKG4sIE4pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwLjU0IC0gMC40NiAqIGNvcygoUEkyKm4pIC8gKE4tMSkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0dWtlcnk6IGZ1bmN0aW9uKG4sIE4sIGEpIHtcclxuICAgICAgICAgICAgICAgIGlmICggbiA8IChhICogKE4tMSkpLzIgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAuNSAqICggMSArIGNvcyhQSSAqICgoKDIqbikvKGEqKE4tMSkpKSAtIDEpKSApO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggKE4tMSkqKDEtKGEvMikpIDwgbiApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMC41ICogKCAxICsgY29zKFBJICogKCgoMipuKS8oYSooTi0xKSkpIC0gKDIvYSkgKyAxKSkgKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvc2luZTogZnVuY3Rpb24obiwgTikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpbigoUEkqbikgLyAoTi0xKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxhbmN6b3M6IGZ1bmN0aW9uKG4sIE4pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzaW5jKCgoMipuKSAvIChOLTEpKSAtIDEpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0cmlhbmd1bGFyOiBmdW5jdGlvbihuLCBOKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKDIvKE4rMSkpICogKCgoTisxKS8yKSAtIGFicyhuIC0gKChOLTEpLzIpKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJhcnRsZXR0OiBmdW5jdGlvbihuLCBOKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKDIvKE4tMSkpICogKCgoTi0xKS8yKSAtIGFicyhuIC0gKChOLTEpLzIpKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdhdXNzaWFuOiBmdW5jdGlvbihuLCBOLCBhKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcG93KEUsIC0wLjUgKiBwb3coKG4gLSAoTi0xKSAvIDIpIC8gKGEgKiAoTi0xKSAvIDIpLCAyKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGJhcnRsZXR0SGFubjogZnVuY3Rpb24obiwgTikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuNjIgLSAwLjQ4ICogYWJzKChuIC8gKE4tMSkpIC0gMC41KSAtIDAuMzggKiBjb3MoKFBJMipuKSAvIChOLTEpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYmxhY2ttYW46IGZ1bmN0aW9uKG4sIE4sIGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhMCA9ICgxIC0gYSkgLyAyLCBhMSA9IDAuNSwgYTIgPSBhIC8gMjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhMCAtIGExICogY29zKChQSTIqbikgLyAoTi0xKSkgKyBhMiAqIGNvcygoNCpQSSpuKSAvIChOLTEpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9KCkpO1xyXG5cclxuICAgIFQubW9kdWxlcy5GRlQgPSBGRlQ7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgZnVuY3Rpb24gT3NjaWxsYXRvcihzYW1wbGVyYXRlKSB7XHJcbiAgICAgICAgdGhpcy5zYW1wbGVyYXRlID0gc2FtcGxlcmF0ZSB8fCA0NDEwMDtcclxuXHJcbiAgICAgICAgdGhpcy53YXZlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN0ZXAgPSAxO1xyXG4gICAgICAgIHRoaXMuZnJlcXVlbmN5ID0gMDtcclxuICAgICAgICB0aGlzLnZhbHVlID0gMDtcclxuICAgICAgICB0aGlzLnBoYXNlID0gMDtcclxuICAgICAgICB0aGlzLmZlZWRiYWNrID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMuX3ggPSAwO1xyXG4gICAgICAgIHRoaXMuX2xhc3RvdXRzID0gMDtcclxuICAgICAgICB0aGlzLl9jb2VmZiA9IFRBQkxFX1NJWkUgLyB0aGlzLnNhbXBsZXJhdGU7XHJcbiAgICAgICAgdGhpcy5fcmFkdG9pbmMgPSBUQUJMRV9TSVpFIC8gKE1hdGguUEkgKiAyKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgVEFCTEVfU0laRSA9IDEwMjQ7XHJcbiAgICB2YXIgVEFCTEVfTUFTSyA9IFRBQkxFX1NJWkUgLSAxO1xyXG5cclxuICAgIHZhciAkID0gT3NjaWxsYXRvci5wcm90b3R5cGU7XHJcblxyXG4gICAgJC5zZXRXYXZlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICB2YXIgaSwgZHgsIHdhdmUgPSB0aGlzLndhdmU7XHJcbiAgICAgICAgaWYgKCF0aGlzLndhdmUpIHtcclxuICAgICAgICAgICAgdGhpcy53YXZlID0gbmV3IEZsb2F0MzJBcnJheShUQUJMRV9TSVpFICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgVEFCTEVfU0laRTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXZlW2ldID0gdmFsdWUoaSAvIFRBQkxFX1NJWkUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChULmZuLmlzU2lnbmFsQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IHdhdmUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB3YXZlLnNldCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkeCA9IHZhbHVlLmxlbmd0aCAvIFRBQkxFX1NJWkU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgVEFCTEVfU0laRTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2F2ZVtpXSA9IHZhbHVlWyhpICogZHgpfDBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgaWYgKChkeCA9IGdldFdhdmV0YWJsZSh2YWx1ZSkpICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud2F2ZS5zZXQoZHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMud2F2ZVtUQUJMRV9TSVpFXSA9IHRoaXMud2F2ZVswXTtcclxuICAgIH07XHJcblxyXG4gICAgJC5jbG9uZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBuZXdfaW5zdGFuY2UgPSBuZXcgT3NjaWxsYXRvcih0aGlzLnNhbXBsZXJhdGUpO1xyXG4gICAgICAgIG5ld19pbnN0YW5jZS53YXZlICAgICAgPSB0aGlzLndhdmU7XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLnN0ZXAgICAgICA9IHRoaXMuc3RlcDtcclxuICAgICAgICBuZXdfaW5zdGFuY2UuZnJlcXVlbmN5ID0gdGhpcy5mcmVxdWVuY3k7XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLnZhbHVlICAgICA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLnBoYXNlICAgICA9IHRoaXMucGhhc2U7XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLmZlZWRiYWNrICA9IHRoaXMuZmVlZGJhY2s7XHJcbiAgICAgICAgcmV0dXJuIG5ld19pbnN0YW5jZTtcclxuICAgIH07XHJcblxyXG4gICAgJC5yZXNldCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuX3ggPSAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLm5leHQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgeCA9IHRoaXMuX3g7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gKHggKyB0aGlzLnBoYXNlICogdGhpcy5fcmFkdG9pbmMpfDA7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMud2F2ZVtpbmRleCAmIFRBQkxFX01BU0tdO1xyXG4gICAgICAgIHggKz0gdGhpcy5mcmVxdWVuY3kgKiB0aGlzLl9jb2VmZiAqIHRoaXMuc3RlcDtcclxuICAgICAgICBpZiAoeCA+IFRBQkxFX1NJWkUpIHtcclxuICAgICAgICAgICAgeCAtPSBUQUJMRV9TSVpFO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl94ID0geDtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24oY2VsbCkge1xyXG4gICAgICAgIHZhciB3YXZlID0gdGhpcy53YXZlO1xyXG4gICAgICAgIHZhciByYWR0b2luYyA9IHRoaXMuX3JhZHRvaW5jO1xyXG4gICAgICAgIHZhciBwaGFzZSwgeCA9IHRoaXMuX3g7XHJcbiAgICAgICAgdmFyIGluZGV4LCBmcmFjLCB4MCwgeDEsIGR4ID0gdGhpcy5mcmVxdWVuY3kgKiB0aGlzLl9jb2VmZjtcclxuICAgICAgICB2YXIgaSwgaW1heCA9IHRoaXMuc3RlcDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZmVlZGJhY2spIHtcclxuICAgICAgICAgICAgdmFyIGxhc3RvdXRzID0gdGhpcy5fbGFzdG91dHM7XHJcbiAgICAgICAgICAgIHJhZHRvaW5jICo9IHRoaXMucGhhc2U7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHBoYXNlID0geCArIGxhc3RvdXRzICogcmFkdG9pbmM7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IHBoYXNlfDA7XHJcbiAgICAgICAgICAgICAgICBmcmFjICA9IHBoYXNlIC0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IGluZGV4ICYgVEFCTEVfTUFTSztcclxuICAgICAgICAgICAgICAgIHgwID0gd2F2ZVtpbmRleCAgXTtcclxuICAgICAgICAgICAgICAgIHgxID0gd2F2ZVtpbmRleCsxXTtcclxuICAgICAgICAgICAgICAgIGNlbGxbaV0gPSBsYXN0b3V0cyA9IHgwICsgZnJhYyAqICh4MSAtIHgwKTtcclxuICAgICAgICAgICAgICAgIHggKz0gZHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbGFzdG91dHMgPSBsYXN0b3V0cztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIgcGhhc2VvZmZzZXQgPSB0aGlzLnBoYXNlICogcmFkdG9pbmM7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHBoYXNlID0geCArIHBoYXNlb2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBwaGFzZXwwO1xyXG4gICAgICAgICAgICAgICAgZnJhYyAgPSBwaGFzZSAtIGluZGV4O1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleCAmIFRBQkxFX01BU0s7XHJcbiAgICAgICAgICAgICAgICB4MCA9IHdhdmVbaW5kZXggIF07XHJcbiAgICAgICAgICAgICAgICB4MSA9IHdhdmVbaW5kZXgrMV07XHJcbiAgICAgICAgICAgICAgICBjZWxsW2ldID0geDAgKyBmcmFjICogKHgxIC0geDApO1xyXG4gICAgICAgICAgICAgICAgeCArPSBkeDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeCA+IFRBQkxFX1NJWkUpIHtcclxuICAgICAgICAgICAgeCAtPSBUQUJMRV9TSVpFO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl94ID0geDtcclxuICAgICAgICB0aGlzLnZhbHVlID0gY2VsbFtjZWxsLmxlbmd0aCAtIDFdO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnByb2Nlc3NXaXRoRnJlcUFycmF5ID0gZnVuY3Rpb24oY2VsbCwgZnJlcXMpIHtcclxuICAgICAgICB2YXIgd2F2ZSA9IHRoaXMud2F2ZTtcclxuICAgICAgICB2YXIgcmFkdG9pbmMgPSB0aGlzLl9yYWR0b2luYztcclxuICAgICAgICB2YXIgcGhhc2UsIHggPSB0aGlzLl94O1xyXG4gICAgICAgIHZhciBpbmRleCwgZnJhYywgeDAsIHgxLCBkeCA9IHRoaXMuX2NvZWZmO1xyXG4gICAgICAgIHZhciBpLCBpbWF4ID0gdGhpcy5zdGVwO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5mZWVkYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgbGFzdG91dHMgPSB0aGlzLl9sYXN0b3V0cztcclxuICAgICAgICAgICAgcmFkdG9pbmMgKj0gdGhpcy5waGFzZTtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgcGhhc2UgPSB4ICsgbGFzdG91dHMgKiByYWR0b2luYztcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gcGhhc2V8MDtcclxuICAgICAgICAgICAgICAgIGZyYWMgID0gcGhhc2UgLSBpbmRleDtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kZXggJiBUQUJMRV9NQVNLO1xyXG4gICAgICAgICAgICAgICAgeDAgPSB3YXZlW2luZGV4ICBdO1xyXG4gICAgICAgICAgICAgICAgeDEgPSB3YXZlW2luZGV4KzFdO1xyXG4gICAgICAgICAgICAgICAgY2VsbFtpXSA9IGxhc3RvdXRzID0geDAgKyBmcmFjICogKHgxIC0geDApO1xyXG4gICAgICAgICAgICAgICAgeCArPSBmcmVxc1tpXSAqIGR4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3RvdXRzID0gbGFzdG91dHM7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHBoYXNlb2Zmc2V0ID0gdGhpcy5waGFzZSAqIHRoaXMuX3JhZHRvaW5jO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBwaGFzZSA9IHggKyBwaGFzZW9mZnNldDtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gcGhhc2V8MDtcclxuICAgICAgICAgICAgICAgIGZyYWMgID0gcGhhc2UgLSBpbmRleDtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kZXggJiBUQUJMRV9NQVNLO1xyXG4gICAgICAgICAgICAgICAgeDAgPSB3YXZlW2luZGV4ICBdO1xyXG4gICAgICAgICAgICAgICAgeDEgPSB3YXZlW2luZGV4KzFdO1xyXG4gICAgICAgICAgICAgICAgY2VsbFtpXSA9IHgwICsgZnJhYyAqICh4MSAtIHgwKTtcclxuICAgICAgICAgICAgICAgIHggKz0gZnJlcXNbaV0gKiBkeDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoeCA+IFRBQkxFX1NJWkUpIHtcclxuICAgICAgICAgICAgeCAtPSBUQUJMRV9TSVpFO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl94ID0geDtcclxuICAgICAgICB0aGlzLnZhbHVlID0gY2VsbFtjZWxsLmxlbmd0aCAtIDFdO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnByb2Nlc3NXaXRoUGhhc2VBcnJheSA9IGZ1bmN0aW9uKGNlbGwsIHBoYXNlcykge1xyXG4gICAgICAgIHZhciB3YXZlID0gdGhpcy53YXZlO1xyXG4gICAgICAgIHZhciByYWR0b2luYyA9IHRoaXMuX3JhZHRvaW5jO1xyXG4gICAgICAgIHZhciBwaGFzZSwgeCA9IHRoaXMuX3g7XHJcbiAgICAgICAgdmFyIGluZGV4LCBmcmFjLCB4MCwgeDEsIGR4ID0gdGhpcy5mcmVxdWVuY3kgKiB0aGlzLl9jb2VmZjtcclxuICAgICAgICB2YXIgaSwgaW1heCA9IHRoaXMuc3RlcDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZmVlZGJhY2spIHtcclxuICAgICAgICAgICAgdmFyIGxhc3RvdXRzID0gdGhpcy5fbGFzdG91dHM7XHJcbiAgICAgICAgICAgIHJhZHRvaW5jICo9IHRoaXMucGhhc2U7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHBoYXNlID0geCArIGxhc3RvdXRzICogcmFkdG9pbmM7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IHBoYXNlfDA7XHJcbiAgICAgICAgICAgICAgICBmcmFjICA9IHBoYXNlIC0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IGluZGV4ICYgVEFCTEVfTUFTSztcclxuICAgICAgICAgICAgICAgIHgwID0gd2F2ZVtpbmRleCAgXTtcclxuICAgICAgICAgICAgICAgIHgxID0gd2F2ZVtpbmRleCsxXTtcclxuICAgICAgICAgICAgICAgIGNlbGxbaV0gPSBsYXN0b3V0cyA9IHgwICsgZnJhYyAqICh4MSAtIHgwKTtcclxuICAgICAgICAgICAgICAgIHggKz0gZHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbGFzdG91dHMgPSBsYXN0b3V0cztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBwaGFzZSA9IHggKyBwaGFzZXNbaV0gKiByYWR0b2luYztcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gcGhhc2V8MDtcclxuICAgICAgICAgICAgICAgIGZyYWMgID0gcGhhc2UgLSBpbmRleDtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kZXggJiBUQUJMRV9NQVNLO1xyXG4gICAgICAgICAgICAgICAgeDAgPSB3YXZlW2luZGV4ICBdO1xyXG4gICAgICAgICAgICAgICAgeDEgPSB3YXZlW2luZGV4KzFdO1xyXG4gICAgICAgICAgICAgICAgY2VsbFtpXSA9IHgwICsgZnJhYyAqICh4MSAtIHgwKTtcclxuICAgICAgICAgICAgICAgIHggKz0gZHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHggPiBUQUJMRV9TSVpFKSB7XHJcbiAgICAgICAgICAgIHggLT0gVEFCTEVfU0laRTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5feCA9IHg7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IGNlbGxbY2VsbC5sZW5ndGggLSAxXTtcclxuICAgIH07XHJcblxyXG4gICAgJC5wcm9jZXNzV2l0aEZyZXFBbmRQaGFzZUFycmF5ID0gZnVuY3Rpb24oY2VsbCwgZnJlcXMsIHBoYXNlcykge1xyXG4gICAgICAgIHZhciB3YXZlID0gdGhpcy53YXZlO1xyXG4gICAgICAgIHZhciByYWR0b2luYyA9IHRoaXMuX3JhZHRvaW5jO1xyXG4gICAgICAgIHZhciBwaGFzZSwgeCA9IHRoaXMuX3g7XHJcbiAgICAgICAgdmFyIGluZGV4LCBmcmFjLCB4MCwgeDEsIGR4ID0gdGhpcy5fY29lZmY7XHJcbiAgICAgICAgdmFyIGksIGltYXggPSB0aGlzLnN0ZXA7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZlZWRiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBsYXN0b3V0cyA9IHRoaXMuX2xhc3RvdXRzO1xyXG4gICAgICAgICAgICByYWR0b2luYyAqPSB0aGlzLnBoYXNlO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBwaGFzZSA9IHggKyBsYXN0b3V0cyAqIHJhZHRvaW5jO1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBwaGFzZXwwO1xyXG4gICAgICAgICAgICAgICAgZnJhYyAgPSBwaGFzZSAtIGluZGV4O1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleCAmIFRBQkxFX01BU0s7XHJcbiAgICAgICAgICAgICAgICB4MCA9IHdhdmVbaW5kZXggIF07XHJcbiAgICAgICAgICAgICAgICB4MSA9IHdhdmVbaW5kZXgrMV07XHJcbiAgICAgICAgICAgICAgICBjZWxsW2ldID0gbGFzdG91dHMgPSB4MCArIGZyYWMgKiAoeDEgLSB4MCk7XHJcbiAgICAgICAgICAgICAgICB4ICs9IGZyZXFzW2ldICogZHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fbGFzdG91dHMgPSBsYXN0b3V0cztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBwaGFzZSA9IHggKyBwaGFzZXNbaV0gKiBUQUJMRV9TSVpFO1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBwaGFzZXwwO1xyXG4gICAgICAgICAgICAgICAgZnJhYyAgPSBwaGFzZSAtIGluZGV4O1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleCAmIFRBQkxFX01BU0s7XHJcbiAgICAgICAgICAgICAgICB4MCA9IHdhdmVbaW5kZXggIF07XHJcbiAgICAgICAgICAgICAgICB4MSA9IHdhdmVbaW5kZXgrMV07XHJcbiAgICAgICAgICAgICAgICBjZWxsW2ldID0geDAgKyBmcmFjICogKHgxIC0geDApO1xyXG4gICAgICAgICAgICAgICAgeCArPSBmcmVxc1tpXSAqIGR4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh4ID4gVEFCTEVfU0laRSkge1xyXG4gICAgICAgICAgICB4IC09IFRBQkxFX1NJWkU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3ggPSB4O1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBjZWxsW2NlbGwubGVuZ3RoIC0gMV07XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiB3YXZlc2hhcGUoc2lnbiwgbmFtZSwgc2hhcGUsIHdpZHRoKSB7XHJcbiAgICAgICAgdmFyIHdhdmUgPSBXYXZldGFibGVzW25hbWVdO1xyXG4gICAgICAgIHZhciBfd2F2ZTtcclxuICAgICAgICB2YXIgaSwgaW1heCwgaiwgam1heDtcclxuXHJcbiAgICAgICAgaWYgKHdhdmUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHdhdmUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICB3YXZlID0gd2F2ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoIChzaGFwZSkge1xyXG4gICAgICAgIGNhc2UgXCJAMVwiOlxyXG4gICAgICAgICAgICBmb3IgKGkgPSA1MTI7IGkgPCAxMDI0OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHdhdmVbaV0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJAMlwiOlxyXG4gICAgICAgICAgICBmb3IgKGkgPSA1MTI7IGkgPCAxMDI0OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHdhdmVbaV0gPSBNYXRoLmFicyh3YXZlW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiQDNcIjpcclxuICAgICAgICAgICAgZm9yIChpID0gMjU2OyBpIDwgIDUxMjsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXZlW2ldID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGkgPSA1MTI7IGkgPCAgNzY4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHdhdmVbaV0gPSBNYXRoLmFicyh3YXZlW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGkgPSA3Njg7IGkgPCAxMDI0OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHdhdmVbaV0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJANFwiOlxyXG4gICAgICAgICAgICBfd2F2ZSA9IG5ldyBGbG9hdDMyQXJyYXkoMTAyNCk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA1MTI7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgX3dhdmVbaV0gPSB3YXZlW2k8PDFdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdhdmUgPSBfd2F2ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcIkA1XCI6XHJcbiAgICAgICAgICAgIF93YXZlID0gbmV3IEZsb2F0MzJBcnJheSgxMDI0KTtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDUxMjsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBfd2F2ZVtpXSA9IE1hdGguYWJzKHdhdmVbaTw8MV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdhdmUgPSBfd2F2ZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBkdXR5LWN5Y2xlXHJcbiAgICAgICAgaWYgKHdpZHRoICE9PSB1bmRlZmluZWQgJiYgd2lkdGggIT09IDUwKSB7XHJcbiAgICAgICAgICAgIHdpZHRoICo9IDAuMDE7XHJcbiAgICAgICAgICAgIHdpZHRoID0gKHdpZHRoIDwgMCkgPyAwIDogKHdpZHRoID4gMSkgPyAxIDogd2lkdGg7XHJcblxyXG4gICAgICAgICAgICBfd2F2ZSA9IG5ldyBGbG9hdDMyQXJyYXkoMTAyNCk7XHJcbiAgICAgICAgICAgIGltYXggPSAoMTAyNCAqIHdpZHRoKXwwO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBfd2F2ZVtpXSA9IHdhdmVbKGkgLyBpbWF4ICogNTEyKXwwXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBqbWF4ID0gKDEwMjQgLSBpbWF4KTtcclxuICAgICAgICAgICAgZm9yIChqID0gMDsgaSA8IDEwMjQ7ICsraSwgKytqKSB7XHJcbiAgICAgICAgICAgICAgICBfd2F2ZVtpXSA9IHdhdmVbKGogLyBqbWF4ICogNTEyICsgNTEyKXwwXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3YXZlID0gX3dhdmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2lnbiA9PT0gXCIrXCIpIHtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEwMjQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgd2F2ZVtpXSA9IHdhdmVbaV0gKiAwLjUgKyAwLjU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHNpZ24gPT09IFwiLVwiKSB7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMDI0OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHdhdmVbaV0gKj0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdhdmU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gd2F2YihzcmMpIHtcclxuICAgICAgICB2YXIgd2F2ZSA9IG5ldyBGbG9hdDMyQXJyYXkoMTAyNCk7XHJcbiAgICAgICAgdmFyIG4gPSBzcmMubGVuZ3RoID4+IDE7XHJcbiAgICAgICAgaWYgKFsyLDQsOCwxNiwzMiw2NCwxMjgsMjU2LDUxMiwxMDI0XS5pbmRleE9mKG4pICE9PSAtMSkge1xyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IHBhcnNlSW50KHNyYy5zdWJzdHIoaSAqIDIsIDIpLCAxNik7XHJcblxyXG4gICAgICAgICAgICAgICAgeCA9ICh4ICYgMHg4MCkgPyAoeC0yNTYpIC8gMTI4LjAgOiB4IC8gMTI3LjA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgam1heCA9IDEwMjQgLyBuOyBqIDwgam1heDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2F2ZVtrKytdID0geDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gd2F2ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB3YXZjKHNyYykge1xyXG4gICAgICAgIHZhciB3YXZlID0gbmV3IEZsb2F0MzJBcnJheSgxMDI0KTtcclxuICAgICAgICBpZiAoc3JjLmxlbmd0aCA9PT0gOCkge1xyXG4gICAgICAgICAgICB2YXIgY29sb3IgPSBwYXJzZUludChzcmMsIDE2KTtcclxuICAgICAgICAgICAgdmFyIGJhciAgID0gbmV3IEZsb2F0MzJBcnJheSg4KTtcclxuICAgICAgICAgICAgdmFyIGksIGo7XHJcblxyXG4gICAgICAgICAgICBiYXJbMF0gPSAxO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBiYXJbaSsxXSA9IChjb2xvciAmIDB4MGYpICogMC4wNjI1OyAvLyAwLjA2MjUgPSAxLzE2XHJcbiAgICAgICAgICAgICAgICBjb2xvciA+Pj0gNDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHggPSAwLCBkeCA9IChpICsgMSkgLyAxMDI0O1xyXG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IDEwMjQ7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgIHdhdmVbal0gKz0gTWF0aC5zaW4oMiAqIE1hdGguUEkgKiB4KSAqIGJhcltpXTtcclxuICAgICAgICAgICAgICAgICAgICB4ICs9IGR4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgbWF4eCA9IDAsIGFic3g7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMDI0OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtYXh4IDwgKGFic3ggPSBNYXRoLmFicyh3YXZlW2ldKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXh4ID0gYWJzeDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobWF4eCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMDI0OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICB3YXZlW2ldIC89IG1heHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHdhdmU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGdldFdhdmV0YWJsZSA9IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgIHZhciB3YXZlID0gV2F2ZXRhYmxlc1trZXldO1xyXG4gICAgICAgIGlmICh3YXZlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB3YXZlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHdhdmUgPSB3YXZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHdhdmU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbTtcclxuICAgICAgICAvLyB3YXZlIHNoYXBpbmdcclxuICAgICAgICBtID0gL14oW1xcLStdPykoXFx3KykoPzpcXCgoQFswLTddKT86PyhcXGQrKT9cXCkpPyQvLmV4ZWMoa2V5KTtcclxuICAgICAgICBpZiAobSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YXIgc2lnbiA9IG1bMV0sIG5hbWUgPSBtWzJdLCBzaGFwZSA9IG1bM10sIHdpZHRoID0gbVs0XTtcclxuICAgICAgICAgICAgd2F2ZSA9IHdhdmVzaGFwZShzaWduLCBuYW1lLCBzaGFwZSwgd2lkdGgpO1xyXG4gICAgICAgICAgICBpZiAod2F2ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBXYXZldGFibGVzW2tleV0gPSB3YXZlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdhdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHdhdmUgYnl0ZXNcclxuICAgICAgICBtID0gL153YXZiXFwoKCg/OlswLTlhLWZBLUZdWzAtOWEtZkEtRl0pKylcXCkkLy5leGVjKGtleSk7XHJcbiAgICAgICAgaWYgKG0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHdhdmIobVsxXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB3YXZlIGNvbG9yXHJcbiAgICAgICAgbSA9IC9ed2F2Y1xcKChbMC05YS1mQS1GXXs4fSlcXCkkLy5leGVjKGtleSk7XHJcbiAgICAgICAgaWYgKG0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHdhdmMobVsxXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB3YXJuIG1lc3NhZ2VcclxuICAgIH07XHJcbiAgICBPc2NpbGxhdG9yLmdldFdhdmV0YWJsZSA9IGdldFdhdmV0YWJsZTtcclxuXHJcbiAgICB2YXIgc2V0V2F2ZXRhYmxlID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcclxuICAgICAgICB2YXIgZHgsIHdhdmUgPSBuZXcgRmxvYXQzMkFycmF5KDEwMjQpO1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTAyNDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXZlW2ldID0gdmFsdWUoaSAvIDEwMjQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChULmZuLmlzU2lnbmFsQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IHdhdmUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB3YXZlLnNldCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkeCA9IHZhbHVlLmxlbmd0aCAvIDEwMjQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTAyNDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2F2ZVtpXSA9IHZhbHVlWyhpICogZHgpfDBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFdhdmV0YWJsZXNbbmFtZV0gPSB3YXZlO1xyXG4gICAgfTtcclxuICAgIE9zY2lsbGF0b3Iuc2V0V2F2ZXRhYmxlID0gc2V0V2F2ZXRhYmxlO1xyXG5cclxuICAgIHZhciBXYXZldGFibGVzID0ge1xyXG4gICAgICAgIHNpbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB3YXZlID0gbmV3IEZsb2F0MzJBcnJheSgxMDI0KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDI0OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHdhdmVbaV0gPSBNYXRoLnNpbigyICogTWF0aC5QSSAqIChpLzEwMjQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gd2F2ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB3YXZlID0gbmV3IEZsb2F0MzJBcnJheSgxMDI0KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDI0OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHdhdmVbaV0gPSBNYXRoLmNvcygyICogTWF0aC5QSSAqIChpLzEwMjQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gd2F2ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHB1bHNlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHdhdmUgPSBuZXcgRmxvYXQzMkFycmF5KDEwMjQpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEwMjQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgd2F2ZVtpXSA9IChpIDwgNTEyKSA/ICsxIDogLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHdhdmU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0cmk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgd2F2ZSA9IG5ldyBGbG9hdDMyQXJyYXkoMTAyNCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHgsIGkgPSAwOyBpIDwgMTAyNDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB4ID0gKGkgLyAxMDI0KSAtIDAuMjU7XHJcbiAgICAgICAgICAgICAgICB3YXZlW2ldID0gMS4wIC0gNC4wICogTWF0aC5hYnMoTWF0aC5yb3VuZCh4KSAtIHgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB3YXZlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2F3OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHdhdmUgPSBuZXcgRmxvYXQzMkFycmF5KDEwMjQpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciB4LCBpID0gMDsgaSA8IDEwMjQ7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgeCA9IChpIC8gMTAyNCk7XHJcbiAgICAgICAgICAgICAgICB3YXZlW2ldID0gKzIuMCAqICh4IC0gTWF0aC5yb3VuZCh4KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHdhdmU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmYW1pOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGQgPSBbICswLjAwMCwgKzAuMTI1LCArMC4yNTAsICswLjM3NSwgKzAuNTAwLCArMC42MjUsICswLjc1MCwgKzAuODc1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgKzAuODc1LCArMC43NTAsICswLjYyNSwgKzAuNTAwLCArMC4zNzUsICswLjI1MCwgKzAuMTI1LCArMC4wMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAtMC4xMjUsIC0wLjI1MCwgLTAuMzc1LCAtMC41MDAsIC0wLjYyNSwgLTAuNzUwLCAtMC44NzUsIC0xLjAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgIC0xLjAwMCwgLTAuODc1LCAtMC43NTAsIC0wLjYyNSwgLTAuNTAwLCAtMC4zNzUsIC0wLjI1MCwgLTAuMTI1IF07XHJcbiAgICAgICAgICAgIHZhciB3YXZlID0gbmV3IEZsb2F0MzJBcnJheSgxMDI0KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDI0OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHdhdmVbaV0gPSBkWyhpIC8gMTAyNCAqIGQubGVuZ3RoKXwwXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gd2F2ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGtvbmFtaTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gWy0wLjYyNSwgLTAuODc1LCAtMC4xMjUsICswLjc1MCwgKyAwLjUwMCwgKzAuMTI1LCArMC41MDAsICswLjc1MCxcclxuICAgICAgICAgICAgICAgICAgICAgKzAuMjUwLCAtMC4xMjUsICswLjUwMCwgKzAuODc1LCArIDAuNjI1LCArMC4wMDAsICswLjI1MCwgKzAuMzc1LFxyXG4gICAgICAgICAgICAgICAgICAgICAtMC4xMjUsIC0wLjc1MCwgKzAuMDAwLCArMC42MjUsICsgMC4xMjUsIC0wLjUwMCwgLTAuMzc1LCAtMC4xMjUsXHJcbiAgICAgICAgICAgICAgICAgICAgIC0wLjc1MCwgLTEuMDAwLCAtMC42MjUsICswLjAwMCwgLSAwLjM3NSwgLTAuODc1LCAtMC42MjUsIC0wLjI1MCBdO1xyXG4gICAgICAgICAgICB2YXIgd2F2ZSA9IG5ldyBGbG9hdDMyQXJyYXkoMTAyNCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTAyNDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB3YXZlW2ldID0gZFsoaSAvIDEwMjQgKiBkLmxlbmd0aCl8MF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHdhdmU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBULm1vZHVsZXMuT3NjaWxsYXRvciA9IE9zY2lsbGF0b3I7XHJcblxyXG59KSh0aW1icmUpO1xyXG4vKipcclxuICogUG9ydCBvZiB0aGUgRnJlZXZlcmIgU2Nocm9kb2VyL01vb3JlciByZXZlcmIgbW9kZWwuXHJcbiAqIGh0dHBzOi8vY2NybWEuc3RhbmZvcmQuZWR1L35qb3MvcGFzcC9GcmVldmVyYi5odG1sXHJcbiovXHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgQ29tYlBhcmFtcyAgICA9IFsxMTE2LDExODgsMTI3NywxMzU2LDE0MjIsMTQ5MSwxNTU3LDE2MTddO1xyXG4gICAgdmFyIEFsbHBhc3NQYXJhbXMgPSBbMjI1LDU1Niw0NDEsMzQxXTtcclxuXHJcbiAgICBmdW5jdGlvbiBSZXZlcmIoc2FtcGxlcmF0ZSwgYnVmZmVyc2l6ZSkge1xyXG4gICAgICAgIHRoaXMuc2FtcGxlcmF0ZSA9IHNhbXBsZXJhdGU7XHJcblxyXG4gICAgICAgIHZhciBpLCBpbWF4O1xyXG4gICAgICAgIHZhciBrID0gc2FtcGxlcmF0ZSAvIDQ0MTAwO1xyXG5cclxuICAgICAgICBpbWF4ID0gQ29tYlBhcmFtcy5sZW5ndGggKiAyO1xyXG4gICAgICAgIHRoaXMuY29tYiA9IG5ldyBBcnJheShpbWF4KTtcclxuICAgICAgICB0aGlzLmNvbWJvdXQgPSBuZXcgQXJyYXkoaW1heCk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbWJbaV0gICAgPSBuZXcgQ29tYkZpbHRlcihDb21iUGFyYW1zW2kgJSBDb21iUGFyYW1zLmxlbmd0aF0gKiBrKTtcclxuICAgICAgICAgICAgdGhpcy5jb21ib3V0W2ldID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkoYnVmZmVyc2l6ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbWF4ID0gQWxscGFzc1BhcmFtcy5sZW5ndGggKiAyO1xyXG4gICAgICAgIHRoaXMuYWxscGFzcyA9IG5ldyBBcnJheShpbWF4KTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxscGFzc1tpXSA9IG5ldyBBbGxwYXNzRmlsdGVyKEFsbHBhc3NQYXJhbXNbaSAlIEFsbHBhc3NQYXJhbXMubGVuZ3RoXSAqIGspO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm91dHB1dHMgPSBbIG5ldyBULmZuLlNpZ25hbEFycmF5KGJ1ZmZlcnNpemUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFQuZm4uU2lnbmFsQXJyYXkoYnVmZmVyc2l6ZSkgXTtcclxuICAgICAgICB0aGlzLmRhbXAgPSAwO1xyXG4gICAgICAgIHRoaXMud2V0ICA9IDAuMzM7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0Um9vbVNpemUoMC41KTtcclxuICAgICAgICB0aGlzLnNldERhbXAoMC41KTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgJCA9IFJldmVyYi5wcm90b3R5cGU7XHJcblxyXG4gICAgJC5zZXRSb29tU2l6ZSA9IGZ1bmN0aW9uKHJvb21zaXplKSB7XHJcbiAgICAgICAgdmFyIGNvbWIgPSB0aGlzLmNvbWI7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gKHJvb21zaXplICogMC4yOCkgKyAwLjc7XHJcbiAgICAgICAgdGhpcy5yb29tc2l6ZSA9IHJvb21zaXplO1xyXG4gICAgICAgIGNvbWJbMF0uZmVlZGJhY2sgPSBjb21iWzFdLmZlZWRiYWNrID0gY29tYlsyXS5mZWVkYmFjayA9IGNvbWJbM10uZmVlZGJhY2sgPSBjb21iWzRdLmZlZWRiYWNrID0gY29tYls1XS5mZWVkYmFjayA9IGNvbWJbNl0uZmVlZGJhY2sgPSBjb21iWzddLmZlZWRiYWNrID0gY29tYls4XS5mZWVkYmFjayA9IGNvbWJbOV0uZmVlZGJhY2sgPSBjb21iWzEwXS5mZWVkYmFjayA9IGNvbWJbMTFdLmZlZWRiYWNrID0gY29tYlsxMl0uZmVlZGJhY2sgPSBjb21iWzEzXS5mZWVkYmFjayA9IGNvbWJbMTRdLmZlZWRiYWNrID0gY29tYlsxNV0uZmVlZGJhY2sgPSB2YWx1ZTtcclxuICAgIH07XHJcbiAgICAkLnNldERhbXAgPSBmdW5jdGlvbihkYW1wKSB7XHJcbiAgICAgICAgdmFyIGNvbWIgPSB0aGlzLmNvbWI7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gZGFtcCAqIDAuNDtcclxuICAgICAgICB0aGlzLmRhbXAgPSBkYW1wO1xyXG4gICAgICAgIGNvbWJbMF0uZGFtcCA9IGNvbWJbMV0uZGFtcCA9IGNvbWJbMl0uZGFtcCA9IGNvbWJbM10uZGFtcCA9IGNvbWJbNF0uZGFtcCA9IGNvbWJbNV0uZGFtcCA9IGNvbWJbNl0uZGFtcCA9IGNvbWJbN10uZGFtcCA9IGNvbWJbOF0uZGFtcCA9IGNvbWJbOV0uZGFtcCA9IGNvbWJbMTBdLmRhbXAgPSBjb21iWzExXS5kYW1wID0gY29tYlsxMl0uZGFtcCA9IGNvbWJbMTNdLmRhbXAgPSBjb21iWzE0XS5kYW1wID0gY29tYlsxNV0uZGFtcCA9IHZhbHVlO1xyXG5cclxuICAgIH07XHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbihjZWxsTCwgY2VsbFIpIHtcclxuICAgICAgICB2YXIgY29tYiA9IHRoaXMuY29tYjtcclxuICAgICAgICB2YXIgY29tYm91dCA9IHRoaXMuY29tYm91dDtcclxuICAgICAgICB2YXIgYWxscGFzcyA9IHRoaXMuYWxscGFzcztcclxuICAgICAgICB2YXIgb3V0cHV0MCA9IHRoaXMub3V0cHV0c1swXTtcclxuICAgICAgICB2YXIgb3V0cHV0MSA9IHRoaXMub3V0cHV0c1sxXTtcclxuICAgICAgICB2YXIgd2V0ID0gdGhpcy53ZXQsIGRyeSA9IDEgLSB3ZXQ7XHJcbiAgICAgICAgdmFyIGksIGltYXggPSBjZWxsTC5sZW5ndGg7XHJcblxyXG4gICAgICAgIGNvbWJbMF0ucHJvY2VzcyhjZWxsTCwgY29tYm91dFswXSk7XHJcbiAgICAgICAgY29tYlsxXS5wcm9jZXNzKGNlbGxMLCBjb21ib3V0WzFdKTtcclxuICAgICAgICBjb21iWzJdLnByb2Nlc3MoY2VsbEwsIGNvbWJvdXRbMl0pO1xyXG4gICAgICAgIGNvbWJbM10ucHJvY2VzcyhjZWxsTCwgY29tYm91dFszXSk7XHJcbiAgICAgICAgY29tYls0XS5wcm9jZXNzKGNlbGxMLCBjb21ib3V0WzRdKTtcclxuICAgICAgICBjb21iWzVdLnByb2Nlc3MoY2VsbEwsIGNvbWJvdXRbNV0pO1xyXG4gICAgICAgIGNvbWJbNl0ucHJvY2VzcyhjZWxsTCwgY29tYm91dFs2XSk7XHJcbiAgICAgICAgY29tYls3XS5wcm9jZXNzKGNlbGxMLCBjb21ib3V0WzddKTtcclxuXHJcbiAgICAgICAgY29tYlsgOF0ucHJvY2VzcyhjZWxsUiwgY29tYm91dFsgOF0pO1xyXG4gICAgICAgIGNvbWJbIDldLnByb2Nlc3MoY2VsbFIsIGNvbWJvdXRbIDldKTtcclxuICAgICAgICBjb21iWzEwXS5wcm9jZXNzKGNlbGxSLCBjb21ib3V0WzEwXSk7XHJcbiAgICAgICAgY29tYlsxMV0ucHJvY2VzcyhjZWxsUiwgY29tYm91dFsxMV0pO1xyXG4gICAgICAgIGNvbWJbMTJdLnByb2Nlc3MoY2VsbFIsIGNvbWJvdXRbMTJdKTtcclxuICAgICAgICBjb21iWzEzXS5wcm9jZXNzKGNlbGxSLCBjb21ib3V0WzEzXSk7XHJcbiAgICAgICAgY29tYlsxNF0ucHJvY2VzcyhjZWxsUiwgY29tYm91dFsxNF0pO1xyXG4gICAgICAgIGNvbWJbMTVdLnByb2Nlc3MoY2VsbFIsIGNvbWJvdXRbMTVdKTtcclxuXHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICBvdXRwdXQwW2ldID0gY29tYm91dFswXVtpXSArIGNvbWJvdXRbMV1baV0gKyBjb21ib3V0WzJdW2ldICsgY29tYm91dFszXVtpXSArIGNvbWJvdXRbNF1baV0gKyBjb21ib3V0WzVdW2ldICsgY29tYm91dFs2XVtpXSArIGNvbWJvdXRbN11baV07XHJcbiAgICAgICAgICAgIG91dHB1dDFbaV0gPSBjb21ib3V0WzhdW2ldICsgY29tYm91dFs5XVtpXSArIGNvbWJvdXRbMTBdW2ldICsgY29tYm91dFsxMV1baV0gKyBjb21ib3V0WzEyXVtpXSArIGNvbWJvdXRbMTNdW2ldICsgY29tYm91dFsxNF1baV0gKyBjb21ib3V0WzE1XVtpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWxscGFzc1swXS5wcm9jZXNzKG91dHB1dDAsIG91dHB1dDApO1xyXG4gICAgICAgIGFsbHBhc3NbMV0ucHJvY2VzcyhvdXRwdXQwLCBvdXRwdXQwKTtcclxuICAgICAgICBhbGxwYXNzWzJdLnByb2Nlc3Mob3V0cHV0MCwgb3V0cHV0MCk7XHJcbiAgICAgICAgYWxscGFzc1szXS5wcm9jZXNzKG91dHB1dDAsIG91dHB1dDApO1xyXG5cclxuICAgICAgICBhbGxwYXNzWzRdLnByb2Nlc3Mob3V0cHV0MSwgb3V0cHV0MSk7XHJcbiAgICAgICAgYWxscGFzc1s1XS5wcm9jZXNzKG91dHB1dDEsIG91dHB1dDEpO1xyXG4gICAgICAgIGFsbHBhc3NbNl0ucHJvY2VzcyhvdXRwdXQxLCBvdXRwdXQxKTtcclxuICAgICAgICBhbGxwYXNzWzddLnByb2Nlc3Mob3V0cHV0MSwgb3V0cHV0MSk7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgY2VsbExbaV0gPSBvdXRwdXQwW2ldICogd2V0ICsgY2VsbExbaV0gKiBkcnk7XHJcbiAgICAgICAgICAgIGNlbGxSW2ldID0gb3V0cHV0MVtpXSAqIHdldCArIGNlbGxSW2ldICogZHJ5O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gQ29tYkZpbHRlcihidWZmZXJzaXplKSB7XHJcbiAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgVC5mbi5TaWduYWxBcnJheShidWZmZXJzaXplfDApO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyc2l6ZSA9IHRoaXMuYnVmZmVyLmxlbmd0aDtcclxuICAgICAgICB0aGlzLmJ1ZmlkeCA9IDA7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFjayA9ICAwO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyc3RvcmUgPSAwO1xyXG4gICAgICAgIHRoaXMuZGFtcCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgQ29tYkZpbHRlci5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uKGlucHV0LCBvdXRwdXQpIHtcclxuICAgICAgICB2YXIgaW5zLCBvdXRzO1xyXG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcclxuICAgICAgICB2YXIgYnVmZmVyc2l6ZSA9IHRoaXMuYnVmZmVyc2l6ZTtcclxuICAgICAgICB2YXIgYnVmaWR4ID0gdGhpcy5idWZpZHg7XHJcbiAgICAgICAgdmFyIGZpbHRlcnN0b3JlID0gdGhpcy5maWx0ZXJzdG9yZTtcclxuICAgICAgICB2YXIgZmVlZGJhY2sgPSB0aGlzLmZlZWRiYWNrO1xyXG4gICAgICAgIHZhciBkYW1wMSA9IHRoaXMuZGFtcCwgZGFtcDIgPSAxIC0gZGFtcDE7XHJcbiAgICAgICAgdmFyIGksIGltYXggPSBpbnB1dC5sZW5ndGg7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgaW5zID0gaW5wdXRbaV0gKiAwLjAxNTtcclxuICAgICAgICAgICAgb3V0cyA9IGJ1ZmZlcltidWZpZHhdO1xyXG5cclxuICAgICAgICAgICAgZmlsdGVyc3RvcmUgPSAob3V0cyAqIGRhbXAyKSArIChmaWx0ZXJzdG9yZSAqIGRhbXAxKTtcclxuXHJcbiAgICAgICAgICAgIGJ1ZmZlcltidWZpZHhdID0gaW5zICsgKGZpbHRlcnN0b3JlICogZmVlZGJhY2spO1xyXG5cclxuICAgICAgICAgICAgaWYgKCsrYnVmaWR4ID49IGJ1ZmZlcnNpemUpIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmlkeCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG91dHB1dFtpXSA9IG91dHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJ1ZmlkeCA9IGJ1ZmlkeDtcclxuICAgICAgICB0aGlzLmZpbHRlcnN0b3JlID0gZmlsdGVyc3RvcmU7XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIEFsbHBhc3NGaWx0ZXIoYnVmZmVyc2l6ZSkge1xyXG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkoYnVmZmVyc2l6ZXwwKTtcclxuICAgICAgICB0aGlzLmJ1ZmZlcnNpemUgPSB0aGlzLmJ1ZmZlci5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy5idWZpZHggPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIEFsbHBhc3NGaWx0ZXIucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbihpbnB1dCwgb3V0cHV0KSB7XHJcbiAgICAgICAgdmFyIGlucywgb3V0cywgYnVmb3V0O1xyXG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcjtcclxuICAgICAgICB2YXIgYnVmZmVyc2l6ZSA9IHRoaXMuYnVmZmVyc2l6ZTtcclxuICAgICAgICB2YXIgYnVmaWR4ID0gdGhpcy5idWZpZHg7XHJcbiAgICAgICAgdmFyIGksIGltYXggPSBpbnB1dC5sZW5ndGg7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgaW5zID0gaW5wdXRbaV07XHJcblxyXG4gICAgICAgICAgICBidWZvdXQgPSBidWZmZXJbYnVmaWR4XTtcclxuXHJcbiAgICAgICAgICAgIG91dHMgPSAtaW5zICsgYnVmb3V0O1xyXG4gICAgICAgICAgICBidWZmZXJbYnVmaWR4XSA9IGlucyArIChidWZvdXQgKiAwLjUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCsrYnVmaWR4ID49IGJ1ZmZlcnNpemUpIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmlkeCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG91dHB1dFtpXSA9IG91dHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJ1ZmlkeCA9IGJ1ZmlkeDtcclxuICAgIH07XHJcblxyXG4gICAgVC5tb2R1bGVzLlJldmVyYiA9IFJldmVyYjtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgRHVtbXlCdWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KDYwKTtcclxuXHJcbiAgICBmdW5jdGlvbiBTY2lzc29yKHNvdW5kYnVmZmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBUYXBlKHNvdW5kYnVmZmVyKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc2lsZW5jZWJ1ZmZlciA9IHtcclxuICAgICAgICBidWZmZXI6RHVtbXlCdWZmZXIsIHNhbXBsZXJhdGU6MVxyXG4gICAgfTtcclxuXHJcbiAgICBTY2lzc29yLnNpbGVuY2UgPSBmdW5jdGlvbihkdXJhdGlvbikge1xyXG4gICAgICAgIHJldHVybiBuZXcgU2Npc3NvcihzaWxlbmNlYnVmZmVyKS5zbGljZSgwLCAxKS5maWxsKGR1cmF0aW9uKTtcclxuICAgIH07XHJcblxyXG4gICAgU2Npc3Nvci5qb2luID0gZnVuY3Rpb24odGFwZXMpIHtcclxuICAgICAgICB2YXIgbmV3X2luc3RhbmNlID0gbmV3IFRhcGUoKTtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXBlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGFwZXNbaV0gaW5zdGFuY2VvZiBUYXBlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdfaW5zdGFuY2UuYWRkX2ZyYWdtZW50cyh0YXBlc1tpXS5mcmFnbWVudHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3X2luc3RhbmNlO1xyXG4gICAgfTtcclxuXHJcbiAgICBmdW5jdGlvbiBUYXBlKHNvdW5kYnVmZmVyKSB7XHJcbiAgICAgICAgdGhpcy5mcmFnbWVudHMgPSBbXTtcclxuICAgICAgICBpZiAoc291bmRidWZmZXIpIHtcclxuICAgICAgICAgICAgdmFyIHNhbXBsZXJhdGUgPSBzb3VuZGJ1ZmZlci5zYW1wbGVyYXRlIHx8IDQ0MTAwO1xyXG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gICA9IHNvdW5kYnVmZmVyLmJ1ZmZlclswXS5sZW5ndGggLyBzYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICB0aGlzLmZyYWdtZW50cy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgbmV3IEZyYWdtZW50KHNvdW5kYnVmZmVyLCAwLCBkdXJhdGlvbilcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBTY2lzc29yLlRhcGUgPSBUYXBlO1xyXG5cclxuICAgIFRhcGUucHJvdG90eXBlLmFkZF9mcmFnbWVudCA9IGZ1bmN0aW9uKGZyYWdtZW50KSB7XHJcbiAgICAgICAgdGhpcy5mcmFnbWVudHMucHVzaChmcmFnbWVudCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIFRhcGUucHJvdG90eXBlLmFkZF9mcmFnbWVudHMgPSBmdW5jdGlvbihmcmFnbWVudHMpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYWdtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmZyYWdtZW50cy5wdXNoKGZyYWdtZW50c1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBUYXBlLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5mcmFnbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcmVzdWx0ICs9IHRoaXMuZnJhZ21lbnRzW2ldLmR1cmF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIFRhcGUucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGxlbmd0aCkge1xyXG4gICAgICAgIHZhciBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb24oKTtcclxuICAgICAgICBpZiAoc3RhcnQgKyBsZW5ndGggPiBkdXJhdGlvbikge1xyXG4gICAgICAgICAgICBsZW5ndGggPSBkdXJhdGlvbiAtIHN0YXJ0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG5ld19pbnN0YW5jZSAgPSBuZXcgVGFwZSgpO1xyXG4gICAgICAgIHZhciByZW1haW5pbmdzdGFydCAgPSBzdGFydDtcclxuICAgICAgICB2YXIgcmVtYWluaW5nbGVuZ3RoID0gbGVuZ3RoO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZnJhZ21lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnRzW2ldO1xyXG4gICAgICAgICAgICB2YXIgaXRlbXMgPSBmcmFnbWVudC5jcmVhdGUocmVtYWluaW5nc3RhcnQsIHJlbWFpbmluZ2xlbmd0aCk7XHJcbiAgICAgICAgICAgIHZhciBuZXdfZnJhZ21lbnQgPSBpdGVtc1swXTtcclxuICAgICAgICAgICAgcmVtYWluaW5nc3RhcnQgID0gaXRlbXNbMV07XHJcbiAgICAgICAgICAgIHJlbWFpbmluZ2xlbmd0aCA9IGl0ZW1zWzJdO1xyXG4gICAgICAgICAgICBpZiAobmV3X2ZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBuZXdfaW5zdGFuY2UuYWRkX2ZyYWdtZW50KG5ld19mcmFnbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlbWFpbmluZ2xlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXdfaW5zdGFuY2U7XHJcbiAgICB9O1xyXG4gICAgVGFwZS5wcm90b3R5cGUuY3V0ID0gVGFwZS5wcm90b3R5cGUuc2xpY2U7XHJcblxyXG4gICAgVGFwZS5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24ob3RoZXIpIHtcclxuICAgICAgICB2YXIgbmV3X2luc3RhbmNlID0gbmV3IFRhcGUoKTtcclxuICAgICAgICBuZXdfaW5zdGFuY2UuYWRkX2ZyYWdtZW50cyh0aGlzLmZyYWdtZW50cyk7XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLmFkZF9mcmFnbWVudHMob3RoZXIuZnJhZ21lbnRzKTtcclxuICAgICAgICByZXR1cm4gbmV3X2luc3RhbmNlO1xyXG4gICAgfTtcclxuXHJcbiAgICBUYXBlLnByb3RvdHlwZS5sb29wID0gZnVuY3Rpb24oY291bnQpIHtcclxuICAgICAgICB2YXIgaTtcclxuICAgICAgICB2YXIgb3JpZ19mcmFnbWVudHMgPSBbXTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5mcmFnbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgb3JpZ19mcmFnbWVudHMucHVzaCh0aGlzLmZyYWdtZW50c1tpXS5jbG9uZSgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG5ld19pbnN0YW5jZSA9IG5ldyBUYXBlKCk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpKysgKSB7XHJcbiAgICAgICAgICAgIG5ld19pbnN0YW5jZS5hZGRfZnJhZ21lbnRzKG9yaWdfZnJhZ21lbnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld19pbnN0YW5jZTtcclxuICAgIH07XHJcblxyXG4gICAgVGFwZS5wcm90b3R5cGUudGltZXMgPSBUYXBlLnByb3RvdHlwZS5sb29wO1xyXG5cclxuICAgIFRhcGUucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24oY291bnQpIHtcclxuICAgICAgICB2YXIgc3BsaXR0ZWRfZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uKCkgLyBjb3VudDtcclxuICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHRzLnB1c2godGhpcy5zbGljZShpICogc3BsaXR0ZWRfZHVyYXRpb24sIHNwbGl0dGVkX2R1cmF0aW9uKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRzO1xyXG4gICAgfTtcclxuXHJcbiAgICBUYXBlLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24oZmlsbGVkX2R1cmF0aW9uKSB7XHJcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpO1xyXG4gICAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBcIkVtcHR5RnJhZ21lbnRcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGxvb3BfY291bnQgPSAoZmlsbGVkX2R1cmF0aW9uIC8gZHVyYXRpb24pfDA7XHJcbiAgICAgICAgdmFyIHJlbWFpbiA9IGZpbGxlZF9kdXJhdGlvbiAlIGR1cmF0aW9uO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5sb29wKGxvb3BfY291bnQpLnBsdXModGhpcy5zbGljZSgwLCByZW1haW4pKTtcclxuICAgIH07XHJcblxyXG4gICAgVGFwZS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uKHN0YXJ0LCBsZW5ndGgsIHJlcGxhY2VkKSB7XHJcbiAgICAgICAgdmFyIG5ld19pbnN0YW5jZSA9IG5ldyBUYXBlKCk7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IHN0YXJ0ICsgbGVuZ3RoO1xyXG5cclxuICAgICAgICBuZXdfaW5zdGFuY2UgPSBuZXdfaW5zdGFuY2UucGx1cyh0aGlzLnNsaWNlKDAsIHN0YXJ0KSk7XHJcblxyXG4gICAgICAgIHZhciBuZXdfaW5zdGFuY2VfZHVyYXRpb24gPSBuZXdfaW5zdGFuY2UuZHVyYXRpb24oKTtcclxuICAgICAgICBpZiAobmV3X2luc3RhbmNlX2R1cmF0aW9uIDwgc3RhcnQpIHtcclxuICAgICAgICAgICAgbmV3X2luc3RhbmNlID0gbmV3X2luc3RhbmNlLnBsdXMoU2Npc3Nvci5zaWxlbmNlKHN0YXJ0LW5ld19pbnN0YW5jZV9kdXJhdGlvbikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbmV3X2luc3RhbmNlID0gbmV3X2luc3RhbmNlLnBsdXMocmVwbGFjZWQpO1xyXG5cclxuICAgICAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uKCk7XHJcbiAgICAgICAgaWYgKGR1cmF0aW9uID4gb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIG5ld19pbnN0YW5jZSA9IG5ld19pbnN0YW5jZS5wbHVzKHRoaXMuc2xpY2Uob2Zmc2V0LCBkdXJhdGlvbiAtIG9mZnNldCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ld19pbnN0YW5jZTtcclxuICAgIH07XHJcblxyXG4gICAgVGFwZS5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBuZXdfaW5zdGFuY2UgPSBuZXcgVGFwZSgpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5mcmFnbWVudHMubGVuZ3RoOyBpLS07ICkge1xyXG4gICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50c1tpXS5jbG9uZSgpO1xyXG4gICAgICAgICAgICBmcmFnbWVudC5yZXZlcnNlID0gIWZyYWdtZW50LmlzUmV2ZXJzZWQoKTtcclxuICAgICAgICAgICAgbmV3X2luc3RhbmNlLmFkZF9mcmFnbWVudChmcmFnbWVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3X2luc3RhbmNlO1xyXG4gICAgfTtcclxuXHJcbiAgICBUYXBlLnByb3RvdHlwZS5waXRjaCA9IGZ1bmN0aW9uKHBpdGNoLCBzdHJldGNoKSB7XHJcbiAgICAgICAgdmFyIG5ld19pbnN0YW5jZSA9IG5ldyBUYXBlKCk7XHJcblxyXG4gICAgICAgIHN0cmV0Y2ggPSBzdHJldGNoIHx8IGZhbHNlO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5mcmFnbWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGZyYWdtZW50ID0gdGhpcy5mcmFnbWVudHNbaV0uY2xvbmUoKTtcclxuICAgICAgICAgICAgZnJhZ21lbnQucGl0Y2ggICo9IHBpdGNoICogMC4wMTtcclxuICAgICAgICAgICAgZnJhZ21lbnQuc3RyZXRjaCA9IHN0cmV0Y2g7XHJcbiAgICAgICAgICAgIG5ld19pbnN0YW5jZS5hZGRfZnJhZ21lbnQoZnJhZ21lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ld19pbnN0YW5jZTtcclxuICAgIH07XHJcblxyXG4gICAgVGFwZS5wcm90b3R5cGUuc3RyZXRjaCA9IGZ1bmN0aW9uKGZhY3Rvcikge1xyXG4gICAgICAgIHZhciBmYWN0b3JfZm9yX3BpdGNoID0gMSAvIChmYWN0b3IgKiAwLjAxKSAqIDEwMDtcclxuICAgICAgICByZXR1cm4gdGhpcy5waXRjaChmYWN0b3JfZm9yX3BpdGNoLCB0cnVlKTtcclxuICAgIH07XHJcblxyXG4gICAgVGFwZS5wcm90b3R5cGUucGFuID0gZnVuY3Rpb24ocmlnaHRfcGVyY2VudCkge1xyXG4gICAgICAgIHZhciBuZXdfaW5zdGFuY2UgPSBuZXcgVGFwZSgpO1xyXG4gICAgICAgIGlmIChyaWdodF9wZXJjZW50ID4gMTAwKSB7XHJcbiAgICAgICAgICAgIHJpZ2h0X3BlcmNlbnQgPSAxMDA7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyaWdodF9wZXJjZW50IDwgMCkge1xyXG4gICAgICAgICAgICByaWdodF9wZXJjZW50ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZyYWdtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50c1tpXS5jbG9uZSgpO1xyXG4gICAgICAgICAgICBmcmFnbWVudC5wYW4gPSByaWdodF9wZXJjZW50O1xyXG4gICAgICAgICAgICBuZXdfaW5zdGFuY2UuYWRkX2ZyYWdtZW50KGZyYWdtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXdfaW5zdGFuY2U7XHJcbiAgICB9O1xyXG5cclxuICAgIFRhcGUucHJvdG90eXBlLnNpbGVuY2UgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gU2Npc3Nvci5zaWxlbmNlKHRoaXMuZHVyYXRpb24oKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIFRhcGUucHJvdG90eXBlLmpvaW4gPSBmdW5jdGlvbih0YXBlcykge1xyXG4gICAgICAgIHZhciBuZXdfaW5zdGFuY2UgPSBuZXcgVGFwZSgpO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhcGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0YXBlc1tpXSBpbnN0YW5jZW9mIFRhcGUpIHtcclxuICAgICAgICAgICAgICAgIG5ld19pbnN0YW5jZS5hZGRfZnJhZ21lbnRzKHRhcGVzW2ldLmZyYWdtZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXdfaW5zdGFuY2U7XHJcbiAgICB9O1xyXG5cclxuICAgIFRhcGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzYW1wbGVyYXRlID0gNDQxMDA7XHJcbiAgICAgICAgaWYgKHRoaXMuZnJhZ21lbnRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgc2FtcGxlcmF0ZSA9IHRoaXMuZnJhZ21lbnRzWzBdLnNhbXBsZXJhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzdHJlYW0gPSBuZXcgVGFwZVN0cmVhbSh0aGlzLCBzYW1wbGVyYXRlKTtcclxuICAgICAgICB2YXIgdG90YWxfc2FtcGxlcyA9ICh0aGlzLmR1cmF0aW9uKCkgKiBzYW1wbGVyYXRlKXwwO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNhbXBsZXJhdGU6IHNhbXBsZXJhdGUsXHJcbiAgICAgICAgICAgIGJ1ZmZlciAgICA6IHN0cmVhbS5mZXRjaCh0b3RhbF9zYW1wbGVzKVxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIEZyYWdtZW50KHNvdW5kYnVmZmVyLCBzdGFydCwgZHVyYXRpb24sIHJldmVyc2UsIHBpdGNoLCBzdHJldGNoLCBwYW4pIHtcclxuICAgICAgICBpZiAoIXNvdW5kYnVmZmVyKSB7XHJcbiAgICAgICAgICAgIHNvdW5kYnVmZmVyID0gc2lsZW5jZWJ1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5idWZmZXIgICAgID0gc291bmRidWZmZXIuYnVmZmVyWzBdO1xyXG4gICAgICAgIHRoaXMuc2FtcGxlcmF0ZSA9IHNvdW5kYnVmZmVyLnNhbXBsZXJhdGUgfHwgNDQxMDA7XHJcbiAgICAgICAgdGhpcy5zdGFydCAgICAgPSBzdGFydDtcclxuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG4gICAgICAgIHRoaXMucmV2ZXJzZSA9IHJldmVyc2UgfHwgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5waXRjaCAgID0gcGl0Y2ggICB8fCAxMDA7XHJcbiAgICAgICAgdGhpcy5zdHJldGNoID0gc3RyZXRjaCB8fCBmYWxzZTtcclxuICAgICAgICB0aGlzLnBhbiAgICAgPSBwYW4gICAgIHx8IDUwO1xyXG4gICAgfVxyXG5cclxuICAgIEZyYWdtZW50LnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kdXJhdGlvbiAqICgxMDAgLyB0aGlzLnBpdGNoKTtcclxuICAgIH07XHJcbiAgICBGcmFnbWVudC5wcm90b3R5cGUub3JpZ2luYWxfZHVyYXRpb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZHVyYXRpb247XHJcbiAgICB9O1xyXG4gICAgRnJhZ21lbnQucHJvdG90eXBlLmlzUmV2ZXJzZWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlO1xyXG4gICAgfTtcclxuICAgIEZyYWdtZW50LnByb3RvdHlwZS5pc1N0cmV0Y2hlZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0cmV0Y2hlZDtcclxuICAgIH07XHJcbiAgICBGcmFnbWVudC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24ocmVtYWluaW5nX3N0YXJ0LCByZW1haW5pbmdfbGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpO1xyXG4gICAgICAgIGlmIChyZW1haW5pbmdfc3RhcnQgPj0gZHVyYXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtudWxsLCByZW1haW5pbmdfc3RhcnQgLSBkdXJhdGlvbiwgcmVtYWluaW5nX2xlbmd0aF07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaGF2ZV9yZW1haW5fdG9fcmV0dWVuID0gKHJlbWFpbmluZ19zdGFydCArIHJlbWFpbmluZ19sZW5ndGgpID49IGR1cmF0aW9uO1xyXG5cclxuICAgICAgICB2YXIgbmV3X2xlbmd0aDtcclxuICAgICAgICBpZiAoaGF2ZV9yZW1haW5fdG9fcmV0dWVuKSB7XHJcbiAgICAgICAgICAgIG5ld19sZW5ndGggPSBkdXJhdGlvbiAtIHJlbWFpbmluZ19zdGFydDtcclxuICAgICAgICAgICAgcmVtYWluaW5nX2xlbmd0aCAtPSBuZXdfbGVuZ3RoO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5ld19sZW5ndGggPSByZW1haW5pbmdfbGVuZ3RoO1xyXG4gICAgICAgICAgICByZW1haW5pbmdfbGVuZ3RoID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBuZXdfZnJhZ21lbnQgPSB0aGlzLmNsb25lKCk7XHJcbiAgICAgICAgbmV3X2ZyYWdtZW50LnN0YXJ0ICAgICA9IHRoaXMuc3RhcnQgKyByZW1haW5pbmdfc3RhcnQgKiB0aGlzLnBpdGNoICogMC4wMTtcclxuICAgICAgICBuZXdfZnJhZ21lbnQuX2R1cmF0aW9uID0gbmV3X2xlbmd0aCAqIHRoaXMucGl0Y2ggKiAwLjAxO1xyXG4gICAgICAgIG5ld19mcmFnbWVudC5yZXZlcnNlICAgPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gW25ld19mcmFnbWVudCwgMCwgcmVtYWluaW5nX2xlbmd0aF07XHJcbiAgICB9O1xyXG5cclxuICAgIEZyYWdtZW50LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBuZXdfaW5zdGFuY2UgPSBuZXcgRnJhZ21lbnQoKTtcclxuICAgICAgICBuZXdfaW5zdGFuY2UuYnVmZmVyICAgICA9IHRoaXMuYnVmZmVyO1xyXG4gICAgICAgIG5ld19pbnN0YW5jZS5zYW1wbGVyYXRlID0gdGhpcy5zYW1wbGVyYXRlO1xyXG4gICAgICAgIG5ld19pbnN0YW5jZS5zdGFydCAgICAgPSB0aGlzLnN0YXJ0O1xyXG4gICAgICAgIG5ld19pbnN0YW5jZS5fZHVyYXRpb24gPSB0aGlzLl9kdXJhdGlvbjtcclxuICAgICAgICBuZXdfaW5zdGFuY2UucmV2ZXJzZSAgID0gdGhpcy5yZXZlcnNlO1xyXG4gICAgICAgIG5ld19pbnN0YW5jZS5waXRjaCAgICAgPSB0aGlzLnBpdGNoO1xyXG4gICAgICAgIG5ld19pbnN0YW5jZS5zdHJldGNoICAgPSB0aGlzLnN0cmV0Y2g7XHJcbiAgICAgICAgbmV3X2luc3RhbmNlLnBhbiAgICAgICA9IHRoaXMucGFuO1xyXG4gICAgICAgIHJldHVybiBuZXdfaW5zdGFuY2U7XHJcbiAgICB9O1xyXG4gICAgU2Npc3Nvci5GcmFnbWVudCA9IEZyYWdtZW50O1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBUYXBlU3RyZWFtKHRhcGUsIHNhbXBsZXJhdGUpIHtcclxuICAgICAgICB0aGlzLnRhcGUgPSB0YXBlO1xyXG4gICAgICAgIHRoaXMuZnJhZ21lbnRzICA9IHRhcGUuZnJhZ21lbnRzO1xyXG4gICAgICAgIHRoaXMuc2FtcGxlcmF0ZSA9IHNhbXBsZXJhdGUgfHwgNDQxMDA7XHJcblxyXG4gICAgICAgIHRoaXMuaXNFbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyICA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5idWZmZXJJbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5idWZmZXJJbmRleEluY3IgID0gMDtcclxuICAgICAgICB0aGlzLmJ1ZmZlckJlZ2luSW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyRW5kSW5kZXggICA9IDA7XHJcbiAgICAgICAgdGhpcy5mcmFnbWVudCAgICAgID0gbnVsbDtcclxuICAgICAgICB0aGlzLmZyYWdtZW50SW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMucGFuTCA9IDAuNTtcclxuICAgICAgICB0aGlzLnBhblIgPSAwLjU7XHJcbiAgICB9XHJcbiAgICBTY2lzc29yLlRhcGVTdHJlYW0gPSBUYXBlU3RyZWFtO1xyXG5cclxuICAgIFRhcGVTdHJlYW0ucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5pc0VuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5idWZmZXIgID0gbnVsbDtcclxuICAgICAgICB0aGlzLmJ1ZmZlckluZGV4ID0gMDtcclxuICAgICAgICB0aGlzLmJ1ZmZlckluZGV4SW5jciAgPSAwO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyQmVnaW5JbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5idWZmZXJFbmRJbmRleCAgID0gMDtcclxuICAgICAgICB0aGlzLmZyYWdtZW50ICAgICAgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZnJhZ21lbnRJbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5wYW5MID0gMC41O1xyXG4gICAgICAgIHRoaXMucGFuUiA9IDAuNTtcclxuICAgICAgICB0aGlzLmlzTG9vcGVkID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIFRhcGVTdHJlYW0ucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24obikge1xyXG4gICAgICAgIHZhciBjZWxsTCA9IG5ldyBULmZuLlNpZ25hbEFycmF5KG4pO1xyXG4gICAgICAgIHZhciBjZWxsUiA9IG5ldyBULmZuLlNpZ25hbEFycmF5KG4pO1xyXG4gICAgICAgIHZhciBmcmFnbWVudHMgICAgID0gdGhpcy5mcmFnbWVudHM7XHJcblxyXG4gICAgICAgIGlmIChmcmFnbWVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbY2VsbEwsIGNlbGxSXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzYW1wbGVyYXRlICA9IHRoaXMuc2FtcGxlcmF0ZSAqIDEwMDtcclxuICAgICAgICB2YXIgYnVmZmVyICAgICAgPSB0aGlzLmJ1ZmZlcjtcclxuICAgICAgICB2YXIgYnVmZmVySW5kZXggPSB0aGlzLmJ1ZmZlckluZGV4O1xyXG4gICAgICAgIHZhciBidWZmZXJJbmRleEluY3IgPSB0aGlzLmJ1ZmZlckluZGV4SW5jcjtcclxuICAgICAgICB2YXIgYnVmZmVyQmVnaW5JbmRleCA9IHRoaXMuYnVmZmVyQmVnaW5JbmRleDtcclxuICAgICAgICB2YXIgYnVmZmVyRW5kSW5kZXggICA9IHRoaXMuYnVmZmVyRW5kSW5kZXg7XHJcbiAgICAgICAgdmFyIGZyYWdtZW50ICAgICAgPSB0aGlzLmZyYWdtZW50O1xyXG4gICAgICAgIHZhciBmcmFnbWVudEluZGV4ID0gdGhpcy5mcmFnbWVudEluZGV4O1xyXG4gICAgICAgIHZhciBwYW47XHJcbiAgICAgICAgdmFyIHBhbkwgPSB0aGlzLnBhbkw7XHJcbiAgICAgICAgdmFyIHBhblIgPSB0aGlzLnBhblI7XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHdoaWxlICghYnVmZmVyIHx8XHJcbiAgICAgICAgICAgICAgICAgICBidWZmZXJJbmRleCA8IGJ1ZmZlckJlZ2luSW5kZXggfHwgYnVmZmVySW5kZXggPj0gYnVmZmVyRW5kSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZnJhZ21lbnQgfHwgZnJhZ21lbnRJbmRleCA8IGZyYWdtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudCA9IGZyYWdtZW50c1tmcmFnbWVudEluZGV4KytdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciAgID0gZnJhZ21lbnQuYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlckluZGV4SW5jciA9IGZyYWdtZW50LnNhbXBsZXJhdGUgLyBzYW1wbGVyYXRlICogZnJhZ21lbnQucGl0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyQmVnaW5JbmRleCA9IGZyYWdtZW50LnN0YXJ0ICogZnJhZ21lbnQuc2FtcGxlcmF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXJFbmRJbmRleCAgID0gYnVmZmVyQmVnaW5JbmRleCArIGZyYWdtZW50Lm9yaWdpbmFsX2R1cmF0aW9uKCkgKiBmcmFnbWVudC5zYW1wbGVyYXRlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBwYW4gPSAoZnJhZ21lbnQucGFuICogMC4wMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFuTCA9IDEgLSBwYW47XHJcbiAgICAgICAgICAgICAgICAgICAgcGFuUiA9IHBhbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyYWdtZW50LnJldmVyc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVySW5kZXhJbmNyICo9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJJbmRleCA9IGJ1ZmZlckVuZEluZGV4ICsgYnVmZmVySW5kZXhJbmNyO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlckluZGV4ID0gYnVmZmVyQmVnaW5JbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTG9vcGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlckluZGV4SW5jciAgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJCZWdpbkluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyRW5kSW5kZXggICA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50ICAgICAgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFnbWVudEluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgICA9IER1bW15QnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJJbmRleEluY3IgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjZWxsTFtpXSA9IGJ1ZmZlcltidWZmZXJJbmRleHwwXSAqIHBhbkw7XHJcbiAgICAgICAgICAgIGNlbGxSW2ldID0gYnVmZmVyW2J1ZmZlckluZGV4fDBdICogcGFuUjtcclxuICAgICAgICAgICAgYnVmZmVySW5kZXggKz0gYnVmZmVySW5kZXhJbmNyO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJ1ZmZlciAgICAgID0gYnVmZmVyO1xyXG4gICAgICAgIHRoaXMuYnVmZmVySW5kZXggPSBidWZmZXJJbmRleDtcclxuICAgICAgICB0aGlzLmJ1ZmZlckluZGV4SW5jciAgPSBidWZmZXJJbmRleEluY3I7XHJcbiAgICAgICAgdGhpcy5idWZmZXJCZWdpbkluZGV4ID0gYnVmZmVyQmVnaW5JbmRleDtcclxuICAgICAgICB0aGlzLmJ1ZmZlckVuZEluZGV4ICAgPSBidWZmZXJFbmRJbmRleDtcclxuICAgICAgICB0aGlzLmZyYWdtZW50ICAgICAgPSBmcmFnbWVudDtcclxuICAgICAgICB0aGlzLmZyYWdtZW50SW5kZXggPSBmcmFnbWVudEluZGV4O1xyXG4gICAgICAgIHRoaXMucGFuTCA9IHBhbkw7XHJcbiAgICAgICAgdGhpcy5wYW5SID0gcGFuUjtcclxuXHJcbiAgICAgICAgcmV0dXJuIFtjZWxsTCwgY2VsbFJdO1xyXG4gICAgfTtcclxuXHJcbiAgICBULm1vZHVsZXMuU2Npc3NvciA9IFNjaXNzb3I7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgZnVuY3Rpb24gU3RlcmVvRGVsYXkoc2FtcGxlcmF0ZSkge1xyXG4gICAgICAgIHRoaXMuc2FtcGxlcmF0ZSA9IHNhbXBsZXJhdGU7XHJcblxyXG4gICAgICAgIHZhciBiaXRzID0gTWF0aC5jZWlsKE1hdGgubG9nKHNhbXBsZXJhdGUgKiAxLjUpICogTWF0aC5MT0cyRSk7XHJcblxyXG4gICAgICAgIHRoaXMuYnVmZmVyc2l6ZSA9IDEgPDwgYml0cztcclxuICAgICAgICB0aGlzLmJ1ZmZlcm1hc2sgPSB0aGlzLmJ1ZmZlcnNpemUgLSAxO1xyXG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXJMID0gbmV3IFQuZm4uU2lnbmFsQXJyYXkodGhpcy5idWZmZXJzaXplKTtcclxuICAgICAgICB0aGlzLndyaXRlQnVmZmVyUiA9IG5ldyBULmZuLlNpZ25hbEFycmF5KHRoaXMuYnVmZmVyc2l6ZSk7XHJcbiAgICAgICAgdGhpcy5yZWFkQnVmZmVyTCA9IHRoaXMud3JpdGVCdWZmZXJMO1xyXG4gICAgICAgIHRoaXMucmVhZEJ1ZmZlclIgPSB0aGlzLndyaXRlQnVmZmVyUjtcclxuICAgICAgICB0aGlzLmRlbGF5dGltZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFjayAgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY3Jvc3MgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWl4ICAgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucHJldkwgPSAwO1xyXG4gICAgICAgIHRoaXMucHJldlIgPSAwO1xyXG5cclxuICAgICAgICB0aGlzLnJlYWRJbmRleCAgPSAwO1xyXG4gICAgICAgIHRoaXMud3JpdGVJbmRleCA9IDA7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0UGFyYW1zKDEyNSwgMC4yNSwgZmFsc2UsIDAuNDUpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciAkID0gU3RlcmVvRGVsYXkucHJvdG90eXBlO1xyXG5cclxuICAgICQuc2V0UGFyYW1zID0gZnVuY3Rpb24oZGVsYXl0aW1lLCBmZWVkYmFjaywgY3Jvc3MgLG1peCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRlbGF5dGltZSAhPT0gZGVsYXl0aW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVsYXl0aW1lID0gZGVsYXl0aW1lO1xyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gKGRlbGF5dGltZSAqIDAuMDAxICogdGhpcy5zYW1wbGVyYXRlKXwwO1xyXG4gICAgICAgICAgICBpZiAob2Zmc2V0ID4gdGhpcy5idWZmZXJtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmJ1ZmZlcm1hc2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy53cml0ZUluZGV4ID0gKHRoaXMucmVhZEluZGV4ICsgb2Zmc2V0KSAmIHRoaXMuYnVmZmVybWFzaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZmVlZGJhY2sgIT09IGZlZWRiYWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmVlZGJhY2sgPSBmZWVkYmFjaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY3Jvc3MgIT09IGNyb3NzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3Jvc3MgPSBjcm9zcztcclxuICAgICAgICAgICAgaWYgKGNyb3NzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRCdWZmZXJMID0gdGhpcy53cml0ZUJ1ZmZlclI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRCdWZmZXJSID0gdGhpcy53cml0ZUJ1ZmZlckw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRCdWZmZXJMID0gdGhpcy53cml0ZUJ1ZmZlckw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRCdWZmZXJSID0gdGhpcy53cml0ZUJ1ZmZlclI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubWl4ICE9PSBtaXgpIHtcclxuICAgICAgICAgICAgdGhpcy5taXggPSBtaXg7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbihjZWxsTCwgY2VsbFIpIHtcclxuICAgICAgICB2YXIgcmVhZEJ1ZmZlckwgPSB0aGlzLnJlYWRCdWZmZXJMO1xyXG4gICAgICAgIHZhciByZWFkQnVmZmVyUiA9IHRoaXMucmVhZEJ1ZmZlclI7XHJcbiAgICAgICAgdmFyIHdyaXRlQnVmZmVyTCA9IHRoaXMud3JpdGVCdWZmZXJMO1xyXG4gICAgICAgIHZhciB3cml0ZUJ1ZmZlclIgPSB0aGlzLndyaXRlQnVmZmVyUjtcclxuICAgICAgICB2YXIgcmVhZEluZGV4ICA9IHRoaXMucmVhZEluZGV4O1xyXG4gICAgICAgIHZhciB3cml0ZUluZGV4ID0gdGhpcy53cml0ZUluZGV4O1xyXG4gICAgICAgIHZhciBtYXNrID0gdGhpcy5idWZmZXJtYXNrO1xyXG4gICAgICAgIHZhciBmYiA9IHRoaXMuZmVlZGJhY2s7XHJcbiAgICAgICAgdmFyIHdldCA9IHRoaXMubWl4LCBkcnkgPSAxIC0gd2V0O1xyXG4gICAgICAgIHZhciBwcmV2TCA9IHRoaXMucHJldkw7XHJcbiAgICAgICAgdmFyIHByZXZSID0gdGhpcy5wcmV2UjtcclxuXHJcbiAgICAgICAgdmFyIHg7XHJcbiAgICAgICAgdmFyIGksIGltYXggPSBjZWxsTC5sZW5ndGg7XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgeCA9IHJlYWRCdWZmZXJMW3JlYWRJbmRleF07XHJcbiAgICAgICAgICAgIHdyaXRlQnVmZmVyTFt3cml0ZUluZGV4XSA9IGNlbGxMW2ldIC0geCAqIGZiO1xyXG4gICAgICAgICAgICBjZWxsTFtpXSA9IHByZXZMID0gKChjZWxsTFtpXSAqIGRyeSkgKyAoeCAqIHdldCkgKyBwcmV2TCkgKiAwLjU7XHJcblxyXG4gICAgICAgICAgICB4ID0gcmVhZEJ1ZmZlclJbcmVhZEluZGV4XTtcclxuICAgICAgICAgICAgd3JpdGVCdWZmZXJSW3dyaXRlSW5kZXhdID0gY2VsbFJbaV0gLSB4ICogZmI7XHJcbiAgICAgICAgICAgIGNlbGxSW2ldID0gcHJldlIgPSAoKGNlbGxSW2ldICogZHJ5KSArICh4ICogd2V0KSArIHByZXZSKSAqIDAuNTtcclxuXHJcbiAgICAgICAgICAgIHJlYWRJbmRleCAgKz0gMTtcclxuICAgICAgICAgICAgd3JpdGVJbmRleCA9ICh3cml0ZUluZGV4ICsgMSkgJiBtYXNrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5yZWFkSW5kZXggID0gcmVhZEluZGV4ICAmIHRoaXMuYnVmZmVybWFzaztcclxuICAgICAgICB0aGlzLndyaXRlSW5kZXggPSB3cml0ZUluZGV4O1xyXG4gICAgICAgIHRoaXMucHJldkwgPSBwcmV2TDtcclxuICAgICAgICB0aGlzLnByZXZSID0gcHJldlI7XHJcbiAgICB9O1xyXG5cclxuICAgIFQubW9kdWxlcy5TdGVyZW9EZWxheSA9IFN0ZXJlb0RlbGF5O1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcbiAgICB2YXIgbW9kdWxlcyA9IFQubW9kdWxlcztcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcImF1ZGlvXCIsIGZ1bmN0aW9uKF9hcmdzKSB7XHJcbiAgICAgICAgdmFyIEJ1ZmZlck5vZGUgPSBmbi5nZXRDbGFzcyhcImJ1ZmZlclwiKTtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQnVmZmVyTm9kZShfYXJncyk7XHJcblxyXG4gICAgICAgIGluc3RhbmNlLnBsYXliYWNrU3RhdGUgPSBmbi5GSU5JU0hFRF9TVEFURTtcclxuICAgICAgICBpbnN0YW5jZS5fLmlzTG9hZGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGluc3RhbmNlLCB7XHJcbiAgICAgICAgICAgIGlzTG9hZGVkOiB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uaXNMb2FkZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UubG9hZCAgICAgPSBsb2FkO1xyXG4gICAgICAgIGluc3RhbmNlLmxvYWR0aGlzID0gbG9hZHRoaXM7XHJcblxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBsb2FkID0gZnVuY3Rpb24oc3JjKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBfID0gdGhpcy5fO1xyXG4gICAgICAgIHZhciBkZmQgPSBuZXcgbW9kdWxlcy5EZWZlcnJlZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsIGkgPSAxO1xyXG5cclxuICAgICAgICBkZmQuZG9uZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi5fLmVtaXQoXCJkb25lXCIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGFyZ3NbaV0gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICBkZmQuZG9uZShhcmdzW2krK10pO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbaV0gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgZGZkLmZhaWwoYXJnc1tpKytdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgXy5sb2FkZWRUaW1lID0gMDtcclxuXHJcbiAgICAgICAgdmFyIG9ubG9hZGVkbWV0YWRhdGEgPSBmdW5jdGlvbihyZXN1bHQsIG1zZykge1xyXG4gICAgICAgICAgICB2YXIgXyA9IHNlbGYuXztcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5wbGF5YmFja1N0YXRlID0gZm4uUExBWUlOR19TVEFURTtcclxuICAgICAgICAgICAgICAgIF8uc2FtcGxlcmF0ZSA9IHJlc3VsdC5zYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICAgICAgXy5jaGFubmVscyAgID0gcmVzdWx0LmNoYW5uZWxzO1xyXG4gICAgICAgICAgICAgICAgXy5idWZmZXJNaXggID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIF8uYnVmZmVyICAgICA9IHJlc3VsdC5idWZmZXI7XHJcbiAgICAgICAgICAgICAgICBfLnBoYXNlICAgICAgPSAwO1xyXG4gICAgICAgICAgICAgICAgXy5waGFzZUluY3IgID0gcmVzdWx0LnNhbXBsZXJhdGUgLyBULnNhbXBsZXJhdGU7XHJcbiAgICAgICAgICAgICAgICBfLmR1cmF0aW9uICAgPSByZXN1bHQuZHVyYXRpb24gKiAxMDAwO1xyXG4gICAgICAgICAgICAgICAgXy5jdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5pc1JldmVyc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5waGFzZUluY3IgKj0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5waGFzZSA9IHJlc3VsdC5idWZmZXJbMF0ubGVuZ3RoICsgXy5waGFzZUluY3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWxmLl8uZW1pdChcImxvYWRlZG1ldGFkYXRhXCIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGZkLnJlamVjdChtc2cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIG9ubG9hZGVkZGF0YSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLl8uaXNMb2FkZWQgID0gdHJ1ZTtcclxuICAgICAgICAgICAgc2VsZi5fLnBsb3RGbHVzaCA9IHRydWU7XHJcbiAgICAgICAgICAgIHNlbGYuXy5lbWl0KFwibG9hZGVkZGF0YVwiKTtcclxuICAgICAgICAgICAgZGZkLnJlc29sdmVXaXRoKHNlbGYpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIG5ldyBtb2R1bGVzLkRlY29kZXIoKS5kZWNvZGUoc3JjLCBvbmxvYWRlZG1ldGFkYXRhLCBvbmxvYWRlZGRhdGEpO1xyXG5cclxuICAgICAgICByZXR1cm4gZGZkLnByb21pc2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGxvYWR0aGlzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbG9hZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gID0gVC5mbjtcclxuICAgIHZhciBGRlQgPSBULm1vZHVsZXMuRkZUO1xyXG4gICAgdmFyIEJpcXVhZCA9IFQubW9kdWxlcy5CaXF1YWQ7XHJcbiAgICB2YXIgUExPVF9MT1dfRlJFUSA9IDIwO1xyXG5cclxuICAgIGZ1bmN0aW9uIEJpcXVhZE5vZGUoX2FyZ3MpIHtcclxuICAgICAgICBULk9iamVjdC5jYWxsKHRoaXMsIDIsIF9hcmdzKTtcclxuICAgICAgICBmbi5maXhBUih0aGlzKTtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgXy5iaXF1YWQgPSBuZXcgQmlxdWFkKF8uc2FtcGxlcmF0ZSk7XHJcbiAgICAgICAgXy5mcmVxID0gVCgzNDApO1xyXG4gICAgICAgIF8uYmFuZCA9IFQoMSk7XHJcbiAgICAgICAgXy5nYWluID0gVCgwKTtcclxuXHJcbiAgICAgICAgXy5wbG90QmVmb3JlID0gcGxvdEJlZm9yZTtcclxuICAgICAgICBfLnBsb3RSYW5nZSAgPSBbLTE4LCAxOF07XHJcbiAgICAgICAgXy5wbG90Rmx1c2ggID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChCaXF1YWROb2RlKTtcclxuXHJcbiAgICB2YXIgcGxvdEJlZm9yZSA9IGZ1bmN0aW9uKGNvbnRleHQsIHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDE7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IFwicmdiKDE5MiwgMTkyLCAxOTIpXCI7XHJcbiAgICAgICAgdmFyIG55cXVpc3QgPSB0aGlzLl8uc2FtcGxlcmF0ZSAqIDAuNTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSAxMDsgKytpKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAxOyBqIDw9IDQ7IGorKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGYgPSBpICogTWF0aC5wb3coMTAsIGopO1xyXG4gICAgICAgICAgICAgICAgaWYgKGYgPD0gUExPVF9MT1dfRlJFUSB8fCBueXF1aXN0IDw9IGYpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgX3ggPSAoTWF0aC5sb2coZi9QTE9UX0xPV19GUkVRKSkgLyAoTWF0aC5sb2cobnlxdWlzdC9QTE9UX0xPV19GUkVRKSk7XHJcbiAgICAgICAgICAgICAgICBfeCA9ICgoX3ggKiB3aWR0aCArIHgpfDApICsgMC41O1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oX3gsIHkpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oX3gsIHkgKyBoZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGggPSBoZWlnaHQgLyA2O1xyXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCA2OyBpKyspIHtcclxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgdmFyIF95ID0gKCh5ICsgKGkgKiBoKSl8MCkgKyAwLjU7XHJcbiAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHgsIF95KTtcclxuICAgICAgICAgICAgY29udGV4dC5saW5lVG8oeCArIHdpZHRoLCBfeSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgJCA9IEJpcXVhZE5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICB0eXBlOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBfLmJpcXVhZC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5iaXF1YWQuc2V0VHlwZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5wbG90Rmx1c2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5iaXF1YWQudHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZnJlcToge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uZnJlcSA9IFQodmFsdWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5mcmVxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjdXRvZmY6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmZyZXEgPSBUKHZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uZnJlcTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVzOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5iYW5kID0gVCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmJhbmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIFE6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmJhbmQgPSBUKHZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uYmFuZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmFuZDoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uYmFuZCA9IFQodmFsdWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5iYW5kO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnYWluOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5nYWluID0gVCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmdhaW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICBmbi5pbnB1dFNpZ25hbEFSKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGZyZXEgPSBfLmZyZXEucHJvY2Vzcyh0aWNrSUQpLmNlbGxzWzBdWzBdO1xyXG4gICAgICAgICAgICB2YXIgYmFuZCA9IF8uYmFuZC5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF07XHJcbiAgICAgICAgICAgIHZhciBnYWluID0gXy5nYWluLnByb2Nlc3ModGlja0lEKS5jZWxsc1swXVswXTtcclxuICAgICAgICAgICAgaWYgKF8ucHJldkZyZXEgIT09IGZyZXEgfHwgXy5wcmV2YmFuZCAhPT0gYmFuZCB8fCBfLnByZXZHYWluICE9PSBnYWluKSB7XHJcbiAgICAgICAgICAgICAgICBfLnByZXZGcmVxID0gZnJlcTtcclxuICAgICAgICAgICAgICAgIF8ucHJldmJhbmQgPSBiYW5kO1xyXG4gICAgICAgICAgICAgICAgXy5wcmV2R2FpbiA9IGdhaW47XHJcbiAgICAgICAgICAgICAgICBfLmJpcXVhZC5zZXRQYXJhbXMoZnJlcSwgYmFuZCwgZ2Fpbik7XHJcbiAgICAgICAgICAgICAgICBfLnBsb3RGbHVzaCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghXy5ieXBhc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgXy5iaXF1YWQucHJvY2Vzcyh0aGlzLmNlbGxzWzFdLCB0aGlzLmNlbGxzWzJdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGZmdCA9IG5ldyBGRlQoMjA0OCk7XHJcbiAgICB2YXIgc3VwZXJfcGxvdCA9IFQuT2JqZWN0LnByb3RvdHlwZS5wbG90O1xyXG5cclxuICAgICQucGxvdCA9IGZ1bmN0aW9uKG9wdHMpIHtcclxuICAgICAgICBpZiAodGhpcy5fLnBsb3RGbHVzaCkge1xyXG4gICAgICAgICAgICB2YXIgYmlxdWFkID0gbmV3IEJpcXVhZCh0aGlzLl8uc2FtcGxlcmF0ZSk7XHJcbiAgICAgICAgICAgIGJpcXVhZC5zZXRUeXBlKHRoaXMudHlwZSk7XHJcbiAgICAgICAgICAgIGJpcXVhZC5zZXRQYXJhbXModGhpcy5mcmVxLnZhbHVlT2YoKSwgdGhpcy5iYW5kLnZhbHVlT2YoKSwgdGhpcy5nYWluLnZhbHVlT2YoKSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgaW1wbHVzZSA9IG5ldyBGbG9hdDMyQXJyYXkoZmZ0Lmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGltcGx1c2VbMF0gPSAxO1xyXG5cclxuICAgICAgICAgICAgYmlxdWFkLnByb2Nlc3MoaW1wbHVzZSwgaW1wbHVzZSk7XHJcbiAgICAgICAgICAgIGZmdC5mb3J3YXJkKGltcGx1c2UpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNpemUgPSA1MTI7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gbmV3IEZsb2F0MzJBcnJheShzaXplKTtcclxuICAgICAgICAgICAgdmFyIG55cXVpc3QgID0gdGhpcy5fLnNhbXBsZXJhdGUgKiAwLjU7XHJcbiAgICAgICAgICAgIHZhciBzcGVjdHJ1bSA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSk7XHJcbiAgICAgICAgICAgIHZhciBpLCBqLCBmLCBpbmRleCwgZGVsdGEsIHgwLCB4MSwgeHg7XHJcblxyXG4gICAgICAgICAgICBmZnQuZ2V0RnJlcXVlbmN5RGF0YShzcGVjdHJ1bSk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGYgPSBNYXRoLnBvdyhueXF1aXN0IC8gUExPVF9MT1dfRlJFUSwgaSAvIHNpemUpICogUExPVF9MT1dfRlJFUTtcclxuICAgICAgICAgICAgICAgIGogPSBmIC8gKG55cXVpc3QgLyBzcGVjdHJ1bS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBqfDA7XHJcbiAgICAgICAgICAgICAgICBkZWx0YSA9IGogLSBpbmRleDtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxID0geDAgPSB4eCA9IHNwZWN0cnVtW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDAgPSBzcGVjdHJ1bVtpbmRleCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHgxID0gc3BlY3RydW1baW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIHh4ID0gKCgxLjAgLSBkZWx0YSkgKiB4MCArIGRlbHRhICogeDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGF0YVtpXSA9IHh4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuXy5wbG90RGF0YSAgPSBkYXRhO1xyXG4gICAgICAgICAgICB0aGlzLl8ucGxvdEZsdXNoID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyX3Bsb3QuY2FsbCh0aGlzLCBvcHRzKTtcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJiaXF1YWRcIiwgQmlxdWFkTm9kZSk7XHJcbiAgICBmbi5yZWdpc3RlcihcImxvd3Bhc3NcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpcXVhZE5vZGUoX2FyZ3MpLnNldChcInR5cGVcIiwgXCJsb3dwYXNzXCIpO1xyXG4gICAgfSk7XHJcbiAgICBmbi5yZWdpc3RlcihcImhpZ2hwYXNzXCIsIGZ1bmN0aW9uKF9hcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaXF1YWROb2RlKF9hcmdzKS5zZXQoXCJ0eXBlXCIsIFwiaGlnaHBhc3NcIik7XHJcbiAgICB9KTtcclxuICAgIGZuLnJlZ2lzdGVyKFwiYmFuZHBhc3NcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpcXVhZE5vZGUoX2FyZ3MpLnNldChcInR5cGVcIiwgXCJiYW5kcGFzc1wiKTtcclxuICAgIH0pO1xyXG4gICAgZm4ucmVnaXN0ZXIoXCJsb3dzaGVsZlwiLCBmdW5jdGlvbihfYXJncykge1xyXG4gICAgICAgIHJldHVybiBuZXcgQmlxdWFkTm9kZShfYXJncykuc2V0KFwidHlwZVwiLCBcImxvd3NoZWxmXCIpO1xyXG4gICAgfSk7XHJcbiAgICBmbi5yZWdpc3RlcihcImhpZ2hzaGVsZlwiLCBmdW5jdGlvbihfYXJncykge1xyXG4gICAgICAgIHJldHVybiBuZXcgQmlxdWFkTm9kZShfYXJncykuc2V0KFwidHlwZVwiLCBcImhpZ2hzaGVsZlwiKTtcclxuICAgIH0pO1xyXG4gICAgZm4ucmVnaXN0ZXIoXCJwZWFraW5nXCIsIGZ1bmN0aW9uKF9hcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBCaXF1YWROb2RlKF9hcmdzKS5zZXQoXCJ0eXBlXCIsIFwicGVha2luZ1wiKTtcclxuICAgIH0pO1xyXG4gICAgZm4ucmVnaXN0ZXIoXCJub3RjaFwiLCBmdW5jdGlvbihfYXJncykge1xyXG4gICAgICAgIHJldHVybiBuZXcgQmlxdWFkTm9kZShfYXJncykuc2V0KFwidHlwZVwiLCBcIm5vdGNoXCIpO1xyXG4gICAgfSk7XHJcbiAgICBmbi5yZWdpc3RlcihcImFsbHBhc3NcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEJpcXVhZE5vZGUoX2FyZ3MpLnNldChcInR5cGVcIiwgXCJhbGxwYXNzXCIpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZm4uYWxpYXMoXCJscGZcIiwgXCJsb3dwYXNzXCIpO1xyXG4gICAgZm4uYWxpYXMoXCJocGZcIiwgXCJoaWdocGFzc1wiKTtcclxuICAgIGZuLmFsaWFzKFwiYnBmXCIsIFwiYmFuZHBhc3NcIik7XHJcbiAgICBmbi5hbGlhcyhcImJlZlwiLCBcIm5vdGNoXCIpO1xyXG4gICAgZm4uYWxpYXMoXCJicmZcIiwgXCJub3RjaFwiKTtcclxuICAgIGZuLmFsaWFzKFwiYXBmXCIsIFwiYWxscGFzc1wiKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG4gICAgdmFyIFRhcGUgPSBULm1vZHVsZXMuU2Npc3Nvci5UYXBlO1xyXG4gICAgdmFyIGlzU2lnbmFsQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICByZXR1cm4gZm4uaXNTaWduYWxBcnJheShvYmopIHx8IG9iaiBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gQnVmZmVyTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMSwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBfLnBpdGNoICAgICAgPSBUKDEpO1xyXG4gICAgICAgIF8uc2FtcGxlcmF0ZSA9IDQ0MTAwO1xyXG4gICAgICAgIF8uY2hhbm5lbHMgICA9IDA7XHJcbiAgICAgICAgXy5idWZmZXJNaXggID0gbnVsbDtcclxuICAgICAgICBfLmJ1ZmZlciAgICAgPSBbXTtcclxuICAgICAgICBfLmlzTG9vcGVkICAgPSBmYWxzZTtcclxuICAgICAgICBfLmlzUmV2ZXJzZWQgPSBmYWxzZTtcclxuICAgICAgICBfLmR1cmF0aW9uICAgID0gMDtcclxuICAgICAgICBfLmN1cnJlbnRUaW1lID0gMDtcclxuICAgICAgICBfLmN1cnJlbnRUaW1lT2JqID0gbnVsbDtcclxuICAgICAgICBfLnBoYXNlID0gMDtcclxuICAgICAgICBfLnBoYXNlSW5jciA9IDA7XHJcbiAgICAgICAgXy5vbmVuZGVkICA9IGZuLm1ha2Vfb25lbmRlZCh0aGlzLCAwKTtcclxuICAgICAgICBfLm9ubG9vcGVkID0gbWFrZV9vbmxvb3BlZCh0aGlzKTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChCdWZmZXJOb2RlKTtcclxuXHJcbiAgICB2YXIgbWFrZV9vbmxvb3BlZCA9IGZ1bmN0aW9uKHNlbGYpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBfID0gc2VsZi5fO1xyXG4gICAgICAgICAgICBpZiAoXy5waGFzZSA+PSBfLmJ1ZmZlclswXS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIF8ucGhhc2UgPSAwO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8ucGhhc2UgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBfLnBoYXNlID0gXy5idWZmZXJbMF0ubGVuZ3RoICsgXy5waGFzZUluY3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VsZi5fLmVtaXQoXCJsb29wZWRcIik7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyICQgPSBCdWZmZXJOb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICB2YXIgc2V0QnVmZmVyID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBbXSwgc2FtcGxlcmF0ZSwgY2hhbm5lbHM7XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNTaWduYWxBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlclswXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY2hhbm5lbHMgPSAxO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVC5PYmplY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBUYXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5nZXRCdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlLmJ1ZmZlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNTaWduYWxBcnJheSh2YWx1ZS5idWZmZXJbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1NpZ25hbEFycmF5KHZhbHVlLmJ1ZmZlclsxXSkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzU2lnbmFsQXJyYXkodmFsdWUuYnVmZmVyWzJdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHMgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gdmFsdWUuYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbHMgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gW3ZhbHVlLmJ1ZmZlclswXV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzU2lnbmFsQXJyYXkodmFsdWUuYnVmZmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxzID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBbdmFsdWUuYnVmZmVyXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUuc2FtcGxlcmF0ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZXJhdGUgPSB2YWx1ZS5zYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChidWZmZXIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2FtcGxlcmF0ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBfLnNhbXBsZXJhdGUgPSB2YWx1ZS5zYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXy5idWZmZXJNaXggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgXy5idWZmZXIgID0gYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgXy5waGFzZSAgICAgPSAwO1xyXG4gICAgICAgICAgICAgICAgXy5waGFzZUluY3IgPSBfLnNhbXBsZXJhdGUgLyBULnNhbXBsZXJhdGU7XHJcbiAgICAgICAgICAgICAgICBfLmR1cmF0aW9uICA9IF8uYnVmZmVyWzBdLmxlbmd0aCAqIDEwMDAgLyBfLnNhbXBsZXJhdGU7XHJcbiAgICAgICAgICAgICAgICBfLmN1cnJlbnRUaW1lID0gMDtcclxuICAgICAgICAgICAgICAgIF8ucGxvdEZsdXNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmV2ZXJzZShfLmlzUmV2ZXJzZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgYnVmZmVyOiB7XHJcbiAgICAgICAgICAgIHNldDogc2V0QnVmZmVyLFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZXJhdGU6IF8uc2FtcGxlcmF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBjaGFubmVscyAgOiBfLmNoYW5uZWxzLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciAgICA6IF8uYnVmZmVyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwaXRjaDoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8ucGl0Y2ggPSBUKHZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ucGl0Y2g7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzTG9vcGVkOiB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmlzTG9vcGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc1JldmVyc2VkOiB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmlzUmV2ZXJzZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNhbXBsZXJhdGU6IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uc2FtcGxlcmF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZHVyYXRpb246IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uZHVyYXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGN1cnJlbnRUaW1lOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSBfLmR1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucGhhc2UgPSAodmFsdWUgLyAxMDAwKSAqIF8uc2FtcGxlcmF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50VGltZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBULk9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5jdXJyZW50VGltZU9iaiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5jdXJyZW50VGltZU9iaiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fLmN1cnJlbnRUaW1lT2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5jdXJyZW50VGltZU9iajtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5jdXJyZW50VGltZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQuY2xvbmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBmbi5jbG9uZSh0aGlzKTtcclxuXHJcbiAgICAgICAgaWYgKF8uYnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBzZXRCdWZmZXIuY2FsbChpbnN0YW5jZSwge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyICAgIDogXy5idWZmZXIsXHJcbiAgICAgICAgICAgICAgICBzYW1wbGVyYXRlOiBfLnNhbXBsZXJhdGUsXHJcbiAgICAgICAgICAgICAgICBjaGFubmVscyAgOiBfLmNoYW5uZWxzXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnN0YW5jZS5sb29wKF8uaXNMb29wZWQpO1xyXG4gICAgICAgIGluc3RhbmNlLnJldmVyc2UoXy5pc1JldmVyc2VkKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnNsaWNlID0gZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9IFQoXy5vcmlnaW5rZXkpO1xyXG4gICAgICAgIHZhciBpc1JldmVyc2VkID0gXy5pc1JldmVyc2VkO1xyXG5cclxuICAgICAgICBpZiAoXy5idWZmZXIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYmVnaW4gPT09IFwibnVtYmVyXCIgKXtcclxuICAgICAgICAgICAgICAgIGJlZ2luID0gKGJlZ2luICogMC4wMDEgKiBfLnNhbXBsZXJhdGUpfDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiZWdpbiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgIGVuZCAgID0gKGVuZCAgICogMC4wMDEgKiBfLnNhbXBsZXJhdGUpfDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbmQgPSBfLmJ1ZmZlclswXS5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGJlZ2luID4gZW5kKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG1wID0gYmVnaW47XHJcbiAgICAgICAgICAgICAgICBiZWdpbiA9IGVuZDtcclxuICAgICAgICAgICAgICAgIGVuZCAgID0gdG1wO1xyXG4gICAgICAgICAgICAgICAgaXNSZXZlcnNlZCA9ICFpc1JldmVyc2VkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5jaGFubmVscyA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgc2V0QnVmZmVyLmNhbGwoaW5zdGFuY2UsIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXIgICA6IFsgZm4ucG9pbnRlcihfLmJ1ZmZlclswXSwgYmVnaW4sIGVuZC1iZWdpbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuLnBvaW50ZXIoXy5idWZmZXJbMV0sIGJlZ2luLCBlbmQtYmVnaW4pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbi5wb2ludGVyKF8uYnVmZmVyWzJdLCBiZWdpbiwgZW5kLWJlZ2luKSBdLFxyXG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZXJhdGU6IF8uc2FtcGxlcmF0ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZXRCdWZmZXIuY2FsbChpbnN0YW5jZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogZm4ucG9pbnRlcihfLmJ1ZmZlclswXSwgYmVnaW4sIGVuZC1iZWdpbiksXHJcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlcmF0ZTogXy5zYW1wbGVyYXRlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbnN0YW5jZS5wbGF5YmFja1N0YXRlID0gZm4uUExBWUlOR19TVEFURTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5zdGFuY2UubG9vcChfLmlzTG9vcGVkKTtcclxuICAgICAgICBpbnN0YW5jZS5yZXZlcnNlKF8uaXNSZXZlcnNlZCk7XHJcblxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH07XHJcblxyXG4gICAgJC5yZXZlcnNlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgXy5pc1JldmVyc2VkID0gISF2YWx1ZTtcclxuICAgICAgICBpZiAoXy5pc1JldmVyc2VkKSB7XHJcbiAgICAgICAgICAgIGlmIChfLnBoYXNlSW5jciA+IDApIHtcclxuICAgICAgICAgICAgICAgIF8ucGhhc2VJbmNyICo9IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChfLnBoYXNlID09PSAwICYmIF8uYnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgXy5waGFzZSA9IF8uYnVmZmVyWzBdLmxlbmd0aCArIF8ucGhhc2VJbmNyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKF8ucGhhc2VJbmNyIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgXy5waGFzZUluY3IgKj0gLTE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmxvb3AgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuXy5pc0xvb3BlZCA9ICEhdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQuYmFuZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5YmFja1N0YXRlID0gKHZhbHVlID09PSBmYWxzZSA/IGZuLkZJTklTSEVEX1NUQVRFIDogZm4uUExBWUlOR19TVEFURSk7XHJcbiAgICAgICAgdGhpcy5fLnBoYXNlID0gMDtcclxuICAgICAgICB0aGlzLl8uZW1pdChcImJhbmdcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAoIV8uYnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbGxMID0gdGhpcy5jZWxsc1sxXTtcclxuICAgICAgICAgICAgdmFyIGNlbGxSID0gdGhpcy5jZWxsc1syXTtcclxuICAgICAgICAgICAgdmFyIHBoYXNlICA9IF8ucGhhc2U7XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gXy5jZWxsc2l6ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBidWZmZXJMLCBidWZmZXJSO1xyXG4gICAgICAgICAgICBpZiAoXy5jaGFubmVscyA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyTCA9IF8uYnVmZmVyWzFdO1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyUiA9IF8uYnVmZmVyWzJdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyTCA9IGJ1ZmZlclIgPSBfLmJ1ZmZlclswXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKF8uY3VycmVudFRpbWVPYmopIHtcclxuICAgICAgICAgICAgICAgIHZhciBwb3MgPSBfLmN1cnJlbnRUaW1lT2JqLnByb2Nlc3ModGlja0lEKS5jZWxsc1swXTtcclxuICAgICAgICAgICAgICAgIHZhciB0LCBzciA9IF8uc2FtcGxlcmF0ZSAqIDAuMDAxO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSBwb3NbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgcGhhc2UgPSB0ICogc3I7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbExbaV0gPSAoYnVmZmVyTFtwaGFzZXwwXSB8fCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsUltpXSA9IChidWZmZXJSW3BoYXNlfDBdIHx8IDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXy5waGFzZSA9IHBoYXNlO1xyXG4gICAgICAgICAgICAgICAgXy5jdXJyZW50VGltZSA9IHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGl0Y2ggID0gXy5waXRjaC5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgcGhhc2VJbmNyID0gXy5waGFzZUluY3IgKiBwaXRjaDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbExbaV0gPSAoYnVmZmVyTFtwaGFzZXwwXSB8fCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsUltpXSA9IChidWZmZXJSW3BoYXNlfDBdIHx8IDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHBoYXNlICs9IHBoYXNlSW5jcjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocGhhc2UgPj0gYnVmZmVyTC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pc0xvb3BlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbi5uZXh0VGljayhfLm9ubG9vcGVkKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbi5uZXh0VGljayhfLm9uZW5kZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocGhhc2UgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNMb29wZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm4ubmV4dFRpY2soXy5vbmxvb3BlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm4ubmV4dFRpY2soXy5vbmVuZGVkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfLnBoYXNlID0gcGhhc2U7XHJcbiAgICAgICAgICAgICAgICBfLmN1cnJlbnRUaW1lICs9IGZuLmN1cnJlbnRUaW1lSW5jcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHN1cGVyX3Bsb3QgPSBULk9iamVjdC5wcm90b3R5cGUucGxvdDtcclxuXHJcbiAgICAkLnBsb3QgPSBmdW5jdGlvbihvcHRzKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgdmFyIGJ1ZmZlckwsIGJ1ZmZlclI7XHJcbiAgICAgICAgaWYgKF8ucGxvdEZsdXNoKSB7XHJcbiAgICAgICAgICAgIGlmIChfLmNoYW5uZWxzID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJMID0gXy5idWZmZXJbMV07XHJcbiAgICAgICAgICAgICAgICBidWZmZXJSID0gXy5idWZmZXJbMl07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJMID0gYnVmZmVyUiA9IF8uYnVmZmVyWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gbmV3IEZsb2F0MzJBcnJheSgyMDQ4KTtcclxuICAgICAgICAgICAgdmFyIHggPSAwLCB4SW5jciA9IGJ1ZmZlckwubGVuZ3RoIC8gMjA0ODtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyMDQ4OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGRhdGFbaV0gPSAoYnVmZmVyTFt4fDBdICsgYnVmZmVyUlt4fDBdKSAqIDAuNTtcclxuICAgICAgICAgICAgICAgIHggKz0geEluY3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXy5wbG90RGF0YSAgPSBkYXRhO1xyXG4gICAgICAgICAgICBfLnBsb3RGbHVzaCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdXBlcl9wbG90LmNhbGwodGhpcywgb3B0cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwiYnVmZmVyXCIsIEJ1ZmZlck5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiAgPSBULmZuO1xyXG4gICAgdmFyIENob3J1cyA9IFQubW9kdWxlcy5DaG9ydXM7XHJcblxyXG4gICAgZnVuY3Rpb24gQ2hvcnVzTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMiwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgY2hvcnVzID0gbmV3IENob3J1cyh0aGlzLl8uc2FtcGxlcmF0ZSk7XHJcbiAgICAgICAgY2hvcnVzLnNldERlbGF5VGltZSgyMCk7XHJcbiAgICAgICAgY2hvcnVzLnNldFJhdGUoNCk7XHJcbiAgICAgICAgY2hvcnVzLmRlcHRoID0gMjA7XHJcbiAgICAgICAgY2hvcnVzLmZlZWRiYWNrID0gMC4yO1xyXG4gICAgICAgIGNob3J1cy5taXggPSAwLjMzO1xyXG4gICAgICAgIHRoaXMuXy5jaG9ydXMgPSBjaG9ydXM7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoQ2hvcnVzTm9kZSk7XHJcblxyXG4gICAgdmFyICQgPSBDaG9ydXNOb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgdHlwZToge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uY2hvcnVzLnNldERlbGF5VGltZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmNob3J1cy53YXZlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWxheToge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoMC41IDw9IHZhbHVlICYmIHZhbHVlIDw9IDgwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmNob3J1cy5zZXREZWxheVRpbWUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5jaG9ydXMuZGVsYXlUaW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICByYXRlOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmNob3J1cy5zZXRSYXRlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uY2hvcnVzLnJhdGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlcHRoOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoMCA8PSB2YWx1ZSAmJiB2YWx1ZSA8PSAxMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKj0gdGhpcy5fLnNhbXBsZXJhdGUgLyA0NDEwMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmNob3J1cy5kZXB0aCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uY2hvcnVzLmRlcHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmYjoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKC0xIDw9IHZhbHVlICYmIHZhbHVlIDw9IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmNob3J1cy5mZWVkYmFjayA9IHZhbHVlICogMC45OTk5NjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmNob3J1cy5mZWVkYmFjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWl4OiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5taXggPSBUKHZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ubWl4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghXy5ieXBhc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgXy5jaG9ydXMucHJvY2Vzcyh0aGlzLmNlbGxzWzFdLCB0aGlzLmNlbGxzWzJdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJjaG9ydXNcIiwgQ2hvcnVzTm9kZSk7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGZuID0gVC5mbjtcclxuXHJcbiAgICBmdW5jdGlvbiBDbGlwTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMiwgX2FyZ3MpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBfLm1pbiA9IC0wLjg7XHJcbiAgICAgICAgXy5tYXggPSArMC44O1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKENsaXBOb2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IENsaXBOb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgbWlubWF4OiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIF8ubWluID0gLU1hdGguYWJzKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBfLm1heCA9IC1fLm1pbjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ubWF4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtaW46IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ubWF4IDwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5tYXggPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLm1pbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ubWluO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXg6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgXy5taW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5taW4gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLm1heCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ubWF4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbGxMID0gdGhpcy5jZWxsc1sxXTtcclxuICAgICAgICAgICAgdmFyIGNlbGxSID0gdGhpcy5jZWxsc1syXTtcclxuICAgICAgICAgICAgdmFyIGksIGltYXggPSBjZWxsTC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBtaW4gPSBfLm1pbiwgbWF4ID0gXy5tYXg7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLmFyKSB7XHJcbiAgICAgICAgICAgICAgICBmbi5pbnB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY2VsbExbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgbWluKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbWluO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPiBtYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBtYXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxMW2ldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjZWxsUltpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCBtaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBtaW47XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+IG1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG1heDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbFJbaV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmbi5pbnB1dFNpZ25hbEtSKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgbWluKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBtaW47XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID4gbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBtYXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNlbGxzWzBdWzBdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxLUih0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJjbGlwXCIsIENsaXBOb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG4gICAgdmFyIHRpbWV2YWx1ZSA9IFQudGltZXZhbHVlO1xyXG4gICAgdmFyIENvbXByZXNzb3IgPSBULm1vZHVsZXMuQ29tcHJlc3NvcjtcclxuXHJcbiAgICBmdW5jdGlvbiBDb21wcmVzc29yTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMiwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBfLnByZXZUaHJlc2ggPSAtMjQ7XHJcbiAgICAgICAgXy5wcmV2S25lZSAgID0gIDMwO1xyXG4gICAgICAgIF8ucHJldlJhdGlvICA9ICAxMjtcclxuICAgICAgICBfLnRocmVzaCA9IFQoXy5wcmV2VGhyZXNoKTtcclxuICAgICAgICBfLmtuZWUgICA9IFQoXy5wcmV2S25lZSk7XHJcbiAgICAgICAgXy5yYXRpbyAgPSBUKF8ucHJldlJhdGlvKTtcclxuICAgICAgICBfLnBvc3RHYWluICA9IDY7XHJcbiAgICAgICAgXy5yZWR1Y3Rpb24gPSAwO1xyXG4gICAgICAgIF8uYXR0YWNrID0gMztcclxuICAgICAgICBfLnJlbGVhc2UgPSAyNTtcclxuXHJcbiAgICAgICAgXy5jb21wID0gbmV3IENvbXByZXNzb3IoXy5zYW1wbGVyYXRlKTtcclxuICAgICAgICBfLmNvbXAuZGJQb3N0R2FpbiA9IF8ucG9zdEdhaW47XHJcbiAgICAgICAgXy5jb21wLnNldEF0dGFja1RpbWUoXy5hdHRhY2sgKiAwLjAwMSk7XHJcbiAgICAgICAgXy5jb21wLnNldFJlbGVhc2VUaW1lKF8ucmVsZWFzZSAqIDAuMDAxKTtcclxuICAgICAgICBfLmNvbXAuc2V0UHJlRGVsYXlUaW1lKDYpO1xyXG4gICAgICAgIF8uY29tcC5zZXRQYXJhbXMoXy5wcmV2VGhyZXNoLCBfLnByZXZLbmVlLCBfLnByZXZSYXRpbyk7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoQ29tcHJlc3Nvck5vZGUpO1xyXG5cclxuICAgIHZhciAkID0gQ29tcHJlc3Nvck5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICB0aHJlc2g6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLnRocmVzaCA9IFQodmFsdWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy50aHJlc2g7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRocmU6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLnRocmVzaCA9IFQodmFsdWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy50aHJlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBrbmVlOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5rbmUgPSBUKHZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ua25lZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmF0aW86IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLnJhdGlvID0gVCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLnJhdGlvO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnYWluOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8uY29tcC5kYlBvc3RHYWluID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmNvbXAuZGJQb3N0R2FpbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXR0YWNrOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRpbWV2YWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgPCAwKSA/IDAgOiAoMTAwMCA8IHZhbHVlKSA/IDEwMDAgOiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8uYXR0YWNrID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmNvbXAuc2V0QXR0YWNrVGltZSh2YWx1ZSAqIDAuMDAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uYXR0YWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZWxlYXNlOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRpbWV2YWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgPCAwKSA/IDAgOiAoMTAwMCA8IHZhbHVlKSA/IDEwMDAgOiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8ucmVsZWFzZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5jb21wLnNldFJlbGVhc2VUaW1lKHZhbHVlICogMC4wMDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5yZWxlYXNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZWR1Y3Rpb246IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ucmVkdWN0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0aHJlc2ggPSBfLnRocmVzaC5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF07XHJcbiAgICAgICAgICAgIHZhciBrbmVlICAgPSBfLmtuZWUucHJvY2Vzcyh0aWNrSUQpLmNlbGxzWzBdWzBdO1xyXG4gICAgICAgICAgICB2YXIgcmF0aW8gID0gXy5yYXRpby5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF07XHJcbiAgICAgICAgICAgIGlmIChfLnByZXZUaHJlc2ggIT09IHRocmVzaCB8fCBfLnByZXZLbmVlICE9PSBrbmVlIHx8IF8ucHJldlJhdGlvICE9PSByYXRpbykge1xyXG4gICAgICAgICAgICAgICAgXy5wcmV2VGhyZXNoID0gdGhyZXNoO1xyXG4gICAgICAgICAgICAgICAgXy5wcmV2S25lZSAgID0ga25lZTtcclxuICAgICAgICAgICAgICAgIF8ucHJldlJhdGlvICA9IHJhdGlvO1xyXG4gICAgICAgICAgICAgICAgXy5jb21wLnNldFBhcmFtcyh0aHJlc2gsIGtuZWUsIHJhdGlvKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFfLmJ5cGFzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICBfLmNvbXAucHJvY2Vzcyh0aGlzLmNlbGxzWzFdLCB0aGlzLmNlbGxzWzJdKTtcclxuICAgICAgICAgICAgICAgIF8ucmVkdWN0aW9uID0gXy5jb21wLm1ldGVyaW5nR2FpbjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJjb21wXCIsIENvbXByZXNzb3JOb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG4gICAgdmFyIHRpbWV2YWx1ZSA9IFQudGltZXZhbHVlO1xyXG4gICAgdmFyIFN0ZXJlb0RlbGF5ID0gVC5tb2R1bGVzLlN0ZXJlb0RlbGF5O1xyXG5cclxuICAgIGZ1bmN0aW9uIERlbGF5Tm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMiwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBfLnRpbWUgID0gVCgxMDApO1xyXG4gICAgICAgIF8uZmIgICAgPSBUKDAuMik7XHJcbiAgICAgICAgXy5jcm9zcyA9IFQoZmFsc2UpO1xyXG4gICAgICAgIF8ubWl4ICAgPSAwLjMzO1xyXG5cclxuICAgICAgICBfLmRlbGF5ID0gbmV3IFN0ZXJlb0RlbGF5KF8uc2FtcGxlcmF0ZSk7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoRGVsYXlOb2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IERlbGF5Tm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIHRpbWU6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGltZXZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuXy50aW1lID0gVCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLnRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGZiOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5mYiA9IFQodmFsdWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5mYjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3Jvc3M6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmNyb3NzID0gVCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmNyb3NzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtaXg6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlID4gMSkgPyAxIDogKHZhbHVlIDwgMCkgPyAwIDogdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLm1peCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5taXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgdGltZSAgPSBfLnRpbWUucHJvY2Vzcyh0aWNrSUQpLmNlbGxzWzBdWzBdO1xyXG4gICAgICAgICAgICB2YXIgZmIgICAgPSBfLmZiLnByb2Nlc3ModGlja0lEKS5jZWxsc1swXVswXTtcclxuICAgICAgICAgICAgdmFyIGNyb3NzID0gXy5jcm9zcy5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF0gIT09IDA7XHJcbiAgICAgICAgICAgIHZhciBtaXggICA9IF8ubWl4O1xyXG5cclxuICAgICAgICAgICAgaWYgKF8ucHJldlRpbWUgIT09IHRpbWUgfHwgXy5wcmV2RmIgIT09IGZiIHx8IF8ucHJldkNyb3NzICE9PSBjcm9zcyB8fCBfLnByZXZNaXggIT09IG1peCkge1xyXG4gICAgICAgICAgICAgICAgXy5wcmV2VGltZSAgPSB0aW1lO1xyXG4gICAgICAgICAgICAgICAgXy5wcmV2RmIgICAgPSBmYjtcclxuICAgICAgICAgICAgICAgIF8ucHJldkNyb3NzID0gY3Jvc3M7XHJcbiAgICAgICAgICAgICAgICBfLnByZXZNaXggICA9IG1peDtcclxuICAgICAgICAgICAgICAgIF8uZGVsYXkuc2V0UGFyYW1zKHRpbWUsIGZiLCBjcm9zcywgbWl4KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghXy5ieXBhc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgXy5kZWxheS5wcm9jZXNzKHRoaXMuY2VsbHNbMV0sIHRoaXMuY2VsbHNbMl0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcImRlbGF5XCIsIERlbGF5Tm9kZSk7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGZuID0gVC5mbjtcclxuXHJcbiAgICBmdW5jdGlvbiBEaXN0Tm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMiwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBfLnByZSAgPSBUKCA2MCk7XHJcbiAgICAgICAgXy5wb3N0ID0gVCgtMTgpO1xyXG4gICAgICAgIF8ueDFMID0gXy54MkwgPSBfLnkxTCA9IF8ueTJMID0gMDtcclxuICAgICAgICBfLngxUiA9IF8ueDJSID0gXy55MVIgPSBfLnkyUiA9IDA7XHJcbiAgICAgICAgXy5iMCA9IF8uYjEgPSBfLmIyID0gXy5hMSA9IF8uYTIgPSAwO1xyXG4gICAgICAgIF8uY3V0b2ZmID0gMDtcclxuICAgICAgICBfLlEgPSAxO1xyXG4gICAgICAgIF8ucHJlU2NhbGUgPSAwO1xyXG4gICAgICAgIF8ucG9zdFNjYWxlID0gMDtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChEaXN0Tm9kZSk7XHJcblxyXG4gICAgdmFyICQgPSBEaXN0Tm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIGN1dG9mZjoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIHZhbHVlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5jdXRvZmYgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uY3V0b2ZmO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwcmU6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLnByZSA9IFQodmFsdWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5wcmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHBvc3Q6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLnBvc3QgPSBUKHZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ucG9zdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIGZuLmlucHV0U2lnbmFsQVIodGhpcyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcHJlR2FpbiAgPSAtXy5wcmUucHJvY2Vzcyh0aWNrSUQpLmNlbGxzWzBdWzBdO1xyXG4gICAgICAgICAgICB2YXIgcG9zdEdhaW4gPSAtXy5wb3N0LnByb2Nlc3ModGlja0lEKS5jZWxsc1swXVswXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLnByZXZQcmVHYWluICE9PSBwcmVHYWluIHx8IF8ucHJldlBvc3RHYWluICE9PSBwb3N0R2Fpbikge1xyXG4gICAgICAgICAgICAgICAgXy5wcmV2UHJlR2FpbiAgPSBwcmVHYWluO1xyXG4gICAgICAgICAgICAgICAgXy5wcmV2UG9zdEdhaW4gPSBwb3N0R2FpbjtcclxuICAgICAgICAgICAgICAgIF8ucHJlU2NhbGUgID0gTWF0aC5wb3coMTAsIC1wcmVHYWluICAqIDAuMDUpO1xyXG4gICAgICAgICAgICAgICAgXy5wb3N0U2NhbGUgPSBNYXRoLnBvdygxMCwgLXBvc3RHYWluICogMC4wNSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghXy5ieXBhc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNlbGxMID0gdGhpcy5jZWxsc1sxXTtcclxuICAgICAgICAgICAgICAgIHZhciBjZWxsUiA9IHRoaXMuY2VsbHNbMl07XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJlU2NhbGUgID0gXy5wcmVTY2FsZTtcclxuICAgICAgICAgICAgICAgIHZhciBwb3N0U2NhbGUgPSBfLnBvc3RTY2FsZTtcclxuICAgICAgICAgICAgICAgIHZhciBpLCBpbWF4LCB2YWx1ZSwgeDAsIHkwO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfLmN1dG9mZikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfLnByZXZDdXRvZmYgIT09IF8uY3V0b2ZmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucHJldkN1dG9mZiA9IF8uY3V0b2ZmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb3dwYXNzX3BhcmFtcyhfKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB4MUwgPSBfLngxTCwgeDJMID0gXy54MkwsIHkxTCA9IF8ueTFMLCB5MkwgPSBfLnkyTDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeDFSID0gXy54MVIsIHgyUiA9IF8ueDJSLCB5MVIgPSBfLnkxUiwgeTJSID0gXy55MlI7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIwID0gXy5iMCwgYjEgPSBfLmIxLCBiMiA9IF8uYjIsIGExID0gXy5hMSwgYTIgPSBfLmEyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpbWF4ID0gY2VsbEwubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHgwID0gY2VsbExbaV0gKiBwcmVTY2FsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeTAgPSBiMCAqIHgwICsgYjEgKiB4MUwgKyBiMiAqIHgyTCAtIGExICogeTFMIC0gYTIgKiB5Mkw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0geTAgKiBwb3N0U2NhbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxMW2ldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyTCA9IHgxTDsgeDFMID0geDA7IHkyTCA9IHkxTDsgeTFMID0geTA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4MCA9IGNlbGxSW2ldICogcHJlU2NhbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkwID0gYjAgKiB4MCArIGIxICogeDFSICsgYjIgKiB4MlIgLSBhMSAqIHkxUiAtIGEyICogeTJSO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHkwICogcG9zdFNjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsUltpXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4MlIgPSB4MVI7IHgxUiA9IHgwOyB5MlIgPSB5MVI7IHkxUiA9IHkwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXy54MUwgPSB4MUw7IF8ueDJMID0geDJMOyBfLnkxTCA9IHkxTDsgXy55MkwgPSB5Mkw7XHJcbiAgICAgICAgICAgICAgICAgICAgXy54MVIgPSB4MVI7IF8ueDJSID0geDJSOyBfLnkxUiA9IHkxUjsgXy55MlIgPSB5MlI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGltYXggPSBjZWxsTC5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjZWxsTFtpXSAqIHByZVNjYWxlICogcG9zdFNjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsTFtpXSA9IHZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjZWxsUltpXSAqIHByZVNjYWxlICogcG9zdFNjYWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsUltpXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGxvd3Bhc3NfcGFyYW1zID0gZnVuY3Rpb24oXykge1xyXG4gICAgICAgIHZhciB3MCA9IDIgKiBNYXRoLlBJICogXy5jdXRvZmYgLyBfLnNhbXBsZXJhdGU7XHJcbiAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKHcwKTtcclxuICAgICAgICB2YXIgc2luID0gTWF0aC5zaW4odzApO1xyXG4gICAgICAgIHZhciBhbHBoYSA9IHNpbiAvICgyICogXy5RKTtcclxuXHJcbiAgICAgICAgdmFyIGlhMCA9IDEgLyAoMSArIGFscGhhKTtcclxuICAgICAgICBfLmIwID0gICgxIC0gY29zKSAqIDAuNSAqIGlhMDtcclxuICAgICAgICBfLmIxID0gICAxIC0gY29zICogaWEwO1xyXG4gICAgICAgIF8uYjIgPSAgKDEgLSBjb3MpICogMC41ICogaWEwO1xyXG4gICAgICAgIF8uYTEgPSAgLTIgKiBjb3MgKiBpYTA7XHJcbiAgICAgICAgXy5hMiA9ICAgMSAtIGFscGhhICogaWEwO1xyXG4gICAgfTtcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcImRpc3RcIiwgRGlzdE5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcblxyXG4gICAgZnVuY3Rpb24gRGl2Tm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMiwgX2FyZ3MpO1xyXG4gICAgICAgIHRoaXMuXy5hciA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKERpdk5vZGUpO1xyXG5cclxuICAgIHZhciAkID0gRGl2Tm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XHJcbiAgICAgICAgICAgIHZhciBjZWxsICA9IHRoaXMuY2VsbHNbMF07XHJcbiAgICAgICAgICAgIHZhciBjZWxsTCA9IHRoaXMuY2VsbHNbMV07XHJcbiAgICAgICAgICAgIHZhciBjZWxsUiA9IHRoaXMuY2VsbHNbMl07XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gbm9kZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgaiwgam1heCA9IGNlbGwubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgdG1wLCB0bXBMLCB0bXBSLCBkaXY7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5hcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBub2Rlc1swXS5wcm9jZXNzKHRpY2tJRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wTCA9IG5vZGVzWzBdLmNlbGxzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcFIgPSBub2Rlc1swXS5jZWxsc1syXTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsTC5zZXQodG1wTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbFIuc2V0KHRtcFIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0ucHJvY2Vzcyh0aWNrSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBMID0gbm9kZXNbaV0uY2VsbHNbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFIgPSBub2Rlc1tpXS5jZWxsc1syXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGptYXg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2ID0gdG1wTFtqXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxMW2pdID0gKGRpdiA9PT0gMCkgPyAwIDogY2VsbExbal0gLyBkaXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXYgPSB0bXBSW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFJbal0gPSAoZGl2ID09PSAwKSA/IDAgOiBjZWxsUltqXSAvIGRpdjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGptYXg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsTFtqXSA9IGNlbGxSW2ldID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChub2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gbm9kZXNbMF0ucHJvY2Vzcyh0aWNrSUQpLmNlbGxzWzBdWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGl2ID0gbm9kZXNbaV0ucHJvY2Vzcyh0aWNrSUQpLmNlbGxzWzBdWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSAoZGl2ID09PSAwKSA/IDAgOiB0bXAgLyBkaXY7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2VsbFswXSA9IHRtcDtcclxuICAgICAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEtSKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCIvXCIsIERpdk5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcbiAgICB2YXIgdGltZXZhbHVlID0gVC50aW1ldmFsdWU7XHJcbiAgICB2YXIgRW52ZWxvcGUgID0gVC5tb2R1bGVzLkVudmVsb3BlO1xyXG4gICAgdmFyIGlzRGljdGlvbmFyeSA9IGZuLmlzRGljdGlvbmFyeTtcclxuXHJcbiAgICBmdW5jdGlvbiBFbnZOb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAyLCBfYXJncyk7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgXy5lbnYgPSBuZXcgRW52ZWxvcGUoXy5zYW1wbGVyYXRlKTtcclxuICAgICAgICBfLmVudi5zZXRTdGVwKF8uY2VsbHNpemUpO1xyXG4gICAgICAgIF8udG1wID0gbmV3IGZuLlNpZ25hbEFycmF5KF8uY2VsbHNpemUpO1xyXG4gICAgICAgIF8uYXIgPSBmYWxzZTtcclxuICAgICAgICBfLnBsb3RGbHVzaCA9IHRydWU7XHJcbiAgICAgICAgXy5vbmVuZGVkID0gbWFrZV9vbmVuZGVkKHRoaXMpO1xyXG4gICAgICAgIHRoaXMub24oXCJhclwiLCBvbmFyKTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChFbnZOb2RlKTtcclxuXHJcbiAgICB2YXIgb25hciA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fLmVudi5zZXRTdGVwKCh2YWx1ZSkgPyAxIDogdGhpcy5fLmNlbGxzaXplKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIG1ha2Vfb25lbmRlZCA9IGZ1bmN0aW9uKHNlbGYpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGYuXy5lbWl0KFwiZW5kZWRcIik7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyICQgPSBFbnZOb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgdGFibGU6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGFibGUuY2FsbCh0aGlzLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLnBsb3RGbHVzaCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmVudi50YWJsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3VydmU6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmVudi5zZXRDdXJ2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmVudi5jdXJ2ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVsZWFzZU5vZGU6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmVudi5zZXRSZWxlYXNlTm9kZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8ucGxvdEZsdXNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uZW52LnJlbGVhc2VOb2RlICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbG9vcE5vZGU6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmVudi5zZXRMb29wTm9kZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8ucGxvdEZsdXNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uZW52Lmxvb3BOb2RlICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQuY2xvbmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSBmbi5jbG9uZSh0aGlzKTtcclxuICAgICAgICBpbnN0YW5jZS5fLmVudiA9IHRoaXMuXy5lbnYuY2xvbmUoKTtcclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9O1xyXG5cclxuICAgICQucmVzZXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl8uZW52LnJlc2V0KCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQucmVsZWFzZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8uZW52LnJlbGVhc2UoKTtcclxuICAgICAgICBfLmVtaXQoXCJyZWxlYXNlZFwiKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5iYW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgXy5lbnYucmVzZXQoKTtcclxuICAgICAgICBfLmVudi5zdGF0dXMgPSBFbnZlbG9wZS5TdGF0dXNHYXRlO1xyXG4gICAgICAgIF8uZW1pdChcImJhbmdcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIHZhciBjZWxsTCA9IHRoaXMuY2VsbHNbMV07XHJcbiAgICAgICAgICAgIHZhciBjZWxsUiA9IHRoaXMuY2VsbHNbMl07XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gXy5jZWxsc2l6ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsTFtpXSA9IGNlbGxSW2ldID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHZhbHVlLCBlbWl0ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKF8uYXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0bXAgPSBfLnRtcDtcclxuICAgICAgICAgICAgICAgIF8uZW52LnByb2Nlc3ModG1wKTtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsTFtpXSAqPSB0bXBbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbFJbaV0gKj0gdG1wW2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZW1pdCA9IF8uZW52LmVtaXQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IF8uZW52Lm5leHQoKTtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsTFtpXSAqPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsUltpXSAqPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVtaXQgPSBfLmVudi5lbWl0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxBUih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW1pdCA9PT0gXCJlbmRlZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm4ubmV4dFRpY2soXy5vbmVuZGVkKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmVtaXQoZW1pdCwgXy52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc2V0VGFibGUgPSBmdW5jdGlvbihsaXN0KSB7XHJcbiAgICAgICAgdmFyIGVudiA9IHRoaXMuXy5lbnY7XHJcblxyXG4gICAgICAgIHZhciB0YWJsZSA9IFtsaXN0WzBdIHx8IFpFUk9dO1xyXG5cclxuICAgICAgICB2YXIgdmFsdWUsIHRpbWUsIGN1cnZlVHlwZSwgY3VydmVWYWx1ZTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMSwgaW1heCA9IGxpc3QubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gbGlzdFtpXVswXSB8fCBaRVJPO1xyXG4gICAgICAgICAgICB0aW1lICA9IGxpc3RbaV1bMV07XHJcbiAgICAgICAgICAgIGN1cnZlVHlwZSA9IGxpc3RbaV1bMl07XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRpbWUgIT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGltZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWUgPSB0aW1ldmFsdWUodGltZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWUgPSAxMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGltZSA8IDEwKSB7XHJcbiAgICAgICAgICAgICAgICB0aW1lID0gMTA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY3VydmVUeXBlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJ2ZVZhbHVlID0gY3VydmVUeXBlO1xyXG4gICAgICAgICAgICAgICAgY3VydmVUeXBlICA9IEVudmVsb3BlLkN1cnZlVHlwZUN1cnZlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3VydmVUeXBlICA9IEVudmVsb3BlLkN1cnZlVHlwZURpY3RbY3VydmVUeXBlXSB8fCBudWxsO1xyXG4gICAgICAgICAgICAgICAgY3VydmVWYWx1ZSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGFibGUucHVzaChbdmFsdWUsIHRpbWUsIGN1cnZlVHlwZSwgY3VydmVWYWx1ZV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZW52LnNldFRhYmxlKHRhYmxlKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHN1cGVyX3Bsb3QgPSBULk9iamVjdC5wcm90b3R5cGUucGxvdDtcclxuXHJcbiAgICAkLnBsb3QgPSBmdW5jdGlvbihvcHRzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuXy5wbG90Rmx1c2gpIHtcclxuICAgICAgICAgICAgdmFyIGVudiA9IHRoaXMuXy5lbnYuY2xvbmUoKTtcclxuICAgICAgICAgICAgdmFyIGluZm8gPSBlbnYuZ2V0SW5mbygxMDAwKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0b3RhbER1cmF0aW9uICAgID0gaW5mby50b3RhbER1cmF0aW9uO1xyXG4gICAgICAgICAgICB2YXIgbG9vcEJlZ2luVGltZSAgICA9IGluZm8ubG9vcEJlZ2luVGltZTtcclxuICAgICAgICAgICAgdmFyIHJlbGVhc2VCZWdpblRpbWUgPSBpbmZvLnJlbGVhc2VCZWdpblRpbWU7XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gbmV3IEZsb2F0MzJBcnJheSgyNTYpO1xyXG4gICAgICAgICAgICB2YXIgZHVyYXRpb24gPSAwO1xyXG4gICAgICAgICAgICB2YXIgZHVyYXRpb25JbmNyID0gdG90YWxEdXJhdGlvbiAvIGRhdGEubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgaXNSZWxlYXNlZCAgID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBzYW1wbGVzID0gKHRvdGFsRHVyYXRpb24gKiAwLjAwMSAqIHRoaXMuXy5zYW1wbGVyYXRlKXwwO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heDtcclxuXHJcbiAgICAgICAgICAgIHNhbXBsZXMgLz0gZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGVudi5zZXRTdGVwKHNhbXBsZXMpO1xyXG4gICAgICAgICAgICBlbnYuc3RhdHVzID0gRW52ZWxvcGUuU3RhdHVzR2F0ZTtcclxuICAgICAgICAgICAgZm9yIChpID0gMCwgaW1heCA9IGRhdGEubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhW2ldID0gZW52Lm5leHQoKTtcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uICs9IGR1cmF0aW9uSW5jcjtcclxuICAgICAgICAgICAgICAgIGlmICghaXNSZWxlYXNlZCAmJiBkdXJhdGlvbiA+PSByZWxlYXNlQmVnaW5UaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW52LnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpc1JlbGVhc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl8ucGxvdERhdGEgPSBkYXRhO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fLnBsb3RCZWZvcmUgPSBmdW5jdGlvbihjb250ZXh0LCB4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeDEsIHc7XHJcbiAgICAgICAgICAgICAgICBpZiAobG9vcEJlZ2luVGltZSAhPT0gSW5maW5pdHkgJiYgcmVsZWFzZUJlZ2luVGltZSAhPT0gSW5maW5pdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICB4MSA9IHggKyAod2lkdGggKiAobG9vcEJlZ2luVGltZSAgICAvIHRvdGFsRHVyYXRpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB3ICA9IHggKyAod2lkdGggKiAocmVsZWFzZUJlZ2luVGltZSAvIHRvdGFsRHVyYXRpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICB3ICA9IHcgLSB4MTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IFwicmdiYSgyMjQsIDIyNCwgMjI0LCAwLjgpXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdCh4MSwgMCwgdywgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChyZWxlYXNlQmVnaW5UaW1lICE9PSBJbmZpbml0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxID0geCArICh3aWR0aCAqIChyZWxlYXNlQmVnaW5UaW1lIC8gdG90YWxEdXJhdGlvbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHcgID0gd2lkdGggLSB4MTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IFwicmdiYSgyMTIsIDIxMiwgMjEyLCAwLjgpXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsUmVjdCh4MSwgMCwgdywgaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIHktcmFuZ2VcclxuICAgICAgICAgICAgdmFyIG1pblZhbHVlID0gSW5maW5pdHksIG1heFZhbHVlID0gLUluZmluaXR5O1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVtpXSA8IG1pblZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWluVmFsdWUgPSBkYXRhW2ldO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhW2ldID4gbWF4VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXhWYWx1ZSA9IGRhdGFbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG1heFZhbHVlIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgbWF4VmFsdWUgPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuXy5wbG90UmFuZ2UgPSBbbWluVmFsdWUsIG1heFZhbHVlXTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuXy5wbG90RGF0YSAgPSBkYXRhO1xyXG4gICAgICAgICAgICB0aGlzLl8ucGxvdEZsdXNoID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyX3Bsb3QuY2FsbCh0aGlzLCBvcHRzKTtcclxuICAgIH07XHJcbiAgICBmbi5yZWdpc3RlcihcImVudlwiLCBFbnZOb2RlKTtcclxuXHJcblxyXG4gICAgZnVuY3Rpb24gZW52VmFsdWUob3B0cywgbWluLCBkZWYsIG5hbWUxLCBuYW1lMiwgZnVuYykge1xyXG4gICAgICAgIHZhciB4ID0gZGVmO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0c1tuYW1lMV0gPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgeCA9IG9wdHNbbmFtZTFdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdHNbbmFtZTJdID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIHggPSBvcHRzW25hbWUyXTtcclxuICAgICAgICB9IGVsc2UgaWYgKGZ1bmMpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRzW25hbWUxXSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgeCA9IGZ1bmMob3B0c1tuYW1lMV0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRzW25hbWUyXSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgeCA9IGZ1bmMob3B0c1tuYW1lMl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh4IDwgbWluKSB7XHJcbiAgICAgICAgICAgIHggPSBtaW47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB4O1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBaRVJPID0gRW52ZWxvcGUuWkVSTztcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcInBlcmNcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICBpZiAoIWlzRGljdGlvbmFyeShfYXJnc1swXSkpIHtcclxuICAgICAgICAgICAgX2FyZ3MudW5zaGlmdCh7fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0cyA9IF9hcmdzWzBdO1xyXG4gICAgICAgIHZhciBhICA9IGVudlZhbHVlKG9wdHMsICAgMTAsICAgMTAsIFwiYVwiICwgXCJhdHRhY2tUaW1lXCIgLCB0aW1ldmFsdWUpO1xyXG4gICAgICAgIHZhciByICA9IGVudlZhbHVlKG9wdHMsICAgMTAsIDEwMDAsIFwiclwiICwgXCJyZWxlYXNlVGltZVwiLCB0aW1ldmFsdWUpO1xyXG4gICAgICAgIHZhciBsdiA9IGVudlZhbHVlKG9wdHMsIFpFUk8sICAgIDEsIFwibHZcIiwgXCJsZXZlbFwiICAgICApO1xyXG5cclxuICAgICAgICBvcHRzLnRhYmxlID0gW1pFUk8sIFtsdiwgYV0sIFtaRVJPLCByXV07XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgRW52Tm9kZShfYXJncyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcImFkc3JcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICBpZiAoIWlzRGljdGlvbmFyeShfYXJnc1swXSkpIHtcclxuICAgICAgICAgICAgX2FyZ3MudW5zaGlmdCh7fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0cyA9IF9hcmdzWzBdO1xyXG4gICAgICAgIHZhciBhICA9IGVudlZhbHVlKG9wdHMsICAgMTAsICAgMTAsIFwiYVwiICwgXCJhdHRhY2tUaW1lXCIgICwgdGltZXZhbHVlKTtcclxuICAgICAgICB2YXIgZCAgPSBlbnZWYWx1ZShvcHRzLCAgIDEwLCAgMzAwLCBcImRcIiAsIFwiZGVjYXlUaW1lXCIgICAsIHRpbWV2YWx1ZSk7XHJcbiAgICAgICAgdmFyIHMgID0gZW52VmFsdWUob3B0cywgWkVSTywgIDAuNSwgXCJzXCIgLCBcInN1c3RhaW5MZXZlbFwiKTtcclxuICAgICAgICB2YXIgciAgPSBlbnZWYWx1ZShvcHRzLCAgIDEwLCAxMDAwLCBcInJcIiAsIFwiZGVjYXlUaW1lXCIgICAsIHRpbWV2YWx1ZSk7XHJcbiAgICAgICAgdmFyIGx2ID0gZW52VmFsdWUob3B0cywgWkVSTywgICAgMSwgXCJsdlwiLCBcImxldmVsXCIgICAgICAgKTtcclxuXHJcbiAgICAgICAgb3B0cy50YWJsZSA9IFtaRVJPLCBbbHYsIGFdLCBbcywgZF0sIFtaRVJPLCByXV07XHJcbiAgICAgICAgb3B0cy5yZWxlYXNlTm9kZSA9IDM7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgRW52Tm9kZShfYXJncyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcImFkc2hyXCIsIGZ1bmN0aW9uKF9hcmdzKSB7XHJcbiAgICAgICAgaWYgKCFpc0RpY3Rpb25hcnkoX2FyZ3NbMF0pKSB7XHJcbiAgICAgICAgICAgIF9hcmdzLnVuc2hpZnQoe30pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdHMgPSBfYXJnc1swXTtcclxuICAgICAgICB2YXIgYSAgPSBlbnZWYWx1ZShvcHRzLCAgIDEwLCAgIDEwLCBcImFcIiAsIFwiYXR0YWNrVGltZVwiICAsIHRpbWV2YWx1ZSk7XHJcbiAgICAgICAgdmFyIGQgID0gZW52VmFsdWUob3B0cywgICAxMCwgIDMwMCwgXCJkXCIgLCBcImRlY2F5VGltZVwiICAgLCB0aW1ldmFsdWUpO1xyXG4gICAgICAgIHZhciBzICA9IGVudlZhbHVlKG9wdHMsIFpFUk8sICAwLjUsIFwic1wiICwgXCJzdXN0YWluTGV2ZWxcIik7XHJcbiAgICAgICAgdmFyIGggID0gZW52VmFsdWUob3B0cywgICAxMCwgIDUwMCwgXCJoXCIgLCBcImhvbGRUaW1lXCIgICAgLCB0aW1ldmFsdWUpO1xyXG4gICAgICAgIHZhciByICA9IGVudlZhbHVlKG9wdHMsICAgMTAsIDEwMDAsIFwiclwiICwgXCJkZWNheVRpbWVcIiAgICwgdGltZXZhbHVlKTtcclxuICAgICAgICB2YXIgbHYgPSBlbnZWYWx1ZShvcHRzLCBaRVJPLCAgICAxLCBcImx2XCIsIFwibGV2ZWxcIiAgICAgICApO1xyXG5cclxuICAgICAgICBvcHRzLnRhYmxlID0gW1pFUk8sIFtsdiwgYV0sIFtzLCBkXSwgW3MsIGhdLCBbWkVSTywgcl1dO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEVudk5vZGUoX2FyZ3MpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJhc3JcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICBpZiAoIWlzRGljdGlvbmFyeShfYXJnc1swXSkpIHtcclxuICAgICAgICAgICAgX2FyZ3MudW5zaGlmdCh7fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0cyA9IF9hcmdzWzBdO1xyXG4gICAgICAgIHZhciBhICA9IGVudlZhbHVlKG9wdHMsICAgMTAsICAgMTAsIFwiYVwiICwgXCJhdHRhY2tUaW1lXCIgICwgdGltZXZhbHVlKTtcclxuICAgICAgICB2YXIgcyAgPSBlbnZWYWx1ZShvcHRzLCBaRVJPLCAgMC41LCBcInNcIiAsIFwic3VzdGFpbkxldmVsXCIpO1xyXG4gICAgICAgIHZhciByICA9IGVudlZhbHVlKG9wdHMsICAgMTAsIDEwMDAsIFwiclwiICwgXCJyZWxlYXNlVGltZVwiICwgdGltZXZhbHVlKTtcclxuXHJcbiAgICAgICAgb3B0cy50YWJsZSA9IFtaRVJPLCBbcywgYV0sIFtaRVJPLCByXV07XHJcbiAgICAgICAgb3B0cy5yZWxlYXNlTm9kZSA9IDI7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgRW52Tm9kZShfYXJncyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcImRhZHNyXCIsIGZ1bmN0aW9uKF9hcmdzKSB7XHJcbiAgICAgICAgaWYgKCFpc0RpY3Rpb25hcnkoX2FyZ3NbMF0pKSB7XHJcbiAgICAgICAgICAgIF9hcmdzLnVuc2hpZnQoe30pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdHMgPSBfYXJnc1swXTtcclxuICAgICAgICB2YXIgZGwgPSBlbnZWYWx1ZShvcHRzLCAgIDEwLCAgMTAwLCBcImRsXCIsIFwiZGVsYXlUaW1lXCIgICAsIHRpbWV2YWx1ZSk7XHJcbiAgICAgICAgdmFyIGEgID0gZW52VmFsdWUob3B0cywgICAxMCwgICAxMCwgXCJhXCIgLCBcImF0dGFja1RpbWVcIiAgLCB0aW1ldmFsdWUpO1xyXG4gICAgICAgIHZhciBkICA9IGVudlZhbHVlKG9wdHMsICAgMTAsICAzMDAsIFwiZFwiICwgXCJkZWNheVRpbWVcIiAgICwgdGltZXZhbHVlKTtcclxuICAgICAgICB2YXIgcyAgPSBlbnZWYWx1ZShvcHRzLCBaRVJPLCAgMC41LCBcInNcIiAsIFwic3VzdGFpbkxldmVsXCIpO1xyXG4gICAgICAgIHZhciByICA9IGVudlZhbHVlKG9wdHMsICAgMTAsIDEwMDAsIFwiclwiICwgXCJyZWxhc2VUaW1lXCIgICwgdGltZXZhbHVlKTtcclxuICAgICAgICB2YXIgbHYgPSBlbnZWYWx1ZShvcHRzLCBaRVJPLCAgICAxLCBcImx2XCIsIFwibGV2ZWxcIiAgICAgICApO1xyXG5cclxuICAgICAgICBvcHRzLnRhYmxlID0gW1pFUk8sIFtaRVJPLCBkbF0sIFtsdiwgYV0sIFtzLCBkXSwgW1pFUk8sIHJdXTtcclxuICAgICAgICBvcHRzLnJlbGVhc2VOb2RlID0gNDtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBFbnZOb2RlKF9hcmdzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwiYWhkc2ZyXCIsIGZ1bmN0aW9uKF9hcmdzKSB7XHJcbiAgICAgICAgaWYgKCFpc0RpY3Rpb25hcnkoX2FyZ3NbMF0pKSB7XHJcbiAgICAgICAgICAgIF9hcmdzLnVuc2hpZnQoe30pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdHMgPSBfYXJnc1swXTtcclxuICAgICAgICB2YXIgYSAgPSBlbnZWYWx1ZShvcHRzLCAgIDEwLCAgIDEwLCBcImFcIiAsIFwiYXR0YWNrVGltZVwiICAsIHRpbWV2YWx1ZSk7XHJcbiAgICAgICAgdmFyIGggID0gZW52VmFsdWUob3B0cywgICAxMCwgICAxMCwgXCJoXCIgLCBcImhvbGRUaW1lXCIgICAgLCB0aW1ldmFsdWUpO1xyXG4gICAgICAgIHZhciBkICA9IGVudlZhbHVlKG9wdHMsICAgMTAsICAzMDAsIFwiZFwiICwgXCJkZWNheVRpbWVcIiAgICwgdGltZXZhbHVlKTtcclxuICAgICAgICB2YXIgcyAgPSBlbnZWYWx1ZShvcHRzLCBaRVJPLCAgMC41LCBcInNcIiAsIFwic3VzdGFpbkxldmVsXCIpO1xyXG4gICAgICAgIHZhciBmICA9IGVudlZhbHVlKG9wdHMsICAgMTAsIDUwMDAsIFwiZlwiICwgXCJmYWRlVGltZVwiICAgICwgdGltZXZhbHVlKTtcclxuICAgICAgICB2YXIgciAgPSBlbnZWYWx1ZShvcHRzLCAgIDEwLCAxMDAwLCBcInJcIiAsIFwicmVsYXNlVGltZVwiICAsIHRpbWV2YWx1ZSk7XHJcbiAgICAgICAgdmFyIGx2ID0gZW52VmFsdWUob3B0cywgWkVSTywgICAgMSwgXCJsdlwiLCBcImxldmVsXCIgICAgICAgKTtcclxuXHJcbiAgICAgICAgb3B0cy50YWJsZSA9IFtaRVJPLCBbbHYsIGFdLCBbbHYsIGhdLCBbcywgZF0sIFtaRVJPLCBmXSwgW1pFUk8sIHJdXTtcclxuICAgICAgICBvcHRzLnJlbGVhc2VOb2RlID0gNTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBFbnZOb2RlKF9hcmdzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwibGluZW5cIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICBpZiAoIWlzRGljdGlvbmFyeShfYXJnc1swXSkpIHtcclxuICAgICAgICAgICAgX2FyZ3MudW5zaGlmdCh7fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0cyA9IF9hcmdzWzBdO1xyXG4gICAgICAgIHZhciBhICA9IGVudlZhbHVlKG9wdHMsICAgMTAsICAgMTAsIFwiYVwiICwgXCJhdHRhY2tUaW1lXCIgLCB0aW1ldmFsdWUpO1xyXG4gICAgICAgIHZhciBzICA9IGVudlZhbHVlKG9wdHMsICAgMTAsIDEwMDAsIFwic1wiICwgXCJzdXN0YWluVGltZVwiLCB0aW1ldmFsdWUpO1xyXG4gICAgICAgIHZhciByICA9IGVudlZhbHVlKG9wdHMsICAgMTAsIDEwMDAsIFwiclwiICwgXCJyZWxlYXNlVGltZVwiLCB0aW1ldmFsdWUpO1xyXG4gICAgICAgIHZhciBsdiA9IGVudlZhbHVlKG9wdHMsIFpFUk8sICAgIDEsIFwibHZcIiwgXCJsZXZlbFwiICAgICAgKTtcclxuXHJcbiAgICAgICAgb3B0cy50YWJsZSA9IFtaRVJPLCBbbHYsIGFdLCBbbHYsIHNdLCBbWkVSTywgcl1dO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IEVudk5vZGUoX2FyZ3MpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJlbnYudHJpXCIsIGZ1bmN0aW9uKF9hcmdzKSB7XHJcbiAgICAgICAgaWYgKCFpc0RpY3Rpb25hcnkoX2FyZ3NbMF0pKSB7XHJcbiAgICAgICAgICAgIF9hcmdzLnVuc2hpZnQoe30pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdHMgPSBfYXJnc1swXTtcclxuICAgICAgICB2YXIgZHVyID0gZW52VmFsdWUob3B0cywgICAyMCwgMTAwMCwgXCJkdXJcIiwgXCJkdXJhdGlvblwiLCB0aW1ldmFsdWUpO1xyXG4gICAgICAgIHZhciBsdiAgPSBlbnZWYWx1ZShvcHRzLCBaRVJPLCAgICAxLCBcImx2XCIgLCBcImxldmVsXCIgICApO1xyXG5cclxuICAgICAgICBkdXIgKj0gMC41O1xyXG4gICAgICAgIG9wdHMudGFibGUgPSBbWkVSTywgW2x2LCBkdXJdLCBbWkVSTywgZHVyXV07XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgRW52Tm9kZShfYXJncyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcImVudi5jdXRvZmZcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICBpZiAoIWlzRGljdGlvbmFyeShfYXJnc1swXSkpIHtcclxuICAgICAgICAgICAgX2FyZ3MudW5zaGlmdCh7fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb3B0cyA9IF9hcmdzWzBdO1xyXG4gICAgICAgIHZhciByICA9IGVudlZhbHVlKG9wdHMsICAgMTAsIDEwMCwgXCJyXCIgLCBcInJlbGFzZVRpbWVcIiwgdGltZXZhbHVlKTtcclxuICAgICAgICB2YXIgbHYgPSBlbnZWYWx1ZShvcHRzLCBaRVJPLCAgIDEsIFwibHZcIiwgXCJsZXZlbFwiICAgICk7XHJcblxyXG4gICAgICAgIG9wdHMudGFibGUgPSBbbHYsIFtaRVJPLCByXV07XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgRW52Tm9kZShfYXJncyk7XHJcbiAgICB9KTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG4gICAgdmFyIEZGVCA9IFQubW9kdWxlcy5GRlQ7XHJcbiAgICB2YXIgQmlxdWFkID0gVC5tb2R1bGVzLkJpcXVhZDtcclxuICAgIHZhciBQTE9UX0xPV19GUkVRID0gMjA7XHJcbiAgICB2YXIgUEFSQU1fTkFNRVMgPSB7XHJcbiAgICAgICAgaHBmOjAsIGxmOjEsIGxtZjoyLCBtZjozLCBobWY6NCwgaGY6NSwgbHBmOjZcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gRVFOb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAyLCBfYXJncyk7XHJcbiAgICAgICAgZm4uZml4QVIodGhpcyk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8uYmlxdWFkcyA9IG5ldyBBcnJheSg3KTtcclxuXHJcbiAgICAgICAgXy5wbG90QmVmb3JlID0gcGxvdEJlZm9yZTtcclxuICAgICAgICBfLnBsb3RSYW5nZSAgPSBbLTE4LCAxOF07XHJcbiAgICAgICAgXy5wbG90Rmx1c2ggID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChFUU5vZGUpO1xyXG5cclxuICAgIHZhciBwbG90QmVmb3JlID0gZnVuY3Rpb24oY29udGV4dCwgeCwgeSwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gXCJyZ2IoMTkyLCAxOTIsIDE5MilcIjtcclxuICAgICAgICB2YXIgbnlxdWlzdCA9IHRoaXMuXy5zYW1wbGVyYXRlICogMC41O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IDEwOyArK2kpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPD0gNDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZiA9IGkgKiBNYXRoLnBvdygxMCwgaik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZiA8PSBQTE9UX0xPV19GUkVRIHx8IG55cXVpc3QgPD0gZikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgICAgIHZhciBfeCA9IChNYXRoLmxvZyhmL1BMT1RfTE9XX0ZSRVEpKSAvIChNYXRoLmxvZyhueXF1aXN0L1BMT1RfTE9XX0ZSRVEpKTtcclxuICAgICAgICAgICAgICAgIF94ID0gKChfeCAqIHdpZHRoICsgeCl8MCkgKyAwLjU7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhfeCwgeSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhfeCwgeSArIGhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaCA9IGhlaWdodCAvIDY7XHJcbiAgICAgICAgZm9yIChpID0gMTsgaSA8IDY7IGkrKykge1xyXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICB2YXIgX3kgPSAoKHkgKyAoaSAqIGgpKXwwKSArIDAuNTtcclxuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oeCwgX3kpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVUbyh4ICsgd2lkdGgsIF95KTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciAkID0gRVFOb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaW1heCA9IGtleXMubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtcyA9IHZhbHVlW2tleXNbaV1dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UGFyYW1zKGtleXNbaV0sIGl0ZW1zWzBdLCBpdGVtc1sxXSwgaXRlbXNbMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRQYXJhbXMoa2V5c1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLnNldFBhcmFtcyA9IGZ1bmN0aW9uKGluZGV4LCBmcmVxLCBRLCBnYWluKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBpbmRleCA9IFBBUkFNX05BTUVTW2luZGV4XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKDAgPD0gaW5kZXggJiYgaW5kZXggPCBfLmJpcXVhZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGluZGV4IHw9IDA7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnJlcSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgUSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBnYWluICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2FpbiA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgYmlxdWFkID0gXy5iaXF1YWRzW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmICghYmlxdWFkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmlxdWFkID0gXy5iaXF1YWRzW2luZGV4XSA9IG5ldyBCaXF1YWQoXy5zYW1wbGVyYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXF1YWQuc2V0VHlwZShcImhpZ2hwYXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIF8uYmlxdWFkcy5sZW5ndGggLSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXF1YWQuc2V0VHlwZShcImxvd3Bhc3NcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpcXVhZC5zZXRUeXBlKFwicGVha2luZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYmlxdWFkLnNldFBhcmFtcyhmcmVxLCBRLCBnYWluKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF8uYmlxdWFkc1tpbmRleF0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXy5wbG90Rmx1c2ggPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5nZXRQYXJhbXMgPSBmdW5jdGlvbihpbmRleCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIHZhciBiaXF1YWQgPSBfLmJpcXVhZHNbaW5kZXh8MF07XHJcbiAgICAgICAgaWYgKGJpcXVhZCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge2ZyZXE6YmlxdWFkLmZyZXF1ZW5jeSwgUTpiaXF1YWQuUSwgZ2FpbjpiaXF1YWQuZ2Fpbn07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICBmbi5pbnB1dFNpZ25hbEFSKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFfLmJ5cGFzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VsbEwgPSB0aGlzLmNlbGxzWzFdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNlbGxSID0gdGhpcy5jZWxsc1syXTtcclxuICAgICAgICAgICAgICAgIHZhciBiaXF1YWRzID0gXy5iaXF1YWRzO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSBiaXF1YWRzLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiaXF1YWRzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpcXVhZHNbaV0ucHJvY2VzcyhjZWxsTCwgY2VsbFIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGZmdCA9IG5ldyBGRlQoMjA0OCk7XHJcbiAgICB2YXIgc3VwZXJfcGxvdCA9IFQuT2JqZWN0LnByb3RvdHlwZS5wbG90O1xyXG5cclxuICAgICQucGxvdCA9IGZ1bmN0aW9uKG9wdHMpIHtcclxuICAgICAgICBpZiAodGhpcy5fLnBsb3RGbHVzaCkge1xyXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICAgICAgdmFyIGltcGx1c2UgPSBuZXcgRmxvYXQzMkFycmF5KGZmdC5sZW5ndGgpO1xyXG4gICAgICAgICAgICBpbXBsdXNlWzBdID0gMTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSBfLmJpcXVhZHMubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5nZXRQYXJhbXMoaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJpcXVhZCA9IG5ldyBCaXF1YWQoXy5zYW1wbGVyYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXF1YWQuc2V0VHlwZShcImhpZ2hwYXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gaW1heCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmlxdWFkLnNldFR5cGUoXCJsb3dwYXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpcXVhZC5zZXRUeXBlKFwicGVha2luZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYmlxdWFkLnNldFBhcmFtcyhwYXJhbXMuZnJlcSwgcGFyYW1zLlEsIHBhcmFtcy5nYWluKTtcclxuICAgICAgICAgICAgICAgICAgICBiaXF1YWQucHJvY2VzcyhpbXBsdXNlLCBpbXBsdXNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZmZ0LmZvcndhcmQoaW1wbHVzZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2l6ZSA9IDUxMjtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHNpemUpO1xyXG4gICAgICAgICAgICB2YXIgbnlxdWlzdCAgPSBfLnNhbXBsZXJhdGUgKiAwLjU7XHJcbiAgICAgICAgICAgIHZhciBzcGVjdHJ1bSA9IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSk7XHJcbiAgICAgICAgICAgIHZhciBqLCBmLCBpbmRleCwgZGVsdGEsIHgwLCB4MSwgeHg7XHJcblxyXG4gICAgICAgICAgICBmZnQuZ2V0RnJlcXVlbmN5RGF0YShzcGVjdHJ1bSk7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGYgPSBNYXRoLnBvdyhueXF1aXN0IC8gUExPVF9MT1dfRlJFUSwgaSAvIHNpemUpICogUExPVF9MT1dfRlJFUTtcclxuICAgICAgICAgICAgICAgIGogPSBmIC8gKG55cXVpc3QgLyBzcGVjdHJ1bS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBqfDA7XHJcbiAgICAgICAgICAgICAgICBkZWx0YSA9IGogLSBpbmRleDtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHgxID0geDAgPSB4eCA9IHNwZWN0cnVtW2luZGV4XTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeDAgPSBzcGVjdHJ1bVtpbmRleCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHgxID0gc3BlY3RydW1baW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIHh4ID0gKCgxLjAgLSBkZWx0YSkgKiB4MCArIGRlbHRhICogeDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGF0YVtpXSA9IHh4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuXy5wbG90RGF0YSAgPSBkYXRhO1xyXG4gICAgICAgICAgICB0aGlzLl8ucGxvdEZsdXNoID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyX3Bsb3QuY2FsbCh0aGlzLCBvcHRzKTtcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJlcVwiLCBFUU5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiAgPSBULmZuO1xyXG4gICAgdmFyIEZGVCA9IFQubW9kdWxlcy5GRlQ7XHJcblxyXG4gICAgZnVuY3Rpb24gRkZUTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMiwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmxpc3RlbmVyKHRoaXMpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLnJlYWwgPSBuZXcgVC5DaGFubmVsT2JqZWN0KHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaW1hZyA9IG5ldyBULkNoYW5uZWxPYmplY3QodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jZWxsc1szXSA9IHRoaXMucmVhbC5jZWxsO1xyXG4gICAgICAgIHRoaXMuY2VsbHNbNF0gPSB0aGlzLmltYWcuY2VsbDtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgXy5mZnQgPSBuZXcgRkZUKF8uY2VsbHNpemUgKiAyKTtcclxuICAgICAgICBfLmZmdENlbGwgID0gbmV3IGZuLlNpZ25hbEFycmF5KF8uZmZ0Lmxlbmd0aCk7XHJcbiAgICAgICAgXy5wcmV2Q2VsbCA9IG5ldyBmbi5TaWduYWxBcnJheShfLmNlbGxzaXplKTtcclxuICAgICAgICBfLmZyZXFzICAgID0gbmV3IGZuLlNpZ25hbEFycmF5KF8uZmZ0Lmxlbmd0aD4+MSk7XHJcblxyXG4gICAgICAgIF8ucGxvdEZsdXNoID0gdHJ1ZTtcclxuICAgICAgICBfLnBsb3RSYW5nZSA9IFswLCAzMl07XHJcbiAgICAgICAgXy5wbG90QmFyU3R5bGUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKEZGVE5vZGUpO1xyXG5cclxuICAgIHZhciAkID0gRkZUTm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIHdpbmRvdzoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uZmZ0LnNldFdpbmRvdyh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmZmdC53aW5kb3dOYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzcGVjdHJ1bToge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5mZnQuZ2V0RnJlcXVlbmN5RGF0YSh0aGlzLl8uZnJlcXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbMF07XHJcbiAgICAgICAgICAgIHZhciBjZWxsc2l6ZSA9IF8uY2VsbHNpemU7XHJcblxyXG4gICAgICAgICAgICBfLmZmdENlbGwuc2V0KF8ucHJldkNlbGwpO1xyXG4gICAgICAgICAgICBfLmZmdENlbGwuc2V0KGNlbGwsIGNlbGxzaXplKTtcclxuICAgICAgICAgICAgXy5mZnQuZm9yd2FyZChfLmZmdENlbGwpO1xyXG4gICAgICAgICAgICBfLnByZXZDZWxsLnNldChjZWxsKTtcclxuICAgICAgICAgICAgXy5wbG90Rmx1c2ggPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jZWxsc1szXS5zZXQoXy5mZnQucmVhbC5zdWJhcnJheSgwLCBjZWxsc2l6ZSkpO1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxzWzRdLnNldChfLmZmdC5pbWFnLnN1YmFycmF5KDAsIGNlbGxzaXplKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHN1cGVyX3Bsb3QgPSBULk9iamVjdC5wcm90b3R5cGUucGxvdDtcclxuXHJcbiAgICAkLnBsb3QgPSBmdW5jdGlvbihvcHRzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuXy5wbG90Rmx1c2gpIHtcclxuICAgICAgICAgICAgdGhpcy5fLnBsb3REYXRhICA9IHRoaXMuc3BlY3RydW07XHJcbiAgICAgICAgICAgIHRoaXMuXy5wbG90Rmx1c2ggPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3VwZXJfcGxvdC5jYWxsKHRoaXMsIG9wdHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcImZmdFwiLCBGRlROb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG5cclxuICAgIGZ1bmN0aW9uIEZOb2lzZU5vZGUoX2FyZ3MpIHtcclxuICAgICAgICBULk9iamVjdC5jYWxsKHRoaXMsIDEsIF9hcmdzKTtcclxuICAgICAgICBmbi5maXhBUih0aGlzKTtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgXy5mcmVxID0gVCg0NDApO1xyXG4gICAgICAgIF8ucmVnID0gMHg4MDAwO1xyXG4gICAgICAgIF8uc2hvcnRGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgXy5waGFzZSAgICAgPSAwO1xyXG4gICAgICAgIF8ubGFzdFZhbHVlID0gMDtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChGTm9pc2VOb2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IEZOb2lzZU5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICBzaG9ydEZsYWc6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLnNob3J0RmxhZyA9ICEhdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLnNob3J0RmxhZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZnJlcToge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uZnJlcSA9IFQodmFsdWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5mcmVxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWzBdO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIHZhciBsYXN0VmFsdWUgPSBfLmxhc3RWYWx1ZTtcclxuICAgICAgICAgICAgdmFyIHBoYXNlICAgICA9IF8ucGhhc2U7XHJcbiAgICAgICAgICAgIHZhciBwaGFzZVN0ZXAgPSBfLmZyZXEucHJvY2Vzcyh0aWNrSUQpLmNlbGxzWzBdWzBdIC8gXy5zYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICB2YXIgcmVnID0gXy5yZWc7XHJcbiAgICAgICAgICAgIHZhciBtdWwgPSBfLm11bCwgYWRkID0gXy5hZGQ7XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4O1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uc2hvcnRGbGFnKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpbWF4ID0gY2VsbC5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGhhc2UgPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWcgPj49IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZyB8PSAoKHJlZyBeIChyZWcgPj4gNikpICYgMSkgPDwgMTU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9ICgocmVnICYgMSkgLSAwLjUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaGFzZSAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjZWxsW2ldID0gbGFzdFZhbHVlICogbXVsICsgYWRkO1xyXG4gICAgICAgICAgICAgICAgICAgIHBoYXNlICs9IHBoYXNlU3RlcDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGltYXggPSBjZWxsLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwaGFzZSA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZyA+Pj0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnIHw9ICgocmVnIF4gKHJlZyA+PiAxKSkgJiAxKSA8PCAxNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gKChyZWcgJiAxKSAtIDAuNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBoYXNlIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbaV0gPSBsYXN0VmFsdWUgKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcGhhc2UgKz0gcGhhc2VTdGVwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF8ucmVnICAgICAgID0gcmVnO1xyXG4gICAgICAgICAgICBfLnBoYXNlICAgICA9IHBoYXNlO1xyXG4gICAgICAgICAgICBfLmxhc3RWYWx1ZSA9IGxhc3RWYWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcImZub2lzZVwiLCBGTm9pc2VOb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG5cclxuICAgIHZhciBHYXRlQ2hhbm5lbE5vZGUgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gR2F0ZUNoYW5uZWxOb2RlKHBhcmVudCkge1xyXG4gICAgICAgICAgICBULk9iamVjdC5jYWxsKHRoaXMsIDIsIFtdKTtcclxuICAgICAgICAgICAgZm4uZml4QVIodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuXy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZuLmV4dGVuZChHYXRlQ2hhbm5lbE5vZGUpO1xyXG5cclxuICAgICAgICBHYXRlQ2hhbm5lbE5vZGUucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLnBhcmVudC5wcm9jZXNzKHRpY2tJRCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIEdhdGVDaGFubmVsTm9kZTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgZnVuY3Rpb24gR2F0ZU5vZGUoX2FyZ3MpIHtcclxuICAgICAgICBULk9iamVjdC5jYWxsKHRoaXMsIDIsIF9hcmdzKTtcclxuICAgICAgICBmbi5maXhBUih0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5fLnNlbGVjdGVkID0gMDtcclxuICAgICAgICB0aGlzLl8ub3V0cHV0cyAgPSBbXTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChHYXRlTm9kZSk7XHJcblxyXG4gICAgdmFyICQgPSBHYXRlTm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIHNlbGVjdGVkOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uc2VsZWN0ZWQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb3V0cHV0cyA9IF8ub3V0cHV0cztcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaW1heCA9IG91dHB1dHMubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvdXRwdXRzW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRzW2ldLmNlbGxzWzBdLnNldChmbi5lbXB0eWNlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0c1tpXS5jZWxsc1sxXS5zZXQoZm4uZW1wdHljZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dHNbaV0uY2VsbHNbMl0uc2V0KGZuLmVtcHR5Y2VsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLnNlbGVjdGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5hdCA9IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgdmFyIG91dHB1dCA9IF8ub3V0cHV0c1tpbmRleF07XHJcbiAgICAgICAgaWYgKCFvdXRwdXQpIHtcclxuICAgICAgICAgICAgXy5vdXRwdXRzW2luZGV4XSA9IG91dHB1dCA9IG5ldyBHYXRlQ2hhbm5lbE5vZGUodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9O1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIGZuLmlucHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdmFyIG91dHB1dCA9IF8ub3V0cHV0c1tfLnNlbGVjdGVkXTtcclxuICAgICAgICAgICAgaWYgKG91dHB1dCkge1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LmNlbGxzWzBdLnNldCh0aGlzLmNlbGxzWzBdKTtcclxuICAgICAgICAgICAgICAgIG91dHB1dC5jZWxsc1sxXS5zZXQodGhpcy5jZWxsc1sxXSk7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQuY2VsbHNbMl0uc2V0KHRoaXMuY2VsbHNbMl0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJnYXRlXCIsIEdhdGVOb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gID0gVC5mbjtcclxuICAgIHZhciBGRlQgPSBULm1vZHVsZXMuRkZUO1xyXG5cclxuICAgIGZ1bmN0aW9uIElGRlROb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAxLCBfYXJncyk7XHJcbiAgICAgICAgZm4uZml4QVIodGhpcyk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8uZmZ0ID0gbmV3IEZGVChfLmNlbGxzaXplICogMik7XHJcbiAgICAgICAgXy5mZnRDZWxsICAgID0gbmV3IGZuLlNpZ25hbEFycmF5KHRoaXMuXy5mZnQubGVuZ3RoKTtcclxuICAgICAgICBfLnJlYWxCdWZmZXIgPSBuZXcgZm4uU2lnbmFsQXJyYXkodGhpcy5fLmZmdC5sZW5ndGgpO1xyXG4gICAgICAgIF8uaW1hZ0J1ZmZlciA9IG5ldyBmbi5TaWduYWxBcnJheSh0aGlzLl8uZmZ0Lmxlbmd0aCk7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoSUZGVE5vZGUpO1xyXG5cclxuICAgIHZhciAkID0gSUZGVE5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICByZWFsOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5yZWFsID0gVCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLnJlYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGltYWc6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmltYWcgPSBUKHZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uaW1hZztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLnJlYWwgJiYgXy5pbWFnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVhbCA9IF8ucmVhbEJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgIHZhciBpbWFnID0gXy5pbWFnQnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgdmFyIF9yZWFsID0gXy5yZWFsLnByb2Nlc3ModGlja0lEKS5jZWxsc1swXTtcclxuICAgICAgICAgICAgICAgIHZhciBfaW1hZyA9IF8uaW1hZy5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgcmVhbC5zZXQoX3JlYWwpO1xyXG4gICAgICAgICAgICAgICAgaW1hZy5zZXQoX2ltYWcpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNlbGwuc2V0KF8uZmZ0LmludmVyc2UocmVhbCwgaW1hZykuc3ViYXJyYXkoMCwgXy5jZWxsc2l6ZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJpZmZ0XCIsIElGRlROb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG4gICAgdmFyIHRpbWV2YWx1ZSA9IFQudGltZXZhbHVlO1xyXG5cclxuICAgIGZ1bmN0aW9uIEludGVydmFsTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMSwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLnRpbWVyKHRoaXMpO1xyXG4gICAgICAgIGZuLmZpeEtSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBfLmludGVydmFsID0gVCgxMDAwKTtcclxuICAgICAgICBfLmNvdW50ID0gMDtcclxuICAgICAgICBfLmRlbGF5ICAgPSAwO1xyXG4gICAgICAgIF8udGltZW91dCA9IEluZmluaXR5O1xyXG4gICAgICAgIF8uY3VycmVudFRpbWUgPSAwO1xyXG4gICAgICAgIF8uZGVsYXlTYW1wbGVzID0gMDtcclxuICAgICAgICBfLmNvdW50U2FtcGxlcyA9IDA7XHJcbiAgICAgICAgXy5vbmVuZGVkID0gZm4ubWFrZV9vbmVuZGVkKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLm9uKFwic3RhcnRcIiwgb25zdGFydCk7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoSW50ZXJ2YWxOb2RlKTtcclxuXHJcbiAgICB2YXIgb25zdGFydCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIHRoaXMucGxheWJhY2tTdGF0ZSA9IGZuLlBMQVlJTkdfU1RBVEU7XHJcbiAgICAgICAgXy5kZWxheVNhbXBsZXMgPSAoXy5zYW1wbGVyYXRlICogKF8uZGVsYXkgKiAwLjAwMSkpfDA7XHJcbiAgICAgICAgXy5jb3VudFNhbXBsZXMgPSBfLmNvdW50ID0gXy5jdXJyZW50VGltZSA9IDA7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9uc3RhcnQsIFwidW5yZW1vdmFibGVcIiwge1xyXG4gICAgICAgIHZhbHVlOnRydWUsIHdyaXRhYmxlOmZhbHNlXHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgJCA9IEludGVydmFsTm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIGludGVydmFsOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRpbWV2YWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuXy5pbnRlcnZhbCA9IFQodmFsdWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5pbnRlcnZhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVsYXk6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGltZXZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5kZWxheSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5kZWxheVNhbXBsZXMgPSAodGhpcy5fLnNhbXBsZXJhdGUgKiAodmFsdWUgKiAwLjAwMSkpfDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmRlbGF5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb3VudDoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmNvdW50ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmNvdW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0aW1lb3V0OiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRpbWV2YWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIHZhbHVlID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8udGltZW91dCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy50aW1lb3V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjdXJyZW50VGltZToge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5jdXJyZW50VGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQuYmFuZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIHRoaXMucGxheWJhY2tTdGF0ZSA9IGZuLlBMQVlJTkdfU1RBVEU7XHJcbiAgICAgICAgXy5kZWxheVNhbXBsZXMgPSAoXy5zYW1wbGVyYXRlICogKF8uZGVsYXkgKiAwLjAwMSkpfDA7XHJcbiAgICAgICAgXy5jb3VudFNhbXBsZXMgPSBfLmNvdW50ID0gXy5jdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgXy5lbWl0KFwiYmFuZ1wiKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWzBdO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5kZWxheVNhbXBsZXMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBfLmRlbGF5U2FtcGxlcyAtPSBjZWxsLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGludGVydmFsID0gXy5pbnRlcnZhbC5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF07XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5kZWxheVNhbXBsZXMgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgXy5jb3VudFNhbXBsZXMgLT0gY2VsbC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5jb3VudFNhbXBsZXMgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uY291bnRTYW1wbGVzICs9IChfLnNhbXBsZXJhdGUgKiBpbnRlcnZhbCAqIDAuMDAxKXwwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50ICA9IF8uY291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBjb3VudCAqIF8ubXVsICsgXy5hZGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGptYXggPSBjZWxsLmxlbmd0aDsgaiA8IGptYXg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsW2pdID0geDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSBub2Rlcy5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0uYmFuZyhjb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF8uY291bnQgKz0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfLmN1cnJlbnRUaW1lICs9IGZuLmN1cnJlbnRUaW1lSW5jcjtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLmN1cnJlbnRUaW1lID49IF8udGltZW91dCkge1xyXG4gICAgICAgICAgICAgICAgZm4ubmV4dFRpY2soXy5vbmVuZGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJpbnRlcnZhbFwiLCBJbnRlcnZhbE5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcbiAgICB2YXIgdGltZXZhbHVlID0gVC50aW1ldmFsdWU7XHJcblxyXG4gICAgZnVuY3Rpb24gTGFnTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMSwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICB2YXIgYml0cyA9IE1hdGguY2VpbChNYXRoLmxvZyhfLnNhbXBsZXJhdGUpICogTWF0aC5MT0cyRSk7XHJcbiAgICAgICAgXy5idWZmZXJzaXplID0gMSA8PCBiaXRzO1xyXG4gICAgICAgIF8uYnVmZmVybWFzayA9IF8uYnVmZmVyc2l6ZSAtIDE7XHJcbiAgICAgICAgXy5idWZmZXIgPSBuZXcgZm4uU2lnbmFsQXJyYXkoXy5idWZmZXJzaXplKTtcclxuICAgICAgICBfLnRpbWUgPSAwO1xyXG4gICAgICAgIF8ucmVhZEluZGV4ICA9IDA7XHJcbiAgICAgICAgXy53cml0ZUluZGV4ID0gMDtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChMYWdOb2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IExhZ05vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICB0aW1lOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRpbWV2YWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIHZhbHVlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udGltZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAodmFsdWUgKiAwLjAwMSAqIF8uc2FtcGxlcmF0ZSl8MDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ID4gXy5idWZmZXJtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IF8uYnVmZmVybWFzaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXy53cml0ZUluZGV4ID0gKF8ucmVhZEluZGV4ICsgb2Zmc2V0KSAmIF8uYnVmZmVybWFzaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8udGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIGZuLmlucHV0U2lnbmFsQVIodGhpcyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbMF07XHJcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBfLmJ1ZmZlcjtcclxuICAgICAgICAgICAgdmFyIG1hc2sgICA9IF8uYnVmZmVybWFzaztcclxuICAgICAgICAgICAgdmFyIHJlYWRJbmRleCAgPSBfLnJlYWRJbmRleDtcclxuICAgICAgICAgICAgdmFyIHdyaXRlSW5kZXggPSBfLndyaXRlSW5kZXg7XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gY2VsbC5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJbd3JpdGVJbmRleF0gPSBjZWxsW2ldO1xyXG4gICAgICAgICAgICAgICAgY2VsbFtpXSA9IGJ1ZmZlcltyZWFkSW5kZXhdO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlYWRJbmRleCAgKz0gMTtcclxuICAgICAgICAgICAgICAgIHdyaXRlSW5kZXggPSAod3JpdGVJbmRleCArIDEpICYgbWFzaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgXy5yZWFkSW5kZXggID0gcmVhZEluZGV4ICYgbWFzaztcclxuICAgICAgICAgICAgXy53cml0ZUluZGV4ID0gd3JpdGVJbmRleDtcclxuXHJcbiAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwibGFnXCIsIExhZ05vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcblxyXG4gICAgZnVuY3Rpb24gTWFwTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMSwgX2FyZ3MpO1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8uaW5wdXQgID0gMDtcclxuICAgICAgICBfLnZhbHVlID0gMDtcclxuICAgICAgICBfLnByZXYgICA9IG51bGw7XHJcbiAgICAgICAgXy5hciAgICAgPSBmYWxzZTtcclxuICAgICAgICBfLm1hcCAgICA9IGRlZmF1bHRGdW5jdGlvbjtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChNYXBOb2RlKTtcclxuXHJcbiAgICB2YXIgZGVmYXVsdEZ1bmN0aW9uID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICAgIHJldHVybiB4O1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgJCA9IE1hcE5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICBpbnB1dDoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmlucHV0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmlucHV0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXA6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLm1hcCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5tYXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLmJhbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl8ucHJldiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fLmVtaXQoXCJiYW5nXCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmF0ID0gZnVuY3Rpb24oaW5wdXQpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuXy5tYXApID8gdGhpcy5fLm1hcChpbnB1dCkgOiAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbMF07XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMubm9kZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heCA9IGNlbGwubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uYXIgJiYgbGVuKSB7XHJcbiAgICAgICAgICAgICAgICBmbi5pbnB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hcCA9IF8ubWFwO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbFtpXSA9IG1hcChjZWxsW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfLnZhbHVlID0gY2VsbFtpbWF4LTFdO1xyXG4gICAgICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBsZW4gPyBmbi5pbnB1dFNpZ25hbEtSKHRoaXMpIDogXy5pbnB1dDtcclxuICAgICAgICAgICAgICAgIGlmIChfLm1hcCAmJiBfLnByZXYgIT09IGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5wcmV2ID0gaW5wdXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgXy52YWx1ZSA9IF8ubWFwKGlucHV0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF8udmFsdWUgKiBfLm11bCArIF8uYWRkO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbaV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwibWFwXCIsIE1hcE5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcblxyXG4gICAgZnVuY3Rpb24gTWF4Tm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMSwgX2FyZ3MpO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKE1heE5vZGUpO1xyXG5cclxuICAgIHZhciAkID0gTWF4Tm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWzBdO1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gbm9kZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgaiwgam1heCA9IGNlbGwubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgdG1wLCB2YWw7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5hcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBub2Rlc1swXS5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXQodG1wKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IG5vZGVzW2ldLnByb2Nlc3ModGlja0lEKS5jZWxsc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGptYXg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gdG1wW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGxbal0gPCB2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsW2pdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgam1heDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxbal0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBub2Rlc1swXS5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBub2Rlc1tpXS5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0bXAgPCB2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNlbGxbMF0gPSB0bXA7XHJcbiAgICAgICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxLUih0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwibWF4XCIsIE1heE5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIGlmIChULmVudnR5cGUgIT09IFwiYnJvd3NlclwiKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcbiAgICB2YXIgQlVGRkVSX1NJWkUgPSA0MDk2O1xyXG4gICAgdmFyIEJVRkZFUl9NQVNLID0gQlVGRkVSX1NJWkUgLSAxO1xyXG5cclxuICAgIGZ1bmN0aW9uIE1lZGlhU3RyZWFtTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMiwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBfLnNyYyA9IF8uZnVuYyA9IG51bGw7XHJcbiAgICAgICAgXy5idWZmZXJMID0gbmV3IGZuLlNpZ25hbEFycmF5KEJVRkZFUl9TSVpFKTtcclxuICAgICAgICBfLmJ1ZmZlclIgPSBuZXcgZm4uU2lnbmFsQXJyYXkoQlVGRkVSX1NJWkUpO1xyXG4gICAgICAgIF8ucmVhZEluZGV4ICA9IDA7XHJcbiAgICAgICAgXy53cml0ZUluZGV4ID0gMDtcclxuICAgICAgICBfLnRvdGFsUmVhZCAgPSAwO1xyXG4gICAgICAgIF8udG90YWxXcml0ZSA9IDA7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoTWVkaWFTdHJlYW1Ob2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IE1lZGlhU3RyZWFtTm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgJC5saXN0ZW4gPSBmdW5jdGlvbihhdWRpbykge1xyXG4gICAgICAgIHZhciBfaW1wbCA9IGltcGxbVC5lbnZdO1xyXG4gICAgICAgIGlmIChfaW1wbCkge1xyXG4gICAgICAgICAgICBfaW1wbC5zZXQuY2FsbCh0aGlzLCBhdWRpbyk7XHJcbiAgICAgICAgICAgIF9pbXBsLmxpc3Rlbi5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJC51bmxpc3RlbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfaW1wbCA9IGltcGxbVC5lbnZdO1xyXG4gICAgICAgIGlmIChfaW1wbCkge1xyXG4gICAgICAgICAgICBfaW1wbC51bmxpc3Rlbi5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jZWxsc1swXS5zZXQoZm4uZW1wdHljZWxsKTtcclxuICAgICAgICB0aGlzLmNlbGxzWzFdLnNldChmbi5lbXB0eWNlbGwpO1xyXG4gICAgICAgIHRoaXMuY2VsbHNbMl0uc2V0KGZuLmVtcHR5Y2VsbCk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIHZhciBidWZmZXJMID0gXy5idWZmZXJMLCBidWZmZXJSID0gXy5idWZmZXJSO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbWF4ID0gYnVmZmVyTC5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgYnVmZmVyTFtpXSA9IGJ1ZmZlclJbaV0gPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmIChfLnNyYyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbGxzaXplID0gXy5jZWxsc2l6ZTtcclxuICAgICAgICAgICAgaWYgKF8udG90YWxXcml0ZSA+IF8udG90YWxSZWFkICsgY2VsbHNpemUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBiZWdpbiA9IF8ucmVhZEluZGV4O1xyXG4gICAgICAgICAgICAgICAgdmFyIGVuZCAgID0gYmVnaW4gKyBjZWxsc2l6ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNbMV0uc2V0KF8uYnVmZmVyTC5zdWJhcnJheShiZWdpbiwgZW5kKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNlbGxzWzJdLnNldChfLmJ1ZmZlclIuc3ViYXJyYXkoYmVnaW4sIGVuZCkpO1xyXG4gICAgICAgICAgICAgICAgXy5yZWFkSW5kZXggPSBlbmQgJiBCVUZGRVJfTUFTSztcclxuICAgICAgICAgICAgICAgIF8udG90YWxSZWFkICs9IGNlbGxzaXplO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgaW1wbCA9IHt9O1xyXG4gICAgaW1wbC53ZWJraXQgPSB7XHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbihzcmMpIHtcclxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgIC8qZ2xvYmFsIEhUTUxNZWRpYUVsZW1lbnQ6dHJ1ZSAqL1xyXG4gICAgICAgICAgICBpZiAoc3JjIGluc3RhbmNlb2YgSFRNTE1lZGlhRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBmbi5fYXVkaW9Db250ZXh0O1xyXG4gICAgICAgICAgICAgICAgXy5zcmMgPSBjb250ZXh0LmNyZWF0ZU1lZGlhRWxlbWVudFNvdXJjZShzcmMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qZ2xvYmFsIEhUTUxNZWRpYUVsZW1lbnQ6ZmFsc2UgKi9cclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpc3RlbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IGZuLl9hdWRpb0NvbnRleHQ7XHJcbiAgICAgICAgICAgIF8uZ2FpbiA9IGNvbnRleHQuY3JlYXRlR2FpbigpO1xyXG4gICAgICAgICAgICBfLmdhaW4uZ2Fpbi52YWx1ZSA9IDA7XHJcbiAgICAgICAgICAgIF8ubm9kZSA9IGNvbnRleHQuY3JlYXRlU2NyaXB0UHJvY2Vzc29yTm9kZSgxMDI0LCAyLCAyKTtcclxuICAgICAgICAgICAgXy5ub2RlLm9uYXVkaW9wcm9jZXNzID0gb25hdWRpb3Byb2Nlc3ModGhpcyk7XHJcbiAgICAgICAgICAgIF8uc3JjLmNvbm5lY3QoXy5ub2RlKTtcclxuICAgICAgICAgICAgXy5ub2RlLmNvbm5lY3QoXy5nYWluKTtcclxuICAgICAgICAgICAgXy5nYWluLmNvbm5lY3QoY29udGV4dC5kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bmxpc3RlbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICBpZiAoXy5zcmMpIHtcclxuICAgICAgICAgICAgICAgIF8uc3JjLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoXy5nYWluKSB7XHJcbiAgICAgICAgICAgICAgICBfLmdhaW4uZGlzY29ubmVjdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChfLm5vZGUpIHtcclxuICAgICAgICAgICAgICAgIF8ubm9kZS5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIG9uYXVkaW9wcm9jZXNzID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHZhciBfID0gc2VsZi5fO1xyXG4gICAgICAgICAgICB2YXIgaW5zID0gZS5pbnB1dEJ1ZmZlcjtcclxuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGlucy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciB3cml0ZUluZGV4ID0gXy53cml0ZUluZGV4O1xyXG5cclxuICAgICAgICAgICAgXy5idWZmZXJMLnNldChpbnMuZ2V0Q2hhbm5lbERhdGEoMCksIHdyaXRlSW5kZXgpO1xyXG4gICAgICAgICAgICBfLmJ1ZmZlclIuc2V0KGlucy5nZXRDaGFubmVsRGF0YSgxKSwgd3JpdGVJbmRleCk7XHJcbiAgICAgICAgICAgIF8ud3JpdGVJbmRleCA9ICh3cml0ZUluZGV4ICsgbGVuZ3RoKSAmIEJVRkZFUl9NQVNLO1xyXG4gICAgICAgICAgICBfLnRvdGFsV3JpdGUgKz0gbGVuZ3RoO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIGltcGwubW96ID0ge1xyXG4gICAgICAgIHNldDogZnVuY3Rpb24oc3JjKSB7XHJcbiAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICAvKmdsb2JhbCBIVE1MQXVkaW9FbGVtZW50OnRydWUgKi9cclxuICAgICAgICAgICAgaWYgKHNyYyBpbnN0YW5jZW9mIEhUTUxBdWRpb0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIF8uc3JjID0gc3JjO1xyXG4gICAgICAgICAgICAgICAgXy5pc3RlcCA9IF8uc2FtcGxlcmF0ZSAvIHNyYy5tb3pTYW1wbGVSYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qZ2xvYmFsIEhUTUxBdWRpb0VsZW1lbnQ6ZmFsc2UgKi9cclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpc3RlbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICB2YXIgbzAgPSBfLmJ1ZmZlckw7XHJcbiAgICAgICAgICAgIHZhciBvMSA9IF8uYnVmZmVyUjtcclxuICAgICAgICAgICAgdmFyIHByZXYwID0gMCwgcHJldjEgPSAwO1xyXG4gICAgICAgICAgICBpZiAoXy5zcmMubW96Q2hhbm5lbHMgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgIF8ueCA9IDA7XHJcbiAgICAgICAgICAgICAgICBfLmZ1bmMgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdyaXRlSW5kZXggPSBfLndyaXRlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsV3JpdGUgPSBfLnRvdGFsV3JpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNhbXBsZXMgPSBlLmZyYW1lQnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB4LCBpc3RlcCA9IF8uaXN0ZXA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGksIGltYXggPSBzYW1wbGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB4ID0gXy54O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyBpKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4ICs9IGlzdGVwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoeCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8wW3dyaXRlSW5kZXhdID0gKHNhbXBsZXNbaSAgXSArIHByZXYwKSAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8xW3dyaXRlSW5kZXhdID0gKHNhbXBsZXNbaSsxXSArIHByZXYxKSAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlSW5kZXggPSAod3JpdGVJbmRleCArIDEpICYgQlVGRkVSX01BU0s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK3RvdGFsV3JpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4IC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldjAgPSBzYW1wbGVzW2kgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYxID0gc2FtcGxlc1tpKzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfLnggPSB4O1xyXG4gICAgICAgICAgICAgICAgICAgIF8ud3JpdGVJbmRleCA9IHdyaXRlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50b3RhbFdyaXRlID0gdG90YWxXcml0ZTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfLnggPSAwO1xyXG4gICAgICAgICAgICAgICAgXy5mdW5jID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3cml0ZUluZGV4ID0gXy53cml0ZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b3RhbFdyaXRlID0gXy50b3RhbFdyaXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzYW1wbGVzID0gZS5mcmFtZUJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeCwgaXN0ZXAgPSBfLmlzdGVwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gc2FtcGxlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IF8ueDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gaXN0ZXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8wW3dyaXRlSW5kZXhdID0gbzFbd3JpdGVJbmRleF0gPSAoc2FtcGxlc1tpXSArIHByZXYwKSAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlSW5kZXggPSAod3JpdGVJbmRleCArIDEpICYgQlVGRkVSX01BU0s7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICArK3RvdGFsV3JpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4IC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldjAgPSBzYW1wbGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBfLnggPSB4O1xyXG4gICAgICAgICAgICAgICAgICAgIF8ud3JpdGVJbmRleCA9IHdyaXRlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50b3RhbFdyaXRlID0gdG90YWxXcml0ZTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXy5zcmMuYWRkRXZlbnRMaXN0ZW5lcihcIk1vekF1ZGlvQXZhaWxhYmxlXCIsIF8uZnVuYyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bmxpc3RlbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICBpZiAoXy5mdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBfLnNyYy5yZW1vdmVFdmVudExpc3RlbmVyKFwiTW96QXVkaW9BdmFpbGFibGVcIiwgXy5mdW5jKTtcclxuICAgICAgICAgICAgICAgIF8uZnVuYyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwibWVkaWFzdHJlYW1cIiwgTWVkaWFTdHJlYW1Ob2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG5cclxuICAgIGZ1bmN0aW9uIE1pZGlDcHNOb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAxLCBfYXJncyk7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgXy5taWRpID0gMDtcclxuICAgICAgICBfLnZhbHVlID0gMDtcclxuICAgICAgICBfLnByZXYgID0gbnVsbDtcclxuICAgICAgICBfLmE0ICAgID0gNDQwO1xyXG4gICAgICAgIF8uYXIgICAgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChNaWRpQ3BzTm9kZSk7XHJcblxyXG4gICAgdmFyICQgPSBNaWRpQ3BzTm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIG1pZGk6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5taWRpID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLm1pZGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGE0OiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8uYTQgICA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5wcmV2ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uYTQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLmJhbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl8ucHJldiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5fLmVtaXQoXCJiYW5nXCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmF0ID0gZnVuY3Rpb24obWlkaSkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIHJldHVybiBfLmE0ICogTWF0aC5wb3coMiwgKG1pZGkgLSA2OSkgLyAxMik7XHJcbiAgICB9O1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1swXTtcclxuICAgICAgICAgICAgdmFyIGxlbiAgPSB0aGlzLm5vZGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGksIGltYXggPSBjZWxsLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLmFyICYmIGxlbikge1xyXG4gICAgICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICAgICAgICAgIHZhciBhNCA9IF8uYTQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbFtpXSA9IGE0ICogTWF0aC5wb3coMiwgKGNlbGxbaV0gLSA2OSkgLyAxMik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfLnZhbHVlID0gY2VsbFtpbWF4LTFdO1xyXG4gICAgICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSAobGVuKSA/IGZuLmlucHV0U2lnbmFsS1IodGhpcykgOiBfLm1pZGk7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5wcmV2ICE9PSBpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF8ucHJldiA9IGlucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgIF8udmFsdWUgPSBfLmE0ICogTWF0aC5wb3coMiwgKGlucHV0IC0gNjkpIC8gMTIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2VsbFswXSA9IF8udmFsdWU7XHJcbiAgICAgICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxLUih0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwibWlkaWNwc1wiLCBNaWRpQ3BzTm9kZSk7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGZuID0gVC5mbjtcclxuXHJcbiAgICBmdW5jdGlvbiBNaWRpUmF0aW9Ob2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAxLCBfYXJncyk7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgXy5taWRpID0gMDtcclxuICAgICAgICBfLnZhbHVlID0gMDtcclxuICAgICAgICBfLnByZXYgID0gbnVsbDtcclxuICAgICAgICBfLnJhbmdlID0gMTI7XHJcbiAgICAgICAgXy5hciAgICA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKE1pZGlSYXRpb05vZGUpO1xyXG5cclxuICAgIHZhciAkID0gTWlkaVJhdGlvTm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIG1pZGk6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5taWRpID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLm1pZGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHJhbmdlOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLnJhbmdlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLnJhbmdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5iYW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fLnByZXYgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuXy5lbWl0KFwiYmFuZ1wiKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5hdCA9IGZ1bmN0aW9uKG1pZGkpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICByZXR1cm4gTWF0aC5wb3coMiwgbWlkaSAvIF8ucmFuZ2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbMF07XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMubm9kZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heCA9IGNlbGwubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uYXIgJiYgbGVuKSB7XHJcbiAgICAgICAgICAgICAgICBmbi5pbnB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gXy5yYW5nZTtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsW2ldID0gTWF0aC5wb3coMiwgY2VsbFtpXSAvIHJhbmdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF8udmFsdWUgPSBjZWxsW2ltYXgtMV07XHJcbiAgICAgICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9ICh0aGlzLm5vZGVzLmxlbmd0aCkgPyBmbi5pbnB1dFNpZ25hbEtSKHRoaXMpIDogXy5taWRpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF8ucHJldiAhPT0gaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLnByZXYgPSBpbnB1dDtcclxuICAgICAgICAgICAgICAgICAgICBfLnZhbHVlID0gTWF0aC5wb3coMiwgaW5wdXQgLyBfLnJhbmdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IF8udmFsdWUgKiBfLm11bCArIF8uYWRkO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbaV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwibWlkaXJhdGlvXCIsIE1pZGlSYXRpb05vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcblxyXG4gICAgZnVuY3Rpb24gTWluTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMSwgX2FyZ3MpO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKE1pbk5vZGUpO1xyXG5cclxuICAgIHZhciAkID0gTWluTm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWzBdO1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gbm9kZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgaiwgam1heCA9IGNlbGwubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgdG1wLCB2YWw7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5hcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBub2Rlc1swXS5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXQodG1wKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IG5vZGVzW2ldLnByb2Nlc3ModGlja0lEKS5jZWxsc1swXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGptYXg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gdG1wW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGxbal0gPiB2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsW2pdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgam1heDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxbal0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBub2Rlc1swXS5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBub2Rlc1tpXS5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0bXAgPiB2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IHZhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNlbGxbMF0gPSB0bXA7XHJcbiAgICAgICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxLUih0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwibWluXCIsIE1pbk5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcblxyXG4gICAgZnVuY3Rpb24gTU1MKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAwLCBfYXJncyk7XHJcbiAgICAgICAgZm4udGltZXIodGhpcyk7XHJcbiAgICAgICAgZm4uZml4S1IodGhpcyk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8udHJhY2tzICA9IFtdO1xyXG4gICAgICAgIF8ub25lbmRlZCA9IGZuLm1ha2Vfb25lbmRlZCh0aGlzKTtcclxuICAgICAgICBfLmN1cnJlbnRUaW1lID0gMDtcclxuXHJcbiAgICAgICAgdGhpcy5vbihcInN0YXJ0XCIsIG9uc3RhcnQpO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKE1NTCk7XHJcblxyXG4gICAgdmFyIG9uc3RhcnQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIF8gPSB0aGlzLl87XHJcbiAgICAgICAgdmFyIG1tbCAgPSBfLm1tbDtcclxuICAgICAgICBpZiAodHlwZW9mIG1tbCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBtbWwgPSBbbW1sXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXy50cmFja3MgPSBtbWwubWFwKGZ1bmN0aW9uKG1tbCwgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE1NTFRyYWNrKHNlbGYsIGksIG1tbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXy5jdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5wbGF5YmFja1N0YXRlID0gZm4uUExBWUlOR19TVEFURTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob25zdGFydCwgXCJ1bnJlbW92ZWRcIiwge1xyXG4gICAgICAgIHZhbHVlOnRydWUsIHdyaXRhYmxlOmZhbHNlXHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgJCA9IE1NTC5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIG1tbDoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLm1tbCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5tbWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGN1cnJlbnRUaW1lOiB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5vbiA9ICQuYWRkTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIGlmICh0eXBlID09PSBcIm1tbFwiKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBcImRhdGFcIjtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQSAnbW1sJyBldmVudCBsaXN0ZW5lciB3YXMgZGVwcmVjYXRlZCBpbiB+djEzLjAzLjAxLiB1c2UgJ2RhdGEnIGV2ZW50IGxpc3RlbmVyLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fLmV2ZW50cy5vbih0eXBlLCBsaXN0ZW5lcik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09IFwibW1sXCIpIHtcclxuICAgICAgICAgICAgdHlwZSA9IFwiZGF0YVwiO1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJBICdtbWwnIGV2ZW50IGxpc3RlbmVyIHdhcyBkZXByZWNhdGVkIGluIH52MTMuMDMuMDEuIHVzZSAnZGF0YScgZXZlbnQgbGlzdGVuZXIuXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl8uZXZlbnRzLm9uY2UodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLm9mZiA9ICQucmVtb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIGlmICh0eXBlID09PSBcIm1tbFwiKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBcImRhdGFcIjtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQSAnbW1sJyBldmVudCBsaXN0ZW5lciB3YXMgZGVwcmVjYXRlZCBpbiB+djEzLjAzLjAxLiB1c2UgJ2RhdGEnIGV2ZW50IGxpc3RlbmVyLlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fLmV2ZW50cy5vZmYodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICBpZiAodHlwZSA9PT0gXCJtbWxcIikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJBICdtbWwnIGV2ZW50IGxpc3RlbmVyIHdhcyBkZXByZWNhdGVkIGluIH52MTMuMDMuMDEuIHVzZSAnZGF0YScgZXZlbnQgbGlzdGVuZXIuXCIpO1xyXG4gICAgICAgICAgICB0eXBlID0gXCJkYXRhXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuXy5ldmVudHMucmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHtcclxuICAgICAgICBpZiAodHlwZSA9PT0gXCJtbWxcIikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJBICdtbWwnIGV2ZW50IGxpc3RlbmVyIHdhcyBkZXByZWNhdGVkIGluIH52MTMuMDMuMDEuIHVzZSAnZGF0YScgZXZlbnQgbGlzdGVuZXIuXCIpO1xyXG4gICAgICAgICAgICB0eXBlID0gXCJkYXRhXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl8uZXZlbnRzLmxpc3RlbmVycyh0eXBlKTtcclxuICAgIH07XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgdmFyIGksIGltYXg7XHJcbiAgICAgICAgICAgIHZhciB0cmFja3MgPSBfLnRyYWNrcztcclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGltYXggPSB0cmFja3MubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFja3NbaV0ucHJvY2VzcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0cmFja3NbaV0uZW5kZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0cmFja3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBmbi5uZXh0VGljayhfLm9uZW5kZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF8uY3VycmVudFRpbWUgKz0gZm4uY3VycmVudFRpbWVJbmNyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwibW1sXCIsIE1NTCk7XHJcblxyXG4gICAgdmFyIE1NTFRyYWNrID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIE1NTFRyYWNrKHNlcXVlbmNlciwgdHJhY2tOdW0sIG1tbCkge1xyXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMuXyA9IHt9O1xyXG4gICAgICAgICAgICBfLnNlcXVlbmNlciA9IHNlcXVlbmNlcjtcclxuICAgICAgICAgICAgXy50cmFja051bSAgPSB0cmFja051bTtcclxuICAgICAgICAgICAgXy5jb21tYW5kcyAgPSBjb21waWxlKG1tbCk7XHJcbiAgICAgICAgICAgIF8uc3RhdHVzID0ge3Q6MTIwLCBsOjQsIG86NCwgdjoxMiwgcTo2LCBkb3Q6MCwgdGllOmZhbHNlfTtcclxuICAgICAgICAgICAgXy5pbmRleCAgICA9IDA7XHJcbiAgICAgICAgICAgIF8ucXVldWUgICAgPSBbXTtcclxuICAgICAgICAgICAgXy5jdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgICAgIF8ucXVldWVUaW1lICAgPSAwO1xyXG4gICAgICAgICAgICBfLnNlZ25vSW5kZXggID0gLTE7XHJcbiAgICAgICAgICAgIF8ubG9vcFN0YWNrICAgPSBbXTtcclxuICAgICAgICAgICAgXy5wcmV2Tm90ZSA9IDA7XHJcbiAgICAgICAgICAgIF8ucmVtYWluICAgPSBJbmZpbml0eTtcclxuICAgICAgICAgICAgdGhpcy5lbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzY2hlZCh0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBFT0YgICAgID0gMDtcclxuICAgICAgICB2YXIgTk9URU9OICA9IDE7XHJcbiAgICAgICAgdmFyIE5PVEVPRkYgPSAyO1xyXG4gICAgICAgIHZhciBDT01NQU5EID0gMztcclxuXHJcbiAgICAgICAgTU1MVHJhY2sucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgIHZhciBzZXF1ZW5jZXIgPSBfLnNlcXVlbmNlcjtcclxuICAgICAgICAgICAgdmFyIHRyYWNrTnVtICA9IF8udHJhY2tOdW07XHJcbiAgICAgICAgICAgIHZhciBxdWV1ZSAgPSBfLnF1ZXVlO1xyXG4gICAgICAgICAgICB2YXIgZW9mID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAocXVldWVbMF1bMF0gPD0gXy5jdXJyZW50VGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0SXRlbSA9IF8ucXVldWUuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG5leHRJdGVtWzFdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBOT1RFT046XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVPbihzZXF1ZW5jZXIsIHRyYWNrTnVtLCBuZXh0SXRlbVsyXSwgbmV4dEl0ZW1bM10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlbWFpbiA9IG5leHRJdGVtWzRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY2hlZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBOT1RFT0ZGOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub3RlT2ZmKHNlcXVlbmNlciwgdHJhY2tOdW0sIG5leHRJdGVtWzJdLCBuZXh0SXRlbVszXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgQ09NTUFORDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZChzZXF1ZW5jZXIsIG5leHRJdGVtWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBFT0Y6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVvZiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfLnJlbWFpbiAtPSBmbi5jdXJyZW50VGltZUluY3I7XHJcbiAgICAgICAgICAgIGlmIChlb2YpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF8uY3VycmVudFRpbWUgKz0gZm4uY3VycmVudFRpbWVJbmNyO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBub3RlT24gPSBmdW5jdGlvbihzZXF1ZW5jZXIsIHRyYWNrTnVtLCBub3RlTnVtLCB2ZWxvY2l0eSkge1xyXG4gICAgICAgICAgICB2YXIgZ2VuLCBpLCBpbWF4O1xyXG4gICAgICAgICAgICB2YXIgbm9kZXMgPSBzZXF1ZW5jZXIubm9kZXM7XHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGltYXggPSBub2Rlcy5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGdlbiA9IG5vZGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGdlbi5ub3RlT24pIHtcclxuICAgICAgICAgICAgICAgICAgICBnZW4ubm90ZU9uKG5vdGVOdW0sIHZlbG9jaXR5KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmJhbmcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXF1ZW5jZXIuXy5lbWl0KFwiZGF0YVwiLCBcIm5vdGVPblwiLCB7XHJcbiAgICAgICAgICAgICAgICB0cmFja051bTp0cmFja051bSwgbm90ZU51bTpub3RlTnVtLCB2ZWxvY2l0eTp2ZWxvY2l0eVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgbm90ZU9mZiA9IGZ1bmN0aW9uKHNlcXVlbmNlciwgdHJhY2tOdW0sIG5vdGVOdW0sIHZlbG9jaXR5KSB7XHJcbiAgICAgICAgICAgIHZhciBnZW4sIGksIGltYXg7XHJcbiAgICAgICAgICAgIHZhciBub2RlcyA9IHNlcXVlbmNlci5ub2RlcztcclxuICAgICAgICAgICAgZm9yIChpID0gMCwgaW1heCA9IG5vZGVzLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgZ2VuID0gbm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoZ2VuLm5vdGVPZmYpIHtcclxuICAgICAgICAgICAgICAgICAgICBnZW4ubm90ZU9mZihub3RlTnVtLCB2ZWxvY2l0eSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGdlbi5yZWxlYXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2VuLnJlbGVhc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXF1ZW5jZXIuXy5lbWl0KFwiZGF0YVwiLCBcIm5vdGVPZmZcIiwge1xyXG4gICAgICAgICAgICAgICAgdHJhY2tOdW06dHJhY2tOdW0sIG5vdGVOdW06bm90ZU51bSwgdmVsb2NpdHk6dmVsb2NpdHlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNvbW1hbmQgPSBmdW5jdGlvbihzZXF1ZW5jZXIsIGNtZCkge1xyXG4gICAgICAgICAgICBzZXF1ZW5jZXIuXy5lbWl0KFwiZGF0YVwiLCBcImNvbW1hbmRcIiwge1xyXG4gICAgICAgICAgICAgICAgY29tbWFuZDogY21kXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBzY2hlZCA9IGZ1bmN0aW9uKHNlbGYpIHtcclxuICAgICAgICAgICAgdmFyIF8gPSBzZWxmLl87XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VxdWVuY2VyID0gXy5zZXF1ZW5jZXI7XHJcbiAgICAgICAgICAgIHZhciBjbWQsIGNvbW1hbmRzID0gXy5jb21tYW5kcztcclxuICAgICAgICAgICAgdmFyIHF1ZXVlICA9IF8ucXVldWU7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCAgPSBfLmluZGV4O1xyXG4gICAgICAgICAgICB2YXIgc3RhdHVzID0gXy5zdGF0dXM7XHJcbiAgICAgICAgICAgIHZhciBxdWV1ZVRpbWUgPSBfLnF1ZXVlVGltZTtcclxuICAgICAgICAgICAgdmFyIGxvb3BTdGFjayA9IF8ubG9vcFN0YWNrO1xyXG4gICAgICAgICAgICB2YXIgdGVtcG8sIHZhbCwgbGVuLCBkb3QsIHZlbDtcclxuICAgICAgICAgICAgdmFyIGR1cmF0aW9uLCBxdWFudGl6ZSwgcGVuZGluZywgX3F1ZXVlVGltZTtcclxuICAgICAgICAgICAgdmFyIHBlZWs7XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4O1xyXG5cclxuICAgICAgICAgICAgcGVuZGluZyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgb3V0ZXI6XHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tbWFuZHMubGVuZ3RoIDw9IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8uc2Vnbm9JbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gXy5zZWdub0luZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNtZCA9IGNvbW1hbmRzW2luZGV4KytdO1xyXG5cclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoY21kLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJAXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaChbcXVldWVUaW1lLCBDT01NQU5ELCBjbWQudmFsXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiblwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBvID0gc3RhdHVzLnQgfHwgMTIwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbWQubGVuICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IGNtZC5sZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdCA9IGNtZC5kb3QgfHwgMDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSBzdGF0dXMubDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG90ID0gY21kLmRvdCB8fCBzdGF0dXMuZG90O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9ICg2MCAvIHRlbXBvKSAqICg0IC8gbGVuKSAqIDEwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gKj0gMiAtICgxIC8gTWF0aC5wb3coMiwgZG90KSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZlbCA9IHN0YXR1cy52IDw8IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cy50aWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gcXVldWUubGVuZ3RoOyBpLS07ICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXVlW2ldWzJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVldWUuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IF8ucHJldk5vdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gXy5wcmV2Tm90ZSA9IChjbWQudmFsKSArIChzdGF0dXMubyArIDEpICogMTI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goW3F1ZXVlVGltZSwgTk9URU9OLCB2YWwsIHZlbCwgZHVyYXRpb25dKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsZW4gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50aXplID0gc3RhdHVzLnEgLyA4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub3RlT2ZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWFudGl6ZSA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9xdWV1ZVRpbWUgPSBxdWV1ZVRpbWUgKyAoZHVyYXRpb24gKiBxdWFudGl6ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKFtfcXVldWVUaW1lLCBOT1RFT0ZGLCB2YWwsIHZlbF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgaW1heCA9IHBlbmRpbmcubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVldWUucHVzaChbX3F1ZXVlVGltZSwgTk9URU9GRiwgcGVuZGluZ1tpXSwgdmVsXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcGVuZGluZyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZVRpbWUgKz0gZHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhdHVzLnRpZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwZW5kaW5nLnB1c2godmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLnRpZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInJcIjpcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbyA9IHN0YXR1cy50IHx8IDEyMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY21kLmxlbiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSBjbWQubGVuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3QgPSBjbWQuZG90IHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gc3RhdHVzLmw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvdCA9IGNtZC5kb3QgfHwgc3RhdHVzLmRvdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxlbiA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSAoNjAgLyB0ZW1wbykgKiAoNCAvIGxlbikgKiAxMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiAqPSAyIC0gKDEgLyBNYXRoLnBvdygyLCBkb3QpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVldWVUaW1lICs9IGR1cmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJsXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmwgICA9IGNtZC52YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLmRvdCA9IGNtZC5kb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwib1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy5vID0gY21kLnZhbDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCI8XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cy5vIDwgOSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMubyArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCI+XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cy5vID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMubyAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ2XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLnYgPSBjbWQudmFsO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIihcIjpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzLnYgPCAxNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMudiArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCIpXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cy52ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXMudiAtPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJxXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzLnEgPSBjbWQudmFsO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIiZcIjpcclxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMudGllID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCIkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgXy5zZWdub0luZGV4ID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiW1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIGxvb3BTdGFjay5wdXNoKFtpbmRleCwgbnVsbCwgbnVsbF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInxcIjpcclxuICAgICAgICAgICAgICAgICAgICBwZWVrID0gbG9vcFN0YWNrW2xvb3BTdGFjay5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGVlaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVla1sxXSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9vcFN0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBwZWVrWzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIl1cIjpcclxuICAgICAgICAgICAgICAgICAgICBwZWVrID0gbG9vcFN0YWNrW2xvb3BTdGFjay5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGVlaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVla1sxXSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVla1sxXSA9IGNtZC5jb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlZWtbMl0gPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwZWVrWzFdIC09IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWVrWzFdID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29wU3RhY2sucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHBlZWtbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwidFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXR1cy50ID0gKGNtZC52YWwgPT09IG51bGwpID8gMTIwIDogY21kLnZhbDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJFT0ZcIjpcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKFtxdWV1ZVRpbWUsIEVPRl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF8uaW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgXy5xdWV1ZVRpbWUgPSBxdWV1ZVRpbWU7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGNvbXBpbGUgPSBmdW5jdGlvbihtbWwpIHtcclxuICAgICAgICAgICAgdmFyIGRlZiwgcmUsIG0sIGNtZDtcclxuICAgICAgICAgICAgdmFyIGksIGltYXgsIGosIGptYXg7XHJcbiAgICAgICAgICAgIHZhciBjaGVja2VkID0gbmV3IEFycmF5KG1tbC5sZW5ndGgpO1xyXG4gICAgICAgICAgICB2YXIgY29tbWFuZHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDAsIGltYXggPSBNTUxDb21tYW5kcy5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGRlZiA9IE1NTENvbW1hbmRzW2ldO1xyXG4gICAgICAgICAgICAgICAgcmUgID0gZGVmLnJlO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKChtID0gcmUuZXhlYyhtbWwpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tlZFttLmluZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwLCBqbWF4ID0gbVswXS5sZW5ndGg7IGogPCBqbWF4OyArK2opIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWRbbS5pbmRleCArIGpdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmLmZ1bmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZCA9IGRlZi5mdW5jKG0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kID0ge25hbWU6bVswXX07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNtZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kLmluZGV4ID0gbS5pbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZC5vcmlnaW4gPSBtWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZHMucHVzaChjbWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChyZS5sYXN0SW5kZXggPCBtbWwubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tlZFtyZS5sYXN0SW5kZXhdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICArK3JlLmxhc3RJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29tbWFuZHMuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXg7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHtuYW1lOlwiRU9GXCJ9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBNTUxDb21tYW5kcyA9IFtcclxuICAgICAgICAgICAgeyByZTovQChcXGQqKS9nLCBmdW5jOiBmdW5jdGlvbihtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiQFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbDogbVsxXSB8fCBudWxsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9fSxcclxuICAgICAgICAgICAgeyByZTovKFtjZGVmZ2FiXSkoW1xcLStdPykoXFxkKikoXFwuKikvZywgZnVuYzogZnVuY3Rpb24obSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm5cIixcclxuICAgICAgICAgICAgICAgICAgICB2YWwgOiB7YzowLGQ6MixlOjQsZjo1LGc6NyxhOjksYjoxMX1bbVsxXV0gKyAoe1wiLVwiOi0xLFwiK1wiOisxfVttWzJdXXx8MCksXHJcbiAgICAgICAgICAgICAgICAgICAgbGVuIDogKG1bM10gPT09IFwiXCIpID8gbnVsbCA6IE1hdGgubWluKG1bM118MCwgNjQpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRvdCA6IG1bNF0ubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9fSxcclxuICAgICAgICAgICAgeyByZTovcihcXGQqKShcXC4qKS9nLCBmdW5jOiBmdW5jdGlvbihtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlbiA6IChtWzFdID09PSBcIlwiKSA/IG51bGwgOiBNYXRoLm1heCgxLCBNYXRoLm1pbihtWzFdfDAsIDY0KSksXHJcbiAgICAgICAgICAgICAgICAgICAgZG90IDogbVsyXS5sZW5ndGhcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH19LFxyXG4gICAgICAgICAgICB7IHJlOi8mL2cgfSxcclxuICAgICAgICAgICAgeyByZTovbChcXGQqKShcXC4qKS9nLCBmdW5jOiBmdW5jdGlvbihtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbCA6IChtWzFdID09PSBcIlwiKSA/IDQgOiBNYXRoLm1pbihtWzFdfDAsIDY0KSxcclxuICAgICAgICAgICAgICAgICAgICBkb3QgOiBtWzJdLmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfX0sXHJcbiAgICAgICAgICAgIHsgcmU6L28oWzAtOV0pL2csIGZ1bmM6IGZ1bmN0aW9uKG0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJvXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsIDogKG1bMV0gPT09IFwiXCIpID8gNCA6IG1bMV18MFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfX0sXHJcbiAgICAgICAgICAgIHsgcmU6L1s8Pl0vZyB9LFxyXG4gICAgICAgICAgICB7IHJlOi92KFxcZCopL2csIGZ1bmM6IGZ1bmN0aW9uKG0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsIDogKG1bMV0gPT09IFwiXCIpID8gMTIgOiBNYXRoLm1pbihtWzFdfDAsIDE1KVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfX0sXHJcbiAgICAgICAgICAgIHsgcmU6L1soKV0vZyB9LFxyXG4gICAgICAgICAgICB7IHJlOi9xKFswLThdKS9nLCBmdW5jOiBmdW5jdGlvbihtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwicVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbCA6IChtWzFdID09PSBcIlwiKSA/IDYgOiBNYXRoLm1pbihtWzFdfDAsIDgpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9fSxcclxuICAgICAgICAgICAgeyByZTovXFxbL2cgfSxcclxuICAgICAgICAgICAgeyByZTovXFx8L2cgfSxcclxuICAgICAgICAgICAgeyByZTovXFxdKFxcZCopL2csIGZ1bmM6IGZ1bmN0aW9uKG0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJdXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IChtWzFdfDApfHwyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9fSxcclxuICAgICAgICAgICAgeyByZTovdChcXGQqKS9nLCBmdW5jOiBmdW5jdGlvbihtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwidFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbCA6IChtWzFdID09PSBcIlwiKSA/IG51bGwgOiBNYXRoLm1heCg1LCBNYXRoLm1pbihtWzFdfDAsIDMwMCkpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9fSxcclxuICAgICAgICAgICAgeyByZTovXFwkL2cgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiBNTUxUcmFjaztcclxuICAgIH0pKCk7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGZuICA9IFQuZm47XHJcblxyXG4gICAgZnVuY3Rpb24gTW9ub05vZGUoX2FyZ3MpIHtcclxuICAgICAgICBULk9iamVjdC5jYWxsKHRoaXMsIDEsIF9hcmdzKTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChNb25vTm9kZSk7XHJcblxyXG4gICAgTW9ub05vZGUucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuICAgICAgICAgICAgaWYgKF8uYXIpIHtcclxuICAgICAgICAgICAgICAgIGZuLmlucHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNbMF1bMF0gPSBmbi5pbnB1dFNpZ25hbEtSKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsS1IodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgZm4ucmVnaXN0ZXIoXCJtb25vXCIsIE1vbm9Ob2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG5cclxuICAgIGZ1bmN0aW9uIE11bE5vZGUoX2FyZ3MpIHtcclxuICAgICAgICBULk9iamVjdC5jYWxsKHRoaXMsIDIsIF9hcmdzKTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChNdWxOb2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IE11bE5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XHJcbiAgICAgICAgICAgIHZhciBjZWxsICA9IHRoaXMuY2VsbHNbMF07XHJcbiAgICAgICAgICAgIHZhciBjZWxsTCA9IHRoaXMuY2VsbHNbMV07XHJcbiAgICAgICAgICAgIHZhciBjZWxsUiA9IHRoaXMuY2VsbHNbMl07XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gbm9kZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgaiwgam1heCA9IGNlbGwubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgdG1wLCB0bXBMLCB0bXBSO1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uYXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChub2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbMF0ucHJvY2Vzcyh0aWNrSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcEwgPSBub2Rlc1swXS5jZWxsc1sxXTtcclxuICAgICAgICAgICAgICAgICAgICB0bXBSID0gbm9kZXNbMF0uY2VsbHNbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbEwuc2V0KHRtcEwpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxSLnNldCh0bXBSKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzW2ldLnByb2Nlc3ModGlja0lEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wTCA9IG5vZGVzW2ldLmNlbGxzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBSID0gbm9kZXNbaV0uY2VsbHNbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqbWF4OyArK2opIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxMW2pdICo9IHRtcExbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsUltqXSAqPSB0bXBSW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgam1heDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxMW2pdID0gY2VsbFJbal0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBub2Rlc1swXS5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXAgKj0gbm9kZXNbaV0ucHJvY2Vzcyh0aWNrSUQpLmNlbGxzWzBdWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNlbGxbMF0gPSB0bXA7XHJcbiAgICAgICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxLUih0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwiKlwiLCBNdWxOb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG5cclxuICAgIGZ1bmN0aW9uIE5EaWN0Tm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMSwgX2FyZ3MpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBfLmRlZmF1bHRWYWx1ZSA9IDA7XHJcbiAgICAgICAgXy5pbmRleCA9IDA7XHJcbiAgICAgICAgXy5kaWN0ICA9IHt9O1xyXG4gICAgICAgIF8uYXIgICAgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChORGljdE5vZGUpO1xyXG5cclxuICAgIHZhciAkID0gTkRpY3ROb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgZGljdDoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmRpY3QgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGljdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTI4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGljdFtpXSA9IHZhbHVlKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8uZGljdCA9IGRpY3Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmRpY3Q7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlZmF1bHRWYWx1ZToge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmRlZmF1bHRWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5kZWZhdWx0VmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGluZGV4OiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8uaW5kZXggPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uaW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLmF0ID0gZnVuY3Rpb24oaW5kZXgpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICByZXR1cm4gKF8uZGljdFtpbmRleHwwXSB8fCBfLmRlZmF1bHRWYWx1ZSkgKiBfLm11bCArIF8uYWRkO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmNsZWFyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fLmRpY3QgPSB7fTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWzBdO1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIHZhciBsZW4gPSB0aGlzLm5vZGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIGluZGV4LCB2YWx1ZTtcclxuICAgICAgICAgICAgdmFyIGRpY3QgPSBfLmRpY3QsIGRlZmF1bHRWYWx1ZSA9IF8uZGVmYXVsdFZhbHVlO1xyXG4gICAgICAgICAgICB2YXIgbXVsID0gXy5tdWwsIGFkZCA9IF8uYWRkO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heCA9IGNlbGwubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uYXIgJiYgbGVuKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGNlbGxbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IChpbmRleCAtIDAuNSl8MDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IChpbmRleCArIDAuNSl8MDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbFtpXSA9IChkaWN0W2luZGV4XSB8fCBkZWZhdWx0VmFsdWUpICogbXVsICsgYWRkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9ICh0aGlzLm5vZGVzLmxlbmd0aCkgPyBmbi5pbnB1dFNpZ25hbEtSKHRoaXMpIDogXy5pbmRleDtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCA9IChpbmRleCAtIDAuNSl8MDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAoaW5kZXggKyAwLjUpfDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IChkaWN0W2luZGV4XSB8fCBkZWZhdWx0VmFsdWUpICogbXVsICsgYWRkO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbaV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwibmRpY3RcIiwgTkRpY3ROb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG5cclxuICAgIGZ1bmN0aW9uIE5vaXNlTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMSwgX2FyZ3MpO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKE5vaXNlTm9kZSk7XHJcblxyXG4gICAgdmFyICQgPSBOb2lzZU5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1swXTtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgbXVsID0gXy5tdWwsIGFkZCA9IF8uYWRkO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heCwgeDtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLmFyKSB7IC8vIGF1ZGlvLXJhdGVcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGltYXggPSBjZWxsLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbaV0gPSAoTWF0aC5yYW5kb20oKSAqIDIgLSAxKSAqIG11bCArIGFkZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHsgICAgLy8gY29udHJvbC1yYXRlXHJcbiAgICAgICAgICAgICAgICB4ID0gKE1hdGgucmFuZG9tKCkgKiAyICsgMSkgKiBtdWwgKyBhZGQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpbWF4ID0gY2VsbC5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsW2ldID0geDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJub2lzZVwiLCBOb2lzZU5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcbiAgICB2YXIgdGltZXZhbHVlICA9IFQudGltZXZhbHVlO1xyXG4gICAgdmFyIE9zY2lsbGF0b3IgPSBULm1vZHVsZXMuT3NjaWxsYXRvcjtcclxuXHJcbiAgICBmdW5jdGlvbiBPc2NOb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAyLCBfYXJncyk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8uZnJlcSAgPSBUKDQ0MCk7XHJcbiAgICAgICAgXy5waGFzZSA9IFQoMCk7XHJcbiAgICAgICAgXy5vc2MgPSBuZXcgT3NjaWxsYXRvcihfLnNhbXBsZXJhdGUpO1xyXG4gICAgICAgIF8udG1wID0gbmV3IGZuLlNpZ25hbEFycmF5KF8uY2VsbHNpemUpO1xyXG4gICAgICAgIF8ub3NjLnN0ZXAgPSBfLmNlbGxzaXplO1xyXG5cclxuICAgICAgICB0aGlzLm9uY2UoXCJpbml0XCIsIG9uaW5pdCk7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoT3NjTm9kZSk7XHJcblxyXG4gICAgdmFyIG9uaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIGlmICghdGhpcy53YXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMud2F2ZSA9IFwic2luXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF8ucGxvdERhdGEgPSBfLm9zYy53YXZlO1xyXG4gICAgICAgIF8ucGxvdExpbmVXaWR0aCA9IDI7XHJcbiAgICAgICAgXy5wbG90Q3ljbGljID0gdHJ1ZTtcclxuICAgICAgICBfLnBsb3RCZWZvcmUgPSBwbG90QmVmb3JlO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgJCA9IE9zY05vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICB3YXZlOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5vc2Muc2V0V2F2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLm9zYy53YXZlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmcmVxOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHRpbWV2YWx1ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gMTAwMCAvIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuXy5mcmVxID0gVCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmZyZXE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHBoYXNlOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuXy5waGFzZSA9IFQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLm9zYy5mZWVkYmFjayA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5waGFzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmI6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLnBoYXNlID0gVCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8ub3NjLmZlZWRiYWNrID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ucGhhc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLmNsb25lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZm4uY2xvbmUodGhpcyk7XHJcbiAgICAgICAgaW5zdGFuY2UuXy5vc2MgPSB0aGlzLl8ub3NjLmNsb25lKCk7XHJcbiAgICAgICAgaW5zdGFuY2UuXy5mcmVxICA9IHRoaXMuXy5mcmVxO1xyXG4gICAgICAgIGluc3RhbmNlLl8ucGhhc2UgPSB0aGlzLl8ucGhhc2U7XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmJhbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLl8ub3NjLnJlc2V0KCk7XHJcbiAgICAgICAgdGhpcy5fLmVtaXQoXCJiYW5nXCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2VsbEwgPSB0aGlzLmNlbGxzWzFdO1xyXG4gICAgICAgICAgICB2YXIgY2VsbFIgPSB0aGlzLmNlbGxzWzJdO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heCA9IF8uY2VsbHNpemU7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ub2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGZuLmlucHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbExbaV0gPSBjZWxsUltpXSA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBvc2MgPSBfLm9zYztcclxuICAgICAgICAgICAgdmFyIGZyZXEgID0gXy5mcmVxLnByb2Nlc3ModGlja0lEKS5jZWxsc1swXTtcclxuICAgICAgICAgICAgdmFyIHBoYXNlID0gXy5waGFzZS5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF07XHJcblxyXG4gICAgICAgICAgICBvc2MuZnJlcXVlbmN5ID0gZnJlcVswXTtcclxuICAgICAgICAgICAgb3NjLnBoYXNlICAgICA9IHBoYXNlWzBdO1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uYXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0bXAgID0gXy50bXA7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5mcmVxLmlzQXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5waGFzZS5pc0FyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9zYy5wcm9jZXNzV2l0aEZyZXFBbmRQaGFzZUFycmF5KHRtcCwgZnJlcSwgcGhhc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9zYy5wcm9jZXNzV2l0aEZyZXFBcnJheSh0bXAsIGZyZXEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ucGhhc2UuaXNBcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvc2MucHJvY2Vzc1dpdGhQaGFzZUFycmF5KHRtcCwgcGhhc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9zYy5wcm9jZXNzKHRtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxMW2ldICo9IHRtcFtpXTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsUltpXSAqPSB0bXBbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvc2MubmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxMW2ldICo9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxSW2ldICo9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBwbG90QmVmb3JlO1xyXG4gICAgaWYgKFQuZW52dHlwZSA9PT0gXCJicm93c2VyXCIpIHtcclxuICAgICAgICBwbG90QmVmb3JlID0gZnVuY3Rpb24oY29udGV4dCwgb2Zmc2V0X3gsIG9mZnNldF95LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHZhciB5ID0gKGhlaWdodCA+PiAxKSArIDAuNTtcclxuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IFwiI2NjY1wiO1xyXG4gICAgICAgICAgICBjb250ZXh0LmxpbmVXaWR0aCAgID0gMTtcclxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8ob2Zmc2V0X3gsIHkgKyBvZmZzZXRfeSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKG9mZnNldF94ICsgd2lkdGgsIHkgKyBvZmZzZXRfeSk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBmbi5yZWdpc3RlcihcIm9zY1wiLCBPc2NOb2RlKTtcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcInNpblwiLCBmdW5jdGlvbihfYXJncykge1xyXG4gICAgICAgIHJldHVybiBuZXcgT3NjTm9kZShfYXJncykuc2V0KFwid2F2ZVwiLCBcInNpblwiKTtcclxuICAgIH0pO1xyXG4gICAgZm4ucmVnaXN0ZXIoXCJjb3NcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9zY05vZGUoX2FyZ3MpLnNldChcIndhdmVcIiwgXCJjb3NcIik7XHJcbiAgICB9KTtcclxuICAgIGZuLnJlZ2lzdGVyKFwicHVsc2VcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9zY05vZGUoX2FyZ3MpLnNldChcIndhdmVcIiwgXCJwdWxzZVwiKTtcclxuICAgIH0pO1xyXG4gICAgZm4ucmVnaXN0ZXIoXCJ0cmlcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9zY05vZGUoX2FyZ3MpLnNldChcIndhdmVcIiwgXCJ0cmlcIik7XHJcbiAgICB9KTtcclxuICAgIGZuLnJlZ2lzdGVyKFwic2F3XCIsIGZ1bmN0aW9uKF9hcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPc2NOb2RlKF9hcmdzKS5zZXQoXCJ3YXZlXCIsIFwic2F3XCIpO1xyXG4gICAgfSk7XHJcbiAgICBmbi5yZWdpc3RlcihcImZhbWlcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9zY05vZGUoX2FyZ3MpLnNldChcIndhdmVcIiwgXCJmYW1pXCIpO1xyXG4gICAgfSk7XHJcbiAgICBmbi5yZWdpc3RlcihcImtvbmFtaVwiLCBmdW5jdGlvbihfYXJncykge1xyXG4gICAgICAgIHJldHVybiBuZXcgT3NjTm9kZShfYXJncykuc2V0KFwid2F2ZVwiLCBcImtvbmFtaVwiKTtcclxuICAgIH0pO1xyXG4gICAgZm4ucmVnaXN0ZXIoXCIrc2luXCIsIGZ1bmN0aW9uKF9hcmdzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBPc2NOb2RlKF9hcmdzKS5zZXQoXCJ3YXZlXCIsIFwiK3NpblwiKS5rcigpO1xyXG4gICAgfSk7XHJcbiAgICBmbi5yZWdpc3RlcihcIitwdWxzZVwiLCBmdW5jdGlvbihfYXJncykge1xyXG4gICAgICAgIHJldHVybiBuZXcgT3NjTm9kZShfYXJncykuc2V0KFwid2F2ZVwiLCBcIitwdWxzZVwiKS5rcigpO1xyXG4gICAgfSk7XHJcbiAgICBmbi5yZWdpc3RlcihcIit0cmlcIiwgZnVuY3Rpb24oX2FyZ3MpIHtcclxuICAgICAgICByZXR1cm4gbmV3IE9zY05vZGUoX2FyZ3MpLnNldChcIndhdmVcIiwgXCIrdHJpXCIpLmtyKCk7XHJcbiAgICB9KTtcclxuICAgIGZuLnJlZ2lzdGVyKFwiK3Nhd1wiLCBmdW5jdGlvbihfYXJncykge1xyXG4gICAgICAgIHJldHVybiBuZXcgT3NjTm9kZShfYXJncykuc2V0KFwid2F2ZVwiLCBcIitzYXdcIikua3IoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZuLmFsaWFzKFwic3F1YXJlXCIsIFwicHVsc2VcIik7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGZuID0gVC5mbjtcclxuXHJcbiAgICBmdW5jdGlvbiBQYW5Ob2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAyLCBfYXJncyk7XHJcbiAgICAgICAgZm4uZml4QVIodGhpcyk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8ucG9zICA9IFQoMCk7XHJcbiAgICAgICAgXy5wYW5MID0gMC41O1xyXG4gICAgICAgIF8ucGFuUiA9IDAuNTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChQYW5Ob2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IFBhbk5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICBwb3M6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLnBvcyA9IFQodmFsdWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5wb3M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgcG9zID0gXy5wb3MucHJvY2Vzcyh0aWNrSUQpLmNlbGxzWzBdWzBdO1xyXG4gICAgICAgICAgICBpZiAoXy5wcmV2UG9zICE9PSBwb3MpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHBvcyAqIDAuNSArIDAuNTtcclxuICAgICAgICAgICAgICAgIF8ucGFuTCA9IDEgLSBwb3M7XHJcbiAgICAgICAgICAgICAgICBfLnBhblIgPSBfLnByZXZQb3MgPSBwb3M7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XHJcbiAgICAgICAgICAgIHZhciBjZWxsTCA9IHRoaXMuY2VsbHNbMV07XHJcbiAgICAgICAgICAgIHZhciBjZWxsUiA9IHRoaXMuY2VsbHNbMl07XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gbm9kZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgaiwgam1heCA9IGNlbGxMLmxlbmd0aDtcclxuICAgICAgICAgICAgdmFyIHRtcDtcclxuXHJcbiAgICAgICAgICAgIGlmIChpbWF4KSB7XHJcbiAgICAgICAgICAgICAgICB0bXAgPSBub2Rlc1swXS5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgam1heDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbExbal0gPSBjZWxsUltqXSA9IHRtcFtqXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSBub2Rlc1tpXS5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGptYXg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsTFtqXSA9IChjZWxsUltqXSArPSB0bXBbal0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFuTCA9IF8ucGFuTDtcclxuICAgICAgICAgICAgICAgIHZhciBwYW5SID0gXy5wYW5SO1xyXG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGptYXg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxMW2pdID0gY2VsbExbal0gKiBwYW5MO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxSW2pdID0gY2VsbFJbal0gKiBwYW5SO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNlbGxMLnNldChmbi5lbXB0eWNlbGwpO1xyXG4gICAgICAgICAgICAgICAgY2VsbFIuc2V0KGZuLmVtcHR5Y2VsbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwicGFuXCIsIFBhbk5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcbiAgICB2YXIgdGltZXZhbHVlID0gVC50aW1ldmFsdWU7XHJcbiAgICB2YXIgRW52ZWxvcGUgICAgICA9IFQubW9kdWxlcy5FbnZlbG9wZTtcclxuICAgIHZhciBFbnZlbG9wZVZhbHVlID0gVC5tb2R1bGVzLkVudmVsb3BlVmFsdWU7XHJcblxyXG4gICAgZnVuY3Rpb24gUGFyYW1Ob2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAyLCBfYXJncyk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8udmFsdWUgPSAwO1xyXG4gICAgICAgIF8uZW52ID0gbmV3IEVudmVsb3BlVmFsdWUoXy5zYW1wbGVyYXRlKTtcclxuICAgICAgICBfLmVudi5zdGVwID0gXy5jZWxsc2l6ZTtcclxuICAgICAgICBfLmN1cnZlICAgPSBcImxpblwiO1xyXG4gICAgICAgIF8uY291bnRlciA9IDA7XHJcbiAgICAgICAgXy5hciA9IGZhbHNlO1xyXG4gICAgICAgIF8ub25lbmRlZCA9IG1ha2Vfb25lbmRlZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5vbihcImFyXCIsIG9uYXIpO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKFBhcmFtTm9kZSk7XHJcblxyXG4gICAgdmFyIG1ha2Vfb25lbmRlZCA9IGZ1bmN0aW9uKHNlbGYsIGxhc3RWYWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBsYXN0VmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjZWxsICA9IHNlbGYuY2VsbHNbMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VsbEwgPSBzZWxmLmNlbGxzWzFdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNlbGxSID0gc2VsZi5jZWxsc1syXTtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNlbGYuXy5lbnYudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaW1heCA9IGNlbGxMLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbMF0gPSBjZWxsTFtpXSA9IGNlbGxSW2ldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2VsZi5fLmVtaXQoXCJlbmRlZFwiKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgb25hciA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fLmVudi5zdGVwID0gKHZhbHVlKSA/IDEgOiB0aGlzLl8uY2VsbHNpemU7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciAkID0gUGFyYW1Ob2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5lbnYudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uZW52LnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC50byA9IGZ1bmN0aW9uKG5leHRWYWx1ZSwgdGltZSwgY3VydmUpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICB2YXIgZW52ID0gXy5lbnY7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aW1lID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHRpbWUgPSB0aW1ldmFsdWUodGltZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGltZSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICB0aW1lID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjdXJ2ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICBfLmNvdW50ZXIgPSBlbnYuc2V0TmV4dChuZXh0VmFsdWUsIHRpbWUsIEVudmVsb3BlLkN1cnZlVHlwZUxpbik7XHJcbiAgICAgICAgICAgIF8uY3VydmUgPSBcImxpblwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBfY3VydmUgPSBFbnZlbG9wZS5DdXJ2ZVR5cGVEaWN0W2N1cnZlXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBfY3VydmUgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgIF8uY291bnRlciA9IGVudi5zZXROZXh0KG5leHRWYWx1ZSwgdGltZSwgRW52ZWxvcGUuQ3VydmVUeXBlQ3VydmUsIGN1cnZlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF8uY291bnRlciA9IGVudi5zZXROZXh0KG5leHRWYWx1ZSwgdGltZSwgX2N1cnZlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfLmN1cnZlID0gY3VydmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF8ucGxvdEZsdXNoID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5zZXRBdCA9IGZ1bmN0aW9uKG5leHRWYWx1ZSwgdGltZSkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIHRoaXMudG8oXy5lbnYudmFsdWUsIHRpbWUsIFwic2V0XCIpO1xyXG4gICAgICAgIF8uYXRWYWx1ZSA9IG5leHRWYWx1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5saW5UbyA9IGZ1bmN0aW9uKG5leHRWYWx1ZSwgdGltZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvKG5leHRWYWx1ZSwgdGltZSwgXCJsaW5cIik7XHJcbiAgICB9O1xyXG5cclxuICAgICQuZXhwVG8gPSBmdW5jdGlvbihuZXh0VmFsdWUsIHRpbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50byhuZXh0VmFsdWUsIHRpbWUsIFwiZXhwXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnNpblRvID0gZnVuY3Rpb24obmV4dFZhbHVlLCB0aW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG8obmV4dFZhbHVlLCB0aW1lLCBcInNpblwiKTtcclxuICAgIH07XHJcblxyXG4gICAgJC53ZWxUbyA9IGZ1bmN0aW9uKG5leHRWYWx1ZSwgdGltZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvKG5leHRWYWx1ZSwgdGltZSwgXCJ3ZWxcIik7XHJcbiAgICB9O1xyXG5cclxuICAgICQuc3FyVG8gPSBmdW5jdGlvbihuZXh0VmFsdWUsIHRpbWUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50byhuZXh0VmFsdWUsIHRpbWUsIFwic3FyXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmN1YlRvID0gZnVuY3Rpb24obmV4dFZhbHVlLCB0aW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG8obmV4dFZhbHVlLCB0aW1lLCBcImN1YlwiKTtcclxuICAgIH07XHJcblxyXG4gICAgJC5jYW5jZWwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBfLmNvdW50ZXIgPSBfLmVudi5zZXROZXh0KF8uZW52LnZhbHVlLCAwLCBFbnZlbG9wZS5DdXJ2ZVR5cGVTZXQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2VsbEwgPSB0aGlzLmNlbGxzWzFdO1xyXG4gICAgICAgICAgICB2YXIgY2VsbFIgPSB0aGlzLmNlbGxzWzJdO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heCA9IF8uY2VsbHNpemU7XHJcbiAgICAgICAgICAgIHZhciBlbnYgPSBfLmVudjtcclxuICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSBfLmNvdW50ZXI7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsTFtpXSA9IGNlbGxSW2ldID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGNvdW50ZXIgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF8uY3VydmUgPT09IFwic2V0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnYuc2V0TmV4dChfLmF0VmFsdWUsIDAsIEVudmVsb3BlLkN1cnZlVHlwZVNldCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudi5zZXROZXh0KGVudi52YWx1ZSwgMCwgRW52ZWxvcGUuQ3VydmVUeXBlU2V0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZuLm5leHRUaWNrKF8ub25lbmRlZCk7XHJcbiAgICAgICAgICAgICAgICBfLmNvdW50ZXIgPSBJbmZpbml0eTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKF8uYXIpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGVudi5uZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbExbaV0gKj0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbFJbaV0gKj0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBfLmNvdW50ZXIgLT0gXy5jZWxsc2l6ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZW52Lm5leHQoKTtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsTFtpXSAqPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsUltpXSAqPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF8uY291bnRlciAtPSAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxBUih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIF8udmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc3VwZXJfcGxvdCA9IFQuT2JqZWN0LnByb3RvdHlwZS5wbG90O1xyXG5cclxuICAgICQucGxvdCA9IGZ1bmN0aW9uKG9wdHMpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBpZiAoXy5wbG90Rmx1c2gpIHtcclxuICAgICAgICAgICAgdmFyIGVudiAgPSBuZXcgRW52ZWxvcGVWYWx1ZSgxMjgpO1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoMTI4KTtcclxuICAgICAgICAgICAgdmFyIGN1cnZlLCBpLCBpbWF4O1xyXG4gICAgICAgICAgICBpZiAoXy5jdXJ2ZSA9PT0gXCJzZXRcIikge1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMTAwLCBpbWF4ID0gZGF0YS5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhW2ldID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN1cnZlID0gRW52ZWxvcGUuQ3VydmVUeXBlRGljdFtfLmN1cnZlXTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VydmUgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnYuc2V0TmV4dCgxLCAxMDAwLCBFbnZlbG9wZS5DdXJ2ZVR5cGVDdXJ2ZSwgXy5jdXJ2ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudi5zZXROZXh0KDEsIDEwMDAsIGN1cnZlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBpbWF4ID0gZGF0YS5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhW2ldID0gZW52Lm5leHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfLnBsb3REYXRhICA9IGRhdGE7XHJcbiAgICAgICAgICAgIF8ucGxvdFJhbmdlID0gWzAsIDFdO1xyXG4gICAgICAgICAgICBfLnBsb3RGbHVzaCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdXBlcl9wbG90LmNhbGwodGhpcywgb3B0cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwicGFyYW1cIiwgUGFyYW1Ob2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gID0gVC5mbjtcclxuICAgIHZhciBCaXF1YWQgPSBULm1vZHVsZXMuQmlxdWFkO1xyXG5cclxuICAgIGZ1bmN0aW9uIFBoYXNlck5vZGUoX2FyZ3MpIHtcclxuICAgICAgICBULk9iamVjdC5jYWxsKHRoaXMsIDIsIF9hcmdzKTtcclxuICAgICAgICBmbi5maXhBUih0aGlzKTtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgXy5mcmVxID0gVChcInNpblwiLCB7ZnJlcToxLCBhZGQ6MTAwMCwgbXVsOjI1MH0pLmtyKCk7XHJcbiAgICAgICAgXy5RICAgID0gVCgxKTtcclxuICAgICAgICBfLmFsbHBhc3MgID0gW107XHJcblxyXG4gICAgICAgIHRoaXMuc3RlcHMgPSAyO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKFBoYXNlck5vZGUpO1xyXG5cclxuICAgIHZhciAkID0gUGhhc2VyTm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIGZyZXE6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmZyZXEgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uZnJlcTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgUToge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uUSA9IFQodmFsdWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5RO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzdGVwczoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgfD0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IDIgfHwgdmFsdWUgPT09IDQgfHwgdmFsdWUgPT09IDggfHwgdmFsdWUgPT09IDEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbGxwYXNzID0gdGhpcy5fLmFsbHBhc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGxwYXNzLmxlbmd0aCA8IHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gYWxscGFzcy5sZW5ndGg7IGkgPCB2YWx1ZTsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxscGFzc1tpXSA9IG5ldyBCaXF1YWQodGhpcy5fLnNhbXBsZXJhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbHBhc3NbaV0uc2V0VHlwZShcImFsbHBhc3NcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLnN0ZXBzID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLnN0ZXBzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghXy5ieXBhc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNlbGxMID0gdGhpcy5jZWxsc1sxXTtcclxuICAgICAgICAgICAgICAgIHZhciBjZWxsUiA9IHRoaXMuY2VsbHNbMl07XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJlcSAgPSBfLmZyZXEucHJvY2Vzcyh0aWNrSUQpLmNlbGxzWzBdWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIFEgICAgID0gXy5RLnByb2Nlc3ModGlja0lEKS5jZWxsc1swXVswXTtcclxuICAgICAgICAgICAgICAgIHZhciBzdGVwcyA9IF8uc3RlcHM7XHJcbiAgICAgICAgICAgICAgICB2YXIgaTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3RlcHM7IGkgKz0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uYWxscGFzc1tpICBdLnNldFBhcmFtcyhmcmVxLCBRLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBfLmFsbHBhc3NbaSAgXS5wcm9jZXNzKGNlbGxMLCBjZWxsUik7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5hbGxwYXNzW2krMV0uc2V0UGFyYW1zKGZyZXEsIFEsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIF8uYWxscGFzc1tpKzFdLnByb2Nlc3MoY2VsbEwsIGNlbGxSKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJwaGFzZXJcIiwgUGhhc2VyTm9kZSk7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLy8gVm9zcyBhbGdvcml0aG1cclxuICAgIC8vIGh0dHA6Ly93d3cuZmlyc3Rwci5jb20uYXUvZHNwL3Bpbmstbm9pc2UvXHJcblxyXG4gICAgdmFyIE1BWF9LRVkgPSAzMTtcclxuICAgIHZhciBmbiA9IFQuZm47XHJcblxyXG4gICAgZnVuY3Rpb24gUGlua05vaXNlTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMSwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgd2hpdGVzID0gbmV3IFVpbnQ4QXJyYXkoNSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1OyArK2kpIHtcclxuICAgICAgICAgICAgd2hpdGVzW2ldID0gKChNYXRoLnJhbmRvbSgpICogKDE8PDMwKSl8MCkgJSAyNTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fLndoaXRlcyA9IHdoaXRlcztcclxuICAgICAgICB0aGlzLl8ua2V5ID0gMDtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChQaW5rTm9pc2VOb2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IFBpbmtOb2lzZU5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1swXTtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgaSwgaW1heCwgajtcclxuICAgICAgICAgICAgdmFyIGtleSA9IF8ua2V5LCB3aGl0ZXMgPSBfLndoaXRlcztcclxuICAgICAgICAgICAgdmFyIG11bCA9IF8ubXVsLCBhZGQgPSBfLmFkZDtcclxuICAgICAgICAgICAgdmFyIGxhc3Rfa2V5LCBzdW0sIGRpZmY7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBpbWF4ID0gY2VsbC5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGxhc3Rfa2V5ID0ga2V5Kys7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID4gTUFYX0tFWSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkaWZmID0gbGFzdF9rZXkgXiBrZXk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGogPSBzdW0gPSAwOyBqIDwgNTsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpZmYgJiAoMSA8PCBqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZXNbal0gPSAoKE1hdGgucmFuZG9tKCkgKiAoMTw8MzApKXwwKSAlIDI1O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzdW0gKz0gd2hpdGVzW2pdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2VsbFtpXSA9ICgoc3VtICogMC4wMTY2NjY2NikgLSAxKSAqIG11bCArIGFkZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfLmtleSA9IGtleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwicGlua1wiLCBQaW5rTm9pc2VOb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG5cclxuICAgIGZ1bmN0aW9uIFBsdWNrTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMSwgX2FyZ3MpO1xyXG5cclxuICAgICAgICB0aGlzLl8uZnJlcSAgID0gNDQwO1xyXG4gICAgICAgIHRoaXMuXy5idWZmZXIgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuXy5pbmRleCAgPSAwO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKFBsdWNrTm9kZSk7XHJcblxyXG4gICAgdmFyICQgPSBQbHVja05vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICBmcmVxOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmZyZXEgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uZnJlcTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQuYmFuZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIHZhciBmcmVxICAgPSBfLmZyZXE7XHJcbiAgICAgICAgdmFyIHNpemUgICA9IChfLnNhbXBsZXJhdGUgLyBmcmVxICsgMC41KXwwO1xyXG4gICAgICAgIHZhciBidWZmZXIgPSBfLmJ1ZmZlciA9IG5ldyBmbi5TaWduYWxBcnJheShzaXplKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xyXG4gICAgICAgICAgICBidWZmZXJbaV0gPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF8uaW5kZXggPSAwO1xyXG4gICAgICAgIF8uZW1pdChcImJhbmdcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1swXTtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gXy5idWZmZXI7XHJcbiAgICAgICAgICAgIGlmIChidWZmZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXIubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gXy5pbmRleCwgd3JpdGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgbXVsID0gXy5tdWwsIGFkZCA9IF8uYWRkO1xyXG4gICAgICAgICAgICAgICAgdmFyIHgsIGksIGltYXggPSBjZWxsLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGUgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB4ID0gYnVmZmVyW2luZGV4KytdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSBidWZmZXJMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB4ID0gKHggKyBidWZmZXJbaW5kZXhdKSAqIDAuNTtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXJbd3JpdGVdID0geDtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsW2ldID0geCAqIG11bCArIGFkZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIF8uaW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwicGx1Y2tcIiwgUGx1Y2tOb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG4gICAgdmFyIHRpbWV2YWx1ZSA9IFQudGltZXZhbHVlO1xyXG5cclxuICAgIHZhciBTVEFUVVNfV0FJVCA9IDA7XHJcbiAgICB2YXIgU1RBVFVTX1JFQyAgPSAxO1xyXG5cclxuICAgIGZ1bmN0aW9uIFJlY05vZGUoX2FyZ3MpIHtcclxuICAgICAgICBULk9iamVjdC5jYWxsKHRoaXMsIDEsIF9hcmdzKTtcclxuICAgICAgICBmbi5saXN0ZW5lcih0aGlzKTtcclxuICAgICAgICBmbi5maXhBUih0aGlzKTtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgXy50aW1lb3V0ICAgID0gNTAwMDtcclxuICAgICAgICBfLnN0YXR1cyAgICAgPSBTVEFUVVNfV0FJVDtcclxuICAgICAgICBfLndyaXRlSW5kZXggPSAwO1xyXG4gICAgICAgIF8ud3JpdGVJbmRleEluY3IgID0gMTtcclxuICAgICAgICBfLmN1cnJlbnRUaW1lICAgICA9IDA7XHJcbiAgICAgICAgXy5jdXJyZW50VGltZUluY3IgPSAxMDAwIC8gXy5zYW1wbGVyYXRlO1xyXG4gICAgICAgIF8ub25lbmRlZCA9IG1ha2Vfb25lbmRlZCh0aGlzKTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChSZWNOb2RlKTtcclxuXHJcbiAgICB2YXIgbWFrZV9vbmVuZGVkID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIF8gPSBzZWxmLl87XHJcblxyXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gbmV3IGZuLlNpZ25hbEFycmF5KF8uYnVmZmVyLnN1YmFycmF5KDAsIF8ud3JpdGVJbmRleHwwKSk7XHJcblxyXG4gICAgICAgICAgICBfLnN0YXR1cyAgICAgID0gU1RBVFVTX1dBSVQ7XHJcbiAgICAgICAgICAgIF8ud3JpdGVJbmRleCAgPSAwO1xyXG4gICAgICAgICAgICBfLmN1cnJlbnRUaW1lID0gMDtcclxuXHJcbiAgICAgICAgICAgIF8uZW1pdChcImVuZGVkXCIsIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcjpidWZmZXIsIHNhbXBsZXJhdGU6Xy5zYW1wbGVyYXRlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciAkID0gUmVjTm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIHRpbWVvdXQ6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGltZXZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLnRpbWVvdXQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8udGltZW91dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2FtcGxlcmF0ZToge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPCB2YWx1ZSAmJiB2YWx1ZSA8PSB0aGlzLl8uc2FtcGxlcmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8uc2FtcGxlcmF0ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uc2FtcGxlcmF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3VycmVudFRpbWU6IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uY3VycmVudFRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl8sIGxlbjtcclxuICAgICAgICBpZiAoXy5zdGF0dXMgPT09IFNUQVRVU19XQUlUKSB7XHJcbiAgICAgICAgICAgIGxlbiA9IChfLnRpbWVvdXQgKiAwLjAxICogXy5zYW1wbGVyYXRlKXwwO1xyXG4gICAgICAgICAgICBpZiAoIV8uYnVmZmVyIHx8IF8uYnVmZmVyLmxlbmd0aCA8IGxlbikge1xyXG4gICAgICAgICAgICAgICAgXy5idWZmZXIgPSBuZXcgZm4uU2lnbmFsQXJyYXkobGVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfLndyaXRlSW5kZXggPSAwO1xyXG4gICAgICAgICAgICBfLndyaXRlSW5kZXhJbmNyID0gXy5zYW1wbGVyYXRlIC8gVC5zYW1wbGVyYXRlO1xyXG4gICAgICAgICAgICBfLmN1cnJlbnRUaW1lID0gMDtcclxuICAgICAgICAgICAgXy5zdGF0dXMgPSBTVEFUVVNfUkVDO1xyXG4gICAgICAgICAgICBfLmVtaXQoXCJzdGFydFwiKTtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW4oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQuc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIGlmIChfLnN0YXR1cyA9PT0gU1RBVFVTX1JFQykge1xyXG4gICAgICAgICAgICBfLnN0YXR1cyA9IFNUQVRVU19XQUlUO1xyXG4gICAgICAgICAgICBfLmVtaXQoXCJzdG9wXCIpO1xyXG4gICAgICAgICAgICBmbi5uZXh0VGljayhfLm9uZW5kZWQpO1xyXG4gICAgICAgICAgICB0aGlzLnVubGlzdGVuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmJhbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5fLnN0YXR1cyA9PT0gU1RBVFVTX1dBSVQpIHtcclxuICAgICAgICAgICAgdGhpcy5zcmFydCgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fLnN0YXR1cyA9PT0gU1RBVFVTX1JFQykge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fLmVtaXQoXCJiYW5nXCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbMF07XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLnN0YXR1cyA9PT0gU1RBVFVTX1JFQykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGksIGltYXggPSBjZWxsLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgID0gXy5idWZmZXI7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZW91dCA9IF8udGltZW91dDtcclxuICAgICAgICAgICAgICAgIHZhciB3cml0ZUluZGV4ICAgICAgPSBfLndyaXRlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICB2YXIgd3JpdGVJbmRleEluY3IgID0gXy53cml0ZUluZGV4SW5jcjtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VGltZSAgICAgPSBfLmN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRUaW1lSW5jciA9IF8uY3VycmVudFRpbWVJbmNyO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXJbd3JpdGVJbmRleHwwXSA9IGNlbGxbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVJbmRleCArPSB3cml0ZUluZGV4SW5jcjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRpbWUgKz0gY3VycmVudFRpbWVJbmNyO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0IDw9IGN1cnJlbnRUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZuLm5leHRUaWNrKF8ub25lbmRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXy53cml0ZUluZGV4ICA9IHdyaXRlSW5kZXg7XHJcbiAgICAgICAgICAgICAgICBfLmN1cnJlbnRUaW1lID0gY3VycmVudFRpbWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJyZWNvcmRcIiwgUmVjTm9kZSk7XHJcbiAgICBmbi5hbGlhcyhcInJlY1wiLCBcInJlY29yZFwiKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG4gICAgdmFyIFJldmVyYiA9IFQubW9kdWxlcy5SZXZlcmI7XHJcblxyXG4gICAgZnVuY3Rpb24gUmV2ZXJiTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMiwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLl8ucmV2ZXJiID0gbmV3IFJldmVyYih0aGlzLl8uc2FtcGxlcmF0ZSwgdGhpcy5fLmNlbGxzaXplKTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChSZXZlcmJOb2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IFJldmVyYk5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICByb29tOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICh2YWx1ZSA+IDEpID8gMSA6ICh2YWx1ZSA8IDApID8gMCA6IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5yZXZlcmIuc2V0Um9vbVNpemUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5yZXZlcmIucm9vbXNpemU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhbXA6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlID4gMSkgPyAxIDogKHZhbHVlIDwgMCkgPyAwIDogdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLnJldmVyYi5zZXREYW1wKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ucmV2ZXJiLmRhbXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1peDoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAodmFsdWUgPiAxKSA/IDEgOiAodmFsdWUgPCAwKSA/IDAgOiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8ucmV2ZXJiLndldCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5yZXZlcmIud2V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghXy5ieXBhc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgXy5yZXZlcmIucHJvY2Vzcyh0aGlzLmNlbGxzWzFdLCB0aGlzLmNlbGxzWzJdKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJyZXZlcmJcIiwgUmV2ZXJiTm9kZSk7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGZuID0gVC5mbjtcclxuICAgIHZhciB0aW1ldmFsdWUgPSBULnRpbWV2YWx1ZTtcclxuXHJcbiAgICBmdW5jdGlvbiBTY2hlZHVsZU5vZGUoX2FyZ3MpIHtcclxuICAgICAgICBULk9iamVjdC5jYWxsKHRoaXMsIDAsIF9hcmdzKTtcclxuICAgICAgICBmbi50aW1lcih0aGlzKTtcclxuICAgICAgICBmbi5maXhLUih0aGlzKTtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgXy5xdWV1ZSA9IFtdO1xyXG4gICAgICAgIF8uY3VycmVudFRpbWUgPSAwO1xyXG4gICAgICAgIF8ubWF4UmVtYWluICAgPSAxMDAwO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKFNjaGVkdWxlTm9kZSk7XHJcblxyXG4gICAgdmFyICQgPSBTY2hlZHVsZU5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICBxdWV1ZToge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5xdWV1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVtYWluOiB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLnF1ZXVlLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF4UmVtYWluOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLm1heFJlbWFpbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5tYXhSZW1haW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzRW1wdHk6IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ucXVldWUubGVuZ3RoID09PSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjdXJyZW50VGltZToge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5jdXJyZW50VGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQuc2NoZWQgPSBmdW5jdGlvbihkZWx0YSwgaXRlbSwgYXJncykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGVsdGEgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgZGVsdGEgPSB0aW1ldmFsdWUoZGVsdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGRlbHRhID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NoZWRBYnModGhpcy5fLmN1cnJlbnRUaW1lICsgZGVsdGEsIGl0ZW0sIGFyZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5zY2hlZEFicyA9IGZ1bmN0aW9uKHRpbWUsIGl0ZW0sIGFyZ3MpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRpbWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdGltZSA9IHRpbWV2YWx1ZSh0aW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aW1lID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICB2YXIgcXVldWUgPSBfLnF1ZXVlO1xyXG4gICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID49IF8ubWF4UmVtYWluKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gcXVldWUubGVuZ3RoOyBpLS07ICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlW2ldWzBdIDwgdGltZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgW3RpbWUsIFQoaXRlbSksIGFyZ3NdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQuYWR2YW5jZSA9IGZ1bmN0aW9uKGRlbHRhKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkZWx0YSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBkZWx0YSA9IHRpbWV2YWx1ZShkZWx0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgZGVsdGEgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5fLmN1cnJlbnRUaW1lICs9IGRlbHRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5jbGVhciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuXy5xdWV1ZS5zcGxpY2UoMCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIHZhciBlbWl0ID0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIHF1ZXVlID0gXy5xdWV1ZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChxdWV1ZVswXVswXSA8IF8uY3VycmVudFRpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dEl0ZW0gPSBfLnF1ZXVlLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW1bMV0uYmFuZyhuZXh0SXRlbVsyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZW1pdCA9IFwic2NoZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVtaXQgPSBcImVtcHR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfLmN1cnJlbnRUaW1lICs9IGZuLmN1cnJlbnRUaW1lSW5jcjtcclxuICAgICAgICAgICAgaWYgKGVtaXQpIHtcclxuICAgICAgICAgICAgICAgIF8uZW1pdChlbWl0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJzY2hlZHVsZVwiLCBTY2hlZHVsZU5vZGUpO1xyXG4gICAgZm4uYWxpYXMoXCJzY2hlZFwiLCBcInNjaGVkdWxlXCIpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcbiAgICB2YXIgdGltZXZhbHVlID0gVC50aW1ldmFsdWU7XHJcblxyXG4gICAgZnVuY3Rpb24gU2NvcGVOb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAyLCBfYXJncyk7XHJcbiAgICAgICAgZm4ubGlzdGVuZXIodGhpcyk7XHJcbiAgICAgICAgZm4uZml4QVIodGhpcyk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8uc2FtcGxlcyAgICA9IDA7XHJcbiAgICAgICAgXy53cml0ZUluZGV4ID0gMDtcclxuICAgICAgICBfLnBsb3RGbHVzaCA9IHRydWU7XHJcblxyXG4gICAgICAgIHRoaXMub25jZShcImluaXRcIiwgb25pbml0KTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChTY29wZU5vZGUpO1xyXG5cclxuICAgIHZhciBvbmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuXy5idWZmZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zaXplID0gMTAyNDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl8uaW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnRlcnZhbCA9IDEwMDA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgJCA9IFNjb3BlTm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIHNpemU6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgICAgICBpZiAoIV8uYnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9ICh2YWx1ZSA8IDY0KSA/IDY0IDogKHZhbHVlID4gMjA0OCkgPyAyMDQ4IDogdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uYnVmZmVyID0gbmV3IGZuLlNpZ25hbEFycmF5KG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5yZXNlcnZlZGludGVydmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVydmFsID0gXy5yZXNlcnZlZGludGVydmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5yZXNlcnZlZGludGVydmFsID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uYnVmZmVyLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW50ZXJ2YWw6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aW1ldmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiB2YWx1ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV8uYnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVzZXJ2ZWRpbnRlcnZhbCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uaW50ZXJ2YWwgICAgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5zYW1wbGVzSW5jciA9IHZhbHVlICogMC4wMDEgKiBfLnNhbXBsZXJhdGUgLyBfLmJ1ZmZlci5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLnNhbXBsZXNJbmNyIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5zYW1wbGVzSW5jciA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmludGVydmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBidWZmZXI6IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uYnVmZmVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5iYW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgdmFyIGJ1ZmZlciA9IF8uYnVmZmVyO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaW1heCA9IGJ1ZmZlci5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgYnVmZmVyW2ldID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXy5zYW1wbGVzICAgID0gMDtcclxuICAgICAgICBfLndyaXRlSW5kZXggPSAwO1xyXG4gICAgICAgIHRoaXMuXy5lbWl0KFwiYmFuZ1wiKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbMF07XHJcbiAgICAgICAgICAgIHZhciBpLCBpbWF4ID0gXy5jZWxsc2l6ZTtcclxuICAgICAgICAgICAgdmFyIHNhbXBsZXMgICAgID0gXy5zYW1wbGVzO1xyXG4gICAgICAgICAgICB2YXIgc2FtcGxlc0luY3IgPSBfLnNhbXBsZXNJbmNyO1xyXG4gICAgICAgICAgICB2YXIgYnVmZmVyICAgICAgPSBfLmJ1ZmZlcjtcclxuICAgICAgICAgICAgdmFyIHdyaXRlSW5kZXggID0gXy53cml0ZUluZGV4O1xyXG4gICAgICAgICAgICB2YXIgZW1pdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgYnVmZmVybGVuZ3RoID0gYnVmZmVyLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzYW1wbGVzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXJbd3JpdGVJbmRleCsrXSA9IGNlbGxbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdyaXRlSW5kZXggPj0gYnVmZmVybGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbWl0ID0gXy5wbG90Rmx1c2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZXMgKz0gc2FtcGxlc0luY3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAtLXNhbXBsZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXy5zYW1wbGVzICAgID0gc2FtcGxlcztcclxuICAgICAgICAgICAgXy53cml0ZUluZGV4ID0gd3JpdGVJbmRleDtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uZW1pdChcImRhdGFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc3VwZXJfcGxvdCA9IFQuT2JqZWN0LnByb3RvdHlwZS5wbG90O1xyXG5cclxuICAgICQucGxvdCA9IGZ1bmN0aW9uKG9wdHMpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBpZiAoXy5wbG90Rmx1c2gpIHtcclxuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IF8uYnVmZmVyO1xyXG4gICAgICAgICAgICB2YXIgbWFzayAgID0gYnVmZmVyLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIHZhciBkYXRhICAgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5sZW5ndGgpO1xyXG4gICAgICAgICAgICB2YXIgaiA9IF8ud3JpdGVJbmRleDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSBidWZmZXIubGVuZ3RoOyBpIDwgaW1heDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhW2ldID0gYnVmZmVyWysraiAmIG1hc2tdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF8ucGxvdERhdGEgID0gZGF0YTtcclxuICAgICAgICAgICAgXy5wbG90Rmx1c2ggPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3VwZXJfcGxvdC5jYWxsKHRoaXMsIG9wdHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcInNjb3BlXCIsIFNjb3BlTm9kZSk7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGZuID0gVC5mbjtcclxuXHJcbiAgICBmdW5jdGlvbiBTY3JpcHRQcm9jZXNzb3JOb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAyLCBfYXJncyk7XHJcbiAgICAgICAgZm4uZml4QVIodGhpcyk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8ubnVtYmVyT2ZJbnB1dHMgPSAwO1xyXG4gICAgICAgIF8ubnVtYmVyT2ZPdXRwdXRzID0gMDtcclxuICAgICAgICBfLmJ1ZmZlclNpemUgPSAwO1xyXG4gICAgICAgIF8uYnVmZmVyTWFzayA9IDA7XHJcbiAgICAgICAgXy5kdXJhdGlvbiAgID0gMDtcclxuICAgICAgICBfLmlucHV0QnVmZmVyTCA9IG51bGw7XHJcbiAgICAgICAgXy5pbnB1dEJ1ZmZlclIgPSBudWxsO1xyXG4gICAgICAgIF8ub3V0cHV0QnVmZmVyTCA9IG51bGw7XHJcbiAgICAgICAgXy5vdXRwdXRCdWZmZXJSID0gbnVsbDtcclxuICAgICAgICBfLm9uYXVkaW9wcm9jZXNzID0gbnVsbDtcclxuICAgICAgICBfLmluZGV4ID0gMDtcclxuICAgICAgICB0aGlzLm9uY2UoXCJpbml0XCIsIG9uaW5pdCk7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoU2NyaXB0UHJvY2Vzc29yTm9kZSk7XHJcblxyXG4gICAgdmFyIG9uaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIGlmIChfLm51bWJlck9mSW5wdXRzID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMubnVtYmVyT2ZJbnB1dHMgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXy5udW1iZXJPZk91dHB1dHMgPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5udW1iZXJPZk91dHB1dHMgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXy5idWZmZXJTaXplID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyU2l6ZSA9IDEwMjQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgJCA9IFNjcmlwdFByb2Nlc3Nvck5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICBudW1iZXJPZklucHV0czoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICAgICAgICAgIGlmIChfLm51bWJlck9mSW5wdXRzID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5udW1iZXJPZklucHV0cyA9ICh2YWx1ZSA9PT0gMikgPyAyIDogMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ubnVtYmVyT2ZJbnB1dHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG51bWJlck9mT3V0cHV0czoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICAgICAgICAgIGlmIChfLm51bWJlck9mT3V0cHV0cyA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF8ubnVtYmVyT2ZPdXRwdXRzID0gKHZhbHVlID09PSAyKSA/IDIgOiAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5udW1iZXJPZk91dHB1dHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGJ1ZmZlclNpemU6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5idWZmZXJTaXplID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFsyNTYsIDUxMiwgMTAyNCwgMjA0OCwgNDA5NiwgODE5MiwgMTYzODRdLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmJ1ZmZlclNpemUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5idWZmZXJNYXNrID0gdmFsdWUgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmR1cmF0aW9uID0gdmFsdWUgLyBfLnNhbXBsZXJhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uaW5wdXRCdWZmZXJMICA9IG5ldyBmbi5TaWduYWxBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uaW5wdXRCdWZmZXJSICA9IG5ldyBmbi5TaWduYWxBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3V0cHV0QnVmZmVyTCA9IG5ldyBmbi5TaWduYWxBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ub3V0cHV0QnVmZmVyUiA9IG5ldyBmbi5TaWduYWxBcnJheSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5idWZmZXJTaXplO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbmF1ZGlvcHJvY2Vzczoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8ub25hdWRpb3Byb2Nlc3MgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ub25hdWRpb3Byb2Nlc3M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBBdWRpb0J1ZmZlcihzZWxmLCBidWZmZXJzKSB7XHJcbiAgICAgICAgdGhpcy5zYW1wbGVyYXRlID0gc2VsZi5fLnNhbXBsZXJhdGU7XHJcbiAgICAgICAgdGhpcy5sZW5ndGggICAgID0gc2VsZi5fLmJ1ZmZlclNpemU7XHJcbiAgICAgICAgdGhpcy5kdXJhdGlvbiAgID0gc2VsZi5fLmR1cmF0aW9uO1xyXG4gICAgICAgIHRoaXMubnVtYmVyT2ZDaGFubmVscyA9IGJ1ZmZlcnMubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuZ2V0Q2hhbm5lbERhdGEgPSBmdW5jdGlvbihuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBidWZmZXJzW25dO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gQXVkaW9Qcm9jZXNzaW5nRXZlbnQoc2VsZikge1xyXG4gICAgICAgIHZhciBfID0gc2VsZi5fO1xyXG4gICAgICAgIHRoaXMubm9kZSA9IHNlbGY7XHJcbiAgICAgICAgdGhpcy5wbGF5YmFja1RpbWUgPSBULmN1cnJlbnRUaW1lO1xyXG4gICAgICAgIGlmIChfLm51bWJlck9mSW5wdXRzID09PSAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXRCdWZmZXIgID0gbmV3IEF1ZGlvQnVmZmVyKHNlbGYsIFtfLmlucHV0QnVmZmVyTCwgXy5pbnB1dEJ1ZmZlclJdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmlucHV0QnVmZmVyICA9IG5ldyBBdWRpb0J1ZmZlcihzZWxmLCBbXy5pbnB1dEJ1ZmZlckxdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKF8ubnVtYmVyT2ZPdXRwdXRzID09PSAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3V0cHV0QnVmZmVyID0gbmV3IEF1ZGlvQnVmZmVyKHNlbGYsIFtfLm91dHB1dEJ1ZmZlckwsIF8ub3V0cHV0QnVmZmVyUl0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMub3V0cHV0QnVmZmVyID0gbmV3IEF1ZGlvQnVmZmVyKHNlbGYsIFtfLm91dHB1dEJ1ZmZlckxdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbGxzaXplICAgPSBfLmNlbGxzaXplO1xyXG4gICAgICAgICAgICB2YXIgYnVmZmVyTWFzayA9IF8uYnVmZmVyTWFzaztcclxuICAgICAgICAgICAgdmFyIGJlZ2luID0gXy5pbmRleDtcclxuICAgICAgICAgICAgdmFyIGVuZCAgID0gYmVnaW4gKyBjZWxsc2l6ZTtcclxuICAgICAgICAgICAgdmFyIGJ1ZmZlcjtcclxuICAgICAgICAgICAgdmFyIGNlbGxMICA9IHRoaXMuY2VsbHNbMV07XHJcbiAgICAgICAgICAgIHZhciBjZWxsUiAgPSB0aGlzLmNlbGxzWzJdO1xyXG5cclxuICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLm51bWJlck9mSW5wdXRzID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBfLmlucHV0QnVmZmVyTC5zZXQoY2VsbEwsIGJlZ2luKTtcclxuICAgICAgICAgICAgICAgIF8uaW5wdXRCdWZmZXJSLnNldChjZWxsUiwgYmVnaW4pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyID0gXy5pbnB1dEJ1ZmZlckw7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNlbGxzaXplOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXJbYmVnaW4gKyBpXSA9IChjZWxsTFtpXSArIGNlbGxSW2ldKSAqIDAuNTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2VsbEwuc2V0KF8ub3V0cHV0QnVmZmVyTC5zdWJhcnJheShiZWdpbiwgZW5kKSk7XHJcbiAgICAgICAgICAgIGNlbGxSLnNldChfLm91dHB1dEJ1ZmZlclIuc3ViYXJyYXkoYmVnaW4sIGVuZCkpO1xyXG5cclxuICAgICAgICAgICAgXy5pbmRleCA9IGVuZCAmIGJ1ZmZlck1hc2s7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5pbmRleCA9PT0gMCAmJiBfLm9uYXVkaW9wcm9jZXNzKSB7XHJcbiAgICAgICAgICAgICAgICBfLm9uYXVkaW9wcm9jZXNzKG5ldyBBdWRpb1Byb2Nlc3NpbmdFdmVudCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5udW1iZXJPZk91dHB1dHMgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLm91dHB1dEJ1ZmZlclIuc2V0KF8ub3V0cHV0QnVmZmVyTCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwic2NyaXB0XCIsIFNjcmlwdFByb2Nlc3Nvck5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcblxyXG4gICAgZnVuY3Rpb24gU2VsZWN0b3JOb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAyLCBfYXJncyk7XHJcblxyXG4gICAgICAgIHRoaXMuXy5zZWxlY3RlZCAgID0gMDtcclxuICAgICAgICB0aGlzLl8uYmFja2dyb3VuZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKFNlbGVjdG9yTm9kZSk7XHJcblxyXG4gICAgdmFyICQgPSBTZWxlY3Rvck5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICBzZWxlY3RlZDoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLnNlbGVjdGVkID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jZWxsc1sxXS5zZXQoZm4uZW1wdHljZWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNlbGxzWzJdLnNldChmbi5lbXB0eWNlbGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5zZWxlY3RlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmFja2dyb3VuZDoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uYmFja2dyb3VuZCA9ICEhdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmJhY2tncm91bmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgbm9kZXMgPSB0aGlzLm5vZGVzO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heCA9IG5vZGVzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLmJhY2tncm91bmQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXS5wcm9jZXNzKHRpY2tJRCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB0bXAgPSBub2Rlc1tfLnNlbGVjdGVkXTtcclxuICAgICAgICAgICAgaWYgKHRtcCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfLmJhY2tncm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAucHJvY2Vzcyh0aWNrSUQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsc1sxXS5zZXQodG1wLmNlbGxzWzFdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2VsbHNbMl0uc2V0KHRtcC5jZWxsc1syXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwic2VsZWN0b3JcIiwgU2VsZWN0b3JOb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG4gICAgdmFyIHRpbWV2YWx1ZSA9IFQudGltZXZhbHVlO1xyXG4gICAgdmFyIEZGVCA9IFQubW9kdWxlcy5GRlQ7XHJcblxyXG4gICAgdmFyIFdBSVRfU1RBVEUgPSAwO1xyXG4gICAgdmFyIEVYRUNfU1RBVEUgPSAxO1xyXG5cclxuICAgIGZ1bmN0aW9uIFNwZWN0cnVtTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMiwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmxpc3RlbmVyKHRoaXMpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICBfLnN0YXR1cyAgPSBXQUlUX1NUQVRFO1xyXG4gICAgICAgIF8uc2FtcGxlcyA9IDA7XHJcbiAgICAgICAgXy5zYW1wbGVzSW5jciA9IDA7XHJcbiAgICAgICAgXy53cml0ZUluZGV4ICA9IDA7XHJcblxyXG4gICAgICAgIF8ucGxvdEZsdXNoID0gdHJ1ZTtcclxuICAgICAgICBfLnBsb3RSYW5nZSA9IFswLCAzMl07XHJcbiAgICAgICAgXy5wbG90QmFyU3R5bGUgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLm9uY2UoXCJpbml0XCIsIG9uaW5pdCk7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoU3BlY3RydW1Ob2RlKTtcclxuXHJcbiAgICB2YXIgb25pbml0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgaWYgKCFfLmZmdCkge1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgPSA1MTI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghXy5pbnRlcnZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLmludGVydmFsID0gNTAwO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyICQgPSBTcGVjdHJ1bU5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICBzaXplOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfLmZmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSAodmFsdWUgPCAyNTYpID8gMjU2IDogKHZhbHVlID4gMjA0OCkgPyAyMDQ4IDogdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZmZ0ICAgID0gbmV3IEZGVChuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5idWZmZXIgPSBuZXcgZm4uU2lnbmFsQXJyYXkoXy5mZnQubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5mcmVxcyAgPSBuZXcgZm4uU2lnbmFsQXJyYXkoXy5mZnQubGVuZ3RoPj4xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8ucmVzZXJ2ZWR3aW5kb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uZmZ0LnNldFdpbmRvdyhfLnJlc2VydmVkd2luZG93KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVzZXJ2ZWR3aW5kb3cgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLnJlc2VydmVkaW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJ2YWwgPSBfLnJlc2VydmVkaW50ZXJ2YWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnJlc2VydmVkaW50ZXJ2YWwgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5idWZmZXIubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB3aW5kb3c6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fLmZmdC5zZXRXaW5kb3codmFsdWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5mZnQud2luZG93TmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW50ZXJ2YWw6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB0aW1ldmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiB2YWx1ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV8uYnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVzZXJ2ZWRpbnRlcnZhbCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uaW50ZXJ2YWwgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5zYW1wbGVzSW5jciA9ICh2YWx1ZSAqIDAuMDAxICogXy5zYW1wbGVyYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uc2FtcGxlc0luY3IgPCBfLmJ1ZmZlci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uc2FtcGxlc0luY3IgPSBfLmJ1ZmZlci5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmludGVydmFsID0gXy5zYW1wbGVzSW5jciAqIDEwMDAgLyBfLnNhbXBsZXJhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmludGVydmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzcGVjdHJ1bToge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5mZnQuZ2V0RnJlcXVlbmN5RGF0YSh0aGlzLl8uZnJlcXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZWFsOiB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmZmdC5yZWFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbWFnOiB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmZmdC5pbWFnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5iYW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5fLnNhbXBsZXMgICAgPSAwO1xyXG4gICAgICAgIHRoaXMuXy53cml0ZUluZGV4ID0gMDtcclxuICAgICAgICB0aGlzLl8uZW1pdChcImJhbmdcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIGZuLmlucHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWzBdO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heCA9IGNlbGwubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgc3RhdHVzICA9IF8uc3RhdHVzO1xyXG4gICAgICAgICAgICB2YXIgc2FtcGxlcyA9IF8uc2FtcGxlcztcclxuICAgICAgICAgICAgdmFyIHNhbXBsZXNJbmNyID0gXy5zYW1wbGVzSW5jcjtcclxuICAgICAgICAgICAgdmFyIHdyaXRlSW5kZXggID0gXy53cml0ZUluZGV4O1xyXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gXy5idWZmZXI7XHJcbiAgICAgICAgICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXIubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgZW1pdDtcclxuXHJcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzYW1wbGVzIDw9IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBXQUlUX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyA9IEVYRUNfU1RBVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYW1wbGVzICs9IHNhbXBsZXNJbmNyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IEVYRUNfU1RBVEUpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXJbd3JpdGVJbmRleCsrXSA9IGNlbGxbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlckxlbmd0aCA8PSB3cml0ZUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZmZ0LmZvcndhcmQoYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW1pdCA9IF8ucGxvdEZsdXNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gV0FJVF9TVEFURTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAtLXNhbXBsZXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF8uc2FtcGxlcyA9IHNhbXBsZXM7XHJcbiAgICAgICAgICAgIF8uc3RhdHVzICA9IHN0YXR1cztcclxuICAgICAgICAgICAgXy53cml0ZUluZGV4ID0gd3JpdGVJbmRleDtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uZW1pdChcImRhdGFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBzdXBlcl9wbG90ID0gVC5PYmplY3QucHJvdG90eXBlLnBsb3Q7XHJcblxyXG4gICAgJC5wbG90ID0gZnVuY3Rpb24ob3B0cykge1xyXG4gICAgICAgIGlmICh0aGlzLl8ucGxvdEZsdXNoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuXy5wbG90RGF0YSAgPSB0aGlzLnNwZWN0cnVtO1xyXG4gICAgICAgICAgICB0aGlzLl8ucGxvdEZsdXNoID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyX3Bsb3QuY2FsbCh0aGlzLCBvcHRzKTtcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJzcGVjdHJ1bVwiLCBTcGVjdHJ1bU5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcblxyXG4gICAgZnVuY3Rpb24gU3VidHJhY3ROb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAyLCBfYXJncyk7XHJcbiAgICAgICAgdGhpcy5fLmFyID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoU3VidHJhY3ROb2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IFN1YnRyYWN0Tm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcclxuICAgICAgICAgICAgdmFyIGNlbGwgID0gdGhpcy5jZWxsc1swXTtcclxuICAgICAgICAgICAgdmFyIGNlbGxMID0gdGhpcy5jZWxsc1sxXTtcclxuICAgICAgICAgICAgdmFyIGNlbGxSID0gdGhpcy5jZWxsc1syXTtcclxuICAgICAgICAgICAgdmFyIGksIGltYXggPSBub2Rlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciBqLCBqbWF4ID0gY2VsbC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHZhciB0bXAsIHRtcEwsIHRtcFI7XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5hcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBub2Rlc1swXS5wcm9jZXNzKHRpY2tJRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wTCA9IG5vZGVzWzBdLmNlbGxzWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcFIgPSBub2Rlc1swXS5jZWxsc1syXTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsTC5zZXQodG1wTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbFIuc2V0KHRtcFIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0ucHJvY2Vzcyh0aWNrSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBMID0gbm9kZXNbaV0uY2VsbHNbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcFIgPSBub2Rlc1tpXS5jZWxsc1syXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGptYXg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbExbal0gLT0gdG1wTFtqXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxSW2pdIC09IHRtcFJbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqbWF4OyArK2opIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbExbal0gPSBjZWxsUltpXSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRtcCA9IG5vZGVzWzBdLnByb2Nlc3ModGlja0lEKS5jZWxsc1swXVswXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRtcCAtPSBub2Rlc1tpXS5wcm9jZXNzKHRpY2tJRCkuY2VsbHNbMF1bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0bXAgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2VsbFswXSA9IHRtcDtcclxuICAgICAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEtSKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCItXCIsIFN1YnRyYWN0Tm9kZSk7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGZuID0gVC5mbjtcclxuXHJcbiAgICBmdW5jdGlvbiBTeW50aERlZk5vZGUoX2FyZ3MpIHtcclxuICAgICAgICBULk9iamVjdC5jYWxsKHRoaXMsIDIsIF9hcmdzKTtcclxuICAgICAgICBmbi5maXhBUih0aGlzKTtcclxuXHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgdGhpcy5wbGF5YmFja1N0YXRlID0gZm4uRklOSVNIRURfU1RBVEU7XHJcbiAgICAgICAgXy5wb2x5ICAgICA9IDQ7XHJcbiAgICAgICAgXy5nZW5MaXN0ICA9IFtdO1xyXG4gICAgICAgIF8uZ2VuRGljdCAgPSB7fTtcclxuICAgICAgICBfLnN5bnRoZGVmID0gbnVsbDtcclxuICAgICAgICBfLnJlbUdlbiA9IG1ha2VfcmVtR2VuKHRoaXMpO1xyXG4gICAgICAgIF8ub25lbmRlZCA9IGZuLm1ha2Vfb25lbmRlZCh0aGlzKTtcclxuICAgIH1cclxuICAgIGZuLmV4dGVuZChTeW50aERlZk5vZGUpO1xyXG5cclxuICAgIHZhciAkID0gU3ludGhEZWZOb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgZGVmOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5zeW50aGRlZiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5zeW50aGRlZjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcG9seToge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPCB2YWx1ZSAmJiB2YWx1ZSA8PSA2NCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8ucG9seSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ucG9seTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBtYWtlX2RvbmVBY3Rpb24gPSBmdW5jdGlvbihzZWxmLCBvcHRzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLl8ucmVtR2VuKG9wdHMuZ2VuKTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbWFrZV9yZW1HZW4gPSBmdW5jdGlvbihzZWxmKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGdlbikge1xyXG4gICAgICAgICAgICB2YXIgXyA9IHNlbGYuXztcclxuICAgICAgICAgICAgdmFyIGkgPSBfLmdlbkxpc3QuaW5kZXhPZihnZW4pO1xyXG4gICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIF8uZ2VuTGlzdC5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBnZW4ubm90ZU51bSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgXy5nZW5EaWN0W2dlbi5ub3RlTnVtXSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbm90ZU9uID0gZnVuY3Rpb24obm90ZU51bSwgZnJlcSwgdmVsb2NpdHksIF9vcHRzKSB7XHJcbiAgICAgICAgdmVsb2NpdHkgfD0gMDtcclxuICAgICAgICBpZiAodmVsb2NpdHkgPD0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGVPZmYodGhpcywgbm90ZU51bSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh2ZWxvY2l0eSA+IDEyNykge1xyXG4gICAgICAgICAgICB2ZWxvY2l0eSA9IDEyNztcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgdmFyIGxpc3QgPSBfLmdlbkxpc3QsIGRpY3QgPSBfLmdlbkRpY3Q7XHJcbiAgICAgICAgdmFyIGdlbiA9IGRpY3Rbbm90ZU51bV07XHJcbiAgICAgICAgaWYgKGdlbikge1xyXG4gICAgICAgICAgICBfLnJlbUdlbihnZW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG9wdHMgPSB7XHJcbiAgICAgICAgICAgIGZyZXEgICAgOiBmcmVxLFxyXG4gICAgICAgICAgICBub3RlTnVtIDogbm90ZU51bSxcclxuICAgICAgICAgICAgdmVsb2NpdHk6IHZlbG9jaXR5LFxyXG4gICAgICAgICAgICBtdWwgICAgIDogdmVsb2NpdHkgKiAwLjAwNzgxMjVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChfb3B0cykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gX29wdHMpIHtcclxuICAgICAgICAgICAgICAgIG9wdHNba2V5XSA9IF9vcHRzW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgb3B0cy5kb25lQWN0aW9uID0gbWFrZV9kb25lQWN0aW9uKHRoaXMsIG9wdHMpO1xyXG5cclxuICAgICAgICBnZW4gPSBfLnN5bnRoZGVmLmNhbGwodGhpcywgb3B0cyk7XHJcblxyXG4gICAgICAgIGlmIChnZW4gaW5zdGFuY2VvZiBULk9iamVjdCkge1xyXG4gICAgICAgICAgICBnZW4ubm90ZU51bSA9IG5vdGVOdW07XHJcbiAgICAgICAgICAgIGxpc3QucHVzaChnZW4pO1xyXG4gICAgICAgICAgICBkaWN0W25vdGVOdW1dID0gb3B0cy5nZW4gPSBnZW47XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBsYXliYWNrU3RhdGUgPSBmbi5QTEFZSU5HX1NUQVRFO1xyXG5cclxuICAgICAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gXy5wb2x5KSB7XHJcbiAgICAgICAgICAgICAgICBfLnJlbUdlbihsaXN0WzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIG1pZGljcHMgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHRhYmxlID0gbmV3IEZsb2F0MzJBcnJheSgxMjgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTI4OyArK2kpIHtcclxuICAgICAgICAgICAgdGFibGVbaV0gPSA0NDAgKiBNYXRoLnBvdygyLCAoaSAtIDY5KSAqIDEgLyAxMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0YWJsZTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgdmFyIGNwc21pZGkgPSBmdW5jdGlvbihjcHMpIHtcclxuICAgICAgICBpZiAoY3BzID4gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5sb2coY3BzICogMSAvIDQ0MCkgKiBNYXRoLkxPRzJFICogMTIgKyA2OTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICQubm90ZU9uID0gZnVuY3Rpb24obm90ZU51bSwgdmVsb2NpdHksIF9vcHRzKSB7XHJcbiAgICAgICAgdmFyIGZyZXEgPSBtaWRpY3BzW25vdGVOdW1dIHx8ICg0NDAgKiBNYXRoLnBvdygyLCAobm90ZU51bSAtIDY5KSAvIDEyKSk7XHJcbiAgICAgICAgbm90ZU9uLmNhbGwodGhpcywgKG5vdGVOdW0gKyAwLjUpfDAsIGZyZXEsIHZlbG9jaXR5LCBfb3B0cyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQubm90ZU9mZiA9IGZ1bmN0aW9uKG5vdGVOdW0pIHtcclxuICAgICAgICB2YXIgZ2VuID0gdGhpcy5fLmdlbkRpY3Rbbm90ZU51bV07XHJcbiAgICAgICAgaWYgKGdlbiAmJiBnZW4ucmVsZWFzZSkge1xyXG4gICAgICAgICAgICBnZW4ucmVsZWFzZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5ub3RlT25XaXRoRnJlcSA9IGZ1bmN0aW9uKGZyZXEsIHZlbG9jaXR5LCBfb3B0cykge1xyXG4gICAgICAgIHZhciBub3RlTnVtID0gY3BzbWlkaShmcmVxKTtcclxuICAgICAgICBub3RlT24uY2FsbCh0aGlzLCAobm90ZU51bSArIDAuNSl8MCwgZnJlcSwgdmVsb2NpdHksIF9vcHRzKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5ub3RlT2ZmV2l0aEZyZXEgPSBmdW5jdGlvbihmcmVxKSB7XHJcbiAgICAgICAgdmFyIG5vdGVOdW0gPSBjcHNtaWRpKGZyZXEpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm5vdGVPZmYoKG5vdGVOdW0gKyAwLjUpfDApO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmFsbE5vdGVPZmYgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgbGlzdCA9IHRoaXMuXy5nZW5MaXN0O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpbWF4ID0gbGlzdC5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgaWYgKGxpc3RbaV0ucmVsZWFzZSkge1xyXG4gICAgICAgICAgICAgICAgbGlzdFtpXS5yZWxlYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICQuYWxsU291bmRPZmYgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICB2YXIgbGlzdCA9IF8uZ2VuTGlzdDtcclxuICAgICAgICB2YXIgZGljdCA9IF8uZ2VuRGljdDtcclxuICAgICAgICB3aGlsZSAobGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZGVsZXRlIGRpY3RbbGlzdC5zaGlmdCgpLm5vdGVOdW1dO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgJC5zeW50aCA9IGZ1bmN0aW9uKF9vcHRzKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgdmFyIGxpc3QgPSBfLmdlbkxpc3Q7XHJcbiAgICAgICAgdmFyIGdlbiwgb3B0cyA9IHt9O1xyXG5cclxuICAgICAgICBpZiAoX29wdHMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIF9vcHRzKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRzW2tleV0gPSBfb3B0c1trZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9wdHMuZG9uZUFjdGlvbiA9IG1ha2VfZG9uZUFjdGlvbih0aGlzLCBvcHRzKTtcclxuXHJcbiAgICAgICAgZ2VuID0gXy5zeW50aGRlZi5jYWxsKHRoaXMsIG9wdHMpO1xyXG5cclxuICAgICAgICBpZiAoZ2VuIGluc3RhbmNlb2YgVC5PYmplY3QpIHtcclxuICAgICAgICAgICAgbGlzdC5wdXNoKGdlbik7XHJcbiAgICAgICAgICAgIG9wdHMuZ2VuID0gZ2VuO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXliYWNrU3RhdGUgPSBmbi5QTEFZSU5HX1NUQVRFO1xyXG5cclxuICAgICAgICAgICAgaWYgKGxpc3QubGVuZ3RoID4gXy5wb2x5KSB7XHJcbiAgICAgICAgICAgICAgICBfLnJlbUdlbihsaXN0WzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBjZWxsID0gdGhpcy5jZWxsc1swXTtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlja0lEICE9PSB0aWNrSUQpIHtcclxuICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5wbGF5YmFja1N0YXRlID09PSBmbi5QTEFZSU5HX1NUQVRFKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IF8uZ2VuTGlzdDtcclxuICAgICAgICAgICAgICAgIHZhciBnZW47XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VsbEwgPSB0aGlzLmNlbGxzWzFdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNlbGxSID0gdGhpcy5jZWxsc1syXTtcclxuICAgICAgICAgICAgICAgIHZhciBpLCBpbWF4O1xyXG4gICAgICAgICAgICAgICAgdmFyIGosIGptYXggPSBjZWxsLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHZhciB0bXBMLCB0bXBSO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdlbiA9IGxpc3RbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgZ2VuLnByb2Nlc3ModGlja0lEKTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsTC5zZXQoZ2VuLmNlbGxzWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsUi5zZXQoZ2VuLmNlbGxzWzJdKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAxLCBpbWF4ID0gbGlzdC5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuID0gbGlzdFtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuLnByb2Nlc3ModGlja0lEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wTCA9IGdlbi5jZWxsc1sxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wUiA9IGdlbi5jZWxsc1syXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGptYXg7ICsraikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbExbal0gKz0gdG1wTFtqXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxSW2pdICs9IHRtcFJbal07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZuLm5leHRUaWNrKF8ub25lbmRlZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwiU3ludGhEZWZcIiwgU3ludGhEZWZOb2RlKTtcclxuXHJcblxyXG4gICAgdmFyIGVudl9kZXNjID0ge1xyXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGZuLmlzRGljdGlvbmFyeSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUudHlwZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5lbnYgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFQuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl8uZW52ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl8uZW52O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJPc2NHZW5cIiwgKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgb3NjX2Rlc2MgPSB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFQuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLm9zYyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5vc2M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgd2F2ZV9kZXNjID0ge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLndhdmUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ud2F2ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBzeW50aGRlZiA9IGZ1bmN0aW9uKG9wdHMpIHtcclxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgIHZhciBzeW50aCwgb3NjLCBlbnYsIGVudnR5cGU7XHJcblxyXG4gICAgICAgICAgICBvc2MgPSBfLm9zYyB8fCBudWxsO1xyXG4gICAgICAgICAgICBlbnYgPSBfLmVudiB8fCB7fTtcclxuICAgICAgICAgICAgZW52dHlwZSA9IGVudi50eXBlIHx8IFwicGVyY1wiO1xyXG5cclxuICAgICAgICAgICAgaWYgKG9zYyBpbnN0YW5jZW9mIFQuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9zYy5jbG9uZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3NjID0gb3NjLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFvc2MpIHtcclxuICAgICAgICAgICAgICAgIG9zYyA9IFQoXCJvc2NcIiwge3dhdmU6Xy53YXZlfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3NjLmZyZXEgPSBvcHRzLmZyZXE7XHJcbiAgICAgICAgICAgIG9zYy5tdWwgID0gb3NjLm11bCAqIG9wdHMudmVsb2NpdHkvMTI4O1xyXG5cclxuICAgICAgICAgICAgc3ludGggPSBvc2M7XHJcbiAgICAgICAgICAgIGlmIChlbnYgaW5zdGFuY2VvZiBULk9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbnYuY2xvbmUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN5bnRoID0gZW52LmNsb25lKCkuYXBwZW5kKHN5bnRoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHN5bnRoID0gVChlbnZ0eXBlLCBlbnYsIHN5bnRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzeW50aC5vbihcImVuZGVkXCIsIG9wdHMuZG9uZUFjdGlvbikuYmFuZygpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHN5bnRoO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihfYXJncykge1xyXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgU3ludGhEZWZOb2RlKF9hcmdzKTtcclxuXHJcbiAgICAgICAgICAgIGluc3RhbmNlLl8ud2F2ZSA9IFwic2luXCI7XHJcblxyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnN0YW5jZSwge1xyXG4gICAgICAgICAgICAgICAgZW52OiBlbnZfZGVzYywgb3NjOiBvc2NfZGVzYywgd2F2ZTogd2F2ZV9kZXNjXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaW5zdGFuY2UuZGVmID0gc3ludGhkZWY7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICAgICAgfTtcclxuICAgIH0pKCkpO1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwiUGx1Y2tHZW5cIiwgKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICB2YXIgc3ludGhkZWYgPSBmdW5jdGlvbihvcHRzKSB7XHJcbiAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICB2YXIgc3ludGgsIGVudiwgZW52dHlwZTtcclxuXHJcbiAgICAgICAgICAgIGVudiA9IF8uZW52IHx8IHt9O1xyXG4gICAgICAgICAgICBlbnZ0eXBlID0gZW52LnR5cGUgfHwgXCJwZXJjXCI7XHJcblxyXG4gICAgICAgICAgICBzeW50aCA9IFQoXCJwbHVja1wiLCB7ZnJlcTpvcHRzLmZyZXEsIG11bDpvcHRzLnZlbG9jaXR5LzEyOH0pLmJhbmcoKTtcclxuICAgICAgICAgICAgaWYgKGVudiBpbnN0YW5jZW9mIFQuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVudi5jbG9uZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3ludGggPSBlbnYuY2xvbmUoKS5hcHBlbmQoc3ludGgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc3ludGggPSBUKGVudnR5cGUsIGVudiwgc3ludGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN5bnRoLm9uKFwiZW5kZWRcIiwgb3B0cy5kb25lQWN0aW9uKS5iYW5nKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc3ludGg7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKF9hcmdzKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyBTeW50aERlZk5vZGUoX2FyZ3MpO1xyXG5cclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW5zdGFuY2UsIHtcclxuICAgICAgICAgICAgICAgIGVudjogZW52X2Rlc2NcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpbnN0YW5jZS5kZWYgPSBzeW50aGRlZjtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgICAgICB9O1xyXG4gICAgfSkoKSk7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGZuID0gVC5mbjtcclxuICAgIHZhciBTY2lzc29yICAgID0gVC5tb2R1bGVzLlNjaXNzb3I7XHJcbiAgICB2YXIgVGFwZSAgICAgICA9IFNjaXNzb3IuVGFwZTtcclxuICAgIHZhciBUYXBlU3RyZWFtID0gU2Npc3Nvci5UYXBlU3RyZWFtO1xyXG4gICAgdmFyIGlzU2lnbmFsQXJyYXkgPSBmbi5pc1NpZ25hbEFycmF5O1xyXG5cclxuICAgIGZ1bmN0aW9uIFNjaXNzb3JOb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAyLCBfYXJncyk7XHJcbiAgICAgICAgZm4uZml4QVIodGhpcyk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8uaXNMb29wZWQgPSBmYWxzZTtcclxuICAgICAgICBfLm9uZW5kZWQgID0gZm4ubWFrZV9vbmVuZGVkKHRoaXMsIDApO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKFNjaXNzb3JOb2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IFNjaXNzb3JOb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgdGFwZToge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHRhcGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0YXBlIGluc3RhbmNlb2YgVGFwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWJhY2tTdGF0ZSA9IGZuLlBMQVlJTkdfU1RBVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLnRhcGUgPSB0YXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy50YXBlU3RyZWFtID0gbmV3IFRhcGVTdHJlYW0odGFwZSwgdGhpcy5fLnNhbXBsZXJhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy50YXBlU3RyZWFtLmlzTG9vcGVkID0gdGhpcy5fLmlzTG9vcGVkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFwZSBpbnN0YW5jZW9mIFQuT2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXBlLmJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZSA9IHRhcGUuYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFwZSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXBlLmJ1ZmZlcikgJiYgaXNTaWduYWxBcnJheSh0YXBlLmJ1ZmZlclswXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWJhY2tTdGF0ZSA9IGZuLlBMQVlJTkdfU1RBVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8udGFwZSA9IG5ldyBTY2lzc29yKHRhcGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fLnRhcGVTdHJlYW0gPSBuZXcgVGFwZVN0cmVhbSh0aGlzLl8udGFwZSwgdGhpcy5fLnNhbXBsZXJhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fLnRhcGVTdHJlYW0uaXNMb29wZWQgPSB0aGlzLl8uaXNMb29wZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLnRhcGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzTG9vcGVkOiB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmlzTG9vcGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBidWZmZXI6IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl8udGFwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8udGFwZS5nZXRCdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQubG9vcCA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fLmlzTG9vcGVkID0gISF2YWx1ZTtcclxuICAgICAgICBpZiAodGhpcy5fLnRhcGVTdHJlYW0pIHtcclxuICAgICAgICAgICAgdGhpcy5fLnRhcGVTdHJlYW0uaXNMb29wZWQgPSB0aGlzLl8uaXNMb29wZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmJhbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLnBsYXliYWNrU3RhdGUgPSBmbi5QTEFZSU5HX1NUQVRFO1xyXG4gICAgICAgIGlmICh0aGlzLl8udGFwZVN0cmVhbSkge1xyXG4gICAgICAgICAgICB0aGlzLl8udGFwZVN0cmVhbS5yZXNldCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl8uZW1pdChcImJhbmdcIik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgICQuZ2V0QnVmZmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuXy50YXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl8udGFwZS5nZXRCdWZmZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIHZhciB0YXBlU3RyZWFtID0gXy50YXBlU3RyZWFtO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRhcGVTdHJlYW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBjZWxsTCA9IHRoaXMuY2VsbHNbMV07XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VsbFIgPSB0aGlzLmNlbGxzWzJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRtcCAgPSB0YXBlU3RyZWFtLmZldGNoKGNlbGxMLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICBjZWxsTC5zZXQodG1wWzBdKTtcclxuICAgICAgICAgICAgICAgIGNlbGxSLnNldCh0bXBbMV0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGxheWJhY2tTdGF0ZSA9PT0gZm4uUExBWUlOR19TVEFURSAmJiB0YXBlU3RyZWFtLmlzRW5kZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmbi5uZXh0VGljayhfLm9uZW5kZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmbi5vdXRwdXRTaWduYWxBUih0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBmbi5yZWdpc3RlcihcInRhcGVcIiwgU2Npc3Nvck5vZGUpO1xyXG5cclxufSkodGltYnJlKTtcclxuKGZ1bmN0aW9uKFQpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBmbiA9IFQuZm47XHJcbiAgICB2YXIgdGltZXZhbHVlID0gVC50aW1ldmFsdWU7XHJcbiAgICB2YXIgRnVuY3Rpb25XcmFwcGVyID0gVChmdW5jdGlvbigpe30pLmNvbnN0cnVjdG9yO1xyXG5cclxuICAgIGZ1bmN0aW9uIFRhc2tOb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAxLCBfYXJncyk7XHJcbiAgICAgICAgZm4udGltZXIodGhpcyk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIHRoaXMucGxheWJhY2tTdGF0ZSA9IGZuLkZJTklTSEVEX1NUQVRFO1xyXG4gICAgICAgIF8udGFzayA9IFtdO1xyXG4gICAgICAgIF8uaSAgICAgPSAwO1xyXG4gICAgICAgIF8uaiAgICAgPSAwO1xyXG4gICAgICAgIF8uaW1heCAgPSAwO1xyXG4gICAgICAgIF8uam1heCAgPSAwO1xyXG4gICAgICAgIF8ud2FpdCAgPSAwO1xyXG4gICAgICAgIF8uY291bnQgPSAwO1xyXG4gICAgICAgIF8uYXJncyAgPSB7fTtcclxuICAgICAgICBfLmRvTnVtID0gMTtcclxuICAgICAgICBfLmluaXRGdW5jID0gZm4ubm9wO1xyXG4gICAgICAgIF8ub25lbmRlZCA9IG1ha2Vfb25lbmRlZCh0aGlzKTtcclxuXHJcbiAgICAgICAgdGhpcy5vbihcInN0YXJ0XCIsIG9uc3RhcnQpO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKFRhc2tOb2RlKTtcclxuXHJcbiAgICB2YXIgb25zdGFydCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fLCBhcmdzO1xyXG4gICAgICAgIHRoaXMucGxheWJhY2tTdGF0ZSA9IGZuLlBMQVlJTkdfU1RBVEU7XHJcbiAgICAgICAgXy50YXNrID0gdGhpcy5ub2Rlcy5tYXAoZnVuY3Rpb24oeCkge1xyXG4gICAgICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIEZ1bmN0aW9uV3JhcHBlciA/IHguZnVuYyA6IGZhbHNlO1xyXG4gICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbih4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIXg7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXy5pID0gXy5qID0gMDtcclxuICAgICAgICBfLmltYXggPSBfLmRvTnVtO1xyXG4gICAgICAgIF8uam1heCA9IF8udGFzay5sZW5ndGg7XHJcbiAgICAgICAgYXJncyA9IF8uaW5pdEZ1bmMoKTtcclxuICAgICAgICBpZiAoIWZuLmlzRGljdGlvbmFyeShhcmdzKSkge1xyXG4gICAgICAgICAgICBhcmdzID0ge3BhcmFtOmFyZ3N9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBfLmFyZ3MgPSBhcmdzO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbWFrZV9vbmVuZGVkID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2VsZi5wbGF5YmFja1N0YXRlID0gZm4uRklOSVNIRURfU1RBVEU7XHJcbiAgICAgICAgICAgIHZhciBfID0gc2VsZi5fO1xyXG4gICAgICAgICAgICB2YXIgY2VsbCAgPSBzZWxmLmNlbGxzWzBdO1xyXG4gICAgICAgICAgICB2YXIgY2VsbEwgPSBzZWxmLmNlbGxzWzFdO1xyXG4gICAgICAgICAgICB2YXIgY2VsbFIgPSBzZWxmLmNlbGxzWzJdO1xyXG4gICAgICAgICAgICB2YXIgbGFzdFZhbHVlID0gXy5hcmdzO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxhc3RWYWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSBjZWxsTC5sZW5ndGg7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsWzBdID0gY2VsbExbaV0gPSBjZWxsUltpXSA9IGxhc3RWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfLmVtaXQoXCJlbmRlZFwiLCBfLmFyZ3MpO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciAkID0gVGFza05vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICBcImRvXCI6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiB2YWx1ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8uZG9OdW0gPSB2YWx1ZSA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IHZhbHVlfDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmRvTnVtO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbml0OiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5pbml0RnVuYyA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5pbml0RnVuYztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgICQuYmFuZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8uY291bnQgID0gMDtcclxuICAgICAgICBfLmVtaXQoXCJiYW5nXCIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLndhaXQgPSBmdW5jdGlvbih0aW1lKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aW1lID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHRpbWUgPSB0aW1ldmFsdWUodGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdGltZSA9PT0gXCJudW1iZXJcIiAmJiB0aW1lID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLl8uY291bnQgKz0gKHRoaXMuXy5zYW1wbGVyYXRlICogdGltZSAqIDAuMDAxKXwwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWzBdO1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIHZhciBhcmdzLCBmdW5jO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuICAgICAgICAgICAgaWYgKF8uaSA8IF8uaW1heCkge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKF8uY291bnQgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmogPj0gXy5qbWF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsrXy5pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5pID49IF8uaW1heCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm4ubmV4dFRpY2soXy5vbmVuZGVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uaiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMgPSBfLnRhc2tbXy5qKytdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmdW5jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmMuY2FsbCh0aGlzLCBfLmksIF8uYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXy5jb3VudCAtPSBjZWxsLmxlbmd0aDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwidGFza1wiLCBUYXNrTm9kZSk7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGZuID0gVC5mbjtcclxuICAgIHZhciB0aW1ldmFsdWUgPSBULnRpbWV2YWx1ZTtcclxuXHJcbiAgICBmdW5jdGlvbiBUaW1lb3V0Tm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMCwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLnRpbWVyKHRoaXMpO1xyXG4gICAgICAgIGZuLmZpeEtSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICB0aGlzLnBsYXliYWNrU3RhdGUgPSBmbi5GSU5JU0hFRF9TVEFURTtcclxuICAgICAgICBfLmN1cnJlbnRUaW1lID0gMDtcclxuICAgICAgICBfLnNhbXBsZXNNYXggPSAwO1xyXG4gICAgICAgIF8uc2FtcGxlcyAgICA9IDA7XHJcbiAgICAgICAgXy5vbmVuZGVkID0gZm4ubWFrZV9vbmVuZGVkKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLm9uY2UoXCJpbml0XCIsIG9uaW5pdCk7XHJcbiAgICAgICAgdGhpcy5vbihcInN0YXJ0XCIsIG9uc3RhcnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGZuLmV4dGVuZChUaW1lb3V0Tm9kZSk7XHJcblxyXG4gICAgdmFyIG9uaW5pdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fLnRpbWVvdXQpIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lb3V0ID0gMTAwMDtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBvbnN0YXJ0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5YmFja1N0YXRlID0gZm4uUExBWUlOR19TVEFURTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob25zdGFydCwgXCJ1bnJlbW92YWJsZVwiLCB7XHJcbiAgICAgICAgdmFsdWU6dHJ1ZSwgd3JpdGFibGU6ZmFsc2VcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciAkID0gVGltZW91dE5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCQsIHtcclxuICAgICAgICB0aW1lb3V0OiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdGltZXZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWJhY2tTdGF0ZSA9IGZuLlBMQVlJTkdfU1RBVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50aW1lb3V0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5zYW1wbGVzTWF4ID0gKF8uc2FtcGxlcmF0ZSAqICh2YWx1ZSAqIDAuMDAxKSl8MDtcclxuICAgICAgICAgICAgICAgICAgICBfLnNhbXBsZXMgPSBfLnNhbXBsZXNNYXg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLnRpbWVvdXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGN1cnJlbnRUaW1lOiB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmN1cnJlbnRUaW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5iYW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgdGhpcy5wbGF5YmFja1N0YXRlID0gZm4uUExBWUlOR19TVEFURTtcclxuICAgICAgICBfLnNhbXBsZXMgPSBfLnNhbXBsZXNNYXg7XHJcbiAgICAgICAgXy5jdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgXy5lbWl0KFwiYmFuZ1wiKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIGNlbGwgPSB0aGlzLmNlbGxzWzBdO1xyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpY2tJRCA9IHRpY2tJRDtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLnNhbXBsZXMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBfLnNhbXBsZXMgLT0gY2VsbC5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChfLnNhbXBsZXMgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpbWF4ID0gbm9kZXMubGVuZ3RoOyBpIDwgaW1heDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0uYmFuZygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm4ubmV4dFRpY2soXy5vbmVuZGVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfLmN1cnJlbnRUaW1lICs9IGZuLmN1cnJlbnRUaW1lSW5jcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIGZuLnJlZ2lzdGVyKFwidGltZW91dFwiLCBUaW1lb3V0Tm9kZSk7XHJcblxyXG59KSh0aW1icmUpO1xyXG4oZnVuY3Rpb24oVCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIGZuID0gVC5mbjtcclxuXHJcbiAgICBmdW5jdGlvbiBXYXZlU2hhcGVyTm9kZShfYXJncykge1xyXG4gICAgICAgIFQuT2JqZWN0LmNhbGwodGhpcywgMSwgX2FyZ3MpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLl8uY3VydmUgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgZm4uZXh0ZW5kKFdhdmVTaGFwZXJOb2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IFdhdmVTaGFwZXJOb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgY3VydmU6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZuLmlzU2lnbmFsQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fLmN1cnZlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLmN1cnZlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5wcm9jZXNzID0gZnVuY3Rpb24odGlja0lEKSB7XHJcbiAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChfLmN1cnZlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbMF07XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VydmUgPSBfLmN1cnZlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxlbiAgICA9IGN1cnZlLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHZhciB4LCBpLCBpbWF4ID0gXy5jZWxsc2l6ZTtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICB4ID0gKCgoY2VsbFtpXSArIDEpICogMC41KSAqIGxlbiArIDAuNSl8MDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4ID49IGxlbiAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGxlbiAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbaV0gPSBjdXJ2ZVt4XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJ3YXZlc2hhcGVyXCIsIFdhdmVTaGFwZXJOb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICB2YXIgZm4gPSBULmZuO1xyXG5cclxuICAgIGZ1bmN0aW9uIFpNYXBOb2RlKF9hcmdzKSB7XHJcbiAgICAgICAgVC5PYmplY3QuY2FsbCh0aGlzLCAxLCBfYXJncyk7XHJcblxyXG4gICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgIF8uaW5NaW4gID0gMDtcclxuICAgICAgICBfLmluTWF4ICA9IDE7XHJcbiAgICAgICAgXy5vdXRNaW4gPSAwO1xyXG4gICAgICAgIF8ub3V0TWF4ID0gMTtcclxuICAgICAgICBfLmFyICAgICA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLm9uY2UoXCJpbml0XCIsIG9uaW5pdCk7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoWk1hcE5vZGUpO1xyXG5cclxuICAgIHZhciBvbmluaXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuXy53YXJwKSB7XHJcbiAgICAgICAgICAgIHRoaXMud2FycCA9IFwibGlubGluXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgJCA9IFpNYXBOb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcygkLCB7XHJcbiAgICAgICAgaW5NaW46IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5pbk1pbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5pbk1pbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5NYXg6IHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuXy5pbk1heCA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5pbk1heDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3V0TWluOiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8ub3V0TWluID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLm91dE1pbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3V0TWF4OiB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl8ub3V0TWF4ID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fLm91dE1heDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgd2FycDoge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBXYXJwRnVuY3Rpb25zW3ZhbHVlXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl8ud2FycCA9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuXy53YXJwTmFtZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8ud2FycE5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbMF07XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRpY2tJRCAhPT0gdGlja0lEKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGlja0lEID0gdGlja0lEO1xyXG5cclxuICAgICAgICAgICAgdmFyIGluTWluICA9IF8uaW5NaW4sIGluTWF4ICAgPSBfLmluTWF4O1xyXG4gICAgICAgICAgICB2YXIgb3V0TWluID0gXy5vdXRNaW4sIG91dE1heCA9IF8ub3V0TWF4O1xyXG4gICAgICAgICAgICB2YXIgd2FycCAgID0gXy53YXJwO1xyXG5cclxuICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMubm9kZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICB2YXIgbXVsID0gXy5tdWwsIGFkZCA9IF8uYWRkO1xyXG4gICAgICAgICAgICB2YXIgaSwgaW1heCA9IGNlbGwubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgaWYgKF8uYXIgJiYgbGVuKSB7XHJcbiAgICAgICAgICAgICAgICBmbi5pbnB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxbaV0gPSB3YXJwKGNlbGxbaV0sIGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgpICogbXVsICsgYWRkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSAodGhpcy5ub2Rlcy5sZW5ndGgpID8gZm4uaW5wdXRTaWduYWxLUih0aGlzKSA6IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB3YXJwKGlucHV0LCBpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4KSAqIG11bCArIGFkZDtcclxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbWF4OyArK2kpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsW2ldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgV2FycEZ1bmN0aW9ucyA9IHtcclxuICAgICAgICBsaW5saW46IGZ1bmN0aW9uKHgsIGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgpIHtcclxuICAgICAgICAgICAgaWYgKHggPCBpbk1pbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dE1pbjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh4ID4gaW5NYXgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvdXRNYXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGluTWF4ID09PSBpbk1pbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dE1pbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKHgtaW5NaW4pIC8gKGluTWF4LWluTWluKSAqIChvdXRNYXgtb3V0TWluKSArIG91dE1pbjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpbmV4cDogZnVuY3Rpb24oeCwgaW5NaW4sIGluTWF4LCBvdXRNaW4sIG91dE1heCkge1xyXG4gICAgICAgICAgICBpZiAoeCA8IGluTWluKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0TWluO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHggPiBpbk1heCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dE1heDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob3V0TWluID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaW5NYXggPT09IGluTWluKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0TWF4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnBvdyhvdXRNYXgvb3V0TWluLCAoeC1pbk1pbikvKGluTWF4LWluTWluKSkgKiBvdXRNaW47XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHBsaW46IGZ1bmN0aW9uKHgsIGluTWluLCBpbk1heCwgb3V0TWluLCBvdXRNYXgpIHtcclxuICAgICAgICAgICAgaWYgKHggPCBpbk1pbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dE1pbjtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh4ID4gaW5NYXgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvdXRNYXg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGluTWluID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0TWF4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmxvZyh4L2luTWluKSAvIE1hdGgubG9nKGluTWF4L2luTWluKSAqIChvdXRNYXgtb3V0TWluKSArIG91dE1pbjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4cGV4cDogZnVuY3Rpb24oeCwgaW5NaW4sIGluTWF4LCBvdXRNaW4sIG91dE1heCkge1xyXG4gICAgICAgICAgICBpZiAoeCA8IGluTWluKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0TWluO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHggPiBpbk1heCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG91dE1heDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaW5NaW4gPT09IDAgfHwgb3V0TWluID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5wb3cob3V0TWF4L291dE1pbiwgTWF0aC5sb2coeC9pbk1pbikgLyBNYXRoLmxvZyhpbk1heC9pbk1pbikpICogb3V0TWluO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZm4ucmVnaXN0ZXIoXCJ6bWFwXCIsIFpNYXBOb2RlKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbiIsIihmdW5jdGlvbihUKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICBpZiAoVC5lbnYgIT09IFwid2Via2l0XCIpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGZuID0gVC5mbjtcclxuLy8gICAgdmFyIGNvbnRleHQgPSBmbi5fYXVkaW9Db250ZXh0O1xyXG4gICAgdmFyIEJVRkZFUlNJWkUgPSAxMDI0O1xyXG5cclxuICAgIGZ1bmN0aW9uIFdlYkF1ZGlvQVBJTm9kZShfYXJncykge1xyXG4gICAgICAgIHRpbWJyZS5PYmplY3QuY2FsbCh0aGlzLCAyLCBfYXJncy5zbGljZSgwLCBfYXJncy5sZW5ndGgtMSkpO1xyXG4gICAgICAgIGZuLmZpeEFSKHRoaXMpO1xyXG5cclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICB2YXIgY29udGV4dCA9IF9hcmdzLnNsaWNlKC0xKVswXTtcclxuXHJcbiAgICAgICAgXy5tb2RlID0gXCJcIjtcclxuICAgICAgICBfLmJ1ZmZlckwgPSBuZXcgZm4uU2lnbmFsQXJyYXkoQlVGRkVSU0laRSA8PCAyKTtcclxuICAgICAgICBfLmJ1ZmZlclIgPSBuZXcgZm4uU2lnbmFsQXJyYXkoQlVGRkVSU0laRSA8PCAyKTtcclxuICAgICAgICBfLmJ1ZmZlcm1hc2sgPSBfLmJ1ZmZlckwubGVuZ3RoIC0gMTtcclxuICAgICAgICBfLm5vZGUgICA9IG51bGw7XHJcbiAgICAgICAgXy5zY3JpcHQgPSBjb250ZXh0LmNyZWF0ZVNjcmlwdFByb2Nlc3NvcihCVUZGRVJTSVpFLCAyLCAyKTtcclxuICAgICAgICBfLndyaXRlSW5kZXggPSAwO1xyXG4gICAgICAgIF8ucmVhZEluZGV4ICA9IDA7XHJcbiAgICAgICAgXy50b3RhbFJlYWQgID0gMDtcclxuICAgICAgICBfLnRvdGFsV3JpdGUgPSAwO1xyXG4gICAgICAgIF8uY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICB9XHJcbiAgICBmbi5leHRlbmQoV2ViQXVkaW9BUElOb2RlKTtcclxuXHJcbiAgICB2YXIgJCA9IFdlYkF1ZGlvQVBJTm9kZS5wcm90b3R5cGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoJCwge1xyXG4gICAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl8uY29udGV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW9kZToge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuXy5tb2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgJC5jYW5jZWwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuICAgICAgICB2YXIgY2VsbCA9IHRoaXMuY2VsbHNbMF07XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGltYXggPSBjZWxsLmxlbmd0aDsgaSA8IGltYXg7ICsraSkge1xyXG4gICAgICAgICAgICBjZWxsW2ldID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXy5ub2RlID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKF8uY29ubmVjdEluZGV4ICE9PSBudWxsICYmIF8uY29ubmVjdEluZGV4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgXy5zY3JpcHQuZGlzY29ubmVjdChfLmNvbm5lY3RJbmRleCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgXy5zY3JpcHQuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIFdlYkF1ZGlvQVBJUmVjdk5vZGUoX2FyZ3MpIHtcclxuICAgICAgICAgICAgV2ViQXVkaW9BUElOb2RlLmNhbGwodGhpcywgX2FyZ3MpO1xyXG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IF9hcmdzLnNsaWNlKC0xKVswXTtcclxuXHJcbiAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICBfLm1vZGUgPSBcInJlY3ZcIjtcclxuICAgICAgICAgICAgXy5zY3JpcHQub25hdWRpb3Byb2Nlc3MgPSBtYWtlX3JlY3ZfcHJvY2Vzcyh0aGlzKTtcclxuICAgICAgICAgICAgXy5nYWluID0gY29udGV4dC5jcmVhdGVHYWluKCk7XHJcbiAgICAgICAgICAgIF8uZ2Fpbi5nYWluLnZhbHVlID0gMDtcclxuICAgICAgICAgICAgXy5zY3JpcHQuY29ubmVjdChfLmdhaW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbi5leHRlbmQoV2ViQXVkaW9BUElSZWN2Tm9kZSwgV2ViQXVkaW9BUElOb2RlKTtcclxuXHJcbiAgICAgICAgdmFyIG1ha2VfcmVjdl9wcm9jZXNzID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF8gPSBzZWxmLl87XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5zID0gZS5pbnB1dEJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgIHZhciBpbnB1dEwgPSBpbnMuZ2V0Q2hhbm5lbERhdGEoMCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5wdXRSID0gaW5zLmdldENoYW5uZWxEYXRhKDEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGlucy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgd3JpdGVJbmRleCA9IF8ud3JpdGVJbmRleDtcclxuICAgICAgICAgICAgICAgIF8uYnVmZmVyTC5zZXQoaW5wdXRMLCB3cml0ZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIF8uYnVmZmVyUi5zZXQoaW5wdXRSLCB3cml0ZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIF8ud3JpdGVJbmRleCA9ICh3cml0ZUluZGV4ICsgbGVuZ3RoKSAmIF8uYnVmZmVybWFzaztcclxuICAgICAgICAgICAgICAgIF8udG90YWxXcml0ZSArPSBsZW5ndGg7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyICQgPSBXZWJBdWRpb0FQSVJlY3ZOb2RlLnByb3RvdHlwZTtcclxuXHJcbiAgICAgICAgJC5jYW5jZWwgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYodGhpcy5fLm5vZGUpIHtcclxuICAgICAgICAgICAgICB0aGlzLl8ubm9kZS5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgV2ViQXVkaW9BUElOb2RlLnByb3RvdHlwZS5jYW5jZWwuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fLmdhaW4uZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQucmVjdiA9IGZ1bmN0aW9uKG5vZGUpIHtcclxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBfLm5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgICAgICAgXy5ub2RlLmNvbm5lY3QoXy5zY3JpcHQpO1xyXG4gICAgICAgICAgICAgICAgXy5nYWluLmNvbm5lY3QoXy5jb250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgICAgICBfLm5vZGUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF8ud3JpdGVJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIF8ucmVhZEluZGV4ICA9IDA7XHJcbiAgICAgICAgICAgIF8udG90YWxXcml0ZSA9IDA7XHJcbiAgICAgICAgICAgIF8udG90YWxSZWFkICA9IDA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgICQucHJvY2VzcyA9IGZ1bmN0aW9uKHRpY2tJRCkge1xyXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMuXztcclxuXHJcbiAgICAgICAgICAgIGlmIChfLm5vZGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNlbGxzaXplID0gXy5jZWxsc2l6ZTtcclxuICAgICAgICAgICAgICAgIHZhciBidWZmZXJMID0gXy5idWZmZXJMO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlclIgPSBfLmJ1ZmZlclI7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKF8udG90YWxXcml0ZSA+IF8udG90YWxSZWFkICsgY2VsbHNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYmVnaW4gPSBfLnJlYWRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kID0gYmVnaW4gKyBjZWxsc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNlbGxzWzFdLnNldChidWZmZXJMLnN1YmFycmF5KGJlZ2luLCBlbmQpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNlbGxzWzJdLnNldChidWZmZXJSLnN1YmFycmF5KGJlZ2luLCBlbmQpKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnJlYWRJbmRleCA9IGVuZCAmIF8uYnVmZmVybWFzaztcclxuICAgICAgICAgICAgICAgICAgICBfLnRvdGFsUmVhZCArPSBjZWxsc2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZuLm91dHB1dFNpZ25hbEFSKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZuLnJlZ2lzdGVyKFwiV2ViQXVkaW9BUEk6cmVjdlwiLCBXZWJBdWRpb0FQSVJlY3ZOb2RlKTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIFdlYkF1ZGlvQVBJU2VuZE5vZGUoX2FyZ3MpIHtcclxuICAgICAgICAgICAgV2ViQXVkaW9BUElOb2RlLmNhbGwodGhpcywgX2FyZ3MpO1xyXG4gICAgICAgICAgICBmbi5saXN0ZW5lcih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBfID0gdGhpcy5fO1xyXG4gICAgICAgICAgICBfLm1vZGUgPSBcInNlbmRcIjtcclxuICAgICAgICAgICAgXy5zY3JpcHQub25hdWRpb3Byb2Nlc3MgPSBtYWtlX3NlbmRfcHJvY2Vzcyh0aGlzKTtcclxuICAgICAgICAgICAgXy5jb25uZWN0SW5kZXggPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmbi5leHRlbmQoV2ViQXVkaW9BUElTZW5kTm9kZSwgV2ViQXVkaW9BUElOb2RlKTtcclxuXHJcbiAgICAgICAgdmFyIG1ha2Vfc2VuZF9wcm9jZXNzID0gZnVuY3Rpb24oc2VsZikge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF8gPSBzZWxmLl87XHJcbiAgICAgICAgICAgICAgICB2YXIgb3V0cyA9IGUub3V0cHV0QnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxlbmd0aCAgPSBvdXRzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXy50b3RhbFdyaXRlID4gXy50b3RhbFJlYWQgKyBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYmVnaW4gPSBfLnJlYWRJbmRleDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kID0gYmVnaW4gKyBsZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cy5nZXRDaGFubmVsRGF0YSgwKS5zZXQoXy5idWZmZXJMLnN1YmFycmF5KGJlZ2luLCBlbmQpKTtcclxuICAgICAgICAgICAgICAgICAgICBvdXRzLmdldENoYW5uZWxEYXRhKDEpLnNldChfLmJ1ZmZlclIuc3ViYXJyYXkoYmVnaW4sIGVuZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8ucmVhZEluZGV4ID0gZW5kICYgXy5idWZmZXJtYXNrO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udG90YWxSZWFkICs9IGxlbmd0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2YXIgJCA9IFdlYkF1ZGlvQVBJU2VuZE5vZGUucHJvdG90eXBlO1xyXG5cclxuICAgICAgICAkLmNhbmNlbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBXZWJBdWRpb0FQSU5vZGUucHJvdG90eXBlLmNhbmNlbC5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLnVubGlzdGVuKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgJC5zZW5kID0gZnVuY3Rpb24obm9kZSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBfLm5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uc2NyaXB0LmNvbm5lY3QoXy5ub2RlLCBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5jb25uZWN0SW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5zY3JpcHQuY29ubmVjdChfLm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8uY29ubmVjdEluZGV4ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuKCk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgICAgICAgICAgXy5ub2RlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfLndyaXRlSW5kZXggPSAwO1xyXG4gICAgICAgICAgICBfLnJlYWRJbmRleCAgPSAwO1xyXG4gICAgICAgICAgICBfLnRvdGFsV3JpdGUgPSAwO1xyXG4gICAgICAgICAgICBfLnRvdGFsUmVhZCAgPSAwO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAkLnByb2Nlc3MgPSBmdW5jdGlvbih0aWNrSUQpIHtcclxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLl87XHJcblxyXG4gICAgICAgICAgICBpZiAoXy5zY3JpcHQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy50aWNrSUQgIT09IHRpY2tJRCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aWNrSUQgPSB0aWNrSUQ7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNlbGxMID0gdGhpcy5jZWxsc1sxXTtcclxuICAgICAgICAgICAgICAgIHZhciBjZWxsUiA9IHRoaXMuY2VsbHNbMl07XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VsbHNpemUgPSBfLmNlbGxzaXplO1xyXG4gICAgICAgICAgICAgICAgdmFyIHdyaXRlSW5kZXggPSBfLndyaXRlSW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgZm4uaW5wdXRTaWduYWxBUih0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBfLmJ1ZmZlckwuc2V0KGNlbGxMLCB3cml0ZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIF8uYnVmZmVyUi5zZXQoY2VsbFIsIHdyaXRlSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgXy53cml0ZUluZGV4ID0gKHdyaXRlSW5kZXggKyBjZWxsc2l6ZSkgJiBfLmJ1ZmZlcm1hc2s7XHJcbiAgICAgICAgICAgICAgICBfLnRvdGFsV3JpdGUgKz0gY2VsbHNpemU7XHJcblxyXG4gICAgICAgICAgICAgICAgZm4ub3V0cHV0U2lnbmFsQVIodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZm4ucmVnaXN0ZXIoXCJXZWJBdWRpb0FQSTpzZW5kXCIsIFdlYkF1ZGlvQVBJU2VuZE5vZGUpO1xyXG4gICAgfSkoKTtcclxuXHJcbn0pKHRpbWJyZSk7XHJcbiIsIihmdW5jdGlvbihuKXt2YXIgZT1mdW5jdGlvbigpe3ZhciBpPWFyZ3VtZW50c1swXSx0PVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7KytuKXt2YXIgcj10W25dO2ZvcihrZXkgaW4gcil7dmFyIG89cltrZXldO2lba2V5XT10eXBlb2Ygbz09PVwib2JqZWN0XCI/ZSh0eXBlb2YgaVtrZXldPT09XCJvYmplY3RcIj9pW2tleV06e30sbyk6b319cmV0dXJuIGl9O3ZhciBvPXt3YXY6XCJXZWJBdWRpb1JlY29yZGVyV2F2Lm1pbi5qc1wiLG9nZzpcIldlYkF1ZGlvUmVjb3JkZXJPZ2cubWluLmpzXCIsbXAzOlwiV2ViQXVkaW9SZWNvcmRlck1wMy5taW4uanNcIn07dmFyIHQ9e3dvcmtlckRpcjpcIi9cIixudW1DaGFubmVsczoyLGVuY29kaW5nOlwid2F2XCIsb3B0aW9uczp7dGltZUxpbWl0OjMwMCxlbmNvZGVBZnRlclJlY29yZDpmYWxzZSxwcm9ncmVzc0ludGVydmFsOjFlMyxidWZmZXJTaXplOnVuZGVmaW5lZCx3YXY6e21pbWVUeXBlOlwiYXVkaW8vd2F2XCJ9LG9nZzp7bWltZVR5cGU6XCJhdWRpby9vZ2dcIixxdWFsaXR5Oi41fSxtcDM6e21pbWVUeXBlOlwiYXVkaW8vbXBlZ1wiLGJpdFJhdGU6MTYwfX19O3ZhciBpPWZ1bmN0aW9uKGksbil7ZSh0aGlzLHQsbnx8e30pO3RoaXMuY29udGV4dD1pLmNvbnRleHQ7aWYodGhpcy5jb250ZXh0LmNyZWF0ZVNjcmlwdFByb2Nlc3Nvcj09bnVsbCl0aGlzLmNvbnRleHQuY3JlYXRlU2NyaXB0UHJvY2Vzc29yPXRoaXMuY29udGV4dC5jcmVhdGVKYXZhU2NyaXB0Tm9kZTt0aGlzLmlucHV0PXRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7aS5jb25uZWN0KHRoaXMuaW5wdXQpO3RoaXMuYnVmZmVyPVtdO3RoaXMuaW5pdFdvcmtlcigpfTtlKGkucHJvdG90eXBlLHtpc1JlY29yZGluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByb2Nlc3NvciE9bnVsbH0sc2V0RW5jb2Rpbmc6ZnVuY3Rpb24oZSl7aWYodGhpcy5pc1JlY29yZGluZygpKXRoaXMuZXJyb3IoXCJzZXRFbmNvZGluZzogY2Fubm90IHNldCBlbmNvZGluZyBkdXJpbmcgcmVjb3JkaW5nXCIpO2Vsc2UgaWYodGhpcy5lbmNvZGluZyE9PWUpe3RoaXMuZW5jb2Rpbmc9ZTt0aGlzLmluaXRXb3JrZXIoKX19LHNldE9wdGlvbnM6ZnVuY3Rpb24oaSl7aWYodGhpcy5pc1JlY29yZGluZygpKXRoaXMuZXJyb3IoXCJzZXRPcHRpb25zOiBjYW5ub3Qgc2V0IG9wdGlvbnMgZHVyaW5nIHJlY29yZGluZ1wiKTtlbHNle2UodGhpcy5vcHRpb25zLGkpO3RoaXMud29ya2VyLnBvc3RNZXNzYWdlKHtjb21tYW5kOlwib3B0aW9uc1wiLG9wdGlvbnM6dGhpcy5vcHRpb25zfSl9fSxzdGFydFJlY29yZGluZzpmdW5jdGlvbigpe2lmKHRoaXMuaXNSZWNvcmRpbmcoKSl0aGlzLmVycm9yKFwic3RhcnRSZWNvcmRpbmc6IHByZXZpb3VzIHJlY29yZGluZyBpcyBydW5uaW5nXCIpO2Vsc2V7dmFyIGk9dGhpcy5udW1DaGFubmVscyxlPXRoaXMuYnVmZmVyLG49dGhpcy53b3JrZXI7dGhpcy5wcm9jZXNzb3I9dGhpcy5jb250ZXh0LmNyZWF0ZVNjcmlwdFByb2Nlc3Nvcih0aGlzLm9wdGlvbnMuYnVmZmVyU2l6ZSx0aGlzLm51bUNoYW5uZWxzLHRoaXMubnVtQ2hhbm5lbHMpO3RoaXMuaW5wdXQuY29ubmVjdCh0aGlzLnByb2Nlc3Nvcik7dGhpcy5wcm9jZXNzb3IuY29ubmVjdCh0aGlzLmNvbnRleHQuZGVzdGluYXRpb24pO3RoaXMucHJvY2Vzc29yLm9uYXVkaW9wcm9jZXNzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgbz0wO288aTsrK28pZVtvXT10LmlucHV0QnVmZmVyLmdldENoYW5uZWxEYXRhKG8pO24ucG9zdE1lc3NhZ2Uoe2NvbW1hbmQ6XCJyZWNvcmRcIixidWZmZXI6ZX0pfTt0aGlzLndvcmtlci5wb3N0TWVzc2FnZSh7Y29tbWFuZDpcInN0YXJ0XCIsYnVmZmVyU2l6ZTp0aGlzLnByb2Nlc3Nvci5idWZmZXJTaXplfSk7dGhpcy5zdGFydFRpbWU9RGF0ZS5ub3coKX19LHJlY29yZGluZ1RpbWU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pc1JlY29yZGluZygpPyhEYXRlLm5vdygpLXRoaXMuc3RhcnRUaW1lKSouMDAxOm51bGx9LGNhbmNlbFJlY29yZGluZzpmdW5jdGlvbigpe2lmKHRoaXMuaXNSZWNvcmRpbmcoKSl7dGhpcy5pbnB1dC5kaXNjb25uZWN0KCk7dGhpcy5wcm9jZXNzb3IuZGlzY29ubmVjdCgpO2RlbGV0ZSB0aGlzLnByb2Nlc3Nvcjt0aGlzLndvcmtlci5wb3N0TWVzc2FnZSh7Y29tbWFuZDpcImNhbmNlbFwifSl9ZWxzZSB0aGlzLmVycm9yKFwiY2FuY2VsUmVjb3JkaW5nOiBubyByZWNvcmRpbmcgaXMgcnVubmluZ1wiKX0sZmluaXNoUmVjb3JkaW5nOmZ1bmN0aW9uKCl7aWYodGhpcy5pc1JlY29yZGluZygpKXt0aGlzLmlucHV0LmRpc2Nvbm5lY3QoKTt0aGlzLnByb2Nlc3Nvci5kaXNjb25uZWN0KCk7ZGVsZXRlIHRoaXMucHJvY2Vzc29yO3RoaXMud29ya2VyLnBvc3RNZXNzYWdlKHtjb21tYW5kOlwiZmluaXNoXCJ9KX1lbHNlIHRoaXMuZXJyb3IoXCJmaW5pc2hSZWNvcmRpbmc6IG5vIHJlY29yZGluZyBpcyBydW5uaW5nXCIpfSxjYW5jZWxFbmNvZGluZzpmdW5jdGlvbigpe2lmKHRoaXMub3B0aW9ucy5lbmNvZGVBZnRlclJlY29yZClpZih0aGlzLmlzUmVjb3JkaW5nKCkpdGhpcy5lcnJvcihcImNhbmNlbEVuY29kaW5nOiByZWNvcmRpbmcgaXMgbm90IGZpbmlzaGVkXCIpO2Vsc2V7dGhpcy5vbkVuY29kaW5nQ2FuY2VsZWQodGhpcyk7dGhpcy5pbml0V29ya2VyKCl9ZWxzZSB0aGlzLmVycm9yKFwiY2FuY2VsRW5jb2Rpbmc6IGludmFsaWQgbWV0aG9kIGNhbGxcIil9LGluaXRXb3JrZXI6ZnVuY3Rpb24oKXtpZih0aGlzLndvcmtlciE9bnVsbCl0aGlzLndvcmtlci50ZXJtaW5hdGUoKTt0aGlzLm9uRW5jb2RlckxvYWRpbmcodGhpcyx0aGlzLmVuY29kaW5nKTt0aGlzLndvcmtlcj1uZXcgV29ya2VyKHRoaXMud29ya2VyRGlyK29bdGhpcy5lbmNvZGluZ10pO3ZhciBlPXRoaXM7dGhpcy53b3JrZXIub25tZXNzYWdlPWZ1bmN0aW9uKG4pe3ZhciBpPW4uZGF0YTtzd2l0Y2goaS5jb21tYW5kKXtjYXNlXCJsb2FkZWRcIjplLm9uRW5jb2RlckxvYWRlZChlLGUuZW5jb2RpbmcpO2JyZWFrO2Nhc2VcInRpbWVvdXRcIjplLm9uVGltZW91dChlKTticmVhaztjYXNlXCJwcm9ncmVzc1wiOmUub25FbmNvZGluZ1Byb2dyZXNzKGUsaS5wcm9ncmVzcyk7YnJlYWs7Y2FzZVwiY29tcGxldGVcIjplLm9uQ29tcGxldGUoZSxpLmJsb2IpO2JyZWFrO2Nhc2VcImVycm9yXCI6ZS5lcnJvcihpLm1lc3NhZ2UpfX07dGhpcy53b3JrZXIucG9zdE1lc3NhZ2Uoe2NvbW1hbmQ6XCJpbml0XCIsY29uZmlnOntzYW1wbGVSYXRlOnRoaXMuY29udGV4dC5zYW1wbGVSYXRlLG51bUNoYW5uZWxzOnRoaXMubnVtQ2hhbm5lbHN9LG9wdGlvbnM6dGhpcy5vcHRpb25zfSl9LGVycm9yOmZ1bmN0aW9uKGUpe3RoaXMub25FcnJvcih0aGlzLFwiV2ViQXVkaW9SZWNvcmRlci5taW4uanM6XCIrZSl9LG9uRW5jb2RlckxvYWRpbmc6ZnVuY3Rpb24oZSxpKXt9LG9uRW5jb2RlckxvYWRlZDpmdW5jdGlvbihlLGkpe30sb25UaW1lb3V0OmZ1bmN0aW9uKGUpe2UuZmluaXNoUmVjb3JkaW5nKCl9LG9uRW5jb2RpbmdQcm9ncmVzczpmdW5jdGlvbihlLGkpe30sb25FbmNvZGluZ0NhbmNlbGVkOmZ1bmN0aW9uKGUpe30sb25Db21wbGV0ZTpmdW5jdGlvbihlLGkpe2Uub25FcnJvcihlLFwiV2ViQXVkaW9SZWNvcmRlci5taW4uanM6IFlvdSBtdXN0IG92ZXJyaWRlIC5vbkNvbXBsZXRlIGV2ZW50XCIpfSxvbkVycm9yOmZ1bmN0aW9uKGksZSl7Y29uc29sZS5sb2coZSl9fSk7bi5XZWJBdWRpb1JlY29yZGVyPWl9KSh3aW5kb3cpO1xyXG4iLCIoZnVuY3Rpb24oKXtcclxuXHJcbnZhciBUeXBlQ29udmVyc29yID0gZnVuY3Rpb24odHlwZU5hbWUpIHtcclxuICB2YXIgY29udmVyc29yQXJyYXkgPSBbXTtcclxuXHJcbiAgdGhpcy5hZGQgPSBmdW5jdGlvbihjb252ZXJzb3Ipe1xyXG4gICAgY29udmVyc29yQXJyYXkucHVzaChjb252ZXJzb3IpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuY2FzdCA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgZm9yICh2YXIgaT0wOyBpPGNvbnZlcnNvckFycmF5Lmxlbmd0aDtpKyspIHtcclxuICAgICAgdmFyIGNvbnZlcnNvciA9IGNvbnZlcnNvckFycmF5W2ldO1xyXG4gICAgICB2YXIgY29udmVydGVkID0gY29udmVyc29yKG9iaik7XHJcblxyXG4gICAgICBpZiAoY29udmVydGVkKSByZXR1cm4gY29udmVydGVkO1xyXG4gICAgfVxyXG5cclxuICAgIHRocm93IFwiQ2FuJ3QgY29udmVydCBcIiArIG9iaiArIFwiIHRvIFwiICsgdHlwZU5hbWU7XHJcbiAgfTtcclxufTtcclxuXHJcbnZhciBUeXBlQ2FzdCA9IGZ1bmN0aW9uKCl7XHJcbiAgdmFyIHR5cGVDb252ZXJzb3JzID0ge307XHJcblxyXG4gIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbih0eXBlTmFtZSwgY29udmVyc29yKXtcclxuICAgIHZhciB0eXBlQ29udmVyc29yO1xyXG4gICAgaWYgKCF0eXBlQ29udmVyc29yc1t0eXBlTmFtZV0pIHtcclxuICAgICAgdHlwZUNvbnZlcnNvcnNbdHlwZU5hbWVdID0gbmV3IFR5cGVDb252ZXJzb3IodHlwZU5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHR5cGVDb252ZXJzb3IgPSB0eXBlQ29udmVyc29yc1t0eXBlTmFtZV07XHJcbiAgICB0eXBlQ29udmVyc29yLmFkZChjb252ZXJzb3IpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuY2FzdCA9IGZ1bmN0aW9uKHR5cGVOYW1lLCBvYmopIHtcclxuICAgIHZhciB0eXBlQ29udmVyc29yID0gdHlwZUNvbnZlcnNvcnNbdHlwZU5hbWVdO1xyXG4gICAgaWYgKCF0eXBlQ29udmVyc29yKSB0aHJvdyBcInVua293biB0eXBlIFwiICsgdHlwZU5hbWU7XHJcblxyXG4gICAgcmV0dXJuIHR5cGVDb252ZXJzb3IuY2FzdChvYmopO1xyXG4gIH07XHJcbn07XHJcblxyXG53aW5kb3cuTVVTSUMgPSB3aW5kb3cuTVVTSUMgfHwge307XHJcbndpbmRvdy5NVVNJQy5UeXBlcyA9IG5ldyBUeXBlQ2FzdCgpO1xyXG5cclxufSkoKTsiLCJ3aW5kb3cuTVVTSUMgPSB3aW5kb3cuTVVTSUMgfHwge307XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcbk1VU0lDLlNvdW5kTGliID0gTVVTSUMuU291bmRMaWIgfHwge307XHJcbk1VU0lDLkVmZmVjdHMgPSBNVVNJQy5FZmZlY3RzIHx8IHt9O1xyXG5cclxuTVVTSUMucGxheWFibGVQaXBlRXh0ZW5kID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgb2JqLmR1cmluZyA9IGZ1bmN0aW9uKGR1cmF0aW9uKSB7XHJcbiAgICB2YXIgb3JpZ2luYWwgPSB0aGlzO1xyXG4gICAgcmV0dXJuIE1VU0lDLnBsYXlhYmxlUGlwZUV4dGVuZCh7XHJcbiAgICAgIHBsYXk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzdG9wcGVkID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIHBsYXlhYmxlID0gb3JpZ2luYWwucGxheSgpO1xyXG4gICAgICAgIHZhciB3cmFwcGVyID0ge1xyXG4gICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghc3RvcHBlZCkgcGxheWFibGUuc3RvcCgpO1xyXG4gICAgICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHNldFRpbWVvdXQod3JhcHBlci5zdG9wLCBkdXJhdGlvbik7XHJcbiAgICAgICAgcmV0dXJuIHdyYXBwZXI7XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBkdXJhdGlvbjogZnVuY3Rpb24oKSB7IHJldHVybiBkdXJhdGlvbjsgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgb2JqLnN0b3BEZWxheSA9IGZ1bmN0aW9uKGRlbGF5KSB7XHJcbiAgICB2YXIgb3JpZ2luYWwgPSB0aGlzO1xyXG4gICAgcmV0dXJuIE1VU0lDLnBsYXlhYmxlUGlwZUV4dGVuZChcclxuICAgICAge1xyXG4gICAgICAgIHBsYXk6IGZ1bmN0aW9uKHBhcmFtKSB7XHJcbiAgICAgICAgICB2YXIgcGxheWluZyA9IG9yaWdpbmFsLnBsYXkocGFyYW0pO1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgc2V0VGltZW91dChwbGF5aW5nLnN0b3AuYmluZChwbGF5aW5nKSwgZGVsYXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICBvYmoub25FcnJvciA9IGZ1bmN0aW9uKGZjbikge1xyXG4gICAgdmFyIG9yaWdpbmFsID0gdGhpcztcclxuICAgIHJldHVybiBNVVNJQy5wbGF5YWJsZVBpcGVFeHRlbmQoXHJcbiAgICAgIHtcclxuICAgICAgICBwbGF5OiBmdW5jdGlvbihwYXJhbSkge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIHBsYXlpbmcgPSBvcmlnaW5hbC5wbGF5KHBhcmFtKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgIHBsYXlpbmcuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgIGZjbihlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9IGNhdGNoKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgZmNuKGUpO1xyXG4gICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICBvYmoub25TdG9wID0gZnVuY3Rpb24oZmNuKSB7XHJcbiAgICB2YXIgb3JpZ2luYWwgPSB0aGlzO1xyXG4gICAgcmV0dXJuIE1VU0lDLnBsYXlhYmxlUGlwZUV4dGVuZChcclxuICAgICAge1xyXG4gICAgICAgIHBsYXk6IGZ1bmN0aW9uKHBhcmFtKSB7XHJcbiAgICAgICAgICB2YXIgcGxheWluZyA9IG9yaWdpbmFsLnBsYXkocGFyYW0pO1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgcGxheWluZy5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgZmNuKHBhcmFtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxuXHJcbk1VU0lDLlR5cGVzLnJlZ2lzdGVyKFwicGxheWFibGVcIiwgZnVuY3Rpb24ocGxheWFibGUpIHtcclxuICBpZiAocGxheWFibGUucGxheSkge1xyXG4gICAgcmV0dXJuIHBsYXlhYmxlO1xyXG4gIH1cclxufSk7XHJcblxyXG5NVVNJQy5UeXBlcy5yZWdpc3RlcihcInBsYXlhYmxlXCIsIGZ1bmN0aW9uKGZjbikge1xyXG4gIGlmICh0eXBlb2YgZmNuID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHBsYXk6IGZjblxyXG4gICAgfTtcclxuICB9XHJcbn0pO1xyXG5cclxuTVVTSUMuRWZmZWN0c1BpcGVsaW5lID0gZnVuY3Rpb24oYXVkaW8sIGF1ZGlvRGVzdGluYXRpb24pIHtcclxuICB0aGlzLl9hdWRpbyA9IGF1ZGlvO1xyXG4gIHRoaXMuX2F1ZGlvRGVzdGluYXRpb24gPSBhdWRpb0Rlc3RpbmF0aW9uO1xyXG59O1xyXG5cclxudmFyIGRlZmF1bHRXcmFwRmNuID0gZnVuY3Rpb24ob2JqKXtcclxuICByZXR1cm4gb2JqO1xyXG59O1xyXG52YXIgY29tcG9zZSA9IGZ1bmN0aW9uKGYsZykge1xyXG4gIHJldHVybiBmdW5jdGlvbihvYmopIHtcclxuICAgIHJldHVybiBnKGYob2JqKSk7XHJcbiAgfTtcclxufTtcclxuXHJcbk1VU0lDLkVmZmVjdHNQaXBlbGluZS5wcm90b3R5cGUgPSB7XHJcblxyXG4gIF93cmFwRmNuOiBkZWZhdWx0V3JhcEZjbixcclxuXHJcbiAgd3JhcDogZnVuY3Rpb24oZikge1xyXG4gICAgdmFyIHJldCA9IG5ldyBNVVNJQy5EdW1teU5vZGUodGhpcylcclxuICAgIGlmICh0aGlzLl93cmFwRmNuICE9PSBkZWZhdWx0V3JhcEZjbikge1xyXG4gICAgICBmID0gY29tcG9zZShmLCB0aGlzLl93cmFwRmNuKTtcclxuICAgIH1cclxuICAgIHJldC5fd3JhcEZjbiA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICB2YXIgcmV0MiA9IGYob2JqKTtcclxuICAgICAgcmV0Mi5fd3JhcEZjbiA9IHJldC5fd3JhcEZjbjtcclxuICAgICAgcmV0dXJuIHJldDI7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHJldDtcclxuICB9LFxyXG5cclxuICBzZnhCYXNlOiBmdW5jdGlvbigpIHtcclxuICAgIHZhciBvYmplY3RzID0gW107XHJcbiAgICB2YXIgZGlzcG9zZSA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICBvYmouZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgc2Z4QmFzZVdyYXBwZXIgPSBmdW5jdGlvbihlbGVtKSB7XHJcbiAgICAgIGlmICghZWxlbS5kaXNwb3NlKSByZXR1cm4gZWxlbTtcclxuICAgICAgXHJcbiAgICAgIHZhciByZW1vdmVFbGVtID0gZnVuY3Rpb24oeCkge1xyXG4gICAgICAgIHJldHVybiB4ICE9IGVsZW07XHJcbiAgICAgIH07XHJcbiAgICAgIHZhciBvcmlnaW5hbERpc3Bvc2UgPSBlbGVtLmRpc3Bvc2U7XHJcbiAgICAgIG9iamVjdHMucHVzaChlbGVtKTtcclxuICAgICAgZWxlbS5kaXNwb3NlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgb2JqZWN0cyA9IG9iamVjdHMuZmlsdGVyKHJlbW92ZUVsZW0pO1xyXG4gICAgICAgIG9yaWdpbmFsRGlzcG9zZS5jYWxsKGVsZW0pO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIGVsZW07XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBzZnhQcnVuZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBvYmplY3RzLmZvckVhY2goZGlzcG9zZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciByZXQgPSB0aGlzLndyYXAoc2Z4QmFzZVdyYXBwZXIpO1xyXG4gICAgdmFyIG9yaWdpbmFsID0gdGhpcztcclxuICAgIHJldC5nZXRPcmlnaW5hbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAob3JpZ2luYWwuZ2V0T3JpZ2luYWwpIHJldHVybiBvcmlnaW5hbC5nZXRPcmlnaW5hbCgpO1xyXG4gICAgICByZXR1cm4gb3JpZ2luYWw7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldC5wcnVuZSA9IHNmeFBydW5lO1xyXG4gICAgcmV0dXJuIHJldDtcclxuICB9LFxyXG5cclxuICBjb25zdGFudDogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dyYXBGY24obmV3IE1VU0lDLlNvdW5kTGliLkNvbnN0YW50KHRoaXMuX2F1ZGlvLCB0aGlzLl9hdWRpb0Rlc3RpbmF0aW9uLCBvcHRpb25zKSk7XHJcbiAgfSxcclxuXHJcbiAgb3NjaWxsYXRvcjogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dyYXBGY24obmV3IE1VU0lDLlNvdW5kTGliLk9zY2lsbGF0b3IodGhpcy5fYXVkaW8sIHRoaXMuX2F1ZGlvRGVzdGluYXRpb24sIG9wdGlvbnMpKTtcclxuICB9LFxyXG5cclxuICBzb3VuZGZvbnQ6IGZ1bmN0aW9uKHBhcmFtKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fd3JhcEZjbihuZXcgTVVTSUMuU291bmRmb250SW5zdHJ1bWVudChwYXJhbSwgdGhpcy5fYXVkaW8sIHRoaXMuX2F1ZGlvRGVzdGluYXRpb24pKTtcclxuICB9LFxyXG5cclxuICBzb3VuZDogZnVuY3Rpb24ocGF0aCkge1xyXG4gICAgdmFyIGF1ZGlvID0gdGhpcy5fYXVkaW87XHJcbiAgICB2YXIgYXVkaW9EZXN0aW5hdGlvbiA9IHRoaXMuX2F1ZGlvRGVzdGluYXRpb247XHJcblxyXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgIHJlcXVlc3Qub3BlbihcIkdFVFwiLCBwYXRoLCB0cnVlKTtcclxuICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG4gICAgdmFyIGF1ZGlvQnVmZmVyO1xyXG5cclxuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKGVycikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9O1xyXG5cclxuICAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICBhdWRpby5hdWRpby5kZWNvZGVBdWRpb0RhdGEocmVxdWVzdC5yZXNwb25zZSwgZnVuY3Rpb24gKGJ1ZmZlcikge1xyXG4gICAgICAgIGF1ZGlvQnVmZmVyID0gYnVmZmVyO1xyXG4gICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgcmVxdWVzdC5zZW5kKCk7XHJcbiAgICByZXR1cm4gTVVTSUMucGxheWFibGVQaXBlRXh0ZW5kKHtcclxuICAgICAgcGxheTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIGJ1ZmZlclNvdXJjZSA9IGF1ZGlvLmF1ZGlvLmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xyXG4gICAgICAgIGJ1ZmZlclNvdXJjZS5idWZmZXIgPSBhdWRpb0J1ZmZlcjtcclxuICAgICAgICBidWZmZXJTb3VyY2UuY29ubmVjdChhdWRpb0Rlc3RpbmF0aW9uLl9kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgYnVmZmVyU291cmNlLnN0YXJ0KGF1ZGlvLmF1ZGlvLmN1cnJlbnRUaW1lKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBidWZmZXJTb3VyY2Uuc3RvcCgpO1xyXG4gICAgICAgICAgICBidWZmZXJTb3VyY2UuZGlzY29ubmVjdChhdWRpb0Rlc3RpbmF0aW9uLl9kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSxcclxuICBcclxuICBmb3JtdWxhR2VuZXJhdG9yOiBmdW5jdGlvbihmY24pIHtcclxuICAgIHJldHVybiB0aGlzLl93cmFwRmNuKG5ldyBNVVNJQy5Tb3VuZExpYi5Gb3JtdWxhR2VuZXJhdG9yKHRoaXMuX2F1ZGlvLCB0aGlzLl9hdWRpb0Rlc3RpbmF0aW9uLCBmY24pKTtcclxuICB9LFxyXG5cclxuICBzaWduYWxfYW5kOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2Fpbih2YWx1ZXx8MSk7XHJcbiAgfSxcclxuXHJcbiAgc2lnbmFsX25hbmQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaWduYWxfbm90KCkuc2lnbmFsX2FuZCh2YWx1ZXx8MSk7XHJcbiAgfSxcclxuXHJcbiAgc2lnbmFsX29yOiBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuc2lnbmFsX25vdCgpLnNpZ25hbF9ub3IodmFsdWV8fDApO1xyXG4gIH0sXHJcblxyXG4gIHNpZ25hbF9ub3I6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICB2YXIgbmVnYXRlTW9kbCA9IGZ1bmN0aW9uKG1vZGwpIHtcclxuICAgICAgaWYgKCFtb2RsLmFwcGx5KSByZXR1cm4gbW9kbDtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uKGN1cnJlbnRUaW1lLCBhdWRpb1BhcmFtLCBtdXNpYykge1xyXG4gICAgICAgICAgcmV0dXJuIG1vZGwuYXBwbHkoY3VycmVudFRpbWUsIGF1ZGlvUGFyYW0sIG11c2ljLCBmdW5jdGlvbihtb2R1bGF0b3JGYWN0b3J5LCBmKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmKG1vZHVsYXRvckZhY3Rvcnkuc2lnbmFsX25vdCgpKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGFuZE5vZGUgPSB0aGlzLnNpZ25hbF9hbmQoMSk7XHJcbiAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgYW5kTm9kZS51cGRhdGUobmVnYXRlTW9kbCh2YWx1ZSkpO1xyXG4gICAgfTtcclxuICAgIHVwZGF0ZSh2YWx1ZSk7XHJcblxyXG4gICAgdmFyIHJldCA9IGFuZE5vZGUuc2lnbmFsX25vdCgpO1xyXG4gICAgcmV0LnVwZGF0ZSA9IHVwZGF0ZTtcclxuICAgIHJldHVybiByZXQ7XHJcbiAgfSxcclxuXHJcbiAgc2lnbmFsX25vdDogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zaWduYWxfc2NhbGUoe3RvcDogMCwgYmFzZTogMn0pO1xyXG4gIH0sXHJcblxyXG4gIHNpZ25hbF9zY2FsZTogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgdmFyIGdhaW4gPSB0aGlzLmdhaW4oMS4wKTtcclxuICAgIHZhciBjMSA9IHRoaXMuY29uc3RhbnQoMC4wKTtcclxuXHJcbiAgICB2YXIgZ2FpblVwZGF0ZSA9IGdhaW4udXBkYXRlLmJpbmQoZ2Fpbik7XHJcbiAgICB2YXIgZ2FpbkRpc3Bvc2UgPSBnYWluLmRpc3Bvc2UuYmluZChnYWluKTtcclxuICAgIHZhciBjb25zdGFudFVwZGF0ZSA9IGMxLnVwZGF0ZS5iaW5kKGMxKTtcclxuICAgIHZhciBjb25zdGFudERpc3Bvc2UgPSBjMS5kaXNwb3NlLmJpbmQoYzEpO1xyXG5cclxuICAgIHZhciBkaXNwb3NlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGdhaW5EaXNwb3NlKCk7XHJcbiAgICAgIGNvbnN0YW50RGlzcG9zZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgdXBkYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICB2YXIgYSwgYjtcclxuICAgICAgYSA9IChvcHRpb25zLnRvcCAtIG9wdGlvbnMuYmFzZSkvMjtcclxuICAgICAgYiA9IG9wdGlvbnMuYmFzZSArIGE7XHJcblxyXG4gICAgICBnYWluVXBkYXRlKGEpO1xyXG4gICAgICBjb25zdGFudFVwZGF0ZShiKTtcclxuICAgIH07XHJcblxyXG4gICAgdXBkYXRlKG9wdGlvbnMpO1xyXG4gICAgZ2Fpbi51cGRhdGUgPSB1cGRhdGU7XHJcbiAgICBnYWluLmRpc3Bvc2UgPSBkaXNwb3NlO1xyXG5cclxuICAgIHJldHVybiBnYWluO1xyXG4gIH0sXHJcblxyXG5cclxuICBUOiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLl93cmFwRmNuKG5ldyBNVVNJQy5UKGFyZ3VtZW50cywgdGhpcy5fYXVkaW8sIHRoaXMuX2F1ZGlvRGVzdGluYXRpb24pKTtcclxuICB9LFxyXG5cclxuICBub2lzZTogZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fd3JhcEZjbihuZXcgTVVTSUMuU291bmRMaWIuTm9pc2UodGhpcy5fYXVkaW8sIHRoaXMuX2F1ZGlvRGVzdGluYXRpb24pKTtcclxuICB9LFxyXG5cclxuICBwaW5rX25vaXNlOiBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLl93cmFwRmNuKG5ldyBNVVNJQy5Tb3VuZExpYi5QaW5rTm9pc2UodGhpcy5fYXVkaW8sIHRoaXMuX2F1ZGlvRGVzdGluYXRpb24pKTtcclxuICB9LFxyXG5cclxuICByZWRfbm9pc2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dyYXBGY24obmV3IE1VU0lDLlNvdW5kTGliLlJlZE5vaXNlKHRoaXMuX2F1ZGlvLCB0aGlzLl9hdWRpb0Rlc3RpbmF0aW9uKSk7XHJcbiAgfVxyXG59O1xyXG5cclxuTVVTSUMuRHVtbXlOb2RlID0gZnVuY3Rpb24obXVzaWMpIHtcclxuICBNVVNJQy5FZmZlY3RzUGlwZWxpbmUuYXBwbHkodGhpcywgW211c2ljLl9hdWRpbywgbXVzaWMuX2F1ZGlvRGVzdGluYXRpb25dKTtcclxufTtcclxuTVVTSUMuRHVtbXlOb2RlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTVVTSUMuRWZmZWN0c1BpcGVsaW5lLnByb3RvdHlwZSk7XHJcblxyXG5NVVNJQy5UID0gZnVuY3Rpb24oYXJncywgbXVzaWMsIGF1ZGlvRGVzdGluYXRpb24pIHtcclxuICB2YXIgYXBpID0gVChcIldlYkF1ZGlvQVBJOnJlY3ZcIiwgbXVzaWMuYXVkaW8gLyogYXVkaW9Db250ZXh0ICovKTtcclxuICB2YXIgY29udGV4dCA9IGFwaS5jb250ZXh0O1xyXG4gIHZhciBnYWluTm9kZSA9IGNvbnRleHQuY3JlYXRlR2FpbigxLjApO1xyXG5cclxuICBhcGkucmVjdihnYWluTm9kZSk7XHJcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgLy8gdGhpcyBoYWNrIHByZXZlbnRzIGEgYnVnIGluIGN1cnJlbnQgdmVyc2lvbiBvZiBjaHJvbWVcclxuICAgIGdhaW5Ob2RlLmNvbm5lY3QoYXVkaW9EZXN0aW5hdGlvbi5fZGVzdGluYXRpb24pO1xyXG4gIH0pO1xyXG5cclxuICB2YXIgVGFyZ3VtZW50cyA9IFtdO1xyXG4gIGZvciAodmFyIGk9MDsgaTxhcmdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBUYXJndW1lbnRzLnB1c2goYXJnc1tpXSk7XHJcbiAgfTtcclxuXHJcbiAgVGFyZ3VtZW50cy5wdXNoKGFwaSk7XHJcbiAgdmFyIHN5bnRoID0gVC5hcHBseShudWxsLCBUYXJndW1lbnRzKTsvLyAoXCJyZXZlcmJcIiwge3Jvb206MC45NSwgZGFtcDowLjEsIG1peDowLjc1fSwgYXBpKTtcclxuICB2YXIgc2VuZCA9IFQoXCJXZWJBdWRpb0FQSTpzZW5kXCIsIHN5bnRoLCBtdXNpYy5hdWRpbyAvKiBhdWRpb0NvbnRleHQgKi8pLnNlbmQoYXVkaW9EZXN0aW5hdGlvbi5fZGVzdGluYXRpb24pO1xyXG5cclxuICB0aGlzLm91dHB1dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGdhaW5Ob2RlO1xyXG4gIH07IFxyXG5cclxuICB2YXIgZGlzY29ubmVjdGVkID0gZmFsc2U7XHJcbiAgdGhpcy5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoZGlzY29ubmVjdGVkKSByZXR1cm47XHJcbiAgICBkaXNjb25uZWN0ZWQgPSB0cnVlO1xyXG5cclxuICAgIGdhaW5Ob2RlLmRpc2Nvbm5lY3QoYXVkaW9EZXN0aW5hdGlvbi5fZGVzdGluYXRpb24pO1xyXG4gICAgc2VuZC5yZW1vdmVBbGwoKTtcclxuICAgIGFwaS5jYW5jZWwoKTtcclxuICAgIHNlbmQuY2FuY2VsKCk7XHJcbiAgICBzeW50aC51bmxpc3RlbigpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuZGlzcG9zZSA9IHRoaXMuZGlzY29ubmVjdDtcclxuXHJcbiAgdGhpcy5fZGVzdGluYXRpb24gPSBnYWluTm9kZTtcclxuICB0aGlzLm5leHQgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBhdWRpb0Rlc3RpbmF0aW9uO1xyXG4gIH07XHJcblxyXG4gIE1VU0lDLkVmZmVjdHNQaXBlbGluZS5iaW5kKHRoaXMpKG11c2ljLCB0aGlzKTtcclxufTtcclxuTVVTSUMuVC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1VU0lDLkVmZmVjdHNQaXBlbGluZS5wcm90b3R5cGUpO1xyXG5cclxuTVVTSUMuRWZmZWN0cy5yZWdpc3RlciA9IGZ1bmN0aW9uKGVmZmVjdE5hbWUsIGZjbikge1xyXG4gIE1VU0lDLkVmZmVjdHNQaXBlbGluZS5wcm90b3R5cGVbZWZmZWN0TmFtZV0gPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3dyYXBGY24oZmNuKHRoaXMuX2F1ZGlvLCB0aGlzLl9hdWRpb0Rlc3RpbmF0aW9uLCB2YWx1ZSkpO1xyXG4gIH07XHJcbn07XHJcblxyXG52YXIgYXVkaW9Db250ZXh0ID0gbmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQpKCk7XHJcblxyXG5NVVNJQy5Db250ZXh0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gIHZhciBhdWRpbyA9IGF1ZGlvQ29udGV4dDtcclxuICB2YXIgbXVzaWMgPSB0aGlzO1xyXG4gIHZhciBnYWluTm9kZSA9IGF1ZGlvLmNyZWF0ZUdhaW4oKTtcclxuXHJcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IDEuMDsgXHJcbiAgaWYgKCFvcHRpb25zLm5vb3V0cHV0KSBnYWluTm9kZS5jb25uZWN0KGF1ZGlvLmRlc3RpbmF0aW9uKTtcclxuXHJcbiAgbXVzaWMuYXVkaW8gPSBhdWRpbztcclxuICBtdXNpYy5fZGVzdGluYXRpb24gPSBnYWluTm9kZTtcclxuXHJcbiAgdGhpcy5yZXN1bWUgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmIChhdWRpb0NvbnRleHQuc3RhdGUgIT09ICdydW5uaW5nJykge1xyXG4gICAgICBhdWRpb0NvbnRleHQucmVzdW1lKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5yZWNvcmQgPSBmdW5jdGlvbihvcHRpb25zLCBjYWxsYmFjaykge1xyXG4gICAgdmFyIHJlY29yZGVyID0gbmV3IFdlYkF1ZGlvUmVjb3JkZXIoZ2Fpbk5vZGUsIHtcclxuICAgICAgd29ya2VyRGlyOiBcInNyYy9saWIvcmVjb3JkZXIvd29ya2VyL1wiLFxyXG4gICAgICBlbmNvZGluZzogb3B0aW9ucy5lbmNvZGluZyxcclxuICAgICAgbnVtQ2hhbm5lbHM6IG9wdGlvbnMubnVtQ2hhbm5lbHNcclxuICAgIH0pO1xyXG4gICAgcmVjb3JkZXIub25Db21wbGV0ZSA9IGZ1bmN0aW9uKHJlY29yZGVyLCBibG9iKSB7XHJcbiAgICAgIGNhbGxiYWNrKGJsb2IpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZWNvcmRlci5zdGFydFJlY29yZGluZygpO1xyXG4gICAgLy9yZWNvcmRlci5yZWNvcmQoKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJlY29yZGVyLmZpbmlzaFJlY29yZGluZygpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHRoaXMuYXVkaW8gPSBhdWRpbztcclxuXHJcbiAgTVVTSUMuRWZmZWN0c1BpcGVsaW5lLmJpbmQodGhpcykobXVzaWMsIHRoaXMpO1xyXG59O1xyXG5cclxuTVVTSUMuQ29udGV4dC5wcm90b3R5cGUgPSBuZXcgTVVTSUMuRWZmZWN0c1BpcGVsaW5lKCk7XHJcblxyXG5NVVNJQy5Tb3VuZExpYi5Gb3JtdWxhR2VuZXJhdG9yID0gZnVuY3Rpb24oYXVkaW8sIG5leHRQcm92aWRlciwgZmNuKSB7XHJcbiAgdGhpcy5wbGF5ID0gZnVuY3Rpb24ocGFyYW0pIHtcclxuICAgIHZhciBhdWRpb0Rlc3RpbmF0aW9uO1xyXG4gICAgdmFyIGZvcm11bGFHZW5lcmF0b3IgPSBuZXcgTVVTSUMuRWZmZWN0cy5Gb3JtdWxhKGF1ZGlvLCBuZXh0UHJvdmlkZXIsIGZ1bmN0aW9uKGlucHV0LCB0KSB7XHJcbiAgICAgIHJldHVybiBmY24odCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICBmb3JtdWxhR2VuZXJhdG9yLmRpc2Nvbm5lY3QobmV4dFByb3ZpZGVyLl9kZXN0aW5hdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBNVVNJQy5wbGF5YWJsZVBpcGVFeHRlbmQodGhpcyk7XHJcbn07XHJcblxyXG5NVVNJQy5Tb3VuZExpYi5QaW5rTm9pc2UgPSBmdW5jdGlvbihhdWRpbywgbmV4dFByb3ZpZGVyKSB7XHJcbiAgdGhpcy5wbGF5ID0gZnVuY3Rpb24ocGFyYW0pIHtcclxuICAgIHZhciBhdWRpb0Rlc3RpbmF0aW9uO1xyXG4gICAgdmFyIGIwLCBiMSwgYjIsIGIzLCBiNCwgYjUsIGI2O1xyXG4gICAgYjAgPSBiMSA9IGIyID0gYjMgPSBiNCA9IGI1ID0gYjYgPSAwLjA7XHJcblxyXG4gICAgdmFyIG5vaXNlR2VuZXJhdG9yID0gbmV3IE1VU0lDLkVmZmVjdHMuRm9ybXVsYShhdWRpbywgbmV4dFByb3ZpZGVyLCBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHdoaXRlID0gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xyXG4gICAgICBiMCA9IDAuOTk4ODYgKiBiMCArIHdoaXRlICogMC4wNTU1MTc5O1xyXG4gICAgICBiMSA9IDAuOTkzMzIgKiBiMSArIHdoaXRlICogMC4wNzUwNzU5O1xyXG4gICAgICBiMiA9IDAuOTY5MDAgKiBiMiArIHdoaXRlICogMC4xNTM4NTIwO1xyXG4gICAgICBiMyA9IDAuODY2NTAgKiBiMyArIHdoaXRlICogMC4zMTA0ODU2O1xyXG4gICAgICBiNCA9IDAuNTUwMDAgKiBiNCArIHdoaXRlICogMC41MzI5NTIyO1xyXG4gICAgICBiNSA9IC0wLjc2MTYgKiBiNSAtIHdoaXRlICogMC4wMTY4OTgwO1xyXG4gICAgICB2YXIgcmV0ID0gYjAgKyBiMSArIGIyICsgYjMgKyBiNCArIGI1ICsgYjYgKyB3aGl0ZSAqIDAuNTM2MjtcclxuICAgICAgYjYgPSB3aGl0ZSAqIDAuMTE1OTI2O1xyXG4gICAgICByZXR1cm4gcmV0ICogMC4xMTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIG5vaXNlR2VuZXJhdG9yLmRpc2Nvbm5lY3QobmV4dFByb3ZpZGVyLl9kZXN0aW5hdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLnNldFZhbHVlID0gZnVuY3Rpb24oKSB7XHJcbiAgfTtcclxuXHJcbiAgTVVTSUMucGxheWFibGVQaXBlRXh0ZW5kKHRoaXMpO1xyXG59O1xyXG5cclxuTVVTSUMuU291bmRMaWIuUmVkTm9pc2UgPSBmdW5jdGlvbihhdWRpbywgbmV4dFByb3ZpZGVyKSB7XHJcbiAgdGhpcy5wbGF5ID0gZnVuY3Rpb24ocGFyYW0pIHtcclxuICAgIHZhciBhdWRpb0Rlc3RpbmF0aW9uO1xyXG4gICAgdmFyIGxhc3RPdXQgPSAwLjA7XHJcblxyXG4gICAgdmFyIG5vaXNlR2VuZXJhdG9yID0gbmV3IE1VU0lDLkVmZmVjdHMuRm9ybXVsYShhdWRpbywgbmV4dFByb3ZpZGVyLCBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHdoaXRlID0gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xyXG4gICAgICB2YXIgcmV0ID0gKGxhc3RPdXQgKyAoMC4wMiAqIHdoaXRlKSkgLyAxLjAyO1xyXG4gICAgICBsYXN0T3V0ID0gcmV0O1xyXG4gICAgICByZXR1cm4gcmV0ICogMy41O1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgbm9pc2VHZW5lcmF0b3IuZGlzY29ubmVjdChuZXh0UHJvdmlkZXIuX2Rlc3RpbmF0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMuc2V0VmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICB9O1xyXG5cclxuICBNVVNJQy5wbGF5YWJsZVBpcGVFeHRlbmQodGhpcyk7XHJcbn07XHJcblxyXG5NVVNJQy5Tb3VuZExpYi5Ob2lzZSA9IGZ1bmN0aW9uKGF1ZGlvLCBuZXh0UHJvdmlkZXIpIHtcclxuICB2YXIgYXVkaW9Db250ZXh0ID0gYXVkaW8uYXVkaW87XHJcblxyXG4gIHZhciBidWZmZXJTaXplID0gMiAqIGF1ZGlvQ29udGV4dC5zYW1wbGVSYXRlLFxyXG4gICAgICBub2lzZUJ1ZmZlciA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXIoMSwgYnVmZmVyU2l6ZSwgYXVkaW9Db250ZXh0LnNhbXBsZVJhdGUpLFxyXG4gICAgICBvdXRwdXQgPSBub2lzZUJ1ZmZlci5nZXRDaGFubmVsRGF0YSgwKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlclNpemU7IGkrKykge1xyXG4gICAgICBvdXRwdXRbaV0gPSBNYXRoLnJhbmRvbSgpICogMiAtIDE7XHJcbiAgfVxyXG5cclxuICB0aGlzLnBsYXkgPSBmdW5jdGlvbihwYXJhbSkge1xyXG4gICAgdmFyIHdoaXRlTm9pc2UgPSBhdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICB3aGl0ZU5vaXNlLmJ1ZmZlciA9IG5vaXNlQnVmZmVyO1xyXG4gICAgd2hpdGVOb2lzZS5sb29wID0gdHJ1ZTtcclxuICAgIHdoaXRlTm9pc2Uuc3RhcnQoMCk7XHJcblxyXG4gICAgd2hpdGVOb2lzZS5jb25uZWN0KG5leHRQcm92aWRlci5fZGVzdGluYXRpb24pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHdoaXRlTm9pc2Uuc3RvcCgpO1xyXG4gICAgICAgIHdoaXRlTm9pc2UuZGlzY29ubmVjdChuZXh0UHJvdmlkZXIuX2Rlc3RpbmF0aW9uKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHRoaXMuc2V0VmFsdWUgPSBmdW5jdGlvbigpIHtcclxuICB9O1xyXG5cclxuICBNVVNJQy5wbGF5YWJsZVBpcGVFeHRlbmQodGhpcyk7XHJcbn07XHJcblxyXG5NVVNJQy5Tb3VuZExpYi5XYXZlID0gZnVuY3Rpb24ocGF0aCwgcGVyaW9kKSB7XHJcblxyXG4gIHZhciBtdXNpYyA9IG5ldyBNVVNJQy5Db250ZXh0KHtub291dHB1dDogdHJ1ZX0pO1xyXG4gIHZhciBzb3VuZCA9IG11c2ljLnNvdW5kKHBhdGgpO1xyXG4gIHZhciBzYW1wbGVDb3VudCA9IE1hdGguZmxvb3IocGVyaW9kICogbXVzaWMuYXVkaW8uc2FtcGxlUmF0ZSAvIDEwMDApO1xyXG4gIHZhciBkYXRhQXJyYXkgPSBbXTtcclxuXHJcbiAgLy8gZml4IHJhY2UgY29uZGl0aW9uIHVzaW5nIGNhbGxiYWNrc1xyXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgcmVjb3JkaW5nID0gbXVzaWMucmVjb3JkKCk7XHJcbiAgICBzb3VuZC5wbGF5KCk7XHJcblxyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICByZWNvcmRpbmcuc3RvcCgpO1xyXG4gICAgICByZWNvcmRpbmcuZ2V0QnVmZmVyKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICB2YXIgb3JpZ2luYWxEYXRhQXJyYXkgPSBkYXRhWzBdO1xyXG4gICAgICAgIGZvciAodmFyIGk9MDsgaTxzYW1wbGVDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICBkYXRhQXJyYXkucHVzaChvcmlnaW5hbERhdGFBcnJheVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0sIHBlcmlvZCsxMDApO1xyXG4gIH0sIDUwMCk7XHJcblxyXG4gIHRoaXMuZiA9IGZ1bmN0aW9uKHQpIHtcclxuICAgIGlmICh0PDApcmV0dXJuIDA7XHJcbiAgICB2YXIgdmFsdWUxID0gZGF0YUFycmF5W01hdGguZmxvb3IodCpzYW1wbGVDb3VudCldO1xyXG4gICAgcmV0dXJuIHZhbHVlMTtcclxuICB9OyAgXHJcbn07XHJcblxyXG5NVVNJQy5BdWRpb0Rlc3RpbmF0aW9uV3JhcHBlciA9IGZ1bmN0aW9uKG11c2ljLCBhdWRpb0Rlc3RpbmF0aW9uKSB7XHJcbiAgICB0aGlzLl9kZXN0aW5hdGlvbiA9IGF1ZGlvRGVzdGluYXRpb247XHJcbiAgICBNVVNJQy5FZmZlY3RzUGlwZWxpbmUuYmluZCh0aGlzKShtdXNpYywgdGhpcylcclxufTtcclxuTVVTSUMuQXVkaW9EZXN0aW5hdGlvbldyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShNVVNJQy5FZmZlY3RzUGlwZWxpbmUucHJvdG90eXBlKTtcclxuXHJcbk1VU0lDLm1vZHVsYXRvciA9IGZ1bmN0aW9uKGYpIHtcclxuICB2YXIgX2YgPSBmdW5jdGlvbihtb2R1bGF0b3JGYWN0b3J5LCBmKSB7XHJcbiAgICByZXR1cm4gZihtb2R1bGF0b3JGYWN0b3J5KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgYXBwbHk6IGZ1bmN0aW9uKGN1cnJlbnRUaW1lLCBhdWRpb1BhcmFtLCBtdXNpYywgY29tYmluZUZ1bmMpIHtcclxuICAgICAgdmFyIG1vZHVsYXRvckZhY3RvcnksIG1vZHVsYXRvcjtcclxuICAgICAgbW9kdWxhdG9yRmFjdG9yeSA9IChuZXcgTVVTSUMuQXVkaW9EZXN0aW5hdGlvbldyYXBwZXIobXVzaWMsIGF1ZGlvUGFyYW0pKS5zZnhCYXNlKCk7XHJcbiAgICAgIG1vZHVsYXRvckZhY3RvcnkuYXVkaW9QYXJhbU1vZHVsYXRpb24gPSBhdWRpb1BhcmFtO1xyXG4gICAgICBtb2R1bGF0b3IgPSAoY29tYmluZUZ1bmN8fF9mKShtb2R1bGF0b3JGYWN0b3J5LCBmKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBtb2R1bGF0b3JGYWN0b3J5LnBydW5lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcblxyXG52YXIgbGVuID0gMTI4O1xyXG52YXIgY29uc3RhbnRBcnJheUJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkobGVuKTtcclxuZm9yICh2YXIgaT0wOyBpPGxlbjsgaSsrKSB7XHJcbiAgY29uc3RhbnRBcnJheUJ1ZmZlcltpXT0xO1xyXG59O1xyXG52YXIgYnVmZmVyMTtcclxuXHJcbk1VU0lDLlNvdW5kTGliLkNvbnN0YW50ID0gZnVuY3Rpb24obXVzaWMsIGRlc3RpbmF0aW9uLCBvcHRpb25zKSB7XHJcblxyXG4gIHZhciBjb25zdGFudE5vZGU7XHJcbiAgdmFyIGJ1ZmZlclNvdXJjZTtcclxuICB2YXIgYnVmZmVyO1xyXG4gIHZhciBhdWRpb0NvbnRleHQgPSBtdXNpYy5fYXVkaW8uYXVkaW87XHJcblxyXG4gIGlmIChhdWRpb0NvbnRleHQuY3JlYXRlQ29uc3RhbnRTb3VyY2UpIHtcclxuICAgIGNvbnN0YW50Tm9kZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVDb25zdGFudFNvdXJjZSgpO1xyXG4gICAgdGhpcy5fZGVzdGluYXRpb24gPSBjb25zdGFudE5vZGU7XHJcblxyXG4gICAgY29uc3RhbnROb2RlLm9mZnNldC52YWx1ZSA9IG9wdGlvbnMub2Zmc2V0IHx8IDAuMDtcclxuICAgIGNvbnN0YW50Tm9kZS5jb25uZWN0KGRlc3RpbmF0aW9uLl9kZXN0aW5hdGlvbik7XHJcbiAgICBjb25zdGFudE5vZGUuc3RhcnQoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3RhbnROb2RlID0gYXVkaW9Db250ZXh0LmNyZWF0ZUdhaW4oKTtcclxuICAgIGJ1ZmZlclNvdXJjZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcclxuXHJcbiAgICBjb25zdGFudE5vZGUuZ2Fpbi52YWx1ZSA9IG9wdGlvbnMub2Zmc2V0IHx8IDAuMDtcclxuICAgIFxyXG4gICAgaWYgKCFidWZmZXIxKSB7XHJcbiAgICAgIGJ1ZmZlcjEgPSBhdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyKDEsIGNvbnN0YW50QXJyYXlCdWZmZXIubGVuZ3RoLCBtdXNpYy5fYXVkaW8uYXVkaW8uc2FtcGxlUmF0ZSk7XHJcbiAgICAgIGJ1ZmZlcjEuZ2V0Q2hhbm5lbERhdGEoMCkuc2V0KGNvbnN0YW50QXJyYXlCdWZmZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1ZmZlclNvdXJjZS5sb29wID0gdHJ1ZTtcclxuICAgIGJ1ZmZlclNvdXJjZS5idWZmZXIgPSBidWZmZXIxO1xyXG4gICAgYnVmZmVyU291cmNlLmNvbm5lY3QoY29uc3RhbnROb2RlKTtcclxuXHJcbiAgICBjb25zdGFudE5vZGUuY29ubmVjdChkZXN0aW5hdGlvbi5fZGVzdGluYXRpb24pO1xyXG5cclxuICAgIGJ1ZmZlclNvdXJjZS5zdGFydCgpO1xyXG4gIH1cclxuXHJcbiAgdmFyIG5vb3AgPSBmdW5jdGlvbigpIHt9O1xyXG5cclxuICB0aGlzLnNldFBhcmFtID0gZnVuY3Rpb24ocGFyYW1OYW1lLCB2YWx1ZSkge1xyXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gJ29mZnNldCcgJiYgIWF1ZGlvQ29udGV4dC5jcmVhdGVDb25zdGFudFNvdXJjZSkgcGFyYW1OYW1lID0gJ2dhaW4nO1xyXG4gICAgdmFsdWUuYXBwbHkobXVzaWMuYXVkaW8uY3VycmVudFRpbWUsIGNvbnN0YW50Tm9kZVtwYXJhbU5hbWVdKTtcclxuICB9O1xyXG5cclxuICB0aGlzLnNldFBhcmFtVGFyZ2V0ID0gZnVuY3Rpb24ocGFyYW1OYW1lLCB0YXJnZXQsIHRpbWVDb25zdGFudCkge1xyXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gJ29mZnNldCcgJiYgIWF1ZGlvQ29udGV4dC5jcmVhdGVDb25zdGFudFNvdXJjZSkgcGFyYW1OYW1lID0gJ2dhaW4nO1xyXG4gICAgdmFyIGF1ZGlvUGFyYW0gPSBjb25zdGFudE5vZGVbcGFyYW1OYW1lXTtcclxuICAgIGF1ZGlvUGFyYW0uY2FuY2VsU2NoZWR1bGVkVmFsdWVzKDAuMCk7XHJcbiAgICBhdWRpb1BhcmFtLnNldFRhcmdldEF0VGltZSh0YXJnZXQsIG11c2ljLmF1ZGlvLmN1cnJlbnRUaW1lLCB0aW1lQ29uc3RhbnQpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGF1ZGlvQ29udGV4dC5jcmVhdGVDb25zdGFudFNvdXJjZSkge1xyXG4gICAgICBjb25zdGFudE5vZGUuc3RvcCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnVmZmVyU291cmNlLnN0b3AoKTtcclxuICAgICAgYnVmZmVyU291cmNlLmRpc2Nvbm5lY3QoY29uc3RhbnROb2RlKTtcclxuICAgIH1cclxuICAgIGNvbnN0YW50Tm9kZS5kaXNjb25uZWN0KGRlc3RpbmF0aW9uLl9kZXN0aW5hdGlvbik7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24oKSB7fTtcclxuICB9O1xyXG5cclxuICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICBpZiAoYXVkaW9Db250ZXh0LmNyZWF0ZUNvbnN0YW50U291cmNlKSB7XHJcbiAgICAgIGNvbnN0YW50Tm9kZS5vZmZzZXQudmFsdWUgPSB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0YW50Tm9kZS5nYWluLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5mcmVxID0gZnVuY3Rpb24obmV3RnJlcSkge1xyXG4gICAgdmFyIHBsYXlhYmxlID0ge307XHJcblxyXG4gICAgcGxheWFibGUuc2V0RnJlcSA9IG5vb3A7XHJcbiAgICBwbGF5YWJsZS5yZXNldCA9IG5vb3A7XHJcbiAgICBwbGF5YWJsZS5wbGF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB7c3RvcDogbm9vcH1cclxuICAgIH07XHJcblxyXG4gICAgTVVTSUMucGxheWFibGVQaXBlRXh0ZW5kKHBsYXlhYmxlKTtcclxuICAgIHJldHVybiBwbGF5YWJsZTtcclxuICB9O1xyXG59O1xyXG5cclxufSkoKTtcclxuXHJcbk1VU0lDLlNvdW5kTGliLk9zY2lsbGF0b3IgPSBmdW5jdGlvbihtdXNpYywgZGVzdGluYXRpb24sIG9wdGlvbnMpIHtcclxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICB2YXIgZWZmZWN0cyA9IG9wdGlvbnMuZWZmZWN0cztcclxuICB2YXIgZGV0dW5lID0gb3B0aW9ucy5kZXR1bmU7XHJcbiAgdmFyIGZyZXF1ZW5jeSA9IG9wdGlvbnMuZnJlcXVlbmN5O1xyXG4gIHZhciB0aW1lX2NvbnN0YW50ID0gb3B0aW9ucy50aW1lX2NvbnN0YW50O1xyXG4gIHZhciBhdWRpb0Rlc3RpbmF0aW9uO1xyXG5cclxuICBhdWRpb0Rlc3RpbmF0aW9uID0gZGVzdGluYXRpb24uX2Rlc3RpbmF0aW9uO1xyXG5cclxuICBpZiAoIWlzRmluaXRlKHRpbWVfY29uc3RhbnQpIHx8IGlzTmFOKHRpbWVfY29uc3RhbnQpIHx8IHRpbWVfY29uc3RhbnQgPD0gMCkgdGltZV9jb25zdGFudCA9IDAuMDE7XHJcblxyXG4gIHZhciBvc2M7XHJcblxyXG4gIG9zYyA9IG11c2ljLmF1ZGlvLmNyZWF0ZU9zY2lsbGF0b3IoKTtcclxuICBvc2MuY29ubmVjdChhdWRpb0Rlc3RpbmF0aW9uKTtcclxuXHJcbiAgdmFyIGFwcGxpZWRBdWRpb1BhcmFtO1xyXG5cclxuICBpZiAoZnJlcXVlbmN5KSB7XHJcbiAgICBvc2MuZnJlcXVlbmN5LnZhbHVlID0gZnJlcXVlbmN5O1xyXG4gIH0gICAgXHJcblxyXG4gIGlmIChkZXR1bmUpIHtcclxuICAgIGlmIChkZXR1bmUuYXBwbHkpIHtcclxuICAgICAgYXBwbGllZEF1ZGlvUGFyYW0gPSBkZXR1bmUuYXBwbHkobXVzaWMuYXVkaW8uY3VycmVudFRpbWUsIG9zYy5kZXR1bmUsIG11c2ljKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG9zYy5kZXR1bmUudmFsdWUgPSBkZXR1bmU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAob3B0aW9ucy50eXBlID09PSBcImN1c3RvbVwiKSB7XHJcbiAgICB2YXIgcmVhbCA9IG5ldyBGbG9hdDMyQXJyYXkob3B0aW9ucy50ZXJtcy5zaW4gfHwgW10pO1xyXG4gICAgdmFyIGltYWcgPSBuZXcgRmxvYXQzMkFycmF5KG9wdGlvbnMudGVybXMuY29zIHx8IFtdKTtcclxuXHJcbiAgICB2YXIgcGVyaW9kaWNXYXZlID0gbXVzaWMuYXVkaW8uY3JlYXRlUGVyaW9kaWNXYXZlKHJlYWwsIGltYWcpO1xyXG4gICAgb3NjLnNldFBlcmlvZGljV2F2ZShwZXJpb2RpY1dhdmUpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBvc2MudHlwZSA9IG9wdGlvbnMudHlwZTsgICAgXHJcbiAgfVxyXG5cclxuICB0aGlzLmN1cnJlbnRUaW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gbXVzaWMuYXVkaW8uY3VycmVudFRpbWU7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5zY2hlZHVsZV9mcmVxID0gZnVuY3Rpb24obmV3RnJlcSwgc3RhcnQpIHtcclxuICAgIHZhciB0YztcclxuICAgIHRjID0gdGltZV9jb25zdGFudHx8MC4xO1xyXG5cclxuICAgIHZhciBzdG9wID0gZnVuY3Rpb24oKSB7fTtcclxuICAgIHZhciBwbGF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIG9zYy5mcmVxdWVuY3kuc2V0VGFyZ2V0QXRUaW1lKG5ld0ZyZXEsIHN0YXJ0LCB0Yyk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RvcDogc3RvcFxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBwbGF5OiBwbGF5XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHRoaXMuZnJlcSA9IGZ1bmN0aW9uKG5ld0ZyZXEpIHtcclxuICAgIHZhciBmcmVxdWVuY3kgPSBvcHRpb25zLmZpeGVkX2ZyZXF1ZW5jeSA/IG9wdGlvbnMuZml4ZWRfZnJlcXVlbmN5IDogbmV3RnJlcVxyXG5cclxuICAgIGlmIChmcmVxdWVuY3kpIHtcclxuICAgICAgb3NjLmZyZXF1ZW5jeS52YWx1ZSA9IGZyZXF1ZW5jeTtcclxuICAgIH0gICAgXHJcblxyXG4gICAgdmFyIHBsYXlhYmxlID0ge307XHJcblxyXG4gICAgcGxheWFibGUuc2V0RnJlcSA9IGZ1bmN0aW9uKGZyZXF1ZW5jeSwgbm90ZU9wdGlvbnMpIHtcclxuICAgICAgcGxheWFibGUuc2V0RnJlcU9uVGltZShmcmVxdWVuY3ksIG5vdGVPcHRpb25zLCBtdXNpYy5hdWRpby5jdXJyZW50VGltZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHBsYXlhYmxlLmNhbmNlbFNjaGVkdWxlZFZhbHVlcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICBvc2MuZnJlcXVlbmN5LmNhbmNlbFNjaGVkdWxlZFZhbHVlcygwLjApO1xyXG4gICAgfTtcclxuXHJcbiAgICBwbGF5YWJsZS5zZXRGcmVxT25UaW1lID0gZnVuY3Rpb24oZnJlcXVlbmN5LCBub3RlT3B0aW9ucywgc3RhcnQpIHtcclxuICAgICAgaWYgKG9wdGlvbnMuZml4ZWRfZnJlcXVlbmN5KSByZXR1cm47XHJcblxyXG4gICAgICB2YXIgdGM7XHJcblxyXG4gICAgICBpZiAobm90ZU9wdGlvbnMgJiYgbm90ZU9wdGlvbnMudGMpIHtcclxuICAgICAgICB0YyA9IG5vdGVPcHRpb25zLnRjO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRjID0gdGltZV9jb25zdGFudHx8MC4xO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBvc2MuZnJlcXVlbmN5LnNldFRhcmdldEF0VGltZShmcmVxdWVuY3ksIHN0YXJ0LCB0Yyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHBsYXlhYmxlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICB9O1xyXG5cclxuICAgIHBsYXlhYmxlLnBsYXkgPSBmdW5jdGlvbihwYXJhbSkge1xyXG4gICAgICB2YXIgbmV4dE5vZGU7XHJcbiAgICAgIHZhciBkaXNwb3NlTm9kZTtcclxuXHJcbiAgICAgIGRpc3Bvc2VOb2RlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKG9zYykgb3NjLmRpc2Nvbm5lY3QoYXVkaW9EZXN0aW5hdGlvbik7XHJcbiAgICAgICAgb3NjID0gbnVsbDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIG9zYy5zdGFydCgwKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RvcCA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaWYgKGFwcGxpZWRBdWRpb1BhcmFtICYmIGFwcGxpZWRBdWRpb1BhcmFtLmRpc3Bvc2UpIHtcclxuICAgICAgICAgICAgYXBwbGllZEF1ZGlvUGFyYW0uZGlzcG9zZSgpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChvc2MpIG9zYy5zdG9wKDApO1xyXG4gICAgICAgICAgZGlzcG9zZU5vZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIE1VU0lDLnBsYXlhYmxlUGlwZUV4dGVuZChwbGF5YWJsZSk7XHJcbiAgICByZXR1cm4gcGxheWFibGU7XHJcbiAgfTtcclxuXHJcbiAgaWYgKG9wdGlvbnMuZikge1xyXG4gICAgdGhpcy5wbGF5ID0gZnVuY3Rpb24ocGFyYW0pIHtcclxuICAgICAgdmFyIHd0UG9zaXRpb24gPSBvcHRpb25zLnd0UG9zaXRpb24gfHwgMDtcclxuICAgICAgdmFyIGZjbiA9IG9wdGlvbnMuZjtcclxuICAgICAgdmFyIHRhID0gMDtcclxuICAgICAgdmFyIGZyZXF1ZW5jeTtcclxuICAgICAgdmFyIG9wdGlvbnNGcmVxdWVuY3kgPSBvcHRpb25zLmZyZXF1ZW5jeTtcclxuXHJcbiAgICAgIGlmIChvcHRpb25zRnJlcXVlbmN5LmF0KSB7XHJcbiAgICAgICAgZnJlcXVlbmN5ID0gb3B0aW9uc0ZyZXF1ZW5jeS5hdC5iaW5kKG9wdGlvbnNGcmVxdWVuY3kpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZyZXF1ZW5jeSA9IGZ1bmN0aW9uKHQpeyByZXR1cm4gb3B0aW9uc0ZyZXF1ZW5jeSB9O1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBkZWx0YXRpbWUgPSAwO1xyXG4gICAgICB2YXIgbGFzdFRpbWUgPSAwO1xyXG4gICAgICB2YXIgdGI7XHJcblxyXG4gICAgICBpZiAod3RQb3NpdGlvbi5hdCkge1xyXG4gICAgICAgIHZhciBmb3JtdWxhR2VuZXJhdG9yID0gbmV3IE1VU0lDLkVmZmVjdHMuRm9ybXVsYShtdXNpYywgZGVzdGluYXRpb24sIGZ1bmN0aW9uKGlucHV0LCB0KSB7XHJcbiAgICAgICAgICBkZWx0YXRpbWUgPSB0IC0gbGFzdFRpbWU7XHJcbiAgICAgICAgICB0YSArPSBkZWx0YXRpbWUgKiBmcmVxdWVuY3kodCk7XHJcbiAgICAgICAgICB0YSA9IHRhICUgMTtcclxuXHJcbiAgICAgICAgICB0YiA9IHRhICsgd3RQb3NpdGlvbi5hdCh0KTtcclxuICAgICAgICAgIHRiID0gdGIgJSAxO1xyXG5cclxuICAgICAgICAgIGlmICh0YiA8IDApIHRiKys7XHJcbiAgICAgICAgICBsYXN0VGltZSA9IHQ7XHJcbiAgICAgICAgICByZXR1cm4gZmNuKHRiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgZm9ybXVsYUdlbmVyYXRvciA9IG5ldyBNVVNJQy5FZmZlY3RzLkZvcm11bGEobXVzaWMsIGRlc3RpbmF0aW9uLCBmdW5jdGlvbihpbnB1dCwgdCkge1xyXG4gICAgICAgICAgZGVsdGF0aW1lID0gdCAtIGxhc3RUaW1lO1xyXG4gICAgICAgICAgdGEgKz0gZGVsdGF0aW1lICogZnJlcXVlbmN5KHQpO1xyXG4gICAgICAgICAgdGEgPSB0YSAlIDE7XHJcblxyXG4gICAgICAgICAgdGIgPSB0YSArIHd0UG9zaXRpb247XHJcbiAgICAgICAgICB0YiA9IHRiICUgMTtcclxuXHJcbiAgICAgICAgICBpZiAodGIgPCAwKSB0YisrO1xyXG4gICAgICAgICAgbGFzdFRpbWUgPSB0O1xyXG4gICAgICAgICAgcmV0dXJuIGZjbih0Yik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBmb3JtdWxhR2VuZXJhdG9yLmRpc2Nvbm5lY3QoZGVzdGluYXRpb24uX2Rlc3RpbmF0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07ICAgIFxyXG4gIH0gZWxzZSBpZiAob3B0aW9ucy53YXZlKSB7XHJcbiAgICB2YXIgbmV3T3B0aW9ucyA9IE9iamVjdC5jcmVhdGUob3B0aW9ucyk7XHJcbiAgICBuZXdPcHRpb25zLmYgPSBvcHRpb25zLndhdmUuZjtcclxuICAgIE1VU0lDLlNvdW5kTGliLk9zY2lsbGF0b3IuYmluZCh0aGlzKShtdXNpYywgZGVzdGluYXRpb24sIG5ld09wdGlvbnMpO1xyXG4gIH0gZWxzZSB7XHJcblxyXG4gIH1cclxuXHJcbn07XHJcblxyXG5NVVNJQy5Mb29wID0gZnVuY3Rpb24ocGxheWFibGUsIHRpbWVzKSB7XHJcbiAgdmFyIG9yaWdpbmFsID0gcGxheWFibGU7XHJcbiAgdmFyIGR1cmF0aW9uID0gcGxheWFibGUuZHVyYXRpb24oKTtcclxuICByZXR1cm4ge1xyXG4gICAgcGxheTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBsYXN0UGxheTtcclxuICAgICAgdmFyIHN0YXJ0VGltZSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcclxuICAgICAgdmFyIGxhc3RUaW1lID0gc3RhcnRUaW1lO1xyXG4gICAgICB2YXIgY3VycmVudEl0ZXJhdGlvbiA9IDA7XHJcblxyXG4gICAgICBsYXN0UGxheSA9IHBsYXlhYmxlLnBsYXkoKTtcclxuXHJcbiAgICAgIHZhciBuZXh0SXRlcmF0aW9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIG5vdyA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcclxuICAgICAgICBpZiAobm93IC0gc3RhcnRUaW1lID4gY3VycmVudEl0ZXJhdGlvbiAqIGR1cmF0aW9uKSB7IC8vIG1zXHJcbiAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgbGFzdFBsYXkgPSBwbGF5YWJsZS5wbGF5KCk7XHJcbiAgICAgICAgICB9LCAoY3VycmVudEl0ZXJhdGlvbisxKSAqIGR1cmF0aW9uIC0gbm93KVxyXG4gICAgICAgICAgY3VycmVudEl0ZXJhdGlvbisrO1xyXG4gICAgICAgICAgaWYgKGN1cnJlbnRJdGVyYXRpb24gPT0gdGltZXMtMSkge1xyXG4gICAgICAgICAgICBjbGVhckludGVydmFsKGludGVyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgaW50ZXIgPSBzZXRJbnRlcnZhbChuZXh0SXRlcmF0aW9uLCBkdXJhdGlvbik7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBjbGVhckludGVydmFsKGludGVyKVxyXG4gICAgICAgICAgaWYgKGxhc3RQbGF5KSBsYXN0UGxheS5zdG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG5NVVNJQy5TaWxlbmNlID0gZnVuY3Rpb24odGltZSkge1xyXG4gIHJldHVybiB7XHJcbiAgICBwbGF5IDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RvcDogZnVuY3Rpb24oKXtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGR1cmF0aW9uOiBmdW5jdGlvbigpe3JldHVybiB0aW1lfVxyXG4gIH07XHJcbn07XHJcblxyXG59KSgpOyIsIk1VU0lDLkVmZmVjdHMgPSBNVVNJQy5FZmZlY3RzIHx8IHt9O1xyXG5cclxudmFyIGVmZmVjdHNPYmplY3QgPSB7fTtcclxuTVVTSUMuRWZmZWN0cy5mb3JFYWNoID0gZnVuY3Rpb24oY2IpIHtcclxuICBmb3IgKHZhciBzZnggaW4gZWZmZWN0c09iamVjdCkge1xyXG4gICAgY2Ioc2Z4LCBlZmZlY3RzT2JqZWN0W3NmeF0pO1xyXG4gIH1cclxufTtcclxuXHJcbk1VU0lDLkVmZmVjdHMuV2ViQXVkaW9Ob2RlV3JhcHBlciA9IGZ1bmN0aW9uIChtdXNpYywgYXVkaW9Ob2RlLCBuZXh0LCBvbkRpc3Bvc2UpIHtcclxuXHJcbiAgdGhpcy5fZGVzdGluYXRpb24gPSBhdWRpb05vZGU7XHJcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgLy8gdGhpcyBoYWNrIHByZXZlbnRzIGEgYnVnIGluIGN1cnJlbnQgdmVyc2lvbiBvZiBjaHJvbWVcclxuICAgIGF1ZGlvTm9kZS5jb25uZWN0KG5leHQuX2Rlc3RpbmF0aW9uKTtcclxuICB9KTtcclxuXHJcbiAgdGhpcy5uZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gbmV4dDtcclxuICB9O1xyXG5cclxuICB2YXIgZGlzY29ubmVjdGVkID0gZmFsc2U7XHJcbiAgdGhpcy5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoZGlzY29ubmVjdGVkKSByZXR1cm47XHJcbiAgICBpZiAob25EaXNwb3NlKSBvbkRpc3Bvc2UoKTtcclxuICAgIGRpc2Nvbm5lY3RlZCA9IHRydWU7XHJcbiAgICBhdWRpb05vZGUuZGlzY29ubmVjdChuZXh0Ll9kZXN0aW5hdGlvbik7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5kaXNwb3NlID0gdGhpcy5kaXNjb25uZWN0O1xyXG5cclxuICB0aGlzLm91dHB1dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGF1ZGlvTm9kZTtcclxuICB9O1xyXG5cclxuICB0aGlzLmN1cnJlbnRUaW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gbXVzaWMuYXVkaW8uY3VycmVudFRpbWU7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5zZXRQYXJhbSA9IGZ1bmN0aW9uKHBhcmFtTmFtZSwgdmFsdWUpIHtcclxuICAgIHZhbHVlLmFwcGx5KG11c2ljLmF1ZGlvLmN1cnJlbnRUaW1lLCBhdWRpb05vZGVbcGFyYW1OYW1lXSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5zZXRQYXJhbVRhcmdldCA9IGZ1bmN0aW9uKHBhcmFtTmFtZSwgdGFyZ2V0LCB0aW1lQ29uc3RhbnQpIHtcclxuICAgIHZhciBhdWRpb1BhcmFtID0gYXVkaW9Ob2RlW3BhcmFtTmFtZV07XHJcbiAgICBhdWRpb1BhcmFtLmNhbmNlbFNjaGVkdWxlZFZhbHVlcygwLjApO1xyXG4gICAgYXVkaW9QYXJhbS5zZXRUYXJnZXRBdFRpbWUodGFyZ2V0LCBtdXNpYy5hdWRpby5jdXJyZW50VGltZSwgdGltZUNvbnN0YW50KTtcclxuICB9O1xyXG5cclxuICB0aGlzLnJlY29yZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHJlYyA9IG5ldyBSZWNvcmRlcihhdWRpb05vZGUsIHt3b3JrZXJQYXRoOiBcImxpYi9yZWNvcmRlci9yZWNvcmRlcldvcmtlci5qc1wifSk7XHJcblxyXG4gICAgcmVjLnJlY29yZCgpO1xyXG4gICAgcmV0dXJuIHJlYztcclxuICB9O1xyXG5cclxuICBNVVNJQy5FZmZlY3RzUGlwZWxpbmUuYmluZCh0aGlzKShtdXNpYywgdGhpcyk7XHJcbn07XHJcbk1VU0lDLkVmZmVjdHMuV2ViQXVkaW9Ob2RlV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1VU0lDLkVmZmVjdHNQaXBlbGluZS5wcm90b3R5cGUpO1xyXG5cclxuTVVTSUMuRWZmZWN0cy5Gb3JtdWxhID0gZnVuY3Rpb24obXVzaWMsIG5leHQsIGZjbikge1xyXG4gIHZhciBzY3JpcHROb2RlID0gbXVzaWMuYXVkaW8uY3JlYXRlU2NyaXB0UHJvY2Vzc29yKDEwMjQsIDEsIDEpO1xyXG4gIHZhciBpdGVyYXRpb24gPSAwO1xyXG4gIHZhciBzYW1wbGVSYXRlID0gbXVzaWMuYXVkaW8uc2FtcGxlUmF0ZTtcclxuXHJcbiAgc2NyaXB0Tm9kZS5vbmF1ZGlvcHJvY2VzcyA9IGZ1bmN0aW9uKGF1ZGlvUHJvY2Vzc2luZ0V2ZW50KSB7XHJcbiAgICAvLyBUaGUgaW5wdXQgYnVmZmVyIGlzIHRoZSBzb25nIHdlIGxvYWRlZCBlYXJsaWVyXHJcbiAgICB2YXIgaW5wdXRCdWZmZXIgPSBhdWRpb1Byb2Nlc3NpbmdFdmVudC5pbnB1dEJ1ZmZlcjtcclxuXHJcbiAgICAvLyBUaGUgb3V0cHV0IGJ1ZmZlciBjb250YWlucyB0aGUgc2FtcGxlcyB0aGF0IHdpbGwgYmUgbW9kaWZpZWQgYW5kIHBsYXllZFxyXG4gICAgdmFyIG91dHB1dEJ1ZmZlciA9IGF1ZGlvUHJvY2Vzc2luZ0V2ZW50Lm91dHB1dEJ1ZmZlcjtcclxuXHJcbiAgICAvLyBMb29wIHRocm91Z2ggdGhlIG91dHB1dCBjaGFubmVscyAoaW4gdGhpcyBjYXNlIHRoZXJlIGlzIG9ubHkgb25lKVxyXG4gICAgZm9yICh2YXIgY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCBvdXRwdXRCdWZmZXIubnVtYmVyT2ZDaGFubmVsczsgY2hhbm5lbCsrKSB7XHJcbiAgICAgIHZhciBpbnB1dERhdGEgPSBpbnB1dEJ1ZmZlci5nZXRDaGFubmVsRGF0YShjaGFubmVsKTtcclxuICAgICAgdmFyIG91dHB1dERhdGEgPSBvdXRwdXRCdWZmZXIuZ2V0Q2hhbm5lbERhdGEoY2hhbm5lbCk7XHJcblxyXG4gICAgICAvLyBMb29wIHRocm91Z2ggdGhlIDQwOTYgc2FtcGxlc1xyXG4gICAgICBmb3IgKHZhciBzYW1wbGUgPSAwOyBzYW1wbGUgPCBpbnB1dEJ1ZmZlci5sZW5ndGg7IHNhbXBsZSsrKSB7XHJcbiAgICAgICAgLy8gbWFrZSBvdXRwdXQgZXF1YWwgdG8gdGhlIHNhbWUgYXMgdGhlIGlucHV0XHJcbiAgICAgICAgb3V0cHV0RGF0YVtzYW1wbGVdID0gZmNuKGlucHV0RGF0YVtzYW1wbGVdLCAoaW5wdXRCdWZmZXIubGVuZ3RoICogaXRlcmF0aW9uICsgc2FtcGxlKSAvIHNhbXBsZVJhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaXRlcmF0aW9uKys7XHJcbiAgfVxyXG5cclxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyAvLyB0aGlzIGhhY2sgcHJldmVudHMgYSBidWcgaW4gY3VycmVudCB2ZXJzaW9uIG9mIGNocm9tZVxyXG4gICAgc2NyaXB0Tm9kZS5jb25uZWN0KG5leHQuX2Rlc3RpbmF0aW9uKTtcclxuICB9KTtcclxuXHJcbiAgdGhpcy5fZGVzdGluYXRpb24gPSBzY3JpcHROb2RlO1xyXG4gIFxyXG4gIE1VU0lDLkVmZmVjdHNQaXBlbGluZS5iaW5kKHRoaXMpKG11c2ljLCB0aGlzKTtcclxuXHJcbiAgdGhpcy5uZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gbmV4dDtcclxuICB9O1xyXG5cclxuICB2YXIgZGlzY29ubmVjdGVkID0gZmFsc2U7XHJcbiAgdGhpcy5kaXNjb25uZWN0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoZGlzY29ubmVjdGVkKSByZXR1cm47XHJcbiAgICBkaXNjb25uZWN0ZWQgPSB0cnVlO1xyXG4gICAgXHJcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyAvLyB0aGlzIGhhY2sgcHJldmVudHMgYSBidWcgaW4gY3VycmVudCB2ZXJzaW9uIG9mIGNocm9tZVxyXG4gICAgICBzY3JpcHROb2RlLmRpc2Nvbm5lY3QobmV4dC5fZGVzdGluYXRpb24pO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5kaXNwb3NlID0gdGhpcy5kaXNjb25uZWN0O1xyXG5cclxuICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKF9mKSB7XHJcbiAgICBmY24gPSBfZjtcclxuICAgIHRoaXMuZmNuID0gZmNuO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuZmNuID0gZmNuO1xyXG5cclxuICB0aGlzLm91dHB1dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHNjcmlwdE5vZGU7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5pc0Zvcm11bGEgPSB0cnVlO1xyXG59XHJcbk1VU0lDLkVmZmVjdHMuRm9ybXVsYS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1VU0lDLkVmZmVjdHNQaXBlbGluZS5wcm90b3R5cGUpO1xyXG5cclxuXHJcbk1VU0lDLkVmZmVjdHMucmVnaXN0ZXIoXCJmb3JtdWxhXCIsIGZ1bmN0aW9uKG11c2ljLCBuZXh0LCBmY24pIHtcclxuICByZXR1cm4gbmV3IE1VU0lDLkVmZmVjdHMuRm9ybXVsYShtdXNpYywgbmV4dCwgZmNuKVxyXG59KTtcclxuXHJcblxyXG5NVVNJQy5FZmZlY3RzLkJpUXVhZCA9IGZ1bmN0aW9uKG11c2ljLCBuZXh0LCBvcHRpb25zKSB7XHJcbiAgdmFyIGJpcXVhZEZpbHRlciA9IG11c2ljLmF1ZGlvLmNyZWF0ZUJpcXVhZEZpbHRlcigpO1xyXG4gIHZhciBnYWluTW9kdWxhdGlvbiA9IG5vZGlzcG9zZTtcclxuICB2YXIgcU1vZHVsYXRpb24gPSBub2Rpc3Bvc2U7XHJcbiAgdmFyIGZyZXF1ZW5jeU1vZHVsYXRpb24gPSBub2Rpc3Bvc2U7XHJcbiAgdmFyIGRldHVuZU1vZHVsYXRpb24gPSBub2Rpc3Bvc2U7XHJcblxyXG4gIHZhciBiaXF1YWRUeXBlID0gb3B0aW9ucy50eXBlO1xyXG5cclxuICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgIGJpcXVhZEZpbHRlci50eXBlID0gYmlxdWFkVHlwZTtcclxuXHJcbiAgICB2YXIgYXNzaWduUGFyYW0gPSBmdW5jdGlvbihvcmlnLCBhdWRpb1BhcmFtKSB7XHJcbiAgICAgIGlmIChvcmlnKSB7XHJcbiAgICAgICAgaWYgKG9yaWcuYXBwbHkpIHtcclxuICAgICAgICAgIHJldHVybiBvcmlnLmFwcGx5KG11c2ljLmF1ZGlvLmN1cnJlbnRUaW1lLCBhdWRpb1BhcmFtLCBtdXNpYyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGF1ZGlvUGFyYW0udmFsdWUgPSBvcmlnO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG5vZGlzcG9zZTtcclxuICAgIH07XHJcblxyXG4gICAgZ2Fpbk1vZHVsYXRpb24uZGlzcG9zZSgpO1xyXG4gICAgcU1vZHVsYXRpb24uZGlzcG9zZSgpO1xyXG4gICAgZnJlcXVlbmN5TW9kdWxhdGlvbi5kaXNwb3NlKCk7XHJcbiAgICBkZXR1bmVNb2R1bGF0aW9uLmRpc3Bvc2UoKTtcclxuXHJcbiAgICBnYWluTW9kdWxhdGlvbiA9IGFzc2lnblBhcmFtKG9wdGlvbnMuZ2FpbiwgYmlxdWFkRmlsdGVyLmdhaW4pO1xyXG4gICAgcU1vZHVsYXRpb24gPSBhc3NpZ25QYXJhbShvcHRpb25zLlEsIGJpcXVhZEZpbHRlci5RKTtcclxuICAgIGZyZXF1ZW5jeU1vZHVsYXRpb24gPSBhc3NpZ25QYXJhbShvcHRpb25zLmZyZXF1ZW5jeSwgYmlxdWFkRmlsdGVyLmZyZXF1ZW5jeSk7XHJcbiAgICBkZXR1bmVNb2R1bGF0aW9uID0gYXNzaWduUGFyYW0ob3B0aW9ucy5kZXR1bmUsIGJpcXVhZEZpbHRlci5kZXR1bmUpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMudXBkYXRlKG9wdGlvbnMpO1xyXG5cclxuICBNVVNJQy5FZmZlY3RzLldlYkF1ZGlvTm9kZVdyYXBwZXIuYmluZCh0aGlzKShtdXNpYywgYmlxdWFkRmlsdGVyLCBuZXh0LCBmdW5jdGlvbigpIHtcclxuICAgIGdhaW5Nb2R1bGF0aW9uLmRpc3Bvc2UoKTtcclxuICAgIHFNb2R1bGF0aW9uLmRpc3Bvc2UoKTtcclxuICAgIGZyZXF1ZW5jeU1vZHVsYXRpb24uZGlzcG9zZSgpO1xyXG4gICAgZGV0dW5lTW9kdWxhdGlvbi5kaXNwb3NlKCk7XHJcbiAgfSk7XHJcbn07XHJcbk1VU0lDLkVmZmVjdHMuQmlRdWFkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTVVTSUMuRWZmZWN0cy5XZWJBdWRpb05vZGVXcmFwcGVyLnByb3RvdHlwZSk7XHJcblxyXG5NVVNJQy5FZmZlY3RzLnJlZ2lzdGVyKFwiYmlxdWFkXCIsIE1VU0lDLkVmZmVjdHMuQmlRdWFkKTtcclxuW1wibG93cGFzc1wiLCBcImhpZ2hwYXNzXCIsIFwiYmFuZHBhc3NcIiwgXCJsb3dzaGVsZlwiLCBcImhpZ2hzaGVsZlwiLCBcInBlYWtpbmdcIiwgXCJub3RjaFwiLCBcImFsbHBhc3NcIl1cclxuICAuZm9yRWFjaChmdW5jdGlvbihmaWx0ZXJOYW1lKSB7XHJcbiAgICBNVVNJQy5FZmZlY3RzLnJlZ2lzdGVyKGZpbHRlck5hbWUsIGZ1bmN0aW9uKG11c2ljLCBuZXh0LCBvcHRpb25zKSB7XHJcbiAgICAgIHJldHVybiBuZXcgTVVTSUMuRWZmZWN0cy5CaVF1YWQobXVzaWMsIG5leHQsIHt0eXBlOiBmaWx0ZXJOYW1lLCBmcmVxdWVuY3k6IG9wdGlvbnMuZnJlcXVlbmN5LCBROiBvcHRpb25zLlEsIGRldHVuZTogb3B0aW9ucy5kZXR1bmV9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxudmFyIGNhbk11dGF0ZSA9IGZ1bmN0aW9uKG9iaiwgdXBkYXRlRmNuKSB7XHJcbiAgb2JqLnVwZGF0ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICB1cGRhdGVGY24odmFsdWUpO1xyXG4gICAgcmV0dXJuIG9iajtcclxuICB9O1xyXG4gIHJldHVybiBvYmo7XHJcbn07XHJcblxyXG52YXIgbm9kaXNwb3NlID0ge1xyXG4gIGRpc3Bvc2U6IGZ1bmN0aW9uKCl7fVxyXG59O1xyXG5cclxuTVVTSUMuRWZmZWN0cy5yZWdpc3RlcihcImdhaW5cIiwgZnVuY3Rpb24obXVzaWMsIG5leHQsIHZhbHVlKSB7XHJcbiAgdmFyIGdhaW5Ob2RlID0gbXVzaWMuYXVkaW8uY3JlYXRlR2FpbigpO1xyXG4gIHZhciB2b2x1bWVNb2R1bGF0aW9uID0gbm9kaXNwb3NlO1xyXG5cclxuICByZXR1cm4gY2FuTXV0YXRlKFxyXG4gICAgbmV3IE1VU0lDLkVmZmVjdHMuV2ViQXVkaW9Ob2RlV3JhcHBlcihtdXNpYywgZ2Fpbk5vZGUsIG5leHQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICB2b2x1bWVNb2R1bGF0aW9uLmRpc3Bvc2UoKTtcclxuICAgIH0pLFxyXG4gICAgZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgdm9sdW1lTW9kdWxhdGlvbi5kaXNwb3NlKCk7XHJcblxyXG4gICAgICBpZiAodmFsdWUuYXBwbHkpIHtcclxuICAgICAgICBnYWluTm9kZS5nYWluLnZhbHVlID0gMC4wO1xyXG4gICAgICAgIHZvbHVtZU1vZHVsYXRpb24gPSB2YWx1ZS5hcHBseShtdXNpYy5hdWRpby5jdXJyZW50VGltZSwgZ2Fpbk5vZGUuZ2FpbiwgbXVzaWMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZvbHVtZU1vZHVsYXRpb24gPSBub2Rpc3Bvc2U7XHJcbiAgICAgICAgZ2Fpbk5vZGUuZ2Fpbi52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgKS51cGRhdGUodmFsdWUpO1xyXG59KTtcclxuXHJcbk1VU0lDLkVmZmVjdHMucmVnaXN0ZXIoXCJkZWxheVwiLCBmdW5jdGlvbihtdXNpYywgbmV4dCwgdmFsdWUpIHtcclxuICB2YXIgZGVsYXlOb2RlID0gbXVzaWMuYXVkaW8uY3JlYXRlRGVsYXkoNjApO1xyXG4gIHZhciBkZWxheU1vZHVsYXRpb24gPSBub2Rpc3Bvc2U7XHJcblxyXG4gIHJldHVybiBjYW5NdXRhdGUoXHJcbiAgICBuZXcgTVVTSUMuRWZmZWN0cy5XZWJBdWRpb05vZGVXcmFwcGVyKG11c2ljLCBkZWxheU5vZGUsIG5leHQsIGZ1bmN0aW9uKCkge1xyXG4gICAgICBkZWxheU1vZHVsYXRpb24uZGlzcG9zZSgpO1xyXG4gICAgfSksXHJcbiAgICBmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICBkZWxheU1vZHVsYXRpb24uZGlzcG9zZSgpO1xyXG5cclxuICAgICAgaWYgKHZhbHVlLmFwcGx5KSB7XHJcbiAgICAgICAgZGVsYXlNb2R1bGF0aW9uID0gdmFsdWUuYXBwbHkobXVzaWMuYXVkaW8uY3VycmVudFRpbWUsIGRlbGF5Tm9kZS5kZWxheVRpbWUsIG11c2ljKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBkZWxheU1vZHVsYXRpb24gPSBub2Rpc3Bvc2U7XHJcbiAgICAgICAgZGVsYXlOb2RlLmRlbGF5VGltZS52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgKS51cGRhdGUodmFsdWUpO1xyXG59KTtcclxuXHJcbnZhciBFY2hvID0gZnVuY3Rpb24obXVzaWMsIG5leHQsIG9wdGlvbnMpIHtcclxuICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgIGRlbGF5Tm9kZS5kZWxheVRpbWUudmFsdWUgPSBvcHRpb25zLmRlbGF5IHx8IDAuMDI7XHJcbiAgICBhdHQuZ2Fpbi52YWx1ZSA9IG9wdGlvbnMuZ2FpbiA9PT0gMCAgPyAwIDogKG9wdGlvbnMuZ2Fpbnx8MC4yKTtcclxuXHJcbiAgICBpZiAoZGVsYXlOb2RlLmRlbGF5VGltZS52YWx1ZSA8IDAuMDEpIGRlbGF5Tm9kZS5kZWxheVRpbWUudmFsdWUgPSAwLjAxO1xyXG4gICAgaWYgKGRlbGF5Tm9kZS5kZWxheVRpbWUudmFsdWUgPiAxKSBkZWxheU5vZGUuZGVsYXlUaW1lLnZhbHVlID0gMTtcclxuICAgIGlmIChhdHQuZ2Fpbi52YWx1ZSA+IDAuOTkpIGF0dC5nYWluLnZhbHVlID0gMC45OTtcclxuICAgIGlmIChhdHQuZ2Fpbi52YWx1ZSA8IDApIGF0dC5nYWluLnZhbHVlID0gMDtcclxuICB9O1xyXG5cclxuICB2YXIgZGVsYXlOb2RlID0gbXVzaWMuYXVkaW8uY3JlYXRlRGVsYXkoNjApO1xyXG5cclxuICB2YXIgZ2Fpbk5vZGUgPSBtdXNpYy5hdWRpby5jcmVhdGVHYWluKCk7XHJcbiAgdmFyIGdhaW5Ob2RlMiA9IG11c2ljLmF1ZGlvLmNyZWF0ZUdhaW4oKTtcclxuICBnYWluTm9kZS5nYWluLnZhbHVlID0gMS4wO1xyXG4gIGdhaW5Ob2RlMi5nYWluLnZhbHVlID0gMS4wO1xyXG5cclxuICB2YXIgYXR0ID0gbXVzaWMuYXVkaW8uY3JlYXRlR2FpbigpO1xyXG5cclxuICB0aGlzLnVwZGF0ZShvcHRpb25zKTtcclxuXHJcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgIGdhaW5Ob2RlLmNvbm5lY3QoZ2Fpbk5vZGUyKTtcclxuICAgIGdhaW5Ob2RlLmNvbm5lY3QoZGVsYXlOb2RlKTtcclxuICAgIGRlbGF5Tm9kZS5jb25uZWN0KGF0dCk7XHJcbiAgICBnYWluTm9kZTIuY29ubmVjdChuZXh0Ll9kZXN0aW5hdGlvbik7XHJcbiAgICBnYWluTm9kZTIuY29ubmVjdChkZWxheU5vZGUpO1xyXG4gICAgYXR0LmNvbm5lY3QoZ2Fpbk5vZGUyKTtcclxuICB9KTtcclxuXHJcbiAgdGhpcy5fZGVzdGluYXRpb24gPSBnYWluTm9kZTtcclxuXHJcblxyXG4gIHRoaXMubmV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG5leHQ7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGRpc2Nvbm5lY3RlZCA9IGZhbHNlO1xyXG4gIHRoaXMuZGlzY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGRpc2Nvbm5lY3RlZCkgcmV0dXJuO1xyXG4gICAgZGlzY29ubmVjdGVkID0gdHJ1ZTtcclxuICAgIGdhaW5Ob2RlLmRpc2Nvbm5lY3QoZ2Fpbk5vZGUyKTtcclxuICAgIGdhaW5Ob2RlLmRpc2Nvbm5lY3QoZGVsYXlOb2RlKTtcclxuICAgIGRlbGF5Tm9kZS5kaXNjb25uZWN0KGF0dCk7XHJcbiAgICBnYWluTm9kZTIuZGlzY29ubmVjdChuZXh0Ll9kZXN0aW5hdGlvbik7XHJcbiAgICBnYWluTm9kZTIuZGlzY29ubmVjdChkZWxheU5vZGUpO1xyXG4gICAgYXR0LmRpc2Nvbm5lY3QoZ2Fpbk5vZGUyKTtcclxuICB9O1xyXG5cclxuICB0aGlzLmRpc3Bvc2UgPSB0aGlzLmRpc2Nvbm5lY3Q7XHJcblxyXG4gIHRoaXMub3V0cHV0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gYXVkaW9Ob2RlO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuc2V0UGFyYW0gPSBmdW5jdGlvbihwYXJhbU5hbWUsIHZhbHVlKSB7XHJcbiAgICB2YWx1ZS5hcHBseShtdXNpYy5hdWRpby5jdXJyZW50VGltZSwgYXVkaW9Ob2RlW3BhcmFtTmFtZV0pO1xyXG4gIH07XHJcblxyXG4gIE1VU0lDLkVmZmVjdHNQaXBlbGluZS5iaW5kKHRoaXMpKG11c2ljLCB0aGlzKTtcclxufTtcclxuRWNoby5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1VU0lDLkVmZmVjdHNQaXBlbGluZS5wcm90b3R5cGUpO1xyXG5cclxudmFyIFdhdmVTaGFwZXIgPSBmdW5jdGlvbihtdXNpYywgbmV4dCwgb3B0aW9ucykge1xyXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8e307XHJcbiAgdmFyIHNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXMgfHwgODE5MjtcclxuICB2YXIgZiA9IG9wdGlvbnMuZiB8fCBmdW5jdGlvbih0KXtyZXR1cm4gdDsgfTtcclxuXHJcbiAgdmFyIG1ha2VEaXN0b3J0aW9uQ3VydmUgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoc2FtcGxlcyk7XHJcbiAgICBmb3IgKHZhciBpPTA7IGk8c2FtcGxlczsgaSsrKSB7XHJcbiAgICAgIGFycmF5W2ldID0gZihpKjIgLyBzYW1wbGVzIC0gMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH07XHJcblxyXG4gIHRoaXMubmV4dCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG5leHQ7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHdhdmVTaGFwZXJOb2RlID0gbXVzaWMuYXVkaW8uY3JlYXRlV2F2ZVNoYXBlcigpO1xyXG4gIHdhdmVTaGFwZXJOb2RlLmN1cnZlID0gbWFrZURpc3RvcnRpb25DdXJ2ZSgpO1xyXG4gIHdhdmVTaGFwZXJOb2RlLm92ZXJzYW1wbGUgPSAnNHgnO1xyXG5cclxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgd2F2ZVNoYXBlck5vZGUuY29ubmVjdChuZXh0Ll9kZXN0aW5hdGlvbik7XHJcbiAgfSk7XHJcbiAgdGhpcy5fZGVzdGluYXRpb24gPSB3YXZlU2hhcGVyTm9kZTtcclxuICB2YXIgZGlzY29ubmVjdGVkID0gZmFsc2U7XHJcblxyXG4gIHRoaXMuZGlzY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGRpc2Nvbm5lY3RlZCkgcmV0dXJuO1xyXG4gICAgZGlzY29ubmVjdGVkID0gdHJ1ZTtcclxuICAgIHdhdmVTaGFwZXJOb2RlLmRpc2Nvbm5lY3QobmV4dC5fZGVzdGluYXRpb24pO1xyXG4gIH07XHJcblxyXG4gIE1VU0lDLkVmZmVjdHNQaXBlbGluZS5iaW5kKHRoaXMpKG11c2ljLCB0aGlzKTtcclxufVxyXG5XYXZlU2hhcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTVVTSUMuRWZmZWN0c1BpcGVsaW5lLnByb3RvdHlwZSk7XHJcblxyXG5NVVNJQy5FZmZlY3RzLnJlZ2lzdGVyKFwiZWNob1wiLCBmdW5jdGlvbihtdXNpYywgbmV4dCwgb3B0aW9ucykge1xyXG4gIHJldHVybiBuZXcgRWNobyhtdXNpYywgbmV4dCwgb3B0aW9ucyk7XHJcbn0pO1xyXG5cclxuTVVTSUMuRWZmZWN0cy5yZWdpc3RlcihcIndhdmVfc2hhcGVyXCIsIGZ1bmN0aW9uKG11c2ljLCBuZXh0LCBvcHRpb25zKSB7XHJcbiAgcmV0dXJuIG5ldyBXYXZlU2hhcGVyKG11c2ljLCBuZXh0LCBvcHRpb25zKTtcclxufSk7XHJcblxyXG5NVVNJQy5DdXJ2ZSA9IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgdGhpcy5kdXJpbmcgPSBkdXJpbmcoYXJyYXkpO1xyXG59O1xyXG5cclxuTVVTSUMuQ3VydmUuY29uY2F0ID0gZnVuY3Rpb24oYzEsIHRpbWUxLCBjMiwgdGltZTIsIG4pIHtcclxuICB2YXIgdGltZSA9IHRpbWUxICsgdGltZTI7XHJcbiAgaWYgKCFuKSB7XHJcbiAgICBuPU1hdGguZmxvb3IodGltZSoxMDApKzE7XHJcbiAgfVxyXG5cclxuICB2YXIgYXQgPSBmdW5jdGlvbih0KSB7XHJcbiAgICBpZiAodCA8IHRpbWUxKXtcclxuICAgICAgcmV0dXJuIGMxLmF0KHQpOyBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBjMi5hdCh0LXRpbWUxKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KG4rMSk7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuKzE7IGkrKyApIHtcclxuICAgIGFycmF5W2ldID0gYXQodGltZSAqIChpIC8gbikpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBhcHBseTogZnVuY3Rpb24oY3VycmVudFRpbWUsIGF1ZGlvUGFyYW0pIHtcclxuICAgICAgYXVkaW9QYXJhbS5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMoMC4wKTtcclxuICAgICAgYXVkaW9QYXJhbS5zZXRWYWx1ZUN1cnZlQXRUaW1lKGFycmF5LCBjdXJyZW50VGltZSwgdGltZSlcclxuICAgIH0sXHJcblxyXG4gICAgYXQ6IGF0XHJcbiAgfTtcclxufTtcclxuXHJcbnZhciBkdXJpbmcgPSBmdW5jdGlvbihmY24sIG4pIHtcclxuICByZXR1cm4gZnVuY3Rpb24odGltZSkge1xyXG4gICAgaWYgKCFuKSB7XHJcbiAgICAgIG49TWF0aC5mbG9vcih0aW1lKjEwMCkrMTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgYXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KG4rMSk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG4rMTsgaSsrICkge1xyXG4gICAgICBhcnJheVtpXSA9IGZjbihpIC8gbik7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB7IFxyXG4gICAgICBhcHBseTogZnVuY3Rpb24oY3VycmVudFRpbWUsIGF1ZGlvUGFyYW0pIHtcclxuICAgICAgICBhdWRpb1BhcmFtLmNhbmNlbFNjaGVkdWxlZFZhbHVlcygwLjApO1xyXG4gICAgICAgIGF1ZGlvUGFyYW0uc2V0VmFsdWVDdXJ2ZUF0VGltZShhcnJheSwgY3VycmVudFRpbWUsIHRpbWUpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgYXQ6IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICByZXR1cm4gZmNuKHQvdGltZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfTtcclxufTtcclxuXHJcblxyXG5NVVNJQy5DdXJ2ZS5Gb3JtdWxhID0gZnVuY3Rpb24oZmNuLCBuKSB7XHJcbiAgdGhpcy5kdXJpbmcgPSBkdXJpbmcoZmNuLCBuKTtcclxufVxyXG5cclxuTVVTSUMuQ3VydmUuUmFtcCA9IGZ1bmN0aW9uKGluaXRWYWx1ZSwgZW5kVmFsdWUsIG4pIHtcclxuICBNVVNJQy5DdXJ2ZS5Gb3JtdWxhLmJpbmQodGhpcykoZnVuY3Rpb24odCl7cmV0dXJuIGluaXRWYWx1ZSArIChlbmRWYWx1ZSAtIGluaXRWYWx1ZSkqdDt9LCBuKTtcclxufTtcclxuXHJcbk1VU0lDLkN1cnZlLlBlcmlvZGljID0gZnVuY3Rpb24oZmNuLCBmcmVxdWVuY3kpIHtcclxuICB2YXIgdGEgPSAwO1xyXG4gIHZhciBkZWxheVRpbWU7XHJcbiAgdmFyIGxhc3RUaW1lID0gMDtcclxuICB2YXIgZGVsdGF0aW1lO1xyXG4gIHZhciB0YjtcclxuICB2YXIgcGVyaW9kID0gMS4wIC8gZnJlcXVlbmN5O1xyXG4gIGlmIChmcmVxdWVuY3kuYXQpIHtcclxuICAgIHRoaXMuYXQgPSBmdW5jdGlvbih0KSB7XHJcbiAgICAgIGRlbHRhdGltZSA9IHQgLSBsYXN0VGltZTtcclxuICAgICAgdGEgKz0gZGVsdGF0aW1lICogZnJlcXVlbmN5LmF0KHQpO1xyXG4gICAgICB0YSA9IHRhICUgMTtcclxuXHJcbiAgICAgIGxhc3RUaW1lID0gdDtcclxuICAgICAgcmV0dXJuIGZjbih0YSk7XHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aGlzLmF0ID0gZnVuY3Rpb24odCkge1xyXG4gICAgICB0YSA9ICh0ICUgcGVyaW9kKSAvIHBlcmlvZDtcclxuICAgICAgaWYgKHRhIDwgMCkgdGErKztcclxuICAgICAgcmV0dXJuIGZjbih0YSk7XHJcbiAgICB9O1xyXG4gIH1cclxufTtcclxuXHJcbk1VU0lDLkVmZmVjdHMucmVnaXN0ZXIoXCJBRFNSXCIsIGZ1bmN0aW9uKG11c2ljLCBuZXh0LCBvcHRpb25zKSB7XHJcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgdmFyIHNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXMgfHwgMTAwO1xyXG4gIHZhciBhdHRhY2tUaW1lID0gb3B0aW9ucy5hdHRhY2tUaW1lO1xyXG4gIHZhciBkZWNheVRpbWUgPSBvcHRpb25zLmRlY2F5VGltZTtcclxuICB2YXIgc3VzdGFpbkxldmVsID0gb3B0aW9ucy5zdXN0YWluTGV2ZWw7XHJcbiAgdmFyIHJlbGVhc2VUaW1lID0gb3B0aW9ucy5yZWxlYXNlVGltZTtcclxuXHJcbiAgaWYgKGF0dGFja1RpbWUgPT09IHVuZGVmaW5lZCkgYXR0YWNrVGltZSA9IDAuMTtcclxuICBpZiAoZGVjYXlUaW1lID09PSB1bmRlZmluZWQpIGRlY2F5VGltZSA9IDAuMTtcclxuICBpZiAoc3VzdGFpbkxldmVsID09PSB1bmRlZmluZWQpIHN1c3RhaW5MZXZlbCA9IDAuODtcclxuICBpZiAocmVsZWFzZVRpbWUgPT09IHVuZGVmaW5lZCkgcmVsZWFzZVRpbWUgPSAwLjE7XHJcblxyXG4gIHZhciBuZXh0Tm9kZUZjbiA9IG9wdGlvbnMubm9kZTtcclxuICB2YXIgYXR0YWNrQ3VydmUgPSBuZXcgTVVTSUMuQ3VydmUuUmFtcCgwLjAsIDEuMCwgc2FtcGxlcykuZHVyaW5nKGF0dGFja1RpbWUpO1xyXG4gIHZhciBkZWNheUN1cnZlID0gbmV3IE1VU0lDLkN1cnZlLlJhbXAoMS4wLCBzdXN0YWluTGV2ZWwsIHNhbXBsZXMpLmR1cmluZyhkZWNheVRpbWUpO1xyXG4gIHZhciBzdGFydEN1cnZlID0gTVVTSUMuQ3VydmUuY29uY2F0KGF0dGFja0N1cnZlLCBhdHRhY2tUaW1lLCBkZWNheUN1cnZlLCBkZWNheVRpbWUpO1xyXG5cclxuICB2YXIgZ2Fpbk5vZGUgPSBuZXh0XHJcbiAgICAgICAgICAgICAgLmdhaW4oc3VzdGFpbkxldmVsKTtcclxuXHJcbiAgZ2Fpbk5vZGUuc2V0UGFyYW0oJ2dhaW4nLCBzdGFydEN1cnZlKTtcclxuICBcclxuICByZXR1cm4gbmV4dE5vZGVGY24oZ2Fpbk5vZGUpXHJcbiAgICAub25TdG9wKGZ1bmN0aW9uKCl7IGdhaW5Ob2RlLmRpc3Bvc2UoKTsgfSkgLy8gZGlzcG9zZSBnYWluIG5vZGVcclxuICAgIC5zdG9wRGVsYXkocmVsZWFzZVRpbWUgKiAxMDAwKVxyXG4gICAgLm9uU3RvcChmdW5jdGlvbigpeyBcclxuICAgICAgdmFyIGN1cnJlbnRMZXZlbCA9IGdhaW5Ob2RlLl9kZXN0aW5hdGlvbi5nYWluLnZhbHVlO1xyXG4gICAgICB2YXIgcmVsZWFzZUN1cnZlID0gbmV3IE1VU0lDLkN1cnZlLlJhbXAoY3VycmVudExldmVsLCAwLjAsIHNhbXBsZXMpLmR1cmluZyhyZWxlYXNlVGltZSlcclxuICAgICAgZ2Fpbk5vZGUuc2V0UGFyYW0oJ2dhaW4nLCByZWxlYXNlQ3VydmUpOyBcclxuICAgIH0pOyAvLyBzZXQgZ2FpbiBjdXJ2ZVxyXG5cclxufSk7XHJcblxyXG5NVVNJQy5FZmZlY3RzLnJlZ2lzdGVyKFwic3RvcEN1cnZlXCIsIGZ1bmN0aW9uKG11c2ljLCBuZXh0LCBvcHRpb25zKSB7XHJcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgdmFyIHNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXMgfHwgMTAwO1xyXG4gIHZhciBkdXJhdGlvbiA9IG9wdGlvbnMuZHVyYXRpb24gfHwgMC40O1xyXG4gIHZhciBuZXh0Tm9kZUZjbiA9IG9wdGlvbnMubm9kZTtcclxuICB2YXIgc3RvcEN1cnZlID0gbmV3IE1VU0lDLkN1cnZlLlJhbXAoMS4wLCAwLjAsIHNhbXBsZXMpLmR1cmluZyhkdXJhdGlvbik7XHJcbiAgdmFyIGdhaW5Ob2RlID0gbmV4dFxyXG4gICAgICAgICAgICAgIC5nYWluKDEuMCk7XHJcbiAgXHJcbiAgcmV0dXJuIG5leHROb2RlRmNuKGdhaW5Ob2RlKVxyXG4gICAgLm9uU3RvcChmdW5jdGlvbigpeyBnYWluTm9kZS5kaXNwb3NlKCk7IH0pIC8vIGRpc3Bvc2UgZ2FpbiBub2RlXHJcbiAgICAuc3RvcERlbGF5KGR1cmF0aW9uICogMTAwMClcclxuICAgIC5vblN0b3AoZnVuY3Rpb24oKXsgZ2Fpbk5vZGUuc2V0UGFyYW0oJ2dhaW4nLCBzdG9wQ3VydmUpOyB9KTsgLy8gc2V0IGdhaW4gY3VydmVcclxuXHJcbn0pO1xyXG5cclxuIiwiKGZ1bmN0aW9uKCkge1xyXG5cclxudmFyIGZyZXF1ZW5jeSA9IGZ1bmN0aW9uKG5vdGVudW0pIHtcclxuICAgIHJldHVybiAxNi4zNSAqIE1hdGgucG93KDIsIG5vdGVudW0vMTIpO1xyXG59O1xyXG52YXIgbm90ZVRvTnVtTWFwID0ge1xyXG4gICdDJzogMCwgXHJcbiAgJ0QnOiAyLCBcclxuICAnRSc6IDQsIFxyXG4gICdGJzogNSwgXHJcbiAgJ0cnOiA3LCBcclxuICAnQSc6IDksIFxyXG4gICdCJzogMTFcclxufTtcclxuXHJcbnZhciBpbnN0cnVtZW50RXh0ZW5kID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgdmFyIGRlbGF5ZWRQbGF5aW5nID0gZnVuY3Rpb24ob3JpZ2luYWxQbGF5aW5nLCBtcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChvcmlnaW5hbFBsYXlpbmcuc3RvcC5iaW5kKG9yaWdpbmFsUGxheWluZyksIG1zKTtcclxuICAgICAgfSBcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgdmFyIGRlbGF5ZWROb3RlID0gZnVuY3Rpb24ob3JpZ2luYWxOb3RlLCBtcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcGxheTogZnVuY3Rpb24ocGFyYW0pIHtcclxuICAgICAgICB2YXIgb3JpZ2luYWxQbGF5aW5nID0gb3JpZ2luYWxOb3RlLnBsYXkocGFyYW0pO1xyXG4gICAgICAgIHJldHVybiBkZWxheWVkUGxheWluZyhvcmlnaW5hbFBsYXlpbmcsIG1zKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICBvYmouc3RvcERlbGF5ID0gZnVuY3Rpb24obXMpIHtcclxuICAgIHJldHVybiBpbnN0cnVtZW50RXh0ZW5kKHtcclxuICAgICAgbm90ZTogZnVuY3Rpb24obm90ZU51bSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBkZWxheWVkTm90ZShvYmoubm90ZShub3RlTnVtLCBvcHRpb25zKSwgbXMpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBvYmoucGVyTm90ZVdyYXAgPSBmdW5jdGlvbih3cmFwcGVyKSB7XHJcbiAgICByZXR1cm4gaW5zdHJ1bWVudEV4dGVuZCh7XHJcbiAgICAgIG5vdGU6IGZ1bmN0aW9uKG5vdGVOdW0sIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gd3JhcHBlcihvYmoubm90ZShub3RlTnVtLCBvcHRpb25zKSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIG9iai5tYXBOb3RlID0gZnVuY3Rpb24oZmNuKSB7XHJcbiAgICByZXR1cm4gaW5zdHJ1bWVudEV4dGVuZCh7XHJcbiAgICAgIG5vdGU6IGZ1bmN0aW9uKG5vdGVOdW0sIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gb2JqLm5vdGUoZmNuKG5vdGVOdW0pLCBvcHRpb25zKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgaWYgKCFvYmouZXZlbnRQcmVwcm9jZXNzb3IpIHtcclxuICAgIG9iai5ldmVudFByZXByb2Nlc3NvciA9IGZ1bmN0aW9uKGV2dCkge1xyXG4gICAgICByZXR1cm4gZXZ0O1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGlmICghb2JqLm5vdGUpIHtcclxuICAgIG9iai5ub3RlID0gZnVuY3Rpb24obiwgb3B0aW9ucykge1xyXG4gICAgICByZXR1cm4gdGhpcy5zY2hlZHVsZV9ub3RlKG4sIG9wdGlvbnMsIDAuMCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxuXHJcbk1VU0lDLm5vdGVUb05vdGVOdW0gPSBmdW5jdGlvbihub3RlTmFtZSkge1xyXG4gIHZhciBub3RlbnVtO1xyXG5cclxuICBub3RlbnVtID0gbm90ZVRvTnVtTWFwW25vdGVOYW1lLmNoYXJBdCgwKV1cclxuICBpZiAobm90ZW51bSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkXHJcbiAgaWYgKG5vdGVOYW1lLmNoYXJBdCgxKSA9PT0gJyMnKSBub3RlbnVtKys7XHJcbiAgaWYgKG5vdGVOYW1lLmNoYXJBdCgxKSA9PT0gJ2InKSBub3RlbnVtLS07XHJcbiAgaWYgKG5vdGVOYW1lLmNoYXJBdCgyKSAhPT0gXCJcIikgbm90ZW51bSArPSAoMTIgKiBwYXJzZUludChub3RlTmFtZS5jaGFyQXQoMikpKTtcclxuICByZXR1cm4gbm90ZW51bTtcclxufTtcclxuXHJcbk1VU0lDLlBvbHlwaG9ueUluc3RydW1lbnQgPSBmdW5jdGlvbihpbm5lckZhY3RvcnksIG1heENoYW5uZWxzKSB7XHJcbiAgdmFyIGluc3RydW1lbnRBcnJheSA9IFtdO1xyXG4gIHZhciBvblVzZSA9IFtdO1xyXG4gIHZhciBxdWV1ZSA9IFtdO1xyXG5cclxuICB2YXIgZnJlZUlkeCA9IGZ1bmN0aW9uKG1heENoYW5uZWxzKSB7XHJcbiAgICBmb3IgKHZhciBpPTA7IGk8bWF4Q2hhbm5lbHM7IGkrKykge1xyXG4gICAgICBpZiAoIW9uVXNlW2ldKSByZXR1cm4gaTtcclxuICAgIH1cclxuICAgIHJldHVybiBxdWV1ZVswXXx8MDtcclxuICB9O1xyXG5cclxuICB0aGlzLm5vdGUgPSBmdW5jdGlvbihub3RlbnVtLCBvcHRpb25zKSB7XHJcbiAgICB2YXIgYyA9IG1heENoYW5uZWxzKCk7XHJcbiAgICB2YXIgcGxheWluZ0lkeCA9IGZyZWVJZHgoYyk7XHJcbiAgICB2YXIgaW5zdHJ1bWVudCA9IGluc3RydW1lbnRBcnJheVtwbGF5aW5nSWR4XTtcclxuXHJcbiAgICBpZiAoIWluc3RydW1lbnQpIHtcclxuICAgICAgaW5zdHJ1bWVudCA9IGlubmVyRmFjdG9yeSgpO1xyXG4gICAgICBpbnN0cnVtZW50QXJyYXlbcGxheWluZ0lkeF0gPSBpbnN0cnVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHF1ZXVlLnB1c2gocGxheWluZ0lkeCk7XHJcbiAgICBpZiAocXVldWUubGVuZ3RoID4gYykgcXVldWUuc2hpZnQoKTtcclxuXHJcbiAgICBvblVzZVtwbGF5aW5nSWR4XSA9IHRydWU7XHJcbiAgICByZXR1cm4gaW5zdHJ1bWVudC5ub3RlKG5vdGVudW0sIG9wdGlvbnMpXHJcbiAgICAgIC5vblN0b3AoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgb25Vc2VbcGxheWluZ0lkeF0gPSBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgaW5zdHJ1bWVudEV4dGVuZCh0aGlzKTtcclxuXHJcbiAgdGhpcy5ldmVudFByZXByb2Nlc3NvciA9IGZ1bmN0aW9uKGV2ZW50LCBldmVudHMpIHtcclxuICAgIHZhciBpbnN0cnVtZW50ID0gaW5zdHJ1bWVudEFycmF5WzBdXHJcbiAgICBpZiAoIWluc3RydW1lbnQpIHtcclxuICAgICAgaW5zdHJ1bWVudCA9IGlubmVyRmFjdG9yeSgpO1xyXG4gICAgICBpbnN0cnVtZW50QXJyYXlbMF0gPSBpbnN0cnVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoaW5zdHJ1bWVudC5ldmVudFByZXByb2Nlc3Nvcnx8ZnVuY3Rpb24oeCl7cmV0dXJuIHg7IH0pKGV2ZW50LCBldmVudHMpO1xyXG4gIH07XHJcbn07XHJcblxyXG5NVVNJQy5Nb25vTm90ZUluc3RydW1lbnQgPSBmdW5jdGlvbihpbm5lcikge1xyXG4gIHZhciBub3RlSW5zdDtcclxuICB2YXIgcGxheWluZ0luc3Q7XHJcbiAgdmFyIGNvdW50ID0gMDtcclxuXHJcbiAgdGhpcy5ub3RlID0gZnVuY3Rpb24obm90ZW51bSwgb3B0aW9ucykge1xyXG4gICAgaWYgKCFub3RlSW5zdCkge1xyXG4gICAgICBub3RlSW5zdCA9IGlubmVyLm5vdGUobm90ZW51bSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE1VU0lDLnBsYXlhYmxlUGlwZUV4dGVuZCh7XHJcbiAgICAgIHBsYXk6IGZ1bmN0aW9uKHBhcmFtKSB7XHJcbiAgICAgICAgaWYgKCFwbGF5aW5nSW5zdCkge1xyXG4gICAgICAgICAgcGxheWluZ0luc3QgPSBub3RlSW5zdC5wbGF5KHBhcmFtKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG5vdGVJbnN0LnNldFZhbHVlKG5vdGVudW0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgIHJldHVybiB7c3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBjb3VudC0tO1xyXG4gICAgICAgICAgaWYgKG5vdGVJbnN0LnJlc2V0ICYmIGNvdW50ID09PSAwKSBub3RlSW5zdC5yZXNldCgpO1xyXG4gICAgICAgIH19O1xyXG4gICAgICB9IFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5jdXJyZW50VGltZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGlubmVyLmN1cnJlbnRUaW1lKCk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5zY2hlZHVsZV9ub3RlID0gZnVuY3Rpb24obm90ZW51bSwgb3B0aW9ucywgc3RhcnQpIHtcclxuICAgIGlmICghbm90ZUluc3QpIHtcclxuICAgICAgbm90ZUluc3QgPSBpbm5lci5ub3RlKG5vdGVudW0sIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBNVVNJQy5wbGF5YWJsZVBpcGVFeHRlbmQoe1xyXG4gICAgICBwbGF5OiBmdW5jdGlvbihwYXJhbSkge1xyXG4gICAgICAgIGlmICghcGxheWluZ0luc3QpIHtcclxuICAgICAgICAgIHBsYXlpbmdJbnN0ID0gbm90ZUluc3QucGxheShwYXJhbSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBub3RlSW5zdC5zZXRWYWx1ZU9uVGltZShub3RlbnVtLCBvcHRpb25zLCBzdGFydCk7XHJcblxyXG4gICAgICAgIHJldHVybiB7c3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBub3RlSW5zdC5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMoKTtcclxuICAgICAgICB9fTtcclxuICAgICAgfSBcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHRoaXMuZGlzcG9zZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKHBsYXlpbmdJbnN0KSB7XHJcbiAgICAgIHBsYXlpbmdJbnN0LnN0b3AoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaW5uZXIuZGlzcG9zZSkgaW5uZXIuZGlzcG9zZSgpO1xyXG4gIH07XHJcblxyXG4gIGluc3RydW1lbnRFeHRlbmQodGhpcyk7XHJcbn07XHJcblxyXG5NVVNJQy5JbnN0cnVtZW50ID0gZnVuY3Rpb24oc291bmRGYWN0b3J5KSB7XHJcbiAgaWYgKHNvdW5kRmFjdG9yeS5zY2hlZHVsZV9mcmVxKSB7XHJcbiAgICB0aGlzLmN1cnJlbnRUaW1lID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHJldHVybiBzb3VuZEZhY3RvcnkuY3VycmVudFRpbWUoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5zY2hlZHVsZV9ub3RlID0gZnVuY3Rpb24obm90ZW51bSwgb3B0aW9ucywgc3RhcnRUaW1lLCBkdXJhdGlvbikge1xyXG4gICAgICBpZiAobm90ZW51bSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICB2YXIgZnJlcSA9IGZyZXF1ZW5jeShub3RlbnVtKTtcclxuXHJcbiAgICAgIHJldHVybiBNVVNJQy5wbGF5YWJsZVBpcGVFeHRlbmQoe1xyXG4gICAgICAgIHBsYXk6IGZ1bmN0aW9uKHBhcmFtKSB7XHJcbiAgICAgICAgICB2YXIgZnIgPSBzb3VuZEZhY3Rvcnkuc2NoZWR1bGVfZnJlcShmcmVxLCBzdGFydFRpbWUpO1xyXG4gICAgICAgICAgdmFyIHNvdW5kSW5zdGFuY2UgPSBmci5wbGF5KHBhcmFtKTtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHNvdW5kSW5zdGFuY2Uuc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB0aGlzLm5vdGUgPSBmdW5jdGlvbihub3RlbnVtKSB7XHJcbiAgICBpZiAobm90ZW51bSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xyXG5cclxuICAgIHZhciBmcmVxID0gZnJlcXVlbmN5KG5vdGVudW0pO1xyXG4gICAgcmV0dXJuIE1VU0lDLnBsYXlhYmxlUGlwZUV4dGVuZCh7XHJcbiAgICAgIHBsYXk6IGZ1bmN0aW9uKHBhcmFtKSB7XHJcbiAgICAgICAgdmFyIGZyID0gc291bmRGYWN0b3J5LmZyZXEoZnJlcSk7XHJcbiAgICAgICAgdmFyIHNvdW5kSW5zdGFuY2UgPSBmci5wbGF5KHBhcmFtKTtcclxuXHJcbiAgICAgICAgaWYgKGZyLnNldEZyZXEpIHtcclxuICAgICAgICAgIHRoaXMuc2V0VmFsdWUgPSBmdW5jdGlvbihuLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGZyLnNldEZyZXEoZnJlcXVlbmN5KG4pLCBvcHRpb25zKTtcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgdGhpcy5yZXNldCA9IGZyLnJlc2V0LmJpbmQoZnIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGZyLmNhbmNlbFNjaGVkdWxlZFZhbHVlcykge1xyXG4gICAgICAgICAgdGhpcy5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMgPSBmci5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMuYmluZChmcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZnIuc2V0RnJlcU9uVGltZSkge1xyXG4gICAgICAgICAgdGhpcy5zZXRWYWx1ZU9uVGltZSA9IGZ1bmN0aW9uKG4sIG9wdGlvbnMsIHN0YXJ0KSB7XHJcbiAgICAgICAgICAgIGZyLnNldEZyZXFPblRpbWUoZnJlcXVlbmN5KG4pLCBvcHRpb25zLCBzdGFydCk7XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIHRoaXMucmVzZXQgPSBmci5yZXNldC5iaW5kKGZyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc291bmRJbnN0YW5jZS5zdG9wKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBpbnN0cnVtZW50RXh0ZW5kKHRoaXMpO1xyXG59O1xyXG5cclxuTVVTSUMuaW5zdHJ1bWVudEV4dGVuZCA9IGluc3RydW1lbnRFeHRlbmQ7XHJcbk1VU0lDLkluc3RydW1lbnQuZnJlcXVlbmN5ID0gZnJlcXVlbmN5O1xyXG5cclxuTVVTSUMuTXVsdGlJbnN0cnVtZW50ID0gZnVuY3Rpb24oaW5zdHJ1bWVudEFycmF5KSB7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5zdHJ1bWVudEFycmF5KSkgcmV0dXJuIE1VU0lDLk11bHRpSW5zdHJ1bWVudC5iaW5kKHRoaXMpKGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIGluc3RydW1lbnRBcnJheTtcclxuICB9KTtcclxuXHJcbiAgdmFyIG5vdGVQbGF5ID0gZnVuY3Rpb24obm90ZSkgeyByZXR1cm4gbm90ZS5wbGF5KCk7IH07XHJcbiAgdmFyIG5vdGVTdG9wID0gZnVuY3Rpb24obm90ZSkgeyByZXR1cm4gbm90ZS5zdG9wKCk7IH07XHJcblxyXG4gIHZhciBNdWx0aU5vdGUgPSBmdW5jdGlvbihub3RlQXJyYXkpIHtcclxuICAgIHRoaXMucGxheSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgbm90ZXMgPSBub3RlQXJyYXkubWFwKG5vdGVQbGF5KTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIG5vdGVzLmZvckVhY2gobm90ZVN0b3ApO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB0aGlzLm5vdGUgPSBmdW5jdGlvbihub3RlTnVtLCBvcHRpb25zKSB7XHJcbiAgICByZXR1cm4gTVVTSUMucGxheWFibGVQaXBlRXh0ZW5kKG5ldyBNdWx0aU5vdGUoaW5zdHJ1bWVudEFycmF5KCkubWFwKGZ1bmN0aW9uKGluc3RydW1lbnQpeyBcclxuICAgICAgcmV0dXJuIGluc3RydW1lbnQubm90ZShub3RlTnVtLCBvcHRpb25zKTtcclxuICAgIH0pKSk7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5kaXNwb3NlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpbnN0cnVtZW50QXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uKGkpIHtcclxuICAgICAgaWYgKGkuZGlzcG9zZSkgaS5kaXNwb3NlKCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBpZiAoaW5zdHJ1bWVudEFycmF5KCkuZXZlcnkoZnVuY3Rpb24oaSkgeyByZXR1cm4gaS5zY2hlZHVsZV9ub3RlOyB9KSkge1xyXG4gICAgdGhpcy5jdXJyZW50VGltZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgdmFyIGluc3RydW1lbnQgPSBpbnN0cnVtZW50QXJyYXkoKS5maWx0ZXIoZnVuY3Rpb24oaSkgeyByZXR1cm4gaS5jdXJyZW50VGltZTsgfSlbMF07XHJcbiAgICAgIGlmICghaW5zdHJ1bWVudCkgcmV0dXJuIDA7XHJcblxyXG4gICAgICByZXR1cm4gaW5zdHJ1bWVudC5jdXJyZW50VGltZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnNjaGVkdWxlX25vdGUgPSBmdW5jdGlvbihub3RlTnVtLCBvcHRpb25zLCBzdGFydFRpbWUsIGR1cmF0aW9uKSB7XHJcbiAgICAgIHJldHVybiBNVVNJQy5wbGF5YWJsZVBpcGVFeHRlbmQobmV3IE11bHRpTm90ZShpbnN0cnVtZW50QXJyYXkoKS5tYXAoZnVuY3Rpb24oaW5zdHJ1bWVudCl7IFxyXG4gICAgICAgIHJldHVybiBpbnN0cnVtZW50LnNjaGVkdWxlX25vdGUobm90ZU51bSwgb3B0aW9ucywgc3RhcnRUaW1lLCBkdXJhdGlvbik7XHJcbiAgICAgIH0pKSk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgaW5zdHJ1bWVudEV4dGVuZCh0aGlzKTtcclxuXHJcbiAgdGhpcy5ldmVudFByZXByb2Nlc3NvciA9IGZ1bmN0aW9uKGV2ZW50LCBldmVudHMpIHtcclxuICAgIHZhciBhcnJheSA9IGluc3RydW1lbnRBcnJheSgpO1xyXG4gICAgaWYgKCFhcnJheS5sZW5ndGgpIHJldHVybiBldmVudDtcclxuXHJcbiAgICB2YXIgcHJvY2Vzc2VkRXZlbnRzID0gYXJyYXkubWFwKGZ1bmN0aW9uKGluc3RydW1lbnQpIHtcclxuICAgICAgaWYgKGluc3RydW1lbnQuZXZlbnRQcmVwcm9jZXNzb3IpIHtcclxuICAgICAgICByZXR1cm4gaW5zdHJ1bWVudC5ldmVudFByZXByb2Nlc3NvcihldmVudCwgZXZlbnRzKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZXZlbnQ7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChwcm9jZXNzZWRFdmVudHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIHJldHVybiBwcm9jZXNzZWRFdmVudHNbMF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgbiA9IDAsIHMgPSAwLCBsID0gMDtcclxuICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcclxuXHJcbiAgICAgIGZvciAodmFyIGk9MDsgaTxwcm9jZXNzZWRFdmVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgZXZ0ID0gcHJvY2Vzc2VkRXZlbnRzW2ldO1xyXG4gICAgICAgIG4gPSBuICsgZXZ0WzBdO1xyXG4gICAgICAgIHMgPSBzICsgZXZ0WzFdO1xyXG4gICAgICAgIGwgPSBsICsgZXZ0WzJdO1xyXG5cclxuICAgICAgICBpZiAoZXZ0WzNdKSB7XHJcbiAgICAgICAgICBmb3IgKHZhciBrIGluIGV2dFszXSkge1xyXG4gICAgICAgICAgICBvcHRpb25zW2tdID0gZXZ0WzNdW2tdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIFtcclxuICAgICAgICBNYXRoLmZsb29yKG4vcHJvY2Vzc2VkRXZlbnRzLmxlbmd0aCksXHJcbiAgICAgICAgcy9wcm9jZXNzZWRFdmVudHMubGVuZ3RoLFxyXG4gICAgICAgIGwvcHJvY2Vzc2VkRXZlbnRzLmxlbmd0aCxcclxuICAgICAgICBvcHRpb25zXHJcbiAgICAgIF07XHJcbiAgICB9XHJcbiAgfTtcclxufTtcclxuXHJcbnZhciBOT1RFUyA9IFsnQycsICdEYicsICdEJywgJ0ViJywgJ0UnLCAnRicsICdHYicsICdHJywgJ0FiJywgJ0EnLCAnQmInLCAnQiddO1xyXG52YXIgbm90ZU51bVRvTm90ZU5hbWUgPSBmdW5jdGlvbihub3RlTnVtKSB7XHJcbiAgdmFyIG5vdGVOYW1lID0gTk9URVNbbm90ZU51bSAlIDEyXTtcclxuICB2YXIgb2N0YXZlTnVtID0gKE1hdGguZmxvb3Iobm90ZU51bSAvIDEyICsgMSkpO1xyXG5cclxuICByZXR1cm4gbm90ZU5hbWUgKyBvY3RhdmVOdW07XHJcbn07XHJcblxyXG5NVVNJQy5QYXRjaEluc3RydW1lbnQgPSBmdW5jdGlvbihub3Rlcykge1xyXG4gIHZhciBub3RlTnVtO1xyXG4gIHZhciBzb3VuZHMgPSBbXTtcclxuXHJcbiAgZm9yICh2YXIgbm90ZU5hbWUgaW4gbm90ZXMpIHtcclxuICAgIHZhciBwbGF5YWJsZSA9IE1VU0lDLlR5cGVzLmNhc3QoXCJwbGF5YWJsZVwiLCBub3Rlc1tub3RlTmFtZV0pO1xyXG4gICAgbm90ZU51bSA9IE1VU0lDLm5vdGVUb05vdGVOdW0obm90ZU5hbWUpO1xyXG4gICAgc291bmRzW25vdGVOdW1dID0gcGxheWFibGU7XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5ub3RlID0gZnVuY3Rpb24obm90ZU51bSkge1xyXG4gICAgdmFyIHMgPSBzb3VuZHNbbm90ZU51bV07XHJcbiAgICBpZiAoIXMpIHJldHVybiBzO1xyXG4gICAgcmV0dXJuIE1VU0lDLnBsYXlhYmxlUGlwZUV4dGVuZCh7XHJcbiAgICAgIHBsYXk6IHMucGxheVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgaW5zdHJ1bWVudEV4dGVuZCh0aGlzKTtcclxufTtcclxuXHJcbk1VU0lDLlNvdW5kZm9udEluc3RydW1lbnQgPSBmdW5jdGlvbihzb3VuZHMsIGF1ZGlvLCBhdWRpb0Rlc3RpbmF0aW9uKSB7XHJcblxyXG4gIHZhciBub3RlQXVkaW8gPSBbXTtcclxuXHJcbmZ1bmN0aW9uIF9iYXNlNjRUb0FycmF5QnVmZmVyKGJhc2U2NCkge1xyXG4gICAgdmFyIGJpbmFyeV9zdHJpbmcgPSAgd2luZG93LmF0b2IoYmFzZTY0KTtcclxuICAgIHZhciBsZW4gPSBiaW5hcnlfc3RyaW5nLmxlbmd0aDtcclxuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KCBsZW4gKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspICAgICAgICB7XHJcbiAgICAgICAgdmFyIGFzY2lpID0gYmluYXJ5X3N0cmluZy5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGJ5dGVzW2ldID0gYXNjaWk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYnl0ZXMuYnVmZmVyO1xyXG59O1xyXG4gIGF1ZGlvID0gYXVkaW8uYXVkaW9cclxuICBcclxuICBmb3IgKHZhciBpID0gMDsgaTw3MjsgaSsrKSB7XHJcbiAgICAoZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBpbmRleCA9IGk7XHJcbiAgICAgIHZhciB4bWxodHRwPW5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICB2YXIgbm90ZU5hbWUgPSBub3RlTnVtVG9Ob3RlTmFtZShpKTtcclxuICAgICAgdmFyIGRhdGEgPSBzb3VuZHNbbm90ZU5hbWVdO1xyXG4gICAgICB2YXIgZW5jb2RlZCA9IGRhdGEuc3BsaXQoXCIsXCIpWzFdO1xyXG5cclxuICAgICAgYXVkaW8uZGVjb2RlQXVkaW9EYXRhKF9iYXNlNjRUb0FycmF5QnVmZmVyKGVuY29kZWQpLCBmdW5jdGlvbihidWZmZXIpIHtcclxuICAgICAgICBub3RlQXVkaW9baW5kZXhdID0gYnVmZmVyO1xyXG4gICAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwiZXJyb3IgXCIgKyBlcnIgKyBcIiBsb2FkaW5nIFwiICsgaW5kZXgpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KSgpO1xyXG4gIH07XHJcblxyXG4gIHRoaXMubm90ZSA9IGZ1bmN0aW9uKG5vdGVudW0pIHtcclxuICAgIHZhciBzb3VyY2UgPSBhdWRpby5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcclxuICAgIHJldHVybiBNVVNJQy5wbGF5YWJsZVBpcGVFeHRlbmQoe1xyXG4gICAgICBwbGF5OiBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgc291cmNlID0gYXVkaW8uY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICAgICAgc291cmNlLmJ1ZmZlciA9IG5vdGVBdWRpb1tub3RlbnVtXTtcclxuICAgICAgICBzb3VyY2UuY29ubmVjdChhdWRpb0Rlc3RpbmF0aW9uLl9kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgc291cmNlLnN0YXJ0KDApO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc291cmNlLnN0b3AoMCk7XHJcbiAgICAgICAgICAgIHNvdXJjZS5kaXNjb25uZWN0KGF1ZGlvRGVzdGluYXRpb24uX2Rlc3RpbmF0aW9uKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBpbnN0cnVtZW50RXh0ZW5kKHRoaXMpO1xyXG5cclxufTtcclxuXHJcbk1VU0lDLlR5cGVzLnJlZ2lzdGVyKFwiaW5zdHJ1bWVudFwiLCBmdW5jdGlvbihpbnN0cnVtZW50KSB7XHJcbiAgaWYgKGluc3RydW1lbnQubm90ZSkgcmV0dXJuIGluc3RydW1lbnQ7XHJcbn0pO1xyXG5cclxuTVVTSUMuVHlwZXMucmVnaXN0ZXIoXCJpbnN0cnVtZW50XCIsIGZ1bmN0aW9uKHNvdW5kR2VuZXJhdG9yKSB7XHJcbiAgaWYgKHNvdW5kR2VuZXJhdG9yLmZyZXEpIHtcclxuICAgIHJldHVybiBuZXcgTVVTSUMuSW5zdHJ1bWVudChzb3VuZEdlbmVyYXRvcik7XHJcbiAgfVxyXG59KTtcclxuXHJcbk1VU0lDLlR5cGVzLnJlZ2lzdGVyKFwiaW5zdHJ1bWVudFwiLCBmdW5jdGlvbihwbGF5YWJsZSkge1xyXG4gIGlmIChwbGF5YWJsZS5wbGF5KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBub3RlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBwbGF5YWJsZTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbn0pO1xyXG5cclxudmFyIG51bGxQbGF5ID0ge1xyXG4gIHBsYXk6IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4ge3N0b3A6IGZ1bmN0aW9uKCl7fX07XHJcbiAgfVxyXG59O1xyXG5cclxuTVVTSUMuVHlwZXMucmVnaXN0ZXIoXCJpbnN0cnVtZW50XCIsIGZ1bmN0aW9uKGZjbikge1xyXG4gIGlmICh0eXBlb2YgZmNuID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5vdGU6IGZ1bmN0aW9uKG4pIHtcclxuICAgICAgICByZXR1cm4gZmNuKG4pIHx8IG51bGxQbGF5O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxufSk7XHJcblxyXG5NVVNJQy5UeXBlcy5yZWdpc3RlcihcImluc3RydW1lbnRcIiwgZnVuY3Rpb24oYXJyYXkpIHtcclxuICBpZiAoYXJyYXkgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgcmV0dXJuIG5ldyBNVVNJQy5NdWx0aUluc3RydW1lbnQoYXJyYXkpO1xyXG4gIH1cclxufSk7XHJcblxyXG5NVVNJQy5UeXBlcy5yZWdpc3RlcihcImluc3RydW1lbnRcIiwgZnVuY3Rpb24ocGxhaW5PYmplY3QpIHtcclxuICBpZiAodHlwZW9mIHBsYWluT2JqZWN0ID09PSBcIm9iamVjdFwiICYmIHBsYWluT2JqZWN0LmNvbnN0cnVjdG9yID09PSBPYmplY3QpIHtcclxuICAgIHJldHVybiBuZXcgTVVTSUMuUGF0Y2hJbnN0cnVtZW50KHBsYWluT2JqZWN0KVxyXG4gIH1cclxufSk7XHJcblxyXG5NVVNJQy5TdG9wRXZlbnQgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gZnVuY3Rpb24obm90ZSkge1xyXG4gICAgICByZXR1cm4gTVVTSUMucGxheWFibGVQaXBlRXh0ZW5kKHtcclxuICAgICAgICAgIHBsYXk6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHZhciBwYXJhbU9iamVjdCA9IHtcclxuICAgICAgICAgICAgICAgICAgb25wbGF5OiBmdW5jdGlvbigpIHt9LFxyXG4gICAgICAgICAgICAgICAgICBvbnN0b3A6IGZ1bmN0aW9uKCkge31cclxuICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxOb3RlID0gbm90ZS5wbGF5KHBhcmFtT2JqZWN0KTtcclxuICAgICAgICAgICAgICBwYXJhbU9iamVjdC5vbnBsYXkoKTtcclxuICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHBhcmFtT2JqZWN0Lm9uc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxOb3RlLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcbn07XHJcblxyXG59KSgpOyIsIk1VU0lDLkVmZmVjdHMgPSBNVVNJQy5FZmZlY3RzIHx8IHt9O1xyXG5cclxudmFyIExlbW9uYWRlUGxheWFibGUgPSBmdW5jdGlvbihtdXNpYywgZGVzdGluYXRpb24sIG91dHB1dEZjbiwgb3BzKSB7XHJcbiAgdGhpcy5fZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcclxuICB0aGlzLl9tdXNpYyA9IG11c2ljO1xyXG4gIHRoaXMuX29wcyA9IG9wcztcclxuICB0aGlzLl9vdXRwdXQgPSBvdXRwdXRGY247XHJcbn07XHJcblxyXG5MZW1vbmFkZVBsYXlhYmxlLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGRlc3RpbmF0aW9uID0gdGhpcy5fZGVzdGluYXRpb247XHJcbiAgdmFyIG9wcyA9IHRoaXMuX29wcztcclxuICB2YXIgb3BzTGVuZ3RoID0gb3BzLmxlbmd0aDtcclxuICB2YXIgc2lnbmFsQXJyYXkgPSBbXTtcclxuICB2YXIgcGhhc2VBcnJheSA9IFtdO1xyXG5cclxuXHJcbiAgZm9yICh2YXIgaT0wOyBpPG9wc0xlbmd0aDsgaSsrKSB7XHJcbiAgICBzaWduYWxBcnJheVtpXSA9IDA7XHJcbiAgICBwaGFzZUFycmF5W2ldID0gMDtcclxuICAgIG9wc1tpXS53YXZlID0gTVVTSUMuVHlwZXMuY2FzdChcImZ1bmN0aW9uXCIsIG9wc1tpXS53YXZlKVxyXG4gIH1cclxuXHJcbiAgdmFyIGxhc3RUID0gMDtcclxuICB2YXIgb3V0cHV0RmNuID0gdGhpcy5fb3V0cHV0O1xyXG4gIHZhciBmb3JtdWxhR2VuZXJhdG9yID0gbmV3IE1VU0lDLkVmZmVjdHMuRm9ybXVsYSh0aGlzLl9tdXNpYywgZGVzdGluYXRpb24sIGZ1bmN0aW9uKGlucHV0LCB0KSB7XHJcbiAgICB2YXIgZGVsdGF5ID0gdC1sYXN0VDtcclxuICAgIGZvciAodmFyIGk9MDsgaTxvcHNMZW5ndGg7IGkrKykge1xyXG4gICAgICBsYXN0VCA9IHQ7XHJcbiAgICAgIC8vIEVVTEVSXHJcbiAgICAgIHBoYXNlQXJyYXlbaV0gPSBwaGFzZUFycmF5W2ldICsgZGVsdGF5ICogb3BzW2ldLmZyZXF1ZW5jeS5hcHBseShudWxsLCBzaWduYWxBcnJheSk7XHJcblxyXG4gICAgICB2YXIgcGhhc2UgPSBwaGFzZUFycmF5W2ldICUgMTtcclxuICAgICAgaWYgKHBoYXNlIDwgMCkgcGhhc2UrKztcclxuICAgICAgc2lnbmFsQXJyYXlbaV0gPSBvcHNbaV0ud2F2ZShwaGFzZSlcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dEZjbi5hcHBseShudWxsLCBzaWduYWxBcnJheSk7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHtcclxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBmb3JtdWxhR2VuZXJhdG9yLmRpc2Nvbm5lY3QoZGVzdGluYXRpb24uX2Rlc3RpbmF0aW9uKTtcclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cclxuTVVTSUMucGxheWFibGVQaXBlRXh0ZW5kKExlbW9uYWRlUGxheWFibGUucHJvdG90eXBlKTtcclxuXHJcbk1VU0lDLkVmZmVjdHMucmVnaXN0ZXIoXCJsZW1vbmFkZVwiLCBmdW5jdGlvbihtdXNpYywgbmV4dCwgb3B0aW9ucykge1xyXG4gIHJldHVybiBuZXcgTGVtb25hZGVQbGF5YWJsZShtdXNpYywgbmV4dC5fYXVkaW9EZXN0aW5hdGlvbiwgb3B0aW9ucy5vdXRwdXQsIG9wdGlvbnMub3BzKTtcclxufSk7IiwiKGZ1bmN0aW9uKCkge1xyXG5NVVNJQy5NYXRoID0gTVVTSUMuTWF0aCB8fCB7fTtcclxuXHJcbk1VU0lDLk1hdGguYnBtVG9TZWNvbmRUaWNrID0gZnVuY3Rpb24ob3B0aW9ucywgYnBtKSB7XHJcbiAgcmV0dXJuIDYwMDAwIC8gYnBtIC8gb3B0aW9ucy50aWNrc19wZXJfYmVhdDtcclxufTtcclxuXHJcbnZhciBtYWtlRXZhbHVhYmxlSW52ZXJzZUZ1bmN0aW9uRnJvbVBhcnRzID0gZnVuY3Rpb24oYXJyYXkpIHtcclxuICBhcnJheSA9IGFycmF5Lm1hcChmdW5jdGlvbihwYXJ0KSB7XHJcbiAgICB2YXIgZiA9IG1ha2VFdmFsdWFibGVGdW5jdGlvbihwYXJ0LmYpO1xyXG4gICAgdmFyIGludmVyc2VfZiA9IG1ha2VFdmFsdWFibGVJbnZlcnNlRnVuY3Rpb24ocGFydC5mKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGluaXQ6IGYocGFydC5pbml0KSxcclxuICAgICAgZW5kOiBmKHBhcnQuZW5kKSxcclxuICAgICAgZjogaW52ZXJzZV9mXHJcbiAgICB9O1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gZnVuY3Rpb24oeSkge1xyXG4gICAgdmFyIHBhcnQgPSBhcnJheS5maW5kKGZ1bmN0aW9uKHApIHtcclxuICAgICAgcmV0dXJuIHkgPj0gcC5pbml0ICYmICghcC5lbmQgfHwgeSA8PSBwLmVuZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIXBhcnQpIHJldHVybiAwO1xyXG4gICAgcmV0dXJuIHBhcnQuZih5KTtcclxuICB9OyAgXHJcbn07XHJcblxyXG52YXIgbWFrZUV2YWx1YWJsZUZ1bmN0aW9uRnJvbVBhcnRzID0gZnVuY3Rpb24oYXJyYXkpIHtcclxuICBhcnJheSA9IGFycmF5Lm1hcChmdW5jdGlvbihwYXJ0KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBpbml0OiBwYXJ0LmluaXQsXHJcbiAgICAgIGVuZDogcGFydC5lbmQsXHJcbiAgICAgIGY6IG1ha2VFdmFsdWFibGVGdW5jdGlvbihwYXJ0LmYpXHJcbiAgICB9O1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xyXG4gICAgdmFyIHBhcnQgPSBhcnJheS5maW5kKGZ1bmN0aW9uKHApIHtcclxuICAgICAgcmV0dXJuIHggPj0gcC5pbml0ICYmICghcC5lbmQgfHwgeCA8PSBwLmVuZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIXBhcnQpIHJldHVybiAwO1xyXG4gICAgcmV0dXJuIHBhcnQuZih4KTtcclxuICB9O1xyXG59O1xyXG5cclxudmFyIG1ha2VFdmFsdWFibGVJbnZlcnNlRnVuY3Rpb24gPSBmdW5jdGlvbihhcnJheSkge1xyXG4gIGlmIChhcnJheS5sZW5ndGggPT0gMikge1xyXG4gICAgdmFyIGIgPSBhcnJheVsxXTtcclxuICAgIHZhciBhID0gYXJyYXlbMF07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oeSkge1xyXG4gICAgICByZXR1cm4gKHkgLSBhKS9iOyAgLy8geSA9IGIqeCArIGEgIDsgICB5IC0gYSA9IGIqeDsgKHkgLSBhKSAvIGIgPSB4O1xyXG4gICAgfTtcclxuICB9IGVsc2UgaWYgKGFycmF5Lmxlbmd0aCA9PSAzKSB7XHJcbiAgICB2YXIgYSA9IGFycmF5WzJdO1xyXG4gICAgdmFyIGIgPSBhcnJheVsxXTtcclxuICAgIHZhciBjID0gYXJyYXlbMF07ICAgICAgXHJcblxyXG4gICAgaWYgKGEgPT09IDApIHtcclxuICAgICAgcmV0dXJuIG1ha2VFdmFsdWFibGVJbnZlcnNlRnVuY3Rpb24oW2MsYl0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHkpIHtcclxuICAgICAgICByZXR1cm4gMiooYy15KSAvICgtYiAtIE1hdGguc3FydChiKmIgLSA0KmEqKGMteSkpKTtcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5cclxudmFyIG1ha2VFdmFsdWFibGVGdW5jdGlvbiA9IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgaWYgKGFycmF5Lmxlbmd0aCA9PSAyKSB7XHJcbiAgICB2YXIgYiA9IGFycmF5WzFdO1xyXG4gICAgdmFyIGEgPSBhcnJheVswXTtcclxuICAgIHJldHVybiBmdW5jdGlvbih4KSB7XHJcbiAgICAgIHJldHVybiBiKnggKyBhO1xyXG4gICAgfTtcclxuICB9IGVsc2UgaWYgKGFycmF5Lmxlbmd0aCA9PSAzKSB7XHJcbiAgICB2YXIgYSA9IGFycmF5WzJdO1xyXG4gICAgdmFyIGIgPSBhcnJheVsxXTtcclxuICAgIHZhciBjID0gYXJyYXlbMF07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oeCkge1xyXG4gICAgICByZXR1cm4gYSp4KnggKyBiKnggKyBjO1xyXG4gICAgfTtcclxuICB9XHJcbn07XHJcblxyXG52YXIgaW50ZWdyYXRlID0gZnVuY3Rpb24oYXJyYXksIGxhc3RQb2ludFZhbHVlKSB7XHJcbiAgdmFyIHggPSBsYXN0UG9pbnRWYWx1ZVswXTtcclxuICB2YXIgeSA9IGxhc3RQb2ludFZhbHVlWzFdO1xyXG5cclxuICBpZiAoYXJyYXkubGVuZ3RoID09IDEpIHtcclxuICAgIHZhciBjID0gLWFycmF5WzBdKnggKyB5O1xyXG4gICAgcmV0dXJuIFtjLCBhcnJheVswXV07XHJcbiAgfSBlbHNlIGlmIChhcnJheS5sZW5ndGggPT0gMikge1xyXG4gICAgdmFyIGMgPSB5IC0geCphcnJheVswXSAtIHgqeCphcnJheVsxXS8yO1xyXG4gICAgcmV0dXJuIFtjLCBhcnJheVswXSwgYXJyYXlbMV0vMl07XHJcbiAgfVxyXG59O1xyXG5cclxuTVVTSUMuTWF0aC5pbnRlZ3JhdGVCcG1FdmVudHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgdmFyIGN1dEJwbUV2ZW50ID0gZnVuY3Rpb24oYnBtRXZlbnQxKSB7XHJcbiAgICB2YXIgbCA9IGJwbUV2ZW50MS5sO1xyXG4gICAgb3B0aW9ucy5icG1fZXZlbnRzLmZvckVhY2goZnVuY3Rpb24oYnBtRXZlbnQyKSB7XHJcbiAgICAgIGlmIChicG1FdmVudDIgIT09IGJwbUV2ZW50MSAmJiBicG1FdmVudDIucyA+PSBicG1FdmVudDEucykge1xyXG4gICAgICAgIGlmIChicG1FdmVudDIucyA8IGJwbUV2ZW50MS5zICsgbCkge1xyXG4gICAgICAgICAgdmFyIGN1dEwgPSBicG1FdmVudDIucyAtIGJwbUV2ZW50MS5zO1xyXG4gICAgICAgICAgaWYgKGN1dEwgPCBsKSBsID0gY3V0TDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHM6IGJwbUV2ZW50MS5zLFxyXG4gICAgICBsOiBsLFxyXG4gICAgICBuOiBNYXRoLm1heChicG1FdmVudDEubiwgMSlcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgb3B0aW9ucy5icG1fZXZlbnRzID0gb3B0aW9ucy5icG1fZXZlbnRzLm1hcChjdXRCcG1FdmVudCk7XHJcblxyXG4gIHZhciBmaXJzdEV2ZW50U3RhcnQgPSBvcHRpb25zLmJwbV9ldmVudHNbMF0ucztcclxuICB2YXIgcGFydHMgPSBbe1xyXG4gICAgaW5pdDogMCxcclxuICAgIGVuZDogZmlyc3RFdmVudFN0YXJ0LFxyXG4gICAgZjogW01VU0lDLk1hdGguYnBtVG9TZWNvbmRUaWNrKG9wdGlvbnMsIG9wdGlvbnMuYnBtKV1cclxuICB9XTtcclxuXHJcbiAgZm9yICh2YXIgaT0wOyBpPG9wdGlvbnMuYnBtX2V2ZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIGJwbV9ldmVudCA9IG9wdGlvbnMuYnBtX2V2ZW50c1tpXTtcclxuICAgIHZhciBuZXh0X2JwbV9ldmVudCA9IG9wdGlvbnMuYnBtX2V2ZW50c1tpKzFdO1xyXG5cclxuICAgIHZhciBpbml0X3NlY29uZF90aWNrID0gTVVTSUMuTWF0aC5icG1Ub1NlY29uZFRpY2sob3B0aW9ucywgXHJcbiAgICAgIGkgPT0gMCA/IG9wdGlvbnMuYnBtIDogb3B0aW9ucy5icG1fZXZlbnRzW2ktMV0ubik7XHJcbiAgICB2YXIgZW5kX3NlY29uZF90aWNrID0gTVVTSUMuTWF0aC5icG1Ub1NlY29uZFRpY2sob3B0aW9ucywgYnBtX2V2ZW50Lm4pO1xyXG5cclxuICAgIHZhciBiID0gKGVuZF9zZWNvbmRfdGljayAtIGluaXRfc2Vjb25kX3RpY2spIC8gYnBtX2V2ZW50Lmw7XHJcbiAgICB2YXIgYSA9IGluaXRfc2Vjb25kX3RpY2sgLSBiICogYnBtX2V2ZW50LnM7XHJcblxyXG4gICAgLy8gZihicG1fZXZlbnQucykgPSAgaW5pdF9zZWNvbmRfdGlja1xyXG4gICAgLy8gZihicG1fZXZlbnQucyArIGJwbV9ldmVudC5sKSA9ICBpbml0X3NlY29uZF90aWNrIC0gYiAqIGJwbV9ldmVudC5zICsgYiAqIChicG1fZXZlbnQucyArIGJwbV9ldmVudC5sKVxyXG4gICAgLy8gZihicG1fZXZlbnQucyArIGJwbV9ldmVudC5sKSA9ICBpbml0X3NlY29uZF90aWNrICsgYiAqIGJwbV9ldmVudC5sXHJcbiAgICAvLyBmKGJwbV9ldmVudC5zICsgYnBtX2V2ZW50LmwpID0gIGVuZF9zZWNvbmRfdGlja1xyXG5cclxuICAgIGlmIChicG1fZXZlbnQubCA9PT0gMCkge1xyXG4gICAgICBwYXJ0cy5wdXNoKHtcclxuICAgICAgICBpbml0OiBicG1fZXZlbnQucyxcclxuICAgICAgICBlbmQ6IG5leHRfYnBtX2V2ZW50ICYmIG5leHRfYnBtX2V2ZW50LnMsXHJcbiAgICAgICAgZjogW2VuZF9zZWNvbmRfdGlja11cclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwYXJ0cy5wdXNoKHtcclxuICAgICAgICBpbml0OiBicG1fZXZlbnQucyxcclxuICAgICAgICBlbmQ6IGJwbV9ldmVudC5zICsgYnBtX2V2ZW50LmwsXHJcbiAgICAgICAgZjogW2EsIGJdXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgcGFydHMucHVzaCh7XHJcbiAgICAgICAgaW5pdDogYnBtX2V2ZW50LnMgKyBicG1fZXZlbnQubCxcclxuICAgICAgICBlbmQ6IG5leHRfYnBtX2V2ZW50ICYmIG5leHRfYnBtX2V2ZW50LnMsXHJcbiAgICAgICAgZjogW2VuZF9zZWNvbmRfdGlja11cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyIGludGVncmF0ZWRQYXJ0cyA9IFtdO1xyXG4gIHZhciBsYXN0UG9pbnRWYWx1ZSA9IFswLDBdO1xyXG5cclxuICBmb3IgKHZhciBpPTA7IGk8cGFydHMubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XHJcbiAgICB2YXIgaW50ZWdyYWwgPSBpbnRlZ3JhdGUocGFydC5mLCBsYXN0UG9pbnRWYWx1ZSk7XHJcblxyXG4gICAgaW50ZWdyYXRlZFBhcnRzLnB1c2goe1xyXG4gICAgICBpbml0OiBwYXJ0LmluaXQsXHJcbiAgICAgIGVuZDogcGFydC5lbmQsXHJcbiAgICAgIGY6IGludGVncmF0ZShwYXJ0LmYsIGxhc3RQb2ludFZhbHVlKVxyXG4gICAgfSk7XHJcblxyXG4gICAgbGFzdFBvaW50VmFsdWUgPSBbcGFydC5lbmQsIG1ha2VFdmFsdWFibGVGdW5jdGlvbihpbnRlZ3JhbCkocGFydC5lbmQpXTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gaW50ZWdyYXRlZFBhcnRzO1xyXG59O1xyXG5cclxuTVVTSUMuTWF0aC50aWNrc1RvVGltZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICBpZiAob3B0aW9ucy5zdGFydCkge1xyXG4gICAgdmFyIHRpbWUgPSBNVVNJQy5NYXRoLnRpY2tzVG9UaW1lKHtcclxuICAgICAgYnBtOiBvcHRpb25zLmJwbSxcclxuICAgICAgdGlja3NfcGVyX2JlYXQ6IG9wdGlvbnMudGlja3NfcGVyX2JlYXQsXHJcbiAgICAgIGJwbV9ldmVudHM6IG9wdGlvbnMuYnBtX2V2ZW50c1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIHN0YXJ0VGltZSA9IHRpbWUob3B0aW9ucy5zdGFydCk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24odGlja3MpIHtcclxuICAgICAgcmV0dXJuIHRpbWUodGlja3MpIC0gc3RhcnRUaW1lO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHZhciBicG0gPSBvcHRpb25zLmJwbTtcclxuICB2YXIgdGlja3NfcGVyX2JlYXQgPSBvcHRpb25zLnRpY2tzX3Blcl9iZWF0O1xyXG5cclxuICBpZiAob3B0aW9ucy5icG1fZXZlbnRzICYmIG9wdGlvbnMuYnBtX2V2ZW50cy5sZW5ndGgpIHtcclxuICAgIHZhciBpbnRlZ3JhbCA9IE1VU0lDLk1hdGguaW50ZWdyYXRlQnBtRXZlbnRzKG9wdGlvbnMpO1xyXG4gICAgcmV0dXJuIG1ha2VFdmFsdWFibGVGdW5jdGlvbkZyb21QYXJ0cyhpbnRlZ3JhbCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciBzY2FsZSA9IDYwMDAwIC8gYnBtIC8gdGlja3NfcGVyX2JlYXQ7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24odGlja3MpIHtcclxuICAgICAgcmV0dXJuIHRpY2tzKnNjYWxlO1xyXG4gICAgfTtcclxuICB9XHJcbn07XHJcblxyXG5NVVNJQy5NYXRoLnRpbWVUb1RpY2tzID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gIGlmIChvcHRpb25zLnN0YXJ0KSB7XHJcbiAgICB2YXIgcmV0ID0gTVVTSUMuTWF0aC50aW1lVG9UaWNrcyh7XHJcbiAgICAgIGJwbTogb3B0aW9ucy5icG0sXHJcbiAgICAgIHRpY2tzX3Blcl9iZWF0OiBvcHRpb25zLnRpY2tzX3Blcl9iZWF0LFxyXG4gICAgICBicG1fZXZlbnRzOiBvcHRpb25zLmJwbV9ldmVudHNcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciB0aW1lID0gTVVTSUMuTWF0aC50aWNrc1RvVGltZSh7XHJcbiAgICAgIGJwbTogb3B0aW9ucy5icG0sXHJcbiAgICAgIHRpY2tzX3Blcl9iZWF0OiBvcHRpb25zLnRpY2tzX3Blcl9iZWF0LFxyXG4gICAgICBicG1fZXZlbnRzOiBvcHRpb25zLmJwbV9ldmVudHNcclxuICAgIH0pO1xyXG5cclxuICAgIHZhciBzdGFydFRpbWUgPSB0aW1lKG9wdGlvbnMuc3RhcnQpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHRpbWUpIHtcclxuICAgICAgcmV0dXJuIHJldCh0aW1lICsgc3RhcnRUaW1lKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB2YXIgYnBtID0gb3B0aW9ucy5icG07XHJcbiAgdmFyIHRpY2tzX3Blcl9iZWF0ID0gb3B0aW9ucy50aWNrc19wZXJfYmVhdDtcclxuXHJcbiAgaWYgKG9wdGlvbnMuYnBtX2V2ZW50cyAmJiBvcHRpb25zLmJwbV9ldmVudHMubGVuZ3RoKSB7XHJcbiAgICB2YXIgaW50ZWdyYWwgPSBNVVNJQy5NYXRoLmludGVncmF0ZUJwbUV2ZW50cyhvcHRpb25zKTtcclxuICAgIHJldHVybiBtYWtlRXZhbHVhYmxlSW52ZXJzZUZ1bmN0aW9uRnJvbVBhcnRzKGludGVncmFsKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdmFyIGludmVyc2VTY2FsZSA9IHRpY2tzX3Blcl9iZWF0ICogYnBtIC8gNjAwMDA7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24odGltZSkge1xyXG4gICAgICByZXR1cm4gdGltZSppbnZlcnNlU2NhbGU7XHJcbiAgICB9O1xyXG4gIH1cclxufTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG5cclxuTVVTSUMuTm90ZVNlcXVlbmNlID0gZnVuY3Rpb24oZnVuc2VxLCBvcHRpb25zKSB7XHJcbiAgdmFyIGNsb2NrO1xyXG4gIHZhciBzb25nQ3R4ID0gb3B0aW9ucyAmJiBvcHRpb25zLnNvbmdDdHg7XHJcblxyXG4gIGlmICghZnVuc2VxKXtcclxuICAgIGNsb2NrID0gTVVTSUMuVXRpbHMuQ2xvY2soXHJcbiAgICAgIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cuYmluZCh3aW5kb3cucGVyZm9ybWFuY2UpLFxyXG4gICAgICBzZXRJbnRlcnZhbCxcclxuICAgICAgY2xlYXJJbnRlcnZhbCxcclxuICAgICAgNTAwKTtcclxuICAgIGZ1bnNlcSA9IE1VU0lDLlV0aWxzLkZ1bmN0aW9uU2VxKGNsb2NrLCBzZXRUaW1lb3V0LCBjbGVhclRpbWVvdXQpO1xyXG4gICAgZnVuc2VxLnB1c2goe3Q6IDAsIGY6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAoc29uZ0N0eC5yZWZlcmVuY2VJbnN0cnVtZW50KSB7XHJcbiAgICAgICAgc29uZ0N0eC5zZXF1ZW5jZVN0YXJ0VGltZSA9IHNvbmdDdHgucmVmZXJlbmNlSW5zdHJ1bWVudC5jdXJyZW50VGltZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LCBleHRlcm5hbFNjaGVkdWxlOiB0cnVlfSk7XHJcbiAgfVxyXG5cclxuICB0aGlzLl90aW1lID0gb3B0aW9ucyAmJiBvcHRpb25zLnRpbWU7XHJcbiAgdGhpcy5fZnVuc2VxID0gZnVuc2VxO1xyXG4gIHRoaXMuX3RvdGFsZHVyYXRpb24gPSAwO1xyXG4gIHRoaXMuX25vdGVpZCA9IDA7XHJcbiAgdGhpcy5fY29udGV4dExpc3QgPSBbXTtcclxufTtcclxuXHJcbk1VU0lDLk5vdGVTZXF1ZW5jZS5QbGF5YWJsZSA9IGZ1bmN0aW9uKG5vdGVzZXEsIGluc3RydW1lbnQsIGR1cmF0aW9uLCBjb250ZXh0TGlzdCkge1xyXG4gIHRoaXMuX25vdGVzZXEgPSBub3Rlc2VxO1xyXG4gIHRoaXMuX2luc3RydW1lbnQgPSBpbnN0cnVtZW50O1xyXG4gIHRoaXMuX2R1cmF0aW9uID0gZHVyYXRpb247XHJcbiAgdGhpcy5fY29udGV4dExpc3QgPSBjb250ZXh0TGlzdCB8fCBbXTtcclxufTtcclxuXHJcbk1VU0lDLk5vdGVTZXF1ZW5jZS5QbGF5YWJsZS5wcm90b3R5cGUubG9vcCA9IGZ1bmN0aW9uKHRpbWVzKSB7XHJcbiAgcmV0dXJuIE1VU0lDLkxvb3AodGhpcywgdGltZXMpO1xyXG59O1xyXG5cclxuTVVTSUMuTm90ZVNlcXVlbmNlLlBsYXlhYmxlLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLl9kdXJhdGlvbjtcclxufTtcclxuXHJcbk1VU0lDLk5vdGVTZXF1ZW5jZS5QbGF5YWJsZS5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICB2YXIgY29udGV4dCA9IE1VU0lDLk5vdGVTZXF1ZW5jZS5jb250ZXh0KHRoaXMuX2luc3RydW1lbnQsIHRoaXMuX2NvbnRleHRMaXN0KTtcclxuICB0aGlzLl9ydW5uaW5nRnVuU2VxID0gdGhpcy5fbm90ZXNlcS5fZnVuc2VxLnN0YXJ0KGNvbnRleHQpO1xyXG4gIHJldHVybiBuZXcgTVVTSUMuTm90ZVNlcXVlbmNlLlBsYXlpbmcodGhpcy5fcnVubmluZ0Z1blNlcSwgY29udGV4dCk7XHJcbn07XHJcblxyXG5NVVNJQy5Ob3RlU2VxdWVuY2UuUGxheWluZyA9IGZ1bmN0aW9uKHJ1bm5pbmdGdW5TZXEsIGN0eCkge1xyXG4gIHRoaXMuX3J1bm5pbmdGdW5TZXEgPSBydW5uaW5nRnVuU2VxO1xyXG4gIHRoaXMuX2NvbnRleHQgPSBjdHg7XHJcbn07XHJcblxyXG5NVVNJQy5Ob3RlU2VxdWVuY2UuUGxheWluZy5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG4gIGlmICh0aGlzLl9jb250ZXh0LnBsYXlpbmcpIHRoaXMuX2NvbnRleHQucGxheWluZy5zdG9wKCk7XHJcbiAgdGhpcy5fY29udGV4dC5zdG9wKCk7XHJcbiAgdGhpcy5fcnVubmluZ0Z1blNlcS5zdG9wKCk7XHJcbn07XHJcblxyXG5NVVNJQy5Ob3RlU2VxdWVuY2UucHJvdG90eXBlLnBhZGRpbmdUbyA9IGZ1bmN0aW9uKHRpY2tzKXtcclxuICB0aGlzLl90b3RhbGR1cmF0aW9uID0gdGhpcy5fdGltZSh0aWNrcyk7XHJcbn07XHJcblxyXG5NVVNJQy5Ob3RlU2VxdWVuY2UucHJvdG90eXBlLnBhZGRpbmcgPSBmdW5jdGlvbih0aW1lKXtcclxuICB0aGlzLl90b3RhbGR1cmF0aW9uID0gdGhpcy5fdG90YWxkdXJhdGlvbiArIHRpbWU7XHJcbn07XHJcblxyXG5NVVNJQy5Ob3RlU2VxdWVuY2UucHJvdG90eXBlLnB1c2hDYWxsYmFjayA9IGZ1bmN0aW9uKGFycmF5KXtcclxuICB2YXIgc3RhcnRUaW1lID0gdGhpcy5fdGltZShhcnJheVswXSk7XHJcbiAgaWYgKHN0YXJ0VGltZSA8IDApIHJldHVybjtcclxuXHJcbiAgdmFyIGYgPSBhcnJheVsxXTtcclxuICB0aGlzLl9mdW5zZXEucHVzaCh7dDpzdGFydFRpbWUsIGY6IGZ9KTtcclxufTtcclxuXHJcbk1VU0lDLk5vdGVTZXF1ZW5jZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uKGFycmF5LCBiYXNlQ3R4KXtcclxuICB2YXIgbm90ZU51bSA9IGFycmF5WzBdO1xyXG4gIHZhciBzdGFydFRpbWUgPSB0aGlzLl90aW1lKGFycmF5WzFdKTtcclxuICB2YXIgZHVyYXRpb24gPSB0aGlzLl90aW1lKGFycmF5WzFdK2FycmF5WzJdKSAtIHN0YXJ0VGltZTtcclxuXHJcbiAgaWYgKHN0YXJ0VGltZSA8IDApIHtcclxuICAgIGlmIChzdGFydFRpbWUgKyBkdXJhdGlvbiA8IDApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZHVyYXRpb24gPSBkdXJhdGlvbiArIHN0YXJ0VGltZTtcclxuICAgICAgc3RhcnRUaW1lID0gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBvcHRpb25zID0gYXJyYXlbM107XHJcblxyXG4gIHRoaXMuX25vdGVpZCsrO1xyXG4gIHZhciBteW5vdGVpZCA9IHRoaXMuX25vdGVpZDtcclxuXHJcbiAgaWYgKGJhc2VDdHgpIHtcclxuICAgIGlmICh0aGlzLl9jb250ZXh0TGlzdC5pbmRleE9mKGJhc2VDdHgpPT09LTEpIHtcclxuICAgICAgdGhpcy5fY29udGV4dExpc3QucHVzaChiYXNlQ3R4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChiYXNlQ3R4ICYmIGJhc2VDdHguaW5zdHJ1bWVudCAmJiBiYXNlQ3R4Lmluc3RydW1lbnQuc2NoZWR1bGVfbm90ZSkge1xyXG4gICAgaWYgKGJhc2VDdHguaW5zdHJ1bWVudC5jdXJyZW50VGltZSkge1xyXG4gICAgICBiYXNlQ3R4LnNvbmdDdHgucmVmZXJlbmNlSW5zdHJ1bWVudCA9IGJhc2VDdHguaW5zdHJ1bWVudDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9mdW5zZXEucHVzaCh7dDpzdGFydFRpbWUsIGY6IGZ1bmN0aW9uKHBhcmFtKSB7XHJcbiAgICAgIHZhciBwbGF5aW5nID0gYmFzZUN0eC5pbnN0cnVtZW50LnNjaGVkdWxlX25vdGUoXHJcbiAgICAgICAgbm90ZU51bSxcclxuICAgICAgICBvcHRpb25zLFxyXG4gICAgICAgIGJhc2VDdHguc2VxdWVuY2VTdGFydFRpbWUoKSArIHN0YXJ0VGltZS8xMDAwLFxyXG4gICAgICAgIGR1cmF0aW9uLzEwMDApO1xyXG5cclxuICAgICAgYmFzZUN0eC5zZXRQbGF5aW5nKG15bm90ZWlkLCBwbGF5aW5nKTtcclxuICAgIH0sIGV4dGVybmFsU2NoZWR1bGU6IHRydWV9KTtcclxuICB9IGVsc2Uge1xyXG5cclxuICAgIGNvbnNvbGUud2FybihcIlVOU1VQUE9SVEVEIFdFQkFVRElPIFNDSEVEVUxFIEZPUiBub3RlIG49XCIgKyBub3RlTnVtICsgXCIgYXQgXCIgKyBzdGFydFRpbWUgKyBcIiAoZmFsbGJhY2sgdG8gc2V0VGltZW91dClcIik7XHJcblxyXG4gICAgdGhpcy5fZnVuc2VxLnB1c2goe3Q6c3RhcnRUaW1lLCBmOiBmdW5jdGlvbihwYXJhbSl7XHJcbiAgICAgIHZhciBjdHggPSBiYXNlQ3R4IHx8IHBhcmFtO1xyXG4gICAgICBpZiAoIWN0eC5pbnN0cnVtZW50Lm5vdGUpIHJldHVybjtcclxuICAgICAgdmFyIHBsYXlpbmcgPSBjdHguaW5zdHJ1bWVudC5ub3RlKG5vdGVOdW0sIG9wdGlvbnMpO1xyXG4gICAgICBjdHguc2V0UGxheWluZyhteW5vdGVpZCwgcGxheWluZyk7XHJcbiAgICB9fSk7XHJcbiAgICB0aGlzLl9mdW5zZXEucHVzaCh7dDpzdGFydFRpbWUgKyBkdXJhdGlvbiwgZjogZnVuY3Rpb24ocGFyYW0pe1xyXG4gICAgICB2YXIgY3R4ID0gYmFzZUN0eCB8fCBwYXJhbTtcclxuICAgICAgY3R4LnVuc2V0UGxheWluZyhteW5vdGVpZCk7XHJcbiAgICB9fSk7XHJcbiAgfVxyXG5cclxuICBpZiAoc3RhcnRUaW1lICsgZHVyYXRpb24gPiB0aGlzLl90b3RhbGR1cmF0aW9uKSB0aGlzLl90b3RhbGR1cmF0aW9uID0gc3RhcnRUaW1lICsgZHVyYXRpb247XHJcbn07XHJcblxyXG5NVVNJQy5Ob3RlU2VxdWVuY2UucHJvdG90eXBlLm1ha2VQbGF5YWJsZSA9IGZ1bmN0aW9uKGluc3RydW1lbnQpIHtcclxuICByZXR1cm4gbmV3IE1VU0lDLk5vdGVTZXF1ZW5jZS5QbGF5YWJsZSh0aGlzLCBpbnN0cnVtZW50LCB0aGlzLl90b3RhbGR1cmF0aW9uLCB0aGlzLl9jb250ZXh0TGlzdCk7XHJcbn07XHJcblxyXG5NVVNJQy5Ob3RlU2VxdWVuY2UuY29udGV4dCA9IGZ1bmN0aW9uKGluc3RydW1lbnQsIHN1YmN0eCwgc29uZ0N0eCkge1xyXG4gIHZhciBwbGF5aW5nTm90ZXMgPSB7fTtcclxuICB2YXIgc2V0UGxheWluZyA9IGZ1bmN0aW9uKG5vdGVpZCwgcCkge1xyXG4gICAgcGxheWluZ05vdGVzW25vdGVpZF0gPSBwLnBsYXkoKTtcclxuICB9O1xyXG4gIHZhciB1bnNldFBsYXlpbmcgPSBmdW5jdGlvbihub3RlaWQpIHtcclxuICAgIHZhciBwbGF5aW5nID0gcGxheWluZ05vdGVzW25vdGVpZF07IFxyXG4gICAgaWYgKHBsYXlpbmcpIHtcclxuICAgICAgcGxheWluZy5zdG9wKCk7XHJcbiAgICAgIGRlbGV0ZSBwbGF5aW5nTm90ZXNbbm90ZWlkXTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgc3RvcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKHN1YmN0eCkge1xyXG4gICAgICBmb3IgKHZhciBpPTA7IGk8c3ViY3R4Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgc3ViY3R4W2ldLnN0b3AoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIG5vdGVpZCBpbiBwbGF5aW5nTm90ZXMpIHtcclxuICAgICAgcGxheWluZ05vdGVzW25vdGVpZF0uc3RvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHBsYXlpbmdOb3RlcyA9IHt9O1xyXG4gIH07XHJcblxyXG4gIHZhciBzZXF1ZW5jZVN0YXJ0VGltZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKCFzb25nQ3R4LnNlcXVlbmNlU3RhcnRUaW1lKSB7XHJcbiAgICAgIHNvbmdDdHguc2VxdWVuY2VTdGFydFRpbWUgPSB0aGlzLmluc3RydW1lbnQuY3VycmVudFRpbWUoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc29uZ0N0eC5zZXF1ZW5jZVN0YXJ0VGltZTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgc2VxdWVuY2VTdGFydFRpbWU6IHNlcXVlbmNlU3RhcnRUaW1lLFxyXG4gICAgc2V0UGxheWluZzogc2V0UGxheWluZyxcclxuICAgIHVuc2V0UGxheWluZzogdW5zZXRQbGF5aW5nLFxyXG4gICAgaW5zdHJ1bWVudDogaW5zdHJ1bWVudCxcclxuICAgIHN0b3A6IHN0b3AsXHJcbiAgICBzb25nQ3R4OiBzb25nQ3R4XHJcbiAgfTtcclxufTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG52YXIgcGxheWluZ1N0b3AgPSBmdW5jdGlvbihwbGF5aW5nKSB7IHBsYXlpbmcuc3RvcCgpOyB9O1xyXG5cclxuTVVTSUMuTXVsdGlQbGF5YWJsZSA9IGZ1bmN0aW9uKHBsYXlhYmxlQXJyYXkpIHtcclxuICB0aGlzLl9wbGF5YWJsZUFycmF5ID0gcGxheWFibGVBcnJheTtcclxuXHJcbiAgTVVTSUMucGxheWFibGVQaXBlRXh0ZW5kKHRoaXMpO1xyXG59O1xyXG5cclxuTVVTSUMuTXVsdGlQbGF5YWJsZS5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICB2YXIgcGxheWFibGVQbGF5ID0gZnVuY3Rpb24ocGxheWFibGUpIHsgcmV0dXJuIHBsYXlhYmxlLnBsYXkob3B0aW9ucyk7IH07XHJcbiAgdmFyIHBsYXlpbmdBcnJheSA9IHRoaXMuX3BsYXlhYmxlQXJyYXkubWFwKHBsYXlhYmxlUGxheSk7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgcGxheWluZ0FycmF5LmZvckVhY2gocGxheWluZ1N0b3ApO1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG52YXIgaGlnaGVyID0gZnVuY3Rpb24oYSxiKXsgcmV0dXJuIGEgPiBiID8gYSA6IGI7IH07XHJcbnZhciBnZXREdXJhdGlvbiA9IGZ1bmN0aW9uKHBsYXlhYmxlKSB7IHJldHVybiBwbGF5YWJsZSAmJiBwbGF5YWJsZS5kdXJhdGlvbiA/IHBsYXlhYmxlLmR1cmF0aW9uKCkgOiAwOyB9O1xyXG5NVVNJQy5NdWx0aVBsYXlhYmxlLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCkge1xyXG4gIHJldHVybiB0aGlzLl9wbGF5YWJsZUFycmF5Lm1hcChnZXREdXJhdGlvbikucmVkdWNlKGhpZ2hlciwgMCk7XHJcbn07XHJcblxyXG5NVVNJQy5DaGFuZ2VUaW1lV3JhcHBlciA9IGZ1bmN0aW9uKG5vdGVzZXEsIGV4dGVuc2lvblRpbWUpIHtcclxuICB0aGlzLl9ub3Rlc2VxPW5vdGVzZXE7XHJcbiAgdGhpcy5fZXh0ZW5zaW9uVGltZT1leHRlbnNpb25UaW1lO1xyXG59O1xyXG5cclxuTVVTSUMuQ2hhbmdlVGltZVdyYXBwZXIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbihpbnB1dCkge1xyXG4gIHRoaXMuX25vdGVzZXEucHVzaChbaW5wdXRbMF0sIGlucHV0WzFdKnRoaXMuX2V4dGVuc2lvblRpbWUsIGlucHV0WzJdKnRoaXMuX2V4dGVuc2lvblRpbWVdKTtcclxufTtcclxuXHJcbk1VU0lDLlBhdHRlcm4gPSBmdW5jdGlvbihpbnB1dCwgb3B0aW9ucykge1xyXG4gIHZhciBwbGF5YWJsZUFycmF5ID0gW107XHJcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgb3B0aW9ucy5wdWxzZVRpbWUgPSBvcHRpb25zLnB1bHNlVGltZSB8fCA1MDtcclxuXHJcbiAgcGxheWFibGVBcnJheSA9IGlucHV0Lm1hcChmdW5jdGlvbihzZXEpIHtcclxuICAgIHZhciBjb2RlID0gc2VxWzBdO1xyXG4gICAgdmFyIGluc3RydW1lbnQgPSBNVVNJQy5UeXBlcy5jYXN0KFwiaW5zdHJ1bWVudFwiLCBzZXFbMV0pO1xyXG5cclxuICAgIHZhciBub3Rlc2VxID0gbmV3IE1VU0lDLk5vdGVTZXF1ZW5jZSgpO1xyXG4gICAgTVVTSUMuU2VxdWVuY2VQYXJzZXIucGFyc2UoY29kZSwgbmV3IE1VU0lDLkNoYW5nZVRpbWVXcmFwcGVyKG5vdGVzZXEsb3B0aW9ucy5wdWxzZVRpbWUpKTtcclxuICAgIHJldHVybiBub3Rlc2VxLm1ha2VQbGF5YWJsZShpbnN0cnVtZW50KTtcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIG5ldyBNVVNJQy5NdWx0aVBsYXlhYmxlKHBsYXlhYmxlQXJyYXkpO1xyXG5cclxufTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG5NVVNJQy5TZXF1ZW5jZVBhcnNlciA9IHt9O1xyXG52YXIgbm90ZXMgPSB7XHJcbiAgXCJDYlwiOiAtMSxcclxuICBcIkNcIjogMCxcclxuICBcIkMjXCI6IDEsXHJcbiAgXCJEYlwiOiAxLFxyXG4gIFwiRFwiOiAyLFxyXG4gIFwiRCNcIjogMyxcclxuICBcIkViXCI6IDMsXHJcbiAgXCJFXCI6IDQsXHJcbiAgXCJFI1wiOiA1LFxyXG4gIFwiRmJcIjogNCxcclxuICBcIkZcIjogNSxcclxuICBcIkYjXCI6IDYsXHJcbiAgXCJHYlwiOiA2LFxyXG4gIFwiR1wiOiA3LFxyXG4gIFwiRyNcIjogOCxcclxuICBcIkFiXCI6IDgsXHJcbiAgXCJBXCI6IDksXHJcbiAgXCJBI1wiOiAxMCxcclxuICBcIkJiXCI6IDEwLFxyXG4gIFwiQlwiOiAxMSxcclxuICBcIkIjXCI6IDEyXHJcbn07XHJcblxyXG52YXIgaXNOb3RlU3RhcnQgPSBmdW5jdGlvbihjaHIpIHtcclxuICByZXR1cm4gXCJDREVGR0FCXCIuaW5kZXhPZihjaHIpICE9PSAtMTtcclxufTtcclxuXHJcbnZhciBub3RlU3BsaXQgPSBmdW5jdGlvbihzdHIpIHtcclxuICB2YXIgcmV0ID0gW107XHJcbiAgdmFyIGxhc3ROb3RlID0gXCJcIjtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgaWYgKGlzTm90ZVN0YXJ0KHN0cltpXSkpIHtcclxuICAgICAgaWYgKGxhc3ROb3RlICE9PSBcIlwiKSByZXQucHVzaChsYXN0Tm90ZSk7XHJcbiAgICAgIGxhc3ROb3RlID0gXCJcIjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc3RyW2ldID09PSBcIiBcIiB8fCBzdHJbaV0gPT09IFwiLlwiKSB7XHJcbiAgICAgIGlmIChsYXN0Tm90ZSAhPT0gXCJcIikgcmV0LnB1c2gobGFzdE5vdGUpO1xyXG4gICAgICBsYXN0Tm90ZSA9IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgbGFzdE5vdGUgKz0gc3RyW2ldO1xyXG4gIH1cclxuICBpZiAobGFzdE5vdGUgIT09IFwiXCIpIHJldC5wdXNoKGxhc3ROb3RlKTtcclxuICByZXR1cm4gcmV0O1xyXG59O1xyXG5cclxudmFyIHBpcGVSZXBsYWNlID0gbmV3IFJlZ0V4cChcIlxcXFx8XCIsIFwiZ1wiKTtcclxuTVVTSUMuU2VxdWVuY2VQYXJzZXIucGFyc2UgPSBmdW5jdGlvbihpbnB1dCwgbm90ZVNlcSkge1xyXG4gIHZhciBjdXJyZW50Tm90ZTtcclxuICB2YXIgY3VycmVudENoYXJhY3RlcjtcclxuICBpZiAoaW5wdXQgPT09IFwiXCIpIHJldHVybjtcclxuICBpbnB1dCA9IGlucHV0LnJlcGxhY2UocGlwZVJlcGxhY2UsIFwiXCIpO1xyXG5cclxuICB2YXIgbm90ZUFycmF5ID0gbm90ZVNwbGl0KGlucHV0KTtcclxuICB2YXIgY3VycmVudFRpbWUgPSAwO1xyXG4gIGZvciAodmFyIGk9MDsgaTxub3RlQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBjdXJyZW50Tm90ZVN0ciA9IG5vdGVBcnJheVtpXTtcclxuICAgIHZhciBub3RlRHVyYXRpb24gPSBjdXJyZW50Tm90ZVN0ci5sZW5ndGg7XHJcbiAgICB2YXIgZXF1YWxJbmRleCA9IGN1cnJlbnROb3RlU3RyLmluZGV4T2YoXCI9XCIpO1xyXG4gICAgaWYgKGVxdWFsSW5kZXggIT0gLTEpIGN1cnJlbnROb3RlU3RyID0gY3VycmVudE5vdGVTdHIuc2xpY2UoMCwgZXF1YWxJbmRleCk7XHJcblxyXG4gICAgdmFyIGxhc3RDaGFyID0gY3VycmVudE5vdGVTdHIuc2xpY2UoLTEpO1xyXG4gICAgdmFyIG9jdGF2ZSA9IHBhcnNlSW50KGxhc3RDaGFyKTtcclxuICAgIGlmIChpc05hTihvY3RhdmUpKSB7XHJcbiAgICAgIG9jdGF2ZSA9IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjdXJyZW50Tm90ZVN0ciA9IGN1cnJlbnROb3RlU3RyLnNsaWNlKDAsIGN1cnJlbnROb3RlU3RyLmxlbmd0aC0xKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY3VycmVudE5vdGUgPSBub3Rlc1tjdXJyZW50Tm90ZVN0cl07XHJcbiAgICBpZiAoY3VycmVudE5vdGUgIT09IHVuZGVmaW5lZCl7XHJcbiAgICAgIG5vdGVTZXEucHVzaChbY3VycmVudE5vdGUgKyBvY3RhdmUqMTIsIGN1cnJlbnRUaW1lLCBub3RlRHVyYXRpb25dKVxyXG4gICAgfTtcclxuICAgIGN1cnJlbnRUaW1lICs9IG5vdGVEdXJhdGlvbjtcclxuICB9XHJcbn07XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuXHJcbnZhciBQbGF5aW5nU29uZyA9IGZ1bmN0aW9uKGZ1bnNlcSwgcGF0dGVybkNvbnRleHRzLCBvcHRpb25zKSB7XHJcbiAgdGhpcy5fY29udGV4dCA9IHtwbGF5aW5nOiBbXSwgb25TdG9wOiBvcHRpb25zICYmIG9wdGlvbnMub25TdG9wfTtcclxuICB0aGlzLl9wYXR0ZXJuQ29udGV4dHMgPSBwYXR0ZXJuQ29udGV4dHM7XHJcbiAgdGhpcy5fZnVuc2VxSGFuZGxlciA9IGZ1bnNlcS5zdGFydCh0aGlzLl9jb250ZXh0KTtcclxufTtcclxuXHJcblBsYXlpbmdTb25nLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKHRoaXMuX3BhdHRlcm5Db250ZXh0cyAmJiB0aGlzLl9wYXR0ZXJuQ29udGV4dHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9wYXR0ZXJuQ29udGV4dHMuZm9yRWFjaChmdW5jdGlvbihjdHgpIHtcclxuICAgICAgY3R4LnN0b3AoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5fY29udGV4dC5wbGF5aW5nLmZvckVhY2goZnVuY3Rpb24ocGxheWluZykge1xyXG4gICAgcGxheWluZy5zdG9wKCk7XHJcbiAgfSk7XHJcblxyXG4gIHRoaXMuX2Z1bnNlcUhhbmRsZXIuc3RvcCgpO1xyXG5cclxuICBpZiAodGhpcy5fY29udGV4dC5vblN0b3Ape1xyXG4gICAgdGhpcy5fY29udGV4dC5vblN0b3AoKTtcclxuICB9XHJcbn07XHJcblxyXG52YXIgbm9QbGF5ID0ge1xyXG4gIHBsYXk6IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RvcDogZnVuY3Rpb24oKSB7fVxyXG4gICAgfTtcclxuICB9XHJcbn07XHJcblxyXG52YXIgZGVmYXVsdEZyb21QYXR0ZXJucyA9IGZ1bmN0aW9uKHBhdHRlcm5zKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKHBhdHRlcm5Pck5hbWUpIHtcclxuICAgIGlmICh0eXBlb2YgcGF0dGVybk9yTmFtZSA9PT0gJ3N0cmluZycpIHJldHVybiBwYXR0ZXJuc1twYXR0ZXJuT3JOYW1lXTtcclxuICAgIHJldHVybiBwYXR0ZXJuT3JOYW1lIHx8IG5vUGxheTtcclxuICB9O1xyXG59O1xyXG5cclxudmFyIG51bGxQbGF5ID0ge3N0b3A6IGZ1bmN0aW9uKCl7fX07XHJcbnZhciBoYXNTY2hlZHVsZU1ldGhvZCA9IGZ1bmN0aW9uKHBhdHRlcm4pIHtcclxuICByZXR1cm4gISFwYXR0ZXJuLnNjaGVkdWxlO1xyXG59O1xyXG5cclxudmFyIGhhc05vdFNjaGVkdWxlTWV0aG9kID0gZnVuY3Rpb24ocGF0dGVybikge1xyXG4gIHJldHVybiAhcGF0dGVybi5zY2hlZHVsZTtcclxufTtcclxuXHJcbk1VU0lDLlNvbmcgPSBmdW5jdGlvbihpbnB1dCwgcGF0dGVybnNPck9wdGlvbnMsIG9wdGlvbnMpe1xyXG4gIHZhciBwYXR0ZXJucztcclxuICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XHJcbiAgICByZXR1cm4gTVVTSUMuU29uZy5iaW5kKHRoaXMpKGlucHV0LCB7fSwgcGF0dGVybnNPck9wdGlvbnMpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBwYXR0ZXJucyA9IHBhdHRlcm5zT3JPcHRpb25zO1xyXG4gIH1cclxuXHJcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgdmFyIGdldEZyb21QYXR0ZXJucyA9IG9wdGlvbnMucGF0dGVybnx8IGRlZmF1bHRGcm9tUGF0dGVybnMocGF0dGVybnMpO1xyXG4gIHZhciBtZWFzdXJlID0gKG9wdGlvbnMubWVhc3VyZSB8fCA1MDApICogb3B0aW9ucy50aWNrc19wZXJfYmVhdDtcclxuICB2YXIgZnVuc2VxO1xyXG4gIGlmICghZnVuc2VxKXtcclxuICAgIHZhciBjbG9jayA9IE1VU0lDLlV0aWxzLkNsb2NrKFxyXG4gICAgICB3aW5kb3cucGVyZm9ybWFuY2Uubm93LmJpbmQod2luZG93LnBlcmZvcm1hbmNlKSxcclxuICAgICAgc2V0SW50ZXJ2YWwsXHJcbiAgICAgIGNsZWFySW50ZXJ2YWwsXHJcbiAgICAgIDUwMCk7XHJcbiAgICBmdW5zZXEgPSBNVVNJQy5VdGlscy5GdW5jdGlvblNlcShjbG9jaywgc2V0VGltZW91dCwgY2xlYXJUaW1lb3V0KTtcclxuICB9XHJcblxyXG5cclxuICB2YXIgdG90YWxNZWFzdXJlcyA9IGlucHV0WzBdLmxlbmd0aDtcclxuXHJcbiAgdGhpcy5fZnVuc2VxID0gZnVuc2VxO1xyXG5cclxuICB2YXIgYnlTdGFydCA9IGZ1bmN0aW9uKGEsIGIpIHtcclxuICAgIHJldHVybiBhLnMtYi5zO1xyXG4gIH07XHJcblxyXG4gIC8vIHRlbXBvIGV2ZW50cyBcclxuICB2YXIgYnBtX2V2ZW50cyA9IFtdO1xyXG4gIGZvciAodmFyIGogPSAwOyBqIDwgdG90YWxNZWFzdXJlczsgaisrKSB7XHJcbiAgICB2YXIgcGF0dGVybkFycmF5ID0gW107XHJcbiAgICBmb3IgKHZhciBpID0gMCA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgcGF0dGVybiA9IGdldEZyb21QYXR0ZXJucyhpbnB1dFtpXVtqXSk7XHJcbiAgICAgIGlmIChwYXR0ZXJuLmJwbV9ldmVudHMpIHtcclxuICAgICAgICB2YXIgZGlzcGxhY2VkQnBtRXZlbnRzID0gcGF0dGVybi5icG1fZXZlbnRzLm1hcChmdW5jdGlvbihldnQpIHtcclxuICAgICAgICAgIHJldHVybiB7bjogZXZ0Lm4sIHM6IGV2dC5zICsgaiptZWFzdXJlLCBsOiBldnQubH07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYnBtX2V2ZW50cyA9IGJwbV9ldmVudHMuY29uY2F0KGRpc3BsYWNlZEJwbUV2ZW50cyk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBicG1fZXZlbnRzID0gYnBtX2V2ZW50cy5zb3J0KGJ5U3RhcnQpO1xyXG5cclxuICB2YXIgdGltZSA9IE1VU0lDLk1hdGgudGlja3NUb1RpbWUoe1xyXG4gICAgYnBtOiBvcHRpb25zLmJwbSxcclxuICAgIHRpY2tzX3Blcl9iZWF0OiBvcHRpb25zLnRpY2tzX3Blcl9iZWF0LFxyXG4gICAgYnBtX2V2ZW50czogYnBtX2V2ZW50cyxcclxuICAgIHN0YXJ0OiBvcHRpb25zLnN0YXJ0IHx8IDBcclxuICB9KTtcclxuXHJcbiAgdGhpcy50aW1lVG9UaWNrcyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIE1VU0lDLk1hdGgudGltZVRvVGlja3Moe1xyXG4gICAgICBicG06IG9wdGlvbnMuYnBtLFxyXG4gICAgICB0aWNrc19wZXJfYmVhdDogb3B0aW9ucy50aWNrc19wZXJfYmVhdCxcclxuICAgICAgYnBtX2V2ZW50czogYnBtX2V2ZW50cyxcclxuICAgICAgc3RhcnQ6IG9wdGlvbnMuc3RhcnQgfHwgMFxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHRpbWVGdW5jID0gZnVuY3Rpb24oYmFzZVRpY2tzKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24odGlja3MpIHtcclxuICAgICAgcmV0dXJuIHRpbWUoYmFzZVRpY2tzK3RpY2tzKTtcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgdGhpcy5fZHVyYXRpb24gPSB0aW1lKHRvdGFsTWVhc3VyZXMgKiBtZWFzdXJlKTtcclxuICB0aGlzLnNvbmdDdHggPSB7fTtcclxuXHJcbiAgZnVuc2VxLnB1c2goe3Q6IDAsIGY6IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKHNlbGYuc29uZ0N0eC5yZWZlcmVuY2VJbnN0cnVtZW50KSB7XHJcbiAgICAgIHNlbGYuc29uZ0N0eC5zZXF1ZW5jZVN0YXJ0VGltZSA9IHNlbGYuc29uZ0N0eC5yZWZlcmVuY2VJbnN0cnVtZW50LmN1cnJlbnRUaW1lKCk7XHJcbiAgICB9XHJcbiAgfSwgZXh0ZXJuYWxTY2hlZHVsZTogdHJ1ZX0pO1xyXG5cclxuICBmb3IgKHZhciBqID0gMDsgaiA8IHRvdGFsTWVhc3VyZXM7IGorKykge1xyXG4gICAgKGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgcGF0dGVybkFycmF5ID0gW107XHJcbiAgICAgIGZvciAodmFyIGkgPSAwIDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgcGF0dGVybkFycmF5LnB1c2goaW5wdXRbaV1bal0pO1xyXG4gICAgICB9O1xyXG4gICAgICB2YXIgcGxheWFibGVBcnJheSA9IHBhdHRlcm5BcnJheS5tYXAoZ2V0RnJvbVBhdHRlcm5zKSBcclxuXHJcbiAgICAgIHZhciBzY2hlZHVsYWJsZSA9IHBsYXlhYmxlQXJyYXkuZmlsdGVyKGhhc1NjaGVkdWxlTWV0aG9kKTtcclxuICAgICAgdmFyIG5vdFNjaGVkdWxhYmxlID0gcGxheWFibGVBcnJheS5maWx0ZXIoaGFzTm90U2NoZWR1bGVNZXRob2QpO1xyXG5cclxuICAgICAgaWYgKG5vdFNjaGVkdWxhYmxlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICB2YXIgbXVsdGlQbGF5YWJsZSA9IG5ldyBNVVNJQy5NdWx0aVBsYXlhYmxlKG5vdFNjaGVkdWxhYmxlKTtcclxuICAgICAgICB2YXIgcGxheWluZyA9IG51bGxQbGF5O1xyXG4gICAgICAgIHZhciBkdXJhdGlvbiA9IG11bHRpUGxheWFibGUuZHVyYXRpb24oKTtcclxuXHJcbiAgICAgICAgZnVuc2VxLnB1c2goe3Q6IGoqbWVhc3VyZSwgZjogZnVuY3Rpb24oY29udGV4dCkge1xyXG4gICAgICAgICAgcGxheWluZyA9IG11bHRpUGxheWFibGUucGxheSgpO1xyXG4gICAgICAgICAgY29udGV4dC5wbGF5aW5nLnB1c2gocGxheWluZyk7XHJcbiAgICAgICAgfX0pO1xyXG4gICAgICAgIGZ1bnNlcS5wdXNoKHt0OiBqKm1lYXN1cmUrZHVyYXRpb24sIGY6IGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuICAgICAgICAgIHBsYXlpbmcuc3RvcCgpO1xyXG4gICAgICAgICAgY29udGV4dC5wbGF5aW5nID0gY29udGV4dC5wbGF5aW5nLmZpbHRlcihmdW5jdGlvbih4KXsgcmV0dXJuIHggIT0gcGxheWluZzsgfSk7XHJcbiAgICAgICAgfX0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzY2hlZHVsYWJsZS5mb3JFYWNoKGZ1bmN0aW9uKHMpIHtcclxuICAgICAgICB2YXIgc2NoZWR1bGVDb250ZXh0cyA9IHMuc2NoZWR1bGUobmV3IE1VU0lDLk5vdGVTZXF1ZW5jZShmdW5zZXEsIHtcclxuICAgICAgICAgIHRpbWU6IHRpbWVGdW5jKGoqbWVhc3VyZSlcclxuICAgICAgICB9KSwgc2VsZi5zb25nQ3R4KTtcclxuICAgICAgICBzZWxmLl9wYXR0ZXJuQ29udGV4dHMgPSAoc2VsZi5fcGF0dGVybkNvbnRleHRzfHxbXSkuY29uY2F0KHNjaGVkdWxlQ29udGV4dHMpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KSgpO1xyXG4gIH07XHJcblxyXG4gIGZ1bnNlcS5wdXNoKHt0OiB0aW1lRnVuYygwKSh0b3RhbE1lYXN1cmVzKm1lYXN1cmUpLCBmOiBmdW5jdGlvbihjb250ZXh0KSB7XHJcbiAgICBpZiAoY29udGV4dC5vblN0b3ApIHtcclxuICAgICAgY29udGV4dC5vblN0b3AoKTtcclxuICAgIH1cclxuICB9fSk7XHJcblxyXG59O1xyXG5cclxuTVVTSUMuU29uZy5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gdGhpcy5fZHVyYXRpb247XHJcbn07XHJcblxyXG5NVVNJQy5Tb25nLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gIHJldHVybiBuZXcgUGxheWluZ1NvbmcodGhpcy5fZnVuc2VxLCAgdGhpcy5fcGF0dGVybkNvbnRleHRzLCBvcHRpb25zKTtcclxufTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xyXG5NVVNJQy5VdGlscyA9IE1VU0lDLlV0aWxzIHx8IHt9O1xyXG5NVVNJQy5VdGlscy5TY2FsZSA9IGZ1bmN0aW9uKGJhc2UpIHtcclxuICB2YXIgdG9uZUFkZDtcclxuICB2YXIgdjtcclxuXHJcbiAgdG9uZUFkZCA9IHt9O1xyXG4gIHYgPSBbMCwyLDUsNyw5XTtcclxuICBmb3IgKHZhciBpPTA7IGk8di5sZW5ndGg7IGkrKykge1xyXG4gICAgdG9uZUFkZFsoYmFzZSt2W2ldKSAlIDEyIF0gPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGFkZDogZnVuY3Rpb24obm90ZW51bSwgbm90ZXMpIHtcclxuICAgICAgdmFyIHJldCA9IG5vdGVudW07XHJcbiAgICAgIHdoaWxlIChub3RlcyA+IDApIHtcclxuICAgICAgICByZXQrPSB0b25lQWRkW3JldCAlIDEyXSA/IDIgOiAxO1xyXG4gICAgICAgIG5vdGVzLS07XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJldDtcclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cclxuTVVTSUMuVXRpbHMuQ2xvY2sgPSBmdW5jdGlvbihwcmVjaXNlVGltZXIsIHNldEludGVydmFsLCBjbGVhckludGVydmFsLCBpbnRlcnZhbCkge1xyXG4gIHZhciBzdGFydCA9IGZ1bmN0aW9uKGZjbikge1xyXG4gICAgdmFyIHN0YXJ0VGltZSA9IHByZWNpc2VUaW1lcigpO1xyXG4gICAgZmNuKDApO1xyXG4gICAgdmFyIGhuZGwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpe1xyXG4gICAgICB2YXIgdCA9IHByZWNpc2VUaW1lcigpO1xyXG4gICAgICBmY24odCAtIHN0YXJ0VGltZSk7XHJcbiAgICB9LCBpbnRlcnZhbCk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbChobmRsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBzdGFydDogc3RhcnRcclxuICB9O1xyXG59O1xyXG5cclxuTVVTSUMuVXRpbHMuRnVuY3Rpb25TZXEgPSBmdW5jdGlvbihjbG9jaywgc2V0VGltZW91dCwgY2xlYXJUaW1lb3V0KSB7XHJcbiAgdmFyIGV2ZW50c0FycmF5ID0gW107XHJcblxyXG4gIHZhciByZWplY3QgPSBmdW5jdGlvbih4KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oeSkge1xyXG4gICAgICByZXR1cm4geCE9eTtcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24ocGFyYW1ldGVyKSB7XHJcbiAgICB2YXIgYXJyYXkgPSBldmVudHNBcnJheS5zbGljZSgwKS5zb3J0KGZ1bmN0aW9uKGUxLCBlMikge1xyXG4gICAgICB2YXIgZHQgPSBlMS50IC0gZTIudDtcclxuICAgICAgaWYgKGR0PT09MCkge1xyXG4gICAgICAgIHJldHVybiBldmVudHNBcnJheS5pbmRleE9mKGUxKSAtIGV2ZW50c0FycmF5LmluZGV4T2YoZTIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgdGltZW91dEhhbmRsZXJzID0gW107XHJcbiAgICB2YXIgZXZlbnRDb3VudCA9IGFycmF5Lmxlbmd0aDtcclxuXHJcbiAgICB2YXIgY2xvY2tIYW5kbGVyID0gY2xvY2suc3RhcnQoZnVuY3Rpb24odCkge1xyXG4gICAgICB2YXIgbGFzdEV2ZW50O1xyXG4gICAgICB2YXIgY2FsbGluZ0NyaXRlcmlhID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50LnQgLSB0IDwgMTAwMCAmJiBlbGVtZW50LnQgLSB0ID49IDA7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgcGVuZGluZyA9IFtdO1xyXG4gICAgICB2YXIgcHJvY2Vzc1BlbmRpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBpZiAoIXBlbmRpbmcubGVuZ3RoKSByZXR1cm47XHJcblxyXG4gICAgICAgIHZhciBjdXJyZW50UGVuZGluZyA9IHBlbmRpbmc7XHJcbiAgICAgICAgcGVuZGluZyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKHZhciBpPTA7IGk8Y3VycmVudFBlbmRpbmcubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGlmIChjdXJyZW50UGVuZGluZ1tpXS5leHRlcm5hbFNjaGVkdWxlKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRQZW5kaW5nW2ldLmYocGFyYW1ldGVyLCBjdXJyZW50UGVuZGluZ1tpXS50IC0gdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdGltZW91dEhhbmRsZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgdGltZW91dEhhbmRsZXJzID0gdGltZW91dEhhbmRsZXJzLmZpbHRlcihyZWplY3QodGltZW91dEhhbmRsZXIpKVxyXG5cclxuICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxjdXJyZW50UGVuZGluZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRQZW5kaW5nW2ldLmV4dGVybmFsU2NoZWR1bGUpIHtcclxuICAgICAgICAgICAgICBjdXJyZW50UGVuZGluZ1tpXS5mKHBhcmFtZXRlciwgMCk7XHJcbiAgICAgICAgICAgICAgZXZlbnRDb3VudC0tO1xyXG4gICAgICAgICAgICAgIGlmIChldmVudENvdW50ID09PSAwKSBjbG9ja0hhbmRsZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSwgY3VycmVudFBlbmRpbmdbMF0udCAtIHQpO1xyXG4gICAgICAgIHRpbWVvdXRIYW5kbGVycy5wdXNoKHRpbWVvdXRIYW5kbGVyKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBhZGRTY2hlZHVsZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGxhc3RFdmVudCAmJiBsYXN0RXZlbnQudCAtIHQgIT09IGV2ZW50LnQgLSB0KSB7XHJcbiAgICAgICAgICBwcm9jZXNzUGVuZGluZygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGVuZGluZy5wdXNoKGV2ZW50KTtcclxuICAgICAgICBsYXN0RXZlbnQgPSBldmVudDtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHZhciBuZXh0RWxlbWVudDtcclxuXHJcbiAgICAgIHdoaWxlKDEpIHtcclxuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgbmV4dEVsZW1lbnQgPSBhcnJheVswXTtcclxuICAgICAgICAgIGlmIChjYWxsaW5nQ3JpdGVyaWEobmV4dEVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgIGFkZFNjaGVkdWxlKG5leHRFbGVtZW50KTtcclxuICAgICAgICAgICAgYXJyYXkuc2hpZnQoKTsgLy8gcmVtb3ZlIGZpcnN0IGVsZW1lbnRcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHByb2Nlc3NQZW5kaW5nKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzdG9wOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIGZvciAodmFyIGk9MDsgaTx0aW1lb3V0SGFuZGxlcnMubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZXJzW2ldKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNsb2NrSGFuZGxlci5zdG9wKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgdmFyIHB1c2ggPSBldmVudHNBcnJheS5wdXNoLmJpbmQoZXZlbnRzQXJyYXkpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgc3RhcnQ6IHN0YXJ0LFxyXG4gICAgcHVzaDogcHVzaFxyXG4gIH07XHJcbn07XHJcblxyXG5NVVNJQy5VdGlscy5GdW5jdGlvblNlcS5wcmVjaXNlVGltZW91dCA9IGZ1bmN0aW9uKGZjbiwgbXMpIHtcclxuICB2YXIgZnVuc2VxO1xyXG4gIGNsb2NrID0gTVVTSUMuVXRpbHMuQ2xvY2soXHJcbiAgICB3aW5kb3cucGVyZm9ybWFuY2Uubm93LmJpbmQod2luZG93LnBlcmZvcm1hbmNlKSxcclxuICAgIHNldEludGVydmFsLFxyXG4gICAgY2xlYXJJbnRlcnZhbCxcclxuICAgIDUwMCk7XHJcbiAgZnVuc2VxID0gTVVTSUMuVXRpbHMuRnVuY3Rpb25TZXEoY2xvY2ssIHNldFRpbWVvdXQsIGNsZWFyVGltZW91dCk7XHJcblxyXG4gIHZhciBydW5uaW5nRnVuU2VxO1xyXG5cclxuICBmdW5zZXEucHVzaCh7ZjogZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAocnVubmluZ0Z1blNlcSkge1xyXG4gICAgICBydW5uaW5nRnVuU2VxLnN0b3AoKTtcclxuICAgIH1cclxuICAgIGZjbigpO1xyXG4gIH0sIHQ6IG1zfSk7XHJcbiAgcnVubmluZ0Z1blNlcSA9IGZ1bnNlcS5zdGFydCgpO1xyXG59O1xyXG5cclxuTVVTSUMuVXRpbHMuRGVsYXllZEZ1bmN0aW9uU2VxID0gZnVuY3Rpb24oaW5uZXIsIGRlbGF5KSB7XHJcbiAgdmFyIHN0YXJ0ID0gZnVuY3Rpb24ocGFyYW1zKSB7XHJcbiAgICByZXR1cm4gaW5uZXIuc3RhcnQocGFyYW1zKTtcclxuICB9O1xyXG5cclxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uKHBhcmFtcykge1xyXG4gICAgcmV0dXJuIGlubmVyLnB1c2goe1xyXG4gICAgICBmOiBwYXJhbXMuZixcclxuICAgICAgdDogcGFyYW1zLnQgKyBkZWxheSxcclxuICAgICAgZXh0ZXJuYWxTY2hlZHVsZTogcGFyYW1zLmV4dGVybmFsU2NoZWR1bGVcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBzdGFydDogc3RhcnQsXHJcbiAgICBwdXNoOiBwdXNoXHJcbiAgfTtcclxufTtcclxuXHJcblxyXG59KSgpOyIsIihmdW5jdGlvbigpIHtcclxuICBNVVNJQyA9IE1VU0lDIHx8e307XHJcblxyXG4gIE1VU0lDLlR5cGVzLnJlZ2lzdGVyKFwiZnVuY3Rpb25cIiwgZnVuY3Rpb24od2F2ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB3YXZlLmF0ID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgcmV0dXJuIHdhdmUuYXQuYmluZCh3YXZlKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgTVVTSUMuVHlwZXMucmVnaXN0ZXIoXCJmdW5jdGlvblwiLCBmdW5jdGlvbihmY24pIHtcclxuICAgIGlmICh0eXBlb2YgZmNuID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgcmV0dXJuIGZjbjtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgTVVTSUMuVHlwZXMucmVnaXN0ZXIoXCJ3YXZlXCIsIGZ1bmN0aW9uKGZjbikge1xyXG4gICAgaWYgKHR5cGVvZiBmY24gPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICByZXR1cm4gbmV3IE1VU0lDLldhdmUuRnVuY3Rpb25XYXZlKGZjbik7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIE1VU0lDLlR5cGVzLnJlZ2lzdGVyKFwid2F2ZVwiLCBmdW5jdGlvbih3YXZlKSB7XHJcbiAgICBpZiAodHlwZW9mIHdhdmUuYXQgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICByZXR1cm4gd2F2ZTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcblxyXG4gIHZhciB0d29waSA9IE1hdGguUEkqMjtcclxuICBNVVNJQy5XYXZlID0ge307XHJcblxyXG4gIHZhciB3YXZlVHJhbnNmb3JtID0gZnVuY3Rpb24oZmNuKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciB3YXZlID0gdGhpcztcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBhdDogZnVuY3Rpb24odCkge1xyXG4gICAgICAgICAgd2F2ZS5hdChmY24odCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgIH1cclxuICB9O1xyXG4gIHZhciB3YXZlT3BzID0ge1xyXG4gICAgcmV2ZXJzZTogd2F2ZVRyYW5zZm9ybShmdW5jdGlvbih0KXtyZXR1cm4gdC0xOyB9KSxcclxuICAgIHNjYWxlOiBmdW5jdGlvbihmYWN0b3IpIHtcclxuICAgICAgdmFyIHdhdmUgPSB0aGlzO1xyXG4gICAgICByZXR1cm4gbmV3IE1VU0lDLldhdmUuRnVuY3Rpb25XYXZlKGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICByZXR1cm4gd2F2ZS5hdCh0KmZhY3Rvcik7XHJcbiAgICAgIH0pOyBcclxuICAgIH0sXHJcbiAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKGRpc3ApIHtcclxuICAgICAgdmFyIHdhdmUgPSB0aGlzO1xyXG4gICAgICByZXR1cm4gbmV3IE1VU0lDLldhdmUuRnVuY3Rpb25XYXZlKGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICByZXR1cm4gd2F2ZS5hdCh0K2Rpc3ApO1xyXG4gICAgICB9KTtcclxuICAgIH0sXHJcbiAgICB0YWJsZTogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICByZXR1cm4gbmV3IE1VU0lDLldhdmUuVGFibGUodGhpcywgb3B0aW9ucyk7XHJcbiAgICB9LFxyXG4gICAgY29tYmluZTogZnVuY3Rpb24ob3RoZXJXYXZlLCBvdGhlckZhY3Rvcikge1xyXG4gICAgICB2YXIgdGhpc1dhdmUgPSB0aGlzO1xyXG4gICAgICBvdGhlckZhY3RvciA9IG90aGVyRmFjdG9yIHx8IDAuNTtcclxuICAgICAgdmFyIHRoaXNGYWN0b3IgPSAxLW90aGVyRmFjdG9yO1xyXG4gICAgICBvdGhlcldhdmUgPSBNVVNJQy5UeXBlcy5jYXN0KFwid2F2ZVwiLCBvdGhlcldhdmUpO1xyXG4gICAgICByZXR1cm4gbmV3IE1VU0lDLldhdmUuRnVuY3Rpb25XYXZlKGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICByZXR1cm4gb3RoZXJXYXZlLmF0KHQpICogb3RoZXJGYWN0b3IgKyB0aGlzV2F2ZS5hdCh0KSAqIHRoaXNGYWN0b3I7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciBkZWZhdWx0SW50ZXJwb2xhdGlvbiA9IGZ1bmN0aW9uKHRhYmxlKXtcclxuICAgIHZhciBsZW5ndGggPSB0YWJsZS5sZW5ndGg7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xyXG4gICAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKHQqdGFibGUubGVuZ3RoKVxyXG4gICAgICByZXR1cm4gdGFibGVbaW5kZXhdO1xyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICBNVVNJQy5XYXZlLlRhYmxlID0gZnVuY3Rpb24od2F2ZSwgb3B0aW9ucykge1xyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICB2YXIgc2FtcGxlQ291bnQgPSBvcHRpb25zLnNhbXBsZXMgfHwgMTAwO1xyXG4gICAgdmFyIGludGVycG9sYXRpb24gPSBvcHRpb25zLmludGVycG9sYXRpb24gfHwgZGVmYXVsdEludGVycG9sYXRpb247XHJcblxyXG4gICAgdmFyIHNhbXBsZSA9IFtdO1xyXG4gICAgZm9yICh2YXIgaT0wOyBpPHNhbXBsZUNvdW50OyBpKyspIHtcclxuICAgICAgc2FtcGxlW2ldID0gd2F2ZS5hdChpL3NhbXBsZUNvdW50KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmF0ID0gaW50ZXJwb2xhdGlvbihzYW1wbGUpO1xyXG4gIH07XHJcbiAgTVVTSUMuV2F2ZS5UYWJsZS5wcm90b3R5cGUgPSB3YXZlT3BzO1xyXG5cclxuICBNVVNJQy5XYXZlLkZ1bmN0aW9uV2F2ZSA9IGZ1bmN0aW9uKGZjbikge1xyXG4gICAgdGhpcy5hdCA9IGZjbjtcclxuICB9O1xyXG4gIE1VU0lDLldhdmUuRnVuY3Rpb25XYXZlLnByb3RvdHlwZSA9IHdhdmVPcHM7XHJcblxyXG5cclxuICBNVVNJQy5XYXZlLnNpbmUgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBuZXcgTVVTSUMuV2F2ZS5GdW5jdGlvbldhdmUoZnVuY3Rpb24odCkge1xyXG4gICAgICByZXR1cm4gTWF0aC5zaW4odHdvcGkqdCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBNVVNJQy5XYXZlLnNxdWFyZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4gICAgdmFyIGR1dHlDeWNsZSA9IG9wdGlvbnMuZHV0eUN5Y2xlIHx8IDAuNTtcclxuICAgIHZhciBkdXR5TGV2ZWwgPSBvcHRpb25zLmR1dHlMZXZlbCB8fCAxO1xyXG4gICAgdmFyIG9mZkxldmVsID0gb3B0aW9ucy5vZmZMZXZlbCB8fCAtMTtcclxuICAgIHJldHVybiBuZXcgTVVTSUMuV2F2ZS5GdW5jdGlvbldhdmUoZnVuY3Rpb24odCkge1xyXG4gICAgICBpZiAodDxkdXR5Q3ljbGUpe1xyXG4gICAgICAgIHJldHVybiBkdXR5TGV2ZWxcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gb2ZmTGV2ZWw7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIE1VU0lDLldhdmUudHJpYW5nbGUgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBuZXcgTVVTSUMuV2F2ZS5GdW5jdGlvbldhdmUoZnVuY3Rpb24odCkge1xyXG4gICAgICB2YXIgdDIgPSB0LTAuMjU7XHJcbiAgICAgIGlmICh0MjwwKSB0MisrO1xyXG4gICAgICBpZiAodDI8MC41KSB7XHJcbiAgICAgICAgcmV0dXJuIDEtdDIqNDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gLTErKHQyLTAuNSkqNDtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgTVVTSUMuV2F2ZS5zYXd0b290aCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIG5ldyBNVVNJQy5XYXZlLkZ1bmN0aW9uV2F2ZShmdW5jdGlvbih0KSB7XHJcbiAgICAgIHJldHVybiB0KjItMTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG59KSgpO1xyXG5cclxuIiwiTVVTSUMgPSBNVVNJQyB8fHt9O1xyXG5NVVNJQy5Gb3JtYXRzID0gTVVTSUMuRm9ybWF0c3x8e307XHJcbk1VU0lDLkZvcm1hdHMuQ2FjaGVkU2VyaWFsaXplciA9IGZ1bmN0aW9uKGlubmVyU2VyaWFsaXplcikge1xyXG4gIHZhciBsYXN0T3V0cHV0O1xyXG4gIHZhciBsYXN0SW5wdXQ7XHJcbiAgdmFyIGxhc3RUeXBlO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgc2VyaWFsaXplOiBmdW5jdGlvbih0eXBlLCBpbnB1dCkge1xyXG4gICAgICB2YXIganNvbkN1cnJlbnRJbnB1dDtcclxuICAgICAgaWYgKGxhc3RUeXBlICYmIGxhc3RJbnB1dCkge1xyXG4gICAgICAgIGpzb25DdXJyZW50SW5wdXQgPSBKU09OLnN0cmluZ2lmeShpbnB1dClcclxuICAgICAgICBpZiAobGFzdFR5cGUgPT09IHR5cGUgJiYgbGFzdElucHV0ID09PSBqc29uQ3VycmVudElucHV0KSByZXR1cm4gbGFzdE91dHB1dDtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGFzdFR5cGUgPSB0eXBlO1xyXG4gICAgICBsYXN0SW5wdXQgPSBqc29uQ3VycmVudElucHV0IHx8IEpTT04uc3RyaW5naWZ5KGlucHV0KTtcclxuICAgICAgbGFzdE91dHB1dCA9IGlubmVyU2VyaWFsaXplci5zZXJpYWxpemUodHlwZSwgaW5wdXQpO1xyXG4gICAgICByZXR1cm4gbGFzdE91dHB1dDtcclxuICAgIH0sXHJcblxyXG4gICAgZGVzZXJpYWxpemU6IGlubmVyU2VyaWFsaXplci5kZXNlcmlhbGl6ZS5iaW5kKGlubmVyU2VyaWFsaXplcilcclxuICB9O1xyXG59O1xyXG4iLCJNVVNJQyA9IE1VU0lDIHx8e307XHJcbk1VU0lDLkZvcm1hdHMgPSBNVVNJQy5Gb3JtYXRzfHx7fTtcclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHJcbk1VU0lDLkZvcm1hdHMuSHVmZm1hblNlcmlhbGl6ZXJXcmFwcGVyID0gZnVuY3Rpb24oaW5uZXJTZXJpYWxpemVyKSB7XHJcbiAgdmFyIGZyZXF1ZW5jaWVzID0gW1xyXG4gICAgW1wiLFwiLCAxMDBdLFxyXG4gICAgW1wiW11cIiwgMjBdLFxyXG4gICAgW1wiMDEyMzQ1Njc4OVwiLCAxMF0sXHJcbiAgICBbXCJhYmNkZWYuLXt9XCIsIDRdLFxyXG4gICAgW1widCstKi8oKTw+PT8gXCIsIDFdXHJcbiAgXTtcclxuXHJcbiAgdmFyIHRpbWVzID0gZnVuY3Rpb24oc3RyLCBuKSB7XHJcbiAgICB2YXIgcmV0ID0gXCJcIjtcclxuICAgIGZvciAodmFyIGkgPTA7aTxuOyBpKyspIHJldCA9IHJldCArIHN0cjtcclxuICAgIHJldHVybiByZXQ7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGNvbmNhdCA9IGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gYS5jb25jYXQoYik7IH07XHJcbiAgdmFyIHRleHQgPSBmcmVxdWVuY2llcy5tYXAoZnVuY3Rpb24oZnJlcSkge1xyXG4gICAgcmV0dXJuIHRpbWVzKGZyZXFbMF0sIGZyZXFbMV0pO1xyXG4gIH0pLnJlZHVjZShjb25jYXQpO1xyXG5cclxuICB0ZXh0ID0gdGV4dCArIFwiIVxcXCIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXFxcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9flwiXHJcbiAgdmFyIGh1ZmZtYW4gPSBIdWZmbWFuLnRyZWVGcm9tVGV4dCh0ZXh0KTtcclxuXHJcbiAgdmFyIHNlcmlhbGl6ZSA9IGZ1bmN0aW9uKHR5cGUsIG9iaikge1xyXG4gICAgdmFyIHN0ciA9IGlubmVyU2VyaWFsaXplci5zZXJpYWxpemUodHlwZSwgb2JqKTtcclxuICAgIHJldHVybiBodWZmbWFuLmVuY29kZShzdHIpO1xyXG4gIH07XHJcblxyXG4gIHZhciBkZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uKHR5cGUsIHN0cikge1xyXG4gICAgdmFyIGRlY29kZWQgPSBodWZmbWFuLmRlY29kZShzdHIpO1xyXG4gICAgcmV0dXJuIGlubmVyU2VyaWFsaXplci5kZXNlcmlhbGl6ZSh0eXBlLCBkZWNvZGVkKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgc2VyaWFsaXplOiBzZXJpYWxpemUsXHJcbiAgICBkZXNlcmlhbGl6ZTogZGVzZXJpYWxpemVcclxuICB9O1xyXG59O1xyXG5cclxuXHJcbn0pKCk7XHJcbiIsIk1VU0lDID0gTVVTSUMgfHx7fTtcclxuTVVTSUMuRm9ybWF0cyA9IE1VU0lDLkZvcm1hdHN8fHt9O1xyXG5NVVNJQy5Gb3JtYXRzLkpTT05TZXJpYWxpemVyID0ge307XHJcblxyXG5NVVNJQy5Gb3JtYXRzLkpTT05TZXJpYWxpemVyLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uKHR5cGUsIG9iaikge1xyXG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xyXG59O1xyXG5cclxuTVVTSUMuRm9ybWF0cy5KU09OU2VyaWFsaXplci5kZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uKHR5cGUsIHN0cikge1xyXG4gIHJldHVybiBKU09OLnBhcnNlKHN0cik7XHJcbn07XHJcbiIsIk1VU0lDID0gTVVTSUMgfHx7fTtcclxuTVVTSUMuRm9ybWF0cyA9IE1VU0lDLkZvcm1hdHN8fHt9O1xyXG5NVVNJQy5Gb3JtYXRzLk11bHRpU2VyaWFsaXplciA9IHt9O1xyXG4oZnVuY3Rpb24oKSB7XHJcblxyXG52YXIgc2VyaWFsaXplckFycmF5ID0gW107XHJcblxyXG52YXIgbWF0Y2ggPSBmdW5jdGlvbihhLCBiKSB7XHJcbiAgaWYgKHR5cGVvZiBhICE9PSB0eXBlb2YgYikgcmV0dXJuIGZhbHNlO1xyXG5cclxuICBpZiAoQXJyYXkuaXNBcnJheShhKSAmJiAhQXJyYXkuaXNBcnJheShiKSkgcmV0dXJuIGZhbHNlO1xyXG4gIGlmIChBcnJheS5pc0FycmF5KGIpICYmICFBcnJheS5pc0FycmF5KGEpKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XHJcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpPTA7IGk8YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoIW1hdGNoKGFbaV0sIGJbaV0pKSByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGVsc2UgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0Jykge1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGEpLmV2ZXJ5KGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICByZXR1cm4gbWF0Y2goYVtrZXldLCBiW2tleV0pO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBhID09PSBiO1xyXG4gIH1cclxufTtcclxuXHJcbk1VU0lDLkZvcm1hdHMuTXVsdGlTZXJpYWxpemVyLm1hdGNoID0gbWF0Y2g7XHJcblxyXG5NVVNJQy5Gb3JtYXRzLk11bHRpU2VyaWFsaXplci53cmFwU2VyaWFsaXplciA9IGZ1bmN0aW9uKHNlcmlhbGl6ZXIpIHtcclxuICByZXR1cm4ge1xyXG4gICAgc2VyaWFsaXplOiBmdW5jdGlvbih0eXBlLCBvYmopIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2YXIgb3V0cHV0ID0gc2VyaWFsaXplci5zZXJpYWxpemUodHlwZSwgb2JqKTtcclxuICAgICAgICB2YXIgcmVjb3ZlcmVkSW5wdXQgPSBzZXJpYWxpemVyLmRlc2VyaWFsaXplKHR5cGUsIG91dHB1dCk7XHJcbiAgICAgICAgcmV0dXJuIE1VU0lDLkZvcm1hdHMuTXVsdGlTZXJpYWxpemVyLm1hdGNoKG9iaiwgcmVjb3ZlcmVkSW5wdXQpID8gb3V0cHV0IDogbnVsbDtcclxuICAgICAgfWNhdGNoKGUpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDsgLy8gZmFpbGVkIHNlcmlhbGl6YXRpb25zIGFyZSBkaXNjYXJkZWRcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIGRlc2VyaWFsaXplOiBzZXJpYWxpemVyLmRlc2VyaWFsaXplXHJcbiAgfTtcclxufTtcclxuXHJcbnZhciBzbWFsbGVzdCA9IGZ1bmN0aW9uKGEsIGIpIHtcclxuICByZXR1cm4gYS5sZW5ndGggPCBiLmxlbmd0aCA/IGEgOiBiO1xyXG59O1xyXG5cclxudmFyIHRydXRoeSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuICEhYSB9O1xyXG5cclxuTVVTSUMuRm9ybWF0cy5NdWx0aVNlcmlhbGl6ZXIuc2VsZWN0b3IgPSBmdW5jdGlvbihhcnJheSkge1xyXG4gIGFycmF5ID0gYXJyYXkuZmlsdGVyKHRydXRoeSk7XHJcbiAgaWYgKGFycmF5Lmxlbmd0aCkgcmV0dXJuIGFycmF5LmZpbHRlcih0cnV0aHkpLnJlZHVjZShzbWFsbGVzdCk7XHJcblxyXG4gIHRocm93IG5ldyBFcnJvcihcInNlcmlhbGl6YXRpb24gbm90IGZvdW5kXCIpO1xyXG59O1xyXG5cclxuTVVTSUMuRm9ybWF0cy5NdWx0aVNlcmlhbGl6ZXIuc2VyaWFsaXplID0gZnVuY3Rpb24odHlwZSwgb2JqKSB7XHJcbiAgcmV0dXJuIE1VU0lDLkZvcm1hdHMuTXVsdGlTZXJpYWxpemVyLnNlbGVjdG9yKFxyXG4gICAgc2VyaWFsaXplckFycmF5Lm1hcChmdW5jdGlvbihzKSB7XHJcbiAgICAgIHZhciBzZXJpYWxpemVkID0gcy5zZXJpYWxpemVyLnNlcmlhbGl6ZSh0eXBlLCBvYmopO1xyXG4gICAgICBpZiAoIXNlcmlhbGl6ZWQpIHJldHVybiBzZXJpYWxpemVkO1xyXG4gICAgICByZXR1cm4gcy5iYXNlLmNvbmNhdChzZXJpYWxpemVkKTtcclxuICAgIH0pXHJcbiAgKTtcclxufTtcclxuXHJcbk1VU0lDLkZvcm1hdHMuTXVsdGlTZXJpYWxpemVyLmRlc2VyaWFsaXplID0gZnVuY3Rpb24odHlwZSwgb2JqKSB7XHJcbiAgZm9yICh2YXIgaT0wO2k8c2VyaWFsaXplckFycmF5Lmxlbmd0aDtpKyspIHtcclxuICAgIGlmIChvYmpbMF09PT1zZXJpYWxpemVyQXJyYXlbaV0uYmFzZSkgcmV0dXJuIHNlcmlhbGl6ZXJBcnJheVtpXS5zZXJpYWxpemVyLmRlc2VyaWFsaXplKHR5cGUsIG9iai5zbGljZSgxKSk7XHJcbiAgfVxyXG5cclxuICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBmb3JtYXRcIik7XHJcbn07XHJcblxyXG5NVVNJQy5Gb3JtYXRzLk11bHRpU2VyaWFsaXplci5zZXRTZXJpYWxpemVycyA9IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgc2VyaWFsaXplckFycmF5ID0gYXJyYXkubWFwKGZ1bmN0aW9uKGVudHJ5KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzZXJpYWxpemVyOiBNVVNJQy5Gb3JtYXRzLk11bHRpU2VyaWFsaXplci53cmFwU2VyaWFsaXplcihlbnRyeS5zZXJpYWxpemVyKSxcclxuICAgICAgYmFzZTogZW50cnkuYmFzZVxyXG4gICAgfTtcclxuICB9KTtcclxufTtcclxuXHJcbn0pKCk7XHJcbiIsIk1VU0lDID0gTVVTSUMgfHx7fTtcclxuTVVTSUMuRm9ybWF0cyA9IE1VU0lDLkZvcm1hdHN8fHt9O1xyXG5NVVNJQy5Gb3JtYXRzLlBhY2tlZEpTT05TZXJpYWxpemVyID0ge307XHJcblxyXG4oZnVuY3Rpb24oKSB7XHJcblxyXG52YXIgb2JqVG9BcnJheVBhY2tlciA9IGZ1bmN0aW9uKGtleXMpIHtcclxuICB2YXIgcGFjayA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgdmFyIGFycmF5ID0gW107XHJcbiAgICBmb3IgKHZhciBpPTA7IGk8a2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkge1xyXG4gICAgICAgIGFycmF5LnB1c2goa2V5WzFdLnBhY2sob2JqW2tleVswXV0sIG9iaikpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChvYmpba2V5XSE9PW51bGwgJiYgb2JqW2tleV0hPT11bmRlZmluZWQpIGFycmF5LnB1c2gob2JqW2tleV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHVucGFjayA9IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICB2YXIgb2JqID0ge307XHJcbiAgICBmb3IgKHZhciBpPTA7IGk8YXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGtleSA9IGtleXNbaV07XHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGtleSkpIHtcclxuICAgICAgICBvYmpba2V5WzBdXSA9IGtleVsxXS51bnBhY2soYXJyYXlbaV0sIG9iaik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGFycmF5W2ldIT09bnVsbCAmJiBhcnJheVtpXSE9PXVuZGVmaW5lZCkgb2JqW2tleV0gPSBhcnJheVtpXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9iajtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge3BhY2s6IHBhY2ssIHVucGFjazogdW5wYWNrfTtcclxufTtcclxuXHJcbnZhciBhcnJheSA9IGZ1bmN0aW9uKGlubmVyUGFja2VyKSB7XHJcbiAgdmFyIHBhY2sgPSBmdW5jdGlvbihvYmopIHtcclxuICAgIHJldHVybiBvYmoubWFwKGlubmVyUGFja2VyLnBhY2spO1xyXG4gIH07XHJcblxyXG4gIHZhciB1bnBhY2sgPSBmdW5jdGlvbihhcnJheSkge1xyXG4gICAgcmV0dXJuIGFycmF5Lm1hcChpbm5lclBhY2tlci51bnBhY2spO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7cGFjazogcGFjaywgdW5wYWNrOiB1bnBhY2t9O1xyXG59O1xyXG5cclxudmFyIGNvbmNhdCA9IGZ1bmN0aW9uKGEsIGIpe3JldHVybiBhLmNvbmNhdChiKTsgfTtcclxudmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihpbm5lclBhY2tlciwgc2l6ZSkge1xyXG4gIHZhciBwYWNrID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICB2YXIgcmV0ID0gaW5uZXJQYWNrZXIucGFjayhvYmopO1xyXG4gICAgcmV0dXJuIHJldC5yZWR1Y2UoY29uY2F0LCBbXSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHVucGFjayA9IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICB2YXIgZGVmbGF0dGVkID0gW107XHJcbiAgICBmb3IgKHZhciBpPTA7IGk8YXJyYXkubGVuZ3RoOyBpKz1zaXplKSB7XHJcbiAgICAgIGRlZmxhdHRlZC5wdXNoKGFycmF5LnNsaWNlKGksaStzaXplKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5uZXJQYWNrZXIudW5wYWNrKGRlZmxhdHRlZCk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtwYWNrOiBwYWNrLCB1bnBhY2s6IHVucGFja307XHJcbn07XHJcblxyXG52YXIgcGF0dGVyblBhY2tlciA9IG9ialRvQXJyYXlQYWNrZXIoW1xyXG4gIFwibWVhc3VyZVwiLFxyXG4gIFwibWVhc3VyZUNvdW50XCIsXHJcbiAgXCJicG1cIixcclxuICBcInNlbGVjdGVkVHJhY2tcIixcclxuICBcInNjcm9sbExlZnRcIixcclxuICBbXCJ0cmFja3NcIiwgZmxhdHRlbihhcnJheShcclxuICAgIG9ialRvQXJyYXlQYWNrZXIoW1wic2Nyb2xsXCIsW1wiZXZlbnRzXCIsIGZsYXR0ZW4oYXJyYXkob2JqVG9BcnJheVBhY2tlcihbXCJuXCIsXCJzXCIsXCJsXCJdKSksMyldLCBcImluc3RydW1lbnRcIl0pXHJcbiAgKSwzKV1cclxuXSk7XHJcblxyXG52YXIgcGF0dGVybkluZGV4UGFja2VyID0gZnVuY3Rpb24oaW5uZXIpIHtcclxuICB2YXIgcGFjayA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgdmFyIHBhdHRlcm5zID0gW107XHJcbiAgICB2YXIgY29udmVydEJsb2NrcyA9IGZ1bmN0aW9uKGJsb2NrKSB7XHJcbiAgICAgIGlmKGJsb2NrLmlkKSB7XHJcbiAgICAgICAgaWYgKHBhdHRlcm5zLmluZGV4T2YoYmxvY2suaWQpPT09LTEpIHBhdHRlcm5zLnB1c2goYmxvY2suaWQpO1xyXG4gICAgICAgIHJldHVybiB7aWQ6IHBhdHRlcm5zLmluZGV4T2YoYmxvY2suaWQpKzF9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7aWQ6IDB9O1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBjb252ZXJ0VHJhY2sgPSBmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGJsb2NrczogdHJhY2suYmxvY2tzLm1hcChjb252ZXJ0QmxvY2tzKVxyXG4gICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgbmV3T2JqZWN0ID0ge1xyXG4gICAgICBwYXR0ZXJuczogcGF0dGVybnMsXHJcbiAgICAgIG1lYXN1cmU6IG9iai5tZWFzdXJlLFxyXG4gICAgICBicG06IG9iai5icG0sXHJcbiAgICAgIHRyYWNrczogb2JqLnRyYWNrcy5tYXAoY29udmVydFRyYWNrKVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gaW5uZXIucGFjayhuZXdPYmplY3QpO1xyXG4gIH07XHJcblxyXG4gIHZhciB1bnBhY2sgPSBmdW5jdGlvbihvYmopIHtcclxuICAgIHZhciByZXQgPSBpbm5lci51bnBhY2sob2JqKTtcclxuICAgIHJldC50cmFja3MuZm9yRWFjaChmdW5jdGlvbih0cmFjaykge1xyXG4gICAgICB0cmFjay5ibG9ja3MuZm9yRWFjaChmdW5jdGlvbihibG9jaykge1xyXG4gICAgICAgIGlmIChibG9jay5pZCA9PT0gMCkge1xyXG4gICAgICAgICAgZGVsZXRlIGJsb2NrLmlkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBibG9jay5pZCA9IHJldC5wYXR0ZXJuc1tibG9jay5pZC0xXTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbWVhc3VyZTogcmV0Lm1lYXN1cmUsXHJcbiAgICAgIGJwbTogcmV0LmJwbSxcclxuICAgICAgdHJhY2tzOiByZXQudHJhY2tzXHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7cGFjazogcGFjaywgdW5wYWNrOiB1bnBhY2t9O1xyXG59O1xyXG5cclxudmFyIHN1YnN0aXR1dGlvbiA9IGZ1bmN0aW9uKGtleXMpIHtcclxuICB2YXIgcGFjayA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgdmFyIGlkeCA9IGtleXMuaW5kZXhPZihvYmopO1xyXG4gICAgaWYgKGlkeCA9PT0gLTEpIHJldHVybiBvYmo7XHJcbiAgICByZXR1cm4gaWR4O1xyXG4gIH07XHJcblxyXG4gIHZhciB1bnBhY2sgPSBmdW5jdGlvbihvYmopIHtcclxuICAgIGlmIChpc05hTihvYmopKSByZXR1cm4gb2JqO1xyXG4gICAgcmV0dXJuIGtleXNbb2JqXTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge3BhY2s6IHBhY2ssIHVucGFjazogdW5wYWNrfTtcclxufTtcclxuXHJcbnZhciBzd2l0Y2hQYWNrZXIgPSBmdW5jdGlvbihzZWxlY3RBdHRyaWJ1dGUsIHBhY2tlcnMpIHtcclxuXHJcbiAgdmFyIHBhY2sgPSBmdW5jdGlvbihvYmosIHBhcmVudCkge1xyXG4gICAgdmFyIGlubmVyUGFja2VyID0gcGFja2Vyc1twYXJlbnRbc2VsZWN0QXR0cmlidXRlXV07XHJcbiAgICBpZiAoIWlubmVyUGFja2VyKSB7XHJcbiAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlubmVyUGFja2VyLnBhY2sob2JqKTtcclxuICB9O1xyXG5cclxuICB2YXIgdW5wYWNrID0gZnVuY3Rpb24ob2JqLCBwYXJlbnQpIHtcclxuICAgIHZhciBpbm5lclBhY2tlciA9IHBhY2tlcnNbcGFyZW50W3NlbGVjdEF0dHJpYnV0ZV1dO1xyXG4gICAgaWYgKCFpbm5lclBhY2tlcikge1xyXG4gICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpbm5lclBhY2tlci51bnBhY2sob2JqKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge3BhY2s6IHBhY2ssIHVucGFjazogdW5wYWNrfTtcclxufTtcclxuXHJcbnZhciBib29sZWFuUGFja2VyID0ge1xyXG4gIHBhY2s6IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMztcclxuICAgIGlmIChvYmogPT09IG51bGwpIHJldHVybiA0O1xyXG5cclxuICAgIHJldHVybiAhIW9iaiA/IDEgOiAwO1xyXG4gIH0sXHJcblxyXG4gIHVucGFjazogZnVuY3Rpb24ob2JqKSB7XHJcbiAgICBpZiAob2JqPT09MykgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIGlmIChvYmo9PT00KSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICByZXR1cm4gb2JqID09PSAxID8gdHJ1ZSA6IGZhbHNlXHJcbiAgfVxyXG59O1xyXG5cclxudmFyIG51bGxhYmxlID0gZnVuY3Rpb24oaW5uZXJQYWNrZXIpIHtcclxuICB2YXIgcGFjayA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcclxuICAgIGlmIChvYmogPT09IG51bGwpIHJldHVybiAxO1xyXG5cclxuICAgIHJldHVybiBpbm5lclBhY2tlcj8gaW5uZXJQYWNrZXIucGFjayhvYmopIDogb2JqO1xyXG4gIH07XHJcblxyXG4gIHZhciB1bnBhY2sgPSBmdW5jdGlvbihvYmopIHtcclxuICAgIGlmIChvYmo9PT0wKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgaWYgKG9iaj09PTEpIHJldHVybiBudWxsO1xyXG5cclxuICAgIHJldHVybiBpbm5lclBhY2tlciA/IGlubmVyUGFja2VyLnVucGFjayhvYmopIDogb2JqO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7cGFjazogcGFjaywgdW5wYWNrOiB1bnBhY2t9O1xyXG59O1xyXG5cclxuXHJcblxyXG52YXIgc29uZ1BhY2tlciA9IHBhdHRlcm5JbmRleFBhY2tlcihvYmpUb0FycmF5UGFja2VyKFtcclxuICBcInBhdHRlcm5zXCIsXHJcbiAgXCJtZWFzdXJlXCIsXHJcbiAgXCJicG1cIixcclxuICBbXCJ0cmFja3NcIiwgZmxhdHRlbihhcnJheShvYmpUb0FycmF5UGFja2VyKFtcclxuICAgIFtcImJsb2Nrc1wiLCBmbGF0dGVuKGFycmF5KG9ialRvQXJyYXlQYWNrZXIoW1wiaWRcIl0pKSwxKV1cclxuICBdKSksMSldXHJcbl0pKTtcclxuXHJcbnZhciByZWN1cnNpdmVJbnN0cnVtZW50UGFja2VyID0ge1xyXG4gIHBhY2s6IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgcmV0dXJuIGluc3RydW1lbnRQYWNrZXIucGFjayhvYmopO1xyXG4gIH0sXHJcblxyXG4gIHVucGFjazogZnVuY3Rpb24ob2JqKSB7XHJcbiAgICByZXR1cm4gaW5zdHJ1bWVudFBhY2tlci51bnBhY2sob2JqKTtcclxuICB9XHJcbn07XHJcblxyXG52YXIgc3RhY2tQYWNrZXIgPSBvYmpUb0FycmF5UGFja2VyKFtcclxuICBbXCJhcnJheVwiLCBhcnJheShyZWN1cnNpdmVJbnN0cnVtZW50UGFja2VyKV1cclxuXSk7XHJcblxyXG52YXIgZW52ZWxvcGVQYWNrZXIgPSBvYmpUb0FycmF5UGFja2VyKFtcImF0dGFja1RpbWVcIixcImRlY2F5VGltZVwiLFwic3VzdGFpbkxldmVsXCIsXCJyZWxlYXNlVGltZVwiLCBbXCJyZXNldF9vbl9jdXRcIiwgYm9vbGVhblBhY2tlcl1dKTtcclxudmFyIG9zY2lsbGF0b3JQYWNrZXIgPSBvYmpUb0FycmF5UGFja2VyKFtcclxuICBbXCJvc2NpbGxhdG9yVHlwZVwiLCBzdWJzdGl0dXRpb24oW1wic2luZVwiLCBcInNxdWFyZVwiLCBcInNhd3Rvb3RoXCIsIFwidHJpYW5nbGVcIiwgXCJjdXN0b21cIl0pXSxcclxuICBbXCJmaXhlZF9mcmVxdWVuY3lcIiwgYm9vbGVhblBhY2tlcl0sXHJcbiAgW1wiZnJlcXVlbmN5XCIsIG51bGxhYmxlKCldLFxyXG4gIFtcIndhdmVmb3JtXCIsIG51bGxhYmxlKCldLFxyXG4gIFtcInNlcmllXCIsIG51bGxhYmxlKG9ialRvQXJyYXlQYWNrZXIoW1wic2luXCIsIFwiY29zXCJdKSldLFxyXG4gIFtcInRlcm1zXCIsIG51bGxhYmxlKG9ialRvQXJyYXlQYWNrZXIoW1wic2luXCIsIFwiY29zXCJdKSldLFxyXG4gIFtcIm1vZHVsYXRpb25cIiwgbnVsbGFibGUob2JqVG9BcnJheVBhY2tlcihbXHJcbiAgICBbXCJkZXR1bmVcIiwgcmVjdXJzaXZlSW5zdHJ1bWVudFBhY2tlcl1cclxuICBdKSldLFxyXG4gIFwidGltZV9jb25zdGFudFwiXHJcbl0pO1xyXG5cclxudmFyIGZyZXF1ZW5jeUZpbHRlclBhY2tlciA9IG9ialRvQXJyYXlQYWNrZXIoW1xyXG4gIFwiZnJlcXVlbmN5XCIsXHJcbiAgXCJkZXR1bmVcIixcclxuICBcIlFcIixcclxuICBbXCJtb2R1bGF0aW9uXCIsIG9ialRvQXJyYXlQYWNrZXIoW1xyXG4gICAgW1wiZnJlcXVlbmN5XCIsIHJlY3Vyc2l2ZUluc3RydW1lbnRQYWNrZXJdLFxyXG4gICAgW1wiZGV0dW5lXCIsIHJlY3Vyc2l2ZUluc3RydW1lbnRQYWNrZXJdLFxyXG4gICAgW1wiUVwiLCByZWN1cnNpdmVJbnN0cnVtZW50UGFja2VyXVxyXG4gIF0pXVxyXG5dKTtcclxuXHJcbnZhciBub1BhcmFtZXRlcnNQYWNrZXIgPSBvYmpUb0FycmF5UGFja2VyKFtdKTtcclxuXHJcbnZhciBtdWx0aUluc3RydW1lbnRQYWNrZXIgPSBvYmpUb0FycmF5UGFja2VyKFtcclxuICBbXCJzdWJvYmplY3RzXCIsIGZsYXR0ZW4oYXJyYXkocmVjdXJzaXZlSW5zdHJ1bWVudFBhY2tlciksIDIpXVxyXG5dKTtcclxuXHJcbnZhciB0eXBlTmFtZXMgPSBbXCJzY3JpcHRcIixcIm51bGxcIixcIm9zY2lsbGF0b3JcIixcIm5vdGVzcGxpdFwiLFwicmlzZVwiLFwiYWRzclwiLFxyXG5cImVudmVsb3BlXCIsXCJ0cmFuc3Bvc2VcIixcInNjYWxlXCIsXCJnYWluXCIsXCJlY2hvXCIsXCJsb3dwYXNzXCIsXHJcblwiaGlnaHBhc3NcIixcImJhbmRwYXNzXCIsXCJsb3dzaGVsZlwiLFwiaGlnaHNoZWxmXCIsXCJwZWFraW5nXCIsXHJcblwibm90Y2hcIixcImFsbHBhc3NcIixcInJldmVyYlwiLFwibm9pc2VcIixcInBpbmtfbm9pc2VcIixcInJlZF9ub2lzZVwiLFxyXG5cImFycGVnZ2lhdG9yXCIsXCJzdGFja1wiLCBcIm11bHRpX2luc3RydW1lbnRcIiwgXCJtb25vcGhvbmVyXCIsIFwicG9seXBob25lclwiXTtcclxuXHJcbnZhciBtb25vcGhvbmVyUGFja2VyID0gb2JqVG9BcnJheVBhY2tlcihbXHJcbiAgW1wiZm9yY2Vfbm90ZV9jdXRcIiwgYm9vbGVhblBhY2tlcl1cclxuXSk7XHJcbnZhciBwb2x5cGhvbmVyUGFja2VyID0gb2JqVG9BcnJheVBhY2tlcihbXCJtYXhDaGFubmVsc1wiXSk7XHJcblxyXG52YXIgaW5zdHJ1bWVudFBhY2tlciA9IG9ialRvQXJyYXlQYWNrZXIoW1xyXG4gIFtcInR5cGVcIiwgc3Vic3RpdHV0aW9uKHR5cGVOYW1lcyldLFxyXG4gIFtcImRhdGFcIiwgc3dpdGNoUGFja2VyKCd0eXBlJywge1xyXG4gICAgICBzY3JpcHQ6IG9ialRvQXJyYXlQYWNrZXIoW1wiY29kZVwiXSksXHJcbiAgICAgICdudWxsJzogbm9QYXJhbWV0ZXJzUGFja2VyLFxyXG4gICAgICBvc2NpbGxhdG9yOiBvc2NpbGxhdG9yUGFja2VyLFxyXG4gICAgICBub3Rlc3BsaXQ6IG9ialRvQXJyYXlQYWNrZXIoW1wiZGVsYXlcIl0pLFxyXG4gICAgICByaXNlOiBvYmpUb0FycmF5UGFja2VyKFtcInRpbWVcIiwgXCJ0YXJnZXRcIl0pLFxyXG4gICAgICBhZHNyOiBlbnZlbG9wZVBhY2tlcixcclxuICAgICAgZW52ZWxvcGU6IGVudmVsb3BlUGFja2VyLFxyXG4gICAgICB0cmFuc3Bvc2U6IG9ialRvQXJyYXlQYWNrZXIoW1wiYW1vdW50XCJdKSxcclxuICAgICAgc2NhbGU6IG9ialRvQXJyYXlQYWNrZXIoW1wiYmFzZVwiLCBcInRvcFwiXSksXHJcbiAgICAgIGdhaW46IG9ialRvQXJyYXlQYWNrZXIoW1wiZ2FpblwiXSksXHJcbiAgICAgIGVjaG86IG9ialRvQXJyYXlQYWNrZXIoW1wiZ2FpblwiLCBcImRlbGF5XCJdKSxcclxuICAgICAgbG93cGFzczogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBoaWdocGFzczogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBiYW5kcGFzczogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBsb3dzaGVsZjogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBoaWdoc2hlbGY6IGZyZXF1ZW5jeUZpbHRlclBhY2tlcixcclxuICAgICAgcGVha2luZzogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBub3RjaDogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBhbGxwYXNzOiBmcmVxdWVuY3lGaWx0ZXJQYWNrZXIsXHJcbiAgICAgIHJldmVyYjogb2JqVG9BcnJheVBhY2tlcihbXCJyb29tXCIsIFwiZGFtcFwiLCBcIm1peFwiXSksXHJcbiAgICAgIG5vaXNlOiBub1BhcmFtZXRlcnNQYWNrZXIsXHJcbiAgICAgIHBpbmtfbm9pc2U6IG5vUGFyYW1ldGVyc1BhY2tlcixcclxuICAgICAgcmVkX25vaXNlOiBub1BhcmFtZXRlcnNQYWNrZXIsXHJcbiAgICAgIGFycGVnZ2lhdG9yOiBvYmpUb0FycmF5UGFja2VyKFtcInNjYWxlXCIsIFwiaW50ZXJ2YWxcIiwgXCJkdXJhdGlvblwiLCBcImdhcFwiXSksXHJcbiAgICAgIHN0YWNrOiBzdGFja1BhY2tlcixcclxuICAgICAgbXVsdGlfaW5zdHJ1bWVudDogbXVsdGlJbnN0cnVtZW50UGFja2VyLFxyXG4gICAgICBtb25vcGhvbmVyOiBtb25vcGhvbmVyUGFja2VyLFxyXG4gICAgICBwb2x5cGhvbmVyOiBwb2x5cGhvbmVyUGFja2VyXHJcbiAgICB9XHJcbiAgKV0sXHJcbl0pO1xyXG5cclxudmFyIHBhY2tlciA9IHtcclxuICBwYXR0ZXJuOiBwYXR0ZXJuUGFja2VyLFxyXG4gIHNvbmc6IHNvbmdQYWNrZXIsXHJcbiAgaW5zdHJ1bWVudDogaW5zdHJ1bWVudFBhY2tlclxyXG59O1xyXG5cclxuTVVTSUMuRm9ybWF0cy5QYWNrZWRKU09OU2VyaWFsaXplci5zZXJpYWxpemUgPSBmdW5jdGlvbih0eXBlLCBvYmopIHtcclxuICBpZiAocGFja2VyW3R5cGVdKSB7XHJcbiAgICB2YXIgc3RyID0gSlNPTi5zdHJpbmdpZnkocGFja2VyW3R5cGVdLnBhY2sob2JqKSk7XHJcbiAgICBzdHIgPSBzdHIuc2xpY2UoMSwgc3RyLmxlbmd0aC0xKTtcclxuICAgIHJldHVybiBzdHJcclxuICB9XHJcblxyXG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xyXG59O1xyXG5cclxuTVVTSUMuRm9ybWF0cy5QYWNrZWRKU09OU2VyaWFsaXplci5kZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uKHR5cGUsIHN0cikge1xyXG4gIGlmIChwYWNrZXJbdHlwZV0pIHtcclxuICAgIHJldHVybiBwYWNrZXJbdHlwZV0udW5wYWNrKEpTT04ucGFyc2UoJ1snK3N0cisnXScpKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBKU09OLnBhcnNlKHN0cik7XHJcbn07XHJcblxyXG59KSgpO1xyXG4iLCJNVVNJQyA9IE1VU0lDIHx8e307XHJcbk1VU0lDLkZvcm1hdHMgPSBNVVNJQy5Gb3JtYXRzfHx7fTtcclxuTVVTSUMuRm9ybWF0cy5QYWNrZWRKU09OU2VyaWFsaXplckIgPSB7fTtcclxuXHJcbihmdW5jdGlvbigpIHtcclxuXHJcbnZhciBvYmpUb0FycmF5UGFja2VyID0gZnVuY3Rpb24oa2V5cykge1xyXG4gIHZhciBwYWNrID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICB2YXIgYXJyYXkgPSBbXTtcclxuICAgIGZvciAodmFyIGk9MDsgaTxrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXkpKSB7XHJcbiAgICAgICAgYXJyYXkucHVzaChrZXlbMV0ucGFjayhvYmpba2V5WzBdXSwgb2JqKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKG9ialtrZXldIT09bnVsbCAmJiBvYmpba2V5XSE9PXVuZGVmaW5lZCkgYXJyYXkucHVzaChvYmpba2V5XSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcnJheTtcclxuICB9O1xyXG5cclxuICB2YXIgdW5wYWNrID0gZnVuY3Rpb24oYXJyYXkpIHtcclxuICAgIHZhciBvYmogPSB7fTtcclxuICAgIGZvciAodmFyIGk9MDsgaTxhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkge1xyXG4gICAgICAgIG9ialtrZXlbMF1dID0ga2V5WzFdLnVucGFjayhhcnJheVtpXSwgb2JqKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoYXJyYXlbaV0hPT1udWxsICYmIGFycmF5W2ldIT09dW5kZWZpbmVkKSBvYmpba2V5XSA9IGFycmF5W2ldO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2JqO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7cGFjazogcGFjaywgdW5wYWNrOiB1bnBhY2t9O1xyXG59O1xyXG5cclxudmFyIGFycmF5ID0gZnVuY3Rpb24oaW5uZXJQYWNrZXIpIHtcclxuICB2YXIgcGFjayA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgcmV0dXJuIG9iai5tYXAoaW5uZXJQYWNrZXIucGFjayk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHVucGFjayA9IGZ1bmN0aW9uKGFycmF5KSB7XHJcbiAgICByZXR1cm4gYXJyYXkubWFwKGlubmVyUGFja2VyLnVucGFjayk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtwYWNrOiBwYWNrLCB1bnBhY2s6IHVucGFja307XHJcbn07XHJcblxyXG52YXIgY29uY2F0ID0gZnVuY3Rpb24oYSwgYil7cmV0dXJuIGEuY29uY2F0KGIpOyB9O1xyXG52YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlubmVyUGFja2VyLCBzaXplKSB7XHJcbiAgdmFyIHBhY2sgPSBmdW5jdGlvbihvYmopIHtcclxuICAgIHZhciByZXQgPSBpbm5lclBhY2tlci5wYWNrKG9iaik7XHJcbiAgICByZXR1cm4gcmV0LnJlZHVjZShjb25jYXQsIFtdKTtcclxuICB9O1xyXG5cclxuICB2YXIgdW5wYWNrID0gZnVuY3Rpb24oYXJyYXkpIHtcclxuICAgIHZhciBkZWZsYXR0ZWQgPSBbXTtcclxuICAgIGZvciAodmFyIGk9MDsgaTxhcnJheS5sZW5ndGg7IGkrPXNpemUpIHtcclxuICAgICAgZGVmbGF0dGVkLnB1c2goYXJyYXkuc2xpY2UoaSxpK3NpemUpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbm5lclBhY2tlci51bnBhY2soZGVmbGF0dGVkKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4ge3BhY2s6IHBhY2ssIHVucGFjazogdW5wYWNrfTtcclxufTtcclxuXHJcbnZhciBib29sZWFuUGFja2VyID0ge1xyXG4gIHBhY2s6IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMztcclxuICAgIGlmIChvYmogPT09IG51bGwpIHJldHVybiA0O1xyXG5cclxuICAgIHJldHVybiAhIW9iaiA/IDEgOiAwO1xyXG4gIH0sXHJcblxyXG4gIHVucGFjazogZnVuY3Rpb24ob2JqKSB7XHJcbiAgICBpZiAob2JqPT09MykgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIGlmIChvYmo9PT00KSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICByZXR1cm4gb2JqID09PSAxID8gdHJ1ZSA6IGZhbHNlXHJcbiAgfVxyXG59O1xyXG5cclxudmFyIHBhdHRlcm5FdmVudFBhY2tlciA9IHtcclxuICBwYWNrOiBmdW5jdGlvbihvYmopIHtcclxuICAgIHZhciBmaXJzdEVsZW1lbnQgPSBvYmoubjtcclxuICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XHJcbiAgICAgIGlmIChrIT09J24nICYmIGshPT0ncycgJiYgayAhPT0gJ2wnKSB7XHJcbiAgICAgICAgaWYgKGZpcnN0RWxlbWVudCA9PT0gb2JqLm4pIHtcclxuICAgICAgICAgIGZpcnN0RWxlbWVudCA9IHtuOiBvYmoubn07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpcnN0RWxlbWVudFtrXSA9IG9ialtrXTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gW2ZpcnN0RWxlbWVudCwgb2JqLnMsIG9iai5sXTtcclxuICB9LFxyXG4gIHVucGFjazogZnVuY3Rpb24oYXJyYXkpIHtcclxuICAgIHZhciBmaXJzdEVsZW1lbnQgPSBhcnJheVswXTtcclxuICAgIGlmICh0eXBlb2YgZmlyc3RFbGVtZW50ID09PSAnbnVtYmVyJykge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIG46IGFycmF5WzBdLFxyXG4gICAgICAgIHM6IGFycmF5WzFdLFxyXG4gICAgICAgIGw6IGFycmF5WzJdXHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgcmV0ID0ge307XHJcbiAgICAgIGZvciAodmFyIGsgaW4gZmlyc3RFbGVtZW50KSB7XHJcbiAgICAgICAgcmV0W2tdID0gZmlyc3RFbGVtZW50W2tdO1xyXG4gICAgICB9XHJcbiAgICAgIHJldC5zID0gYXJyYXlbMV07XHJcbiAgICAgIHJldC5sID0gYXJyYXlbMl07XHJcbiAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxudmFyIHBhdHRlcm5QYWNrZXIgPSBvYmpUb0FycmF5UGFja2VyKFtcclxuICBcIm1lYXN1cmVcIixcclxuICBcIm1lYXN1cmVDb3VudFwiLFxyXG4gIFwiYnBtXCIsXHJcbiAgXCJzZWxlY3RlZFRyYWNrXCIsXHJcbiAgXCJzY3JvbGxMZWZ0XCIsXHJcbiAgW1widHJhY2tzXCIsIGFycmF5KFxyXG4gICAgb2JqVG9BcnJheVBhY2tlcihbW1wibXV0ZWRcIiwgYm9vbGVhblBhY2tlcl0sIFtcInNvbG9cIiwgYm9vbGVhblBhY2tlcl0sIFwic2Nyb2xsXCIsW1wiZXZlbnRzXCIsIGZsYXR0ZW4oYXJyYXkocGF0dGVybkV2ZW50UGFja2VyKSwzKV0sIFwiaW5zdHJ1bWVudFwiXSlcclxuICApXVxyXG5dKTtcclxuXHJcbnZhciBwYXR0ZXJuSW5kZXhQYWNrZXIgPSBmdW5jdGlvbihpbm5lcikge1xyXG4gIHZhciBwYWNrID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICB2YXIgcGF0dGVybnMgPSBbXTtcclxuICAgIHZhciBjb252ZXJ0QmxvY2tzID0gZnVuY3Rpb24oYmxvY2spIHtcclxuICAgICAgaWYoYmxvY2suaWQpIHtcclxuICAgICAgICBpZiAocGF0dGVybnMuaW5kZXhPZihibG9jay5pZCk9PT0tMSkgcGF0dGVybnMucHVzaChibG9jay5pZCk7XHJcbiAgICAgICAgcmV0dXJuIHtpZDogcGF0dGVybnMuaW5kZXhPZihibG9jay5pZCkrMX07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHtpZDogMH07XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdmFyIGNvbnZlcnRUcmFjayA9IGZ1bmN0aW9uKHRyYWNrKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgYmxvY2tzOiB0cmFjay5ibG9ja3MubWFwKGNvbnZlcnRCbG9ja3MpXHJcbiAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBuZXdPYmplY3QgPSB7XHJcbiAgICAgIHBhdHRlcm5zOiBwYXR0ZXJucyxcclxuICAgICAgbWVhc3VyZTogb2JqLm1lYXN1cmUsXHJcbiAgICAgIGJwbTogb2JqLmJwbSxcclxuICAgICAgdHJhY2tzOiBvYmoudHJhY2tzLm1hcChjb252ZXJ0VHJhY2spXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBpbm5lci5wYWNrKG5ld09iamVjdCk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHVucGFjayA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgdmFyIHJldCA9IGlubmVyLnVucGFjayhvYmopO1xyXG4gICAgcmV0LnRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKSB7XHJcbiAgICAgIHRyYWNrLmJsb2Nrcy5mb3JFYWNoKGZ1bmN0aW9uKGJsb2NrKSB7XHJcbiAgICAgICAgaWYgKGJsb2NrLmlkID09PSAwKSB7XHJcbiAgICAgICAgICBkZWxldGUgYmxvY2suaWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGJsb2NrLmlkID0gcmV0LnBhdHRlcm5zW2Jsb2NrLmlkLTFdO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtZWFzdXJlOiByZXQubWVhc3VyZSxcclxuICAgICAgYnBtOiByZXQuYnBtLFxyXG4gICAgICB0cmFja3M6IHJldC50cmFja3NcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtwYWNrOiBwYWNrLCB1bnBhY2s6IHVucGFja307XHJcbn07XHJcblxyXG52YXIgc3Vic3RpdHV0aW9uID0gZnVuY3Rpb24oa2V5cykge1xyXG4gIHZhciBwYWNrID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICB2YXIgaWR4ID0ga2V5cy5pbmRleE9mKG9iaik7XHJcbiAgICBpZiAoaWR4ID09PSAtMSkgcmV0dXJuIG9iajtcclxuICAgIHJldHVybiBpZHg7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHVucGFjayA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgaWYgKGlzTmFOKG9iaikpIHJldHVybiBvYmo7XHJcbiAgICByZXR1cm4ga2V5c1tvYmpdO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7cGFjazogcGFjaywgdW5wYWNrOiB1bnBhY2t9O1xyXG59O1xyXG5cclxudmFyIHN3aXRjaFBhY2tlciA9IGZ1bmN0aW9uKHNlbGVjdEF0dHJpYnV0ZSwgcGFja2Vycykge1xyXG5cclxuICB2YXIgcGFjayA9IGZ1bmN0aW9uKG9iaiwgcGFyZW50KSB7XHJcbiAgICB2YXIgaW5uZXJQYWNrZXIgPSBwYWNrZXJzW3BhcmVudFtzZWxlY3RBdHRyaWJ1dGVdXTtcclxuICAgIGlmICghaW5uZXJQYWNrZXIpIHtcclxuICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5uZXJQYWNrZXIucGFjayhvYmopO1xyXG4gIH07XHJcblxyXG4gIHZhciB1bnBhY2sgPSBmdW5jdGlvbihvYmosIHBhcmVudCkge1xyXG4gICAgdmFyIGlubmVyUGFja2VyID0gcGFja2Vyc1twYXJlbnRbc2VsZWN0QXR0cmlidXRlXV07XHJcbiAgICBpZiAoIWlubmVyUGFja2VyKSB7XHJcbiAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlubmVyUGFja2VyLnVucGFjayhvYmopO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7cGFjazogcGFjaywgdW5wYWNrOiB1bnBhY2t9O1xyXG59O1xyXG5cclxudmFyIG51bGxhYmxlID0gZnVuY3Rpb24oaW5uZXJQYWNrZXIpIHtcclxuICB2YXIgcGFjayA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgaWYgKG9iaiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcclxuICAgIGlmIChvYmogPT09IG51bGwpIHJldHVybiAxO1xyXG5cclxuICAgIHJldHVybiBpbm5lclBhY2tlcj8gaW5uZXJQYWNrZXIucGFjayhvYmopIDogb2JqO1xyXG4gIH07XHJcblxyXG4gIHZhciB1bnBhY2sgPSBmdW5jdGlvbihvYmopIHtcclxuICAgIGlmIChvYmo9PT0wKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgaWYgKG9iaj09PTEpIHJldHVybiBudWxsO1xyXG5cclxuICAgIHJldHVybiBpbm5lclBhY2tlciA/IGlubmVyUGFja2VyLnVucGFjayhvYmopIDogb2JqO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7cGFjazogcGFjaywgdW5wYWNrOiB1bnBhY2t9O1xyXG59O1xyXG5cclxuXHJcblxyXG52YXIgc29uZ1BhY2tlciA9IHBhdHRlcm5JbmRleFBhY2tlcihvYmpUb0FycmF5UGFja2VyKFtcclxuICBcInBhdHRlcm5zXCIsXHJcbiAgXCJtZWFzdXJlXCIsXHJcbiAgXCJicG1cIixcclxuICBbXCJ0cmFja3NcIiwgZmxhdHRlbihhcnJheShvYmpUb0FycmF5UGFja2VyKFtcclxuICAgIFtcImJsb2Nrc1wiLCBmbGF0dGVuKGFycmF5KG9ialRvQXJyYXlQYWNrZXIoW1wiaWRcIl0pKSwxKV1cclxuICBdKSksMSldXHJcbl0pKTtcclxuXHJcbnZhciByZWN1cnNpdmVJbnN0cnVtZW50UGFja2VyID0ge1xyXG4gIHBhY2s6IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgcmV0dXJuIGluc3RydW1lbnRQYWNrZXIucGFjayhvYmopO1xyXG4gIH0sXHJcblxyXG4gIHVucGFjazogZnVuY3Rpb24ob2JqKSB7XHJcbiAgICByZXR1cm4gaW5zdHJ1bWVudFBhY2tlci51bnBhY2sob2JqKTtcclxuICB9XHJcbn07XHJcblxyXG52YXIgc3RhY2tQYWNrZXIgPSBvYmpUb0FycmF5UGFja2VyKFtcclxuICBbXCJhcnJheVwiLCBhcnJheShyZWN1cnNpdmVJbnN0cnVtZW50UGFja2VyKV1cclxuXSk7XHJcblxyXG52YXIgZW52ZWxvcGVQYWNrZXIgPSBvYmpUb0FycmF5UGFja2VyKFtcImF0dGFja1RpbWVcIixcImRlY2F5VGltZVwiLFwic3VzdGFpbkxldmVsXCIsXCJyZWxlYXNlVGltZVwiLCBbXCJyZXNldF9vbl9jdXRcIiwgYm9vbGVhblBhY2tlcl1dKTtcclxudmFyIG9zY2lsbGF0b3JQYWNrZXIgPSBvYmpUb0FycmF5UGFja2VyKFtcclxuICBbXCJvc2NpbGxhdG9yVHlwZVwiLCBzdWJzdGl0dXRpb24oW1wic2luZVwiLCBcInNxdWFyZVwiLCBcInNhd3Rvb3RoXCIsIFwidHJpYW5nbGVcIiwgXCJjdXN0b21cIl0pXSxcclxuICBbXCJmaXhlZF9mcmVxdWVuY3lcIiwgYm9vbGVhblBhY2tlcl0sXHJcbiAgW1wiZnJlcXVlbmN5XCIsIG51bGxhYmxlKCldLFxyXG4gIFtcIndhdmVmb3JtXCIsIG51bGxhYmxlKCldLFxyXG4gIFtcInNlcmllXCIsIG51bGxhYmxlKG9ialRvQXJyYXlQYWNrZXIoW1wic2luXCIsIFwiY29zXCJdKSldLFxyXG4gIFtcInRlcm1zXCIsIG51bGxhYmxlKG9ialRvQXJyYXlQYWNrZXIoW1wic2luXCIsIFwiY29zXCJdKSldLFxyXG4gIFtcIm1vZHVsYXRpb25cIiwgbnVsbGFibGUob2JqVG9BcnJheVBhY2tlcihbXHJcbiAgICBbXCJkZXR1bmVcIiwgcmVjdXJzaXZlSW5zdHJ1bWVudFBhY2tlcl0sXHJcbiAgICBbXCJwdWxzZV93aWR0aFwiLCBudWxsYWJsZShyZWN1cnNpdmVJbnN0cnVtZW50UGFja2VyKV1cclxuICBdKSldLFxyXG4gIFwidGltZV9jb25zdGFudFwiLFxyXG4gIFwicHVsc2Vfd2lkdGhcIlxyXG5dKTtcclxuXHJcbnZhciBmcmVxdWVuY3lGaWx0ZXJQYWNrZXIgPSBvYmpUb0FycmF5UGFja2VyKFtcclxuICBcImZyZXF1ZW5jeVwiLFxyXG4gIFwiZGV0dW5lXCIsXHJcbiAgXCJRXCIsXHJcbiAgW1wibW9kdWxhdGlvblwiLCBvYmpUb0FycmF5UGFja2VyKFtcclxuICAgIFtcImZyZXF1ZW5jeVwiLCByZWN1cnNpdmVJbnN0cnVtZW50UGFja2VyXSxcclxuICAgIFtcImRldHVuZVwiLCByZWN1cnNpdmVJbnN0cnVtZW50UGFja2VyXSxcclxuICAgIFtcIlFcIiwgcmVjdXJzaXZlSW5zdHJ1bWVudFBhY2tlcl1cclxuICBdKV1cclxuXSk7XHJcblxyXG52YXIgbm9QYXJhbWV0ZXJzUGFja2VyID0gb2JqVG9BcnJheVBhY2tlcihbXSk7XHJcblxyXG52YXIgbXVsdGlJbnN0cnVtZW50UGFja2VyID0gb2JqVG9BcnJheVBhY2tlcihbXHJcbiAgW1wic3Vib2JqZWN0c1wiLCBmbGF0dGVuKGFycmF5KHJlY3Vyc2l2ZUluc3RydW1lbnRQYWNrZXIpLCAyKV1cclxuXSk7XHJcblxyXG52YXIgdHlwZU5hbWVzID0gW1wic2NyaXB0XCIsXCJudWxsXCIsXCJvc2NpbGxhdG9yXCIsXCJub3Rlc3BsaXRcIixcInJpc2VcIixcImFkc3JcIixcclxuXCJlbnZlbG9wZVwiLFwidHJhbnNwb3NlXCIsXCJzY2FsZVwiLFwiZ2FpblwiLFwiZWNob1wiLFwibG93cGFzc1wiLFxyXG5cImhpZ2hwYXNzXCIsXCJiYW5kcGFzc1wiLFwibG93c2hlbGZcIixcImhpZ2hzaGVsZlwiLFwicGVha2luZ1wiLFxyXG5cIm5vdGNoXCIsXCJhbGxwYXNzXCIsXCJyZXZlcmJcIixcIm5vaXNlXCIsXCJwaW5rX25vaXNlXCIsXCJyZWRfbm9pc2VcIixcclxuXCJhcnBlZ2dpYXRvclwiLFwic3RhY2tcIiwgXCJtdWx0aV9pbnN0cnVtZW50XCIsIFwibW9ub3Bob25lclwiLCBcInBvbHlwaG9uZXJcIiwgXCJub3RlX3BhZGRpbmdcIixcclxuXCJub3RlX2NvbmRpdGlvblwiLCBcInNpZ25hbF9tb25pdG9yXCIsIFwic2lnbmFsX2NvbnN0YW50XCIsIFwibm90ZV9kZWxheVwiLFxyXG5cInNhbXBsZV9yYXRlX3JlZHVjdGlvblwiLCBcImJpdF9jcnVzaGluZ1wiLFxyXG5cInNpZ25hbF9zY2FsZVwiLCBcInNpZ25hbF9ub3RcIixcclxuXCJzaWduYWxfb3JcIiwgXCJzaWduYWxfYW5kXCIsIFwic2lnbmFsX25vclwiLCBcInNpZ25hbF9uYW5kXCIsIFwiZGVsYXlcIiwgXCJub3RlX2ZyZXF1ZW5jeV9nZW5lcmF0b3JcIixcclxuXCJub3RlX3RpbWVfc2hpZnRcIiwgXCJ3YXZlX3NoYXBlclwiXTtcclxuXHJcbnZhciBtb25vcGhvbmVyUGFja2VyID0gb2JqVG9BcnJheVBhY2tlcihbXHJcbiAgW1wiZm9yY2Vfbm90ZV9jdXRcIiwgYm9vbGVhblBhY2tlcl1cclxuXSk7XHJcbnZhciBwb2x5cGhvbmVyUGFja2VyID0gb2JqVG9BcnJheVBhY2tlcihbXCJtYXhDaGFubmVsc1wiXSk7XHJcbnZhciBub3RlUGFkZGluZ1BhY2tlciA9IG9ialRvQXJyYXlQYWNrZXIoW1widGltZVwiXSk7XHJcblxyXG52YXIgdG9Nb2RsID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICByZXR1cm4gW3ZhbHVlLCByZWN1cnNpdmVJbnN0cnVtZW50UGFja2VyXTtcclxufTtcclxuXHJcbnZhciBtb2RsID0gZnVuY3Rpb24odmFsdWVzKSB7XHJcbiAgcmV0dXJuIG51bGxhYmxlKG9ialRvQXJyYXlQYWNrZXIodmFsdWVzLm1hcCh0b01vZGwpKSk7XHJcbn07XHJcblxyXG52YXIgaW5zdHJ1bWVudFBhY2tlciA9IG9ialRvQXJyYXlQYWNrZXIoW1xyXG4gIFtcInR5cGVcIiwgc3Vic3RpdHV0aW9uKHR5cGVOYW1lcyldLFxyXG4gIFtcImRhdGFcIiwgc3dpdGNoUGFja2VyKCd0eXBlJywge1xyXG4gICAgICBzY3JpcHQ6IG9ialRvQXJyYXlQYWNrZXIoW1wiY29kZVwiXSksXHJcbiAgICAgICdudWxsJzogbm9QYXJhbWV0ZXJzUGFja2VyLFxyXG4gICAgICBvc2NpbGxhdG9yOiBvc2NpbGxhdG9yUGFja2VyLFxyXG4gICAgICBub3Rlc3BsaXQ6IG9ialRvQXJyYXlQYWNrZXIoW1wiZGVsYXlcIl0pLFxyXG4gICAgICByaXNlOiBvYmpUb0FycmF5UGFja2VyKFtcInRpbWVcIiwgXCJ0YXJnZXRcIl0pLFxyXG4gICAgICBhZHNyOiBlbnZlbG9wZVBhY2tlcixcclxuICAgICAgZW52ZWxvcGU6IGVudmVsb3BlUGFja2VyLFxyXG4gICAgICB0cmFuc3Bvc2U6IG9ialRvQXJyYXlQYWNrZXIoW1wiYW1vdW50XCJdKSxcclxuICAgICAgc2NhbGU6IG9ialRvQXJyYXlQYWNrZXIoW1wiYmFzZVwiLCBcInRvcFwiXSksXHJcbiAgICAgIGdhaW46IG9ialRvQXJyYXlQYWNrZXIoW1wiZ2FpblwiLCBbXCJtb2R1bGF0aW9uXCIsIG1vZGwoW1wiZ2FpblwiXSldXSksXHJcbiAgICAgIGVjaG86IG9ialRvQXJyYXlQYWNrZXIoW1wiZ2FpblwiLCBcImRlbGF5XCJdKSxcclxuICAgICAgbG93cGFzczogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBoaWdocGFzczogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBiYW5kcGFzczogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBsb3dzaGVsZjogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBoaWdoc2hlbGY6IGZyZXF1ZW5jeUZpbHRlclBhY2tlcixcclxuICAgICAgcGVha2luZzogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBub3RjaDogZnJlcXVlbmN5RmlsdGVyUGFja2VyLFxyXG4gICAgICBhbGxwYXNzOiBmcmVxdWVuY3lGaWx0ZXJQYWNrZXIsXHJcbiAgICAgIHJldmVyYjogb2JqVG9BcnJheVBhY2tlcihbXCJyb29tXCIsIFwiZGFtcFwiLCBcIm1peFwiXSksXHJcbiAgICAgIG5vaXNlOiBub1BhcmFtZXRlcnNQYWNrZXIsXHJcbiAgICAgIHBpbmtfbm9pc2U6IG5vUGFyYW1ldGVyc1BhY2tlcixcclxuICAgICAgcmVkX25vaXNlOiBub1BhcmFtZXRlcnNQYWNrZXIsXHJcbiAgICAgIGFycGVnZ2lhdG9yOiBvYmpUb0FycmF5UGFja2VyKFtcInNjYWxlXCIsIFwiaW50ZXJ2YWxcIiwgXCJkdXJhdGlvblwiLCBcImdhcFwiXSksXHJcbiAgICAgIHN0YWNrOiBzdGFja1BhY2tlcixcclxuICAgICAgbXVsdGlfaW5zdHJ1bWVudDogbXVsdGlJbnN0cnVtZW50UGFja2VyLFxyXG4gICAgICBtb25vcGhvbmVyOiBtb25vcGhvbmVyUGFja2VyLFxyXG4gICAgICBwb2x5cGhvbmVyOiBwb2x5cGhvbmVyUGFja2VyLFxyXG4gICAgICBub3RlX3BhZGRpbmc6IG5vdGVQYWRkaW5nUGFja2VyLFxyXG4gICAgICBub3RlX2NvbmRpdGlvbjogb2JqVG9BcnJheVBhY2tlcihbXCJub3RlX29uXCIsIFwibm90ZV9vZmZcIixcImVudGVyX3RpbWVfY29uc3RhbnRcIiwgXCJsZWF2ZV90aW1lX2NvbnN0YW50XCJdKSxcclxuICAgICAgc2lnbmFsX21vbml0b3I6IG5vUGFyYW1ldGVyc1BhY2tlcixcclxuICAgICAgc2lnbmFsX2NvbnN0YW50OiBvYmpUb0FycmF5UGFja2VyKFtcIm9mZnNldFwiXSksXHJcbiAgICAgIG5vdGVfZGVsYXk6IG9ialRvQXJyYXlQYWNrZXIoW1wiZGVsYXlcIl0pLFxyXG4gICAgICBkZWxheTogb2JqVG9BcnJheVBhY2tlcihbXCJkZWxheVwiLCBbXCJtb2R1bGF0aW9uXCIsIG1vZGwoW1wiZGVsYXlcIl0pXV0pLFxyXG4gICAgICBzYW1wbGVfcmF0ZV9yZWR1Y3Rpb246IG9ialRvQXJyYXlQYWNrZXIoW1wiZmFjdG9yXCJdKSxcclxuICAgICAgYml0X2NydXNoaW5nOiBvYmpUb0FycmF5UGFja2VyKFtcImJpdHNcIl0pLFxyXG4gICAgICBzaWduYWxfc2NhbGU6IG9ialRvQXJyYXlQYWNrZXIoW1wiYmFzZVwiLCBcInRvcFwiXSksXHJcbiAgICAgIHNpZ25hbF9ub3Q6IG5vUGFyYW1ldGVyc1BhY2tlcixcclxuICAgICAgc2lnbmFsX29yOiBvYmpUb0FycmF5UGFja2VyKFtcInNlY29uZF9zaWduYWxcIiwgW1wibW9kdWxhdGlvblwiLCBtb2RsKFtcInNlY29uZF9zaWduYWxcIl0pXV0pLFxyXG4gICAgICBzaWduYWxfYW5kOiBvYmpUb0FycmF5UGFja2VyKFtcInNlY29uZF9zaWduYWxcIiwgW1wibW9kdWxhdGlvblwiLCBtb2RsKFtcInNlY29uZF9zaWduYWxcIl0pXV0pLFxyXG4gICAgICBzaWduYWxfbm9yOiBvYmpUb0FycmF5UGFja2VyKFtcInNlY29uZF9zaWduYWxcIiwgW1wibW9kdWxhdGlvblwiLCBtb2RsKFtcInNlY29uZF9zaWduYWxcIl0pXV0pLFxyXG4gICAgICBzaWduYWxfbmFuZDogb2JqVG9BcnJheVBhY2tlcihbXCJzZWNvbmRfc2lnbmFsXCIsIFtcIm1vZHVsYXRpb25cIiwgbW9kbChbXCJzZWNvbmRfc2lnbmFsXCJdKV1dKSxcclxuICAgICAgbm90ZV9mcmVxdWVuY3lfZ2VuZXJhdG9yOiBvYmpUb0FycmF5UGFja2VyKFtcInRpbWVfY29uc3RhbnRcIl0pLFxyXG4gICAgICBub3RlX3RpbWVfc2hpZnQ6IG9ialRvQXJyYXlQYWNrZXIoW1widGltZVwiXSksXHJcbiAgICAgIHdhdmVfc2hhcGVyOiBvYmpUb0FycmF5UGFja2VyKFtcInNhbXBsZXNcIiwgXCJmXCJdKVxyXG4gICAgfVxyXG4gICldLFxyXG5dKTtcclxuXHJcbnZhciBwYWNrZXIgPSB7XHJcbiAgcGF0dGVybjogcGF0dGVyblBhY2tlcixcclxuICBzb25nOiBzb25nUGFja2VyLFxyXG4gIGluc3RydW1lbnQ6IGluc3RydW1lbnRQYWNrZXJcclxufTtcclxuXHJcbk1VU0lDLkZvcm1hdHMuUGFja2VkSlNPTlNlcmlhbGl6ZXJCLnNlcmlhbGl6ZSA9IGZ1bmN0aW9uKHR5cGUsIG9iaikge1xyXG4gIGlmIChwYWNrZXJbdHlwZV0pIHtcclxuICAgIHZhciBzdHIgPSBKU09OLnN0cmluZ2lmeShwYWNrZXJbdHlwZV0ucGFjayhvYmopKTtcclxuICAgIHN0ciA9IHN0ci5zbGljZSgxLCBzdHIubGVuZ3RoLTEpO1xyXG4gICAgcmV0dXJuIHN0clxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XHJcbn07XHJcblxyXG5NVVNJQy5Gb3JtYXRzLlBhY2tlZEpTT05TZXJpYWxpemVyQi5kZXNlcmlhbGl6ZSA9IGZ1bmN0aW9uKHR5cGUsIHN0cikge1xyXG4gIGlmIChwYWNrZXJbdHlwZV0pIHtcclxuICAgIHJldHVybiBwYWNrZXJbdHlwZV0udW5wYWNrKEpTT04ucGFyc2UoJ1snK3N0cisnXScpKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBKU09OLnBhcnNlKHN0cik7XHJcbn07XHJcblxyXG59KSgpO1xyXG4iXX0=
